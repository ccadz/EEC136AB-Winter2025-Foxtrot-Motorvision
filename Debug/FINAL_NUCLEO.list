
FINAL_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cfcc  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008710  0801d208  0801d208  0001e208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025918  08025918  00026918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08025920  08025920  00026920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025924  08025924  00026924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000208  20000000  08025928  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005a24  20000208  08025b30  00027208  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20005c2c  08025b30  00027c2c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00027208  2**0
                  CONTENTS, READONLY
 10 .debug_info   00053a67  00000000  00000000  0002723e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005ae6  00000000  00000000  0007aca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002690  00000000  00000000  00080790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e16  00000000  00000000  00082e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d0b3  00000000  00000000  00084c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003700c  00000000  00000000  000c1ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017aac3  00000000  00000000  000f8cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002737b8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b9c8  00000000  00000000  002737fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  0027f1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000208 	.word	0x20000208
 8000254:	00000000 	.word	0x00000000
 8000258:	0801d1ec 	.word	0x0801d1ec

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000020c 	.word	0x2000020c
 8000274:	0801d1ec 	.word	0x0801d1ec

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_ldivmod>:
 8000c50:	b97b      	cbnz	r3, 8000c72 <__aeabi_ldivmod+0x22>
 8000c52:	b972      	cbnz	r2, 8000c72 <__aeabi_ldivmod+0x22>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bfbe      	ittt	lt
 8000c58:	2000      	movlt	r0, #0
 8000c5a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c5e:	e006      	blt.n	8000c6e <__aeabi_ldivmod+0x1e>
 8000c60:	bf08      	it	eq
 8000c62:	2800      	cmpeq	r0, #0
 8000c64:	bf1c      	itt	ne
 8000c66:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c6a:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6e:	f000 b9c9 	b.w	8001004 <__aeabi_idiv0>
 8000c72:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7a:	2900      	cmp	r1, #0
 8000c7c:	db09      	blt.n	8000c92 <__aeabi_ldivmod+0x42>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db1a      	blt.n	8000cb8 <__aeabi_ldivmod+0x68>
 8000c82:	f000 f84d 	bl	8000d20 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4770      	bx	lr
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db1b      	blt.n	8000cd4 <__aeabi_ldivmod+0x84>
 8000c9c:	f000 f840 	bl	8000d20 <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	4770      	bx	lr
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	f000 f82f 	bl	8000d20 <__udivmoddi4>
 8000cc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cca:	b004      	add	sp, #16
 8000ccc:	4240      	negs	r0, r0
 8000cce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd2:	4770      	bx	lr
 8000cd4:	4252      	negs	r2, r2
 8000cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cda:	f000 f821 	bl	8000d20 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_uldivmod>:
 8000cf0:	b953      	cbnz	r3, 8000d08 <__aeabi_uldivmod+0x18>
 8000cf2:	b94a      	cbnz	r2, 8000d08 <__aeabi_uldivmod+0x18>
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	bf08      	it	eq
 8000cf8:	2800      	cmpeq	r0, #0
 8000cfa:	bf1c      	itt	ne
 8000cfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000d00:	f04f 30ff 	movne.w	r0, #4294967295
 8000d04:	f000 b97e 	b.w	8001004 <__aeabi_idiv0>
 8000d08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d10:	f000 f806 	bl	8000d20 <__udivmoddi4>
 8000d14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1c:	b004      	add	sp, #16
 8000d1e:	4770      	bx	lr

08000d20 <__udivmoddi4>:
 8000d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d24:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d26:	460c      	mov	r4, r1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d14d      	bne.n	8000dc8 <__udivmoddi4+0xa8>
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	460f      	mov	r7, r1
 8000d30:	4684      	mov	ip, r0
 8000d32:	4696      	mov	lr, r2
 8000d34:	fab2 f382 	clz	r3, r2
 8000d38:	d960      	bls.n	8000dfc <__udivmoddi4+0xdc>
 8000d3a:	b14b      	cbz	r3, 8000d50 <__udivmoddi4+0x30>
 8000d3c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d40:	f1c3 0220 	rsb	r2, r3, #32
 8000d44:	409f      	lsls	r7, r3
 8000d46:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d54:	fa1f f48e 	uxth.w	r4, lr
 8000d58:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d5c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d60:	fb06 7711 	mls	r7, r6, r1, r7
 8000d64:	fb01 f004 	mul.w	r0, r1, r4
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x62>
 8000d70:	eb1e 0202 	adds.w	r2, lr, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x60>
 8000d7a:	4290      	cmp	r0, r2
 8000d7c:	f200 812d 	bhi.w	8000fda <__udivmoddi4+0x2ba>
 8000d80:	4639      	mov	r1, r7
 8000d82:	1a12      	subs	r2, r2, r0
 8000d84:	fa1f fc8c 	uxth.w	ip, ip
 8000d88:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d8c:	fb06 2210 	mls	r2, r6, r0, r2
 8000d90:	fb00 f404 	mul.w	r4, r0, r4
 8000d94:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d98:	4564      	cmp	r4, ip
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x8e>
 8000d9c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x8c>
 8000da6:	4564      	cmp	r4, ip
 8000da8:	f200 811a 	bhi.w	8000fe0 <__udivmoddi4+0x2c0>
 8000dac:	4610      	mov	r0, r2
 8000dae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db2:	ebac 0c04 	sub.w	ip, ip, r4
 8000db6:	2100      	movs	r1, #0
 8000db8:	b125      	cbz	r5, 8000dc4 <__udivmoddi4+0xa4>
 8000dba:	fa2c f303 	lsr.w	r3, ip, r3
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d905      	bls.n	8000dd8 <__udivmoddi4+0xb8>
 8000dcc:	b10d      	cbz	r5, 8000dd2 <__udivmoddi4+0xb2>
 8000dce:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7f5      	b.n	8000dc4 <__udivmoddi4+0xa4>
 8000dd8:	fab3 f183 	clz	r1, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	d14d      	bne.n	8000e7c <__udivmoddi4+0x15c>
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	f0c0 80f2 	bcc.w	8000fca <__udivmoddi4+0x2aa>
 8000de6:	4290      	cmp	r0, r2
 8000de8:	f080 80ef 	bcs.w	8000fca <__udivmoddi4+0x2aa>
 8000dec:	4606      	mov	r6, r0
 8000dee:	4623      	mov	r3, r4
 8000df0:	4608      	mov	r0, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0e6      	beq.n	8000dc4 <__udivmoddi4+0xa4>
 8000df6:	e9c5 6300 	strd	r6, r3, [r5]
 8000dfa:	e7e3      	b.n	8000dc4 <__udivmoddi4+0xa4>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f040 80a2 	bne.w	8000f46 <__udivmoddi4+0x226>
 8000e02:	1a8a      	subs	r2, r1, r2
 8000e04:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e08:	fa1f f68e 	uxth.w	r6, lr
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e12:	fb07 2014 	mls	r0, r7, r4, r2
 8000e16:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e1e:	fb06 f004 	mul.w	r0, r6, r4
 8000e22:	4290      	cmp	r0, r2
 8000e24:	d90f      	bls.n	8000e46 <__udivmoddi4+0x126>
 8000e26:	eb1e 0202 	adds.w	r2, lr, r2
 8000e2a:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e2e:	bf2c      	ite	cs
 8000e30:	f04f 0901 	movcs.w	r9, #1
 8000e34:	f04f 0900 	movcc.w	r9, #0
 8000e38:	4290      	cmp	r0, r2
 8000e3a:	d903      	bls.n	8000e44 <__udivmoddi4+0x124>
 8000e3c:	f1b9 0f00 	cmp.w	r9, #0
 8000e40:	f000 80c8 	beq.w	8000fd4 <__udivmoddi4+0x2b4>
 8000e44:	4644      	mov	r4, r8
 8000e46:	1a12      	subs	r2, r2, r0
 8000e48:	fa1f fc8c 	uxth.w	ip, ip
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	fb00 f606 	mul.w	r6, r0, r6
 8000e58:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e5c:	4566      	cmp	r6, ip
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x152>
 8000e60:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x150>
 8000e6a:	4566      	cmp	r6, ip
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c6>
 8000e70:	4610      	mov	r0, r2
 8000e72:	ebac 0c06 	sub.w	ip, ip, r6
 8000e76:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e7a:	e79d      	b.n	8000db8 <__udivmoddi4+0x98>
 8000e7c:	f1c1 0620 	rsb	r6, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e8e:	40f4      	lsrs	r4, r6
 8000e90:	408a      	lsls	r2, r1
 8000e92:	431f      	orrs	r7, r3
 8000e94:	ea4e 030c 	orr.w	r3, lr, ip
 8000e98:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e9c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ea0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea4:	fa1f fc87 	uxth.w	ip, r7
 8000ea8:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eac:	fb08 4410 	mls	r4, r8, r0, r4
 8000eb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb4:	fb00 f90c 	mul.w	r9, r0, ip
 8000eb8:	45a1      	cmp	r9, r4
 8000eba:	d90e      	bls.n	8000eda <__udivmoddi4+0x1ba>
 8000ebc:	193c      	adds	r4, r7, r4
 8000ebe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec2:	bf2c      	ite	cs
 8000ec4:	f04f 0b01 	movcs.w	fp, #1
 8000ec8:	f04f 0b00 	movcc.w	fp, #0
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	d903      	bls.n	8000ed8 <__udivmoddi4+0x1b8>
 8000ed0:	f1bb 0f00 	cmp.w	fp, #0
 8000ed4:	f000 8093 	beq.w	8000ffe <__udivmoddi4+0x2de>
 8000ed8:	4650      	mov	r0, sl
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ee6:	fb08 4413 	mls	r4, r8, r3, r4
 8000eea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d906      	bls.n	8000f04 <__udivmoddi4+0x1e4>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efc:	d201      	bcs.n	8000f02 <__udivmoddi4+0x1e2>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d87a      	bhi.n	8000ff8 <__udivmoddi4+0x2d8>
 8000f02:	4643      	mov	r3, r8
 8000f04:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f08:	eba4 040c 	sub.w	r4, r4, ip
 8000f0c:	fba0 9802 	umull	r9, r8, r0, r2
 8000f10:	4544      	cmp	r4, r8
 8000f12:	46cc      	mov	ip, r9
 8000f14:	4643      	mov	r3, r8
 8000f16:	d302      	bcc.n	8000f1e <__udivmoddi4+0x1fe>
 8000f18:	d106      	bne.n	8000f28 <__udivmoddi4+0x208>
 8000f1a:	45ce      	cmp	lr, r9
 8000f1c:	d204      	bcs.n	8000f28 <__udivmoddi4+0x208>
 8000f1e:	3801      	subs	r0, #1
 8000f20:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f24:	eb68 0307 	sbc.w	r3, r8, r7
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x222>
 8000f2a:	ebbe 020c 	subs.w	r2, lr, ip
 8000f2e:	eb64 0403 	sbc.w	r4, r4, r3
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	40cc      	lsrs	r4, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e73e      	b.n	8000dc4 <__udivmoddi4+0xa4>
 8000f46:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f4a:	f1c3 0120 	rsb	r1, r3, #32
 8000f4e:	fa04 f203 	lsl.w	r2, r4, r3
 8000f52:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f5c:	fa20 f101 	lsr.w	r1, r0, r1
 8000f60:	fa1f f68e 	uxth.w	r6, lr
 8000f64:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	fb07 4410 	mls	r4, r7, r0, r4
 8000f6e:	0c11      	lsrs	r1, r2, #16
 8000f70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f74:	fb00 f406 	mul.w	r4, r0, r6
 8000f78:	428c      	cmp	r4, r1
 8000f7a:	d90e      	bls.n	8000f9a <__udivmoddi4+0x27a>
 8000f7c:	eb1e 0101 	adds.w	r1, lr, r1
 8000f80:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f84:	bf2c      	ite	cs
 8000f86:	f04f 0901 	movcs.w	r9, #1
 8000f8a:	f04f 0900 	movcc.w	r9, #0
 8000f8e:	428c      	cmp	r4, r1
 8000f90:	d902      	bls.n	8000f98 <__udivmoddi4+0x278>
 8000f92:	f1b9 0f00 	cmp.w	r9, #0
 8000f96:	d02c      	beq.n	8000ff2 <__udivmoddi4+0x2d2>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	1b09      	subs	r1, r1, r4
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fa2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fa6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000faa:	fb04 f106 	mul.w	r1, r4, r6
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d907      	bls.n	8000fc2 <__udivmoddi4+0x2a2>
 8000fb2:	eb1e 0202 	adds.w	r2, lr, r2
 8000fb6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fba:	d201      	bcs.n	8000fc0 <__udivmoddi4+0x2a0>
 8000fbc:	4291      	cmp	r1, r2
 8000fbe:	d815      	bhi.n	8000fec <__udivmoddi4+0x2cc>
 8000fc0:	4644      	mov	r4, r8
 8000fc2:	1a52      	subs	r2, r2, r1
 8000fc4:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fc8:	e721      	b.n	8000e0e <__udivmoddi4+0xee>
 8000fca:	1a86      	subs	r6, r0, r2
 8000fcc:	eb64 0303 	sbc.w	r3, r4, r3
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	e70e      	b.n	8000df2 <__udivmoddi4+0xd2>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4472      	add	r2, lr
 8000fd8:	e735      	b.n	8000e46 <__udivmoddi4+0x126>
 8000fda:	3902      	subs	r1, #2
 8000fdc:	4472      	add	r2, lr
 8000fde:	e6d0      	b.n	8000d82 <__udivmoddi4+0x62>
 8000fe0:	44f4      	add	ip, lr
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	e6e3      	b.n	8000dae <__udivmoddi4+0x8e>
 8000fe6:	44f4      	add	ip, lr
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x152>
 8000fec:	3c02      	subs	r4, #2
 8000fee:	4472      	add	r2, lr
 8000ff0:	e7e7      	b.n	8000fc2 <__udivmoddi4+0x2a2>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4471      	add	r1, lr
 8000ff6:	e7d0      	b.n	8000f9a <__udivmoddi4+0x27a>
 8000ff8:	3b02      	subs	r3, #2
 8000ffa:	443c      	add	r4, r7
 8000ffc:	e782      	b.n	8000f04 <__udivmoddi4+0x1e4>
 8000ffe:	3802      	subs	r0, #2
 8001000:	443c      	add	r4, r7
 8001002:	e76a      	b.n	8000eda <__udivmoddi4+0x1ba>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8001022:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	2101      	movs	r1, #1
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f010 ffce 	bl	8011fd0 <VL53LX_WrByte>
 8001034:	4603      	mov	r3, r0
 8001036:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	085b      	lsrs	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001042:	b2da      	uxtb	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8001060:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8001068:	2101      	movs	r1, #1
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 f9ee 	bl	800244c <VL53LX_data_init>
 8001070:	4603      	mov	r3, r0
 8001072:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8001074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d107      	bne.n	800108c <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 800107c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001080:	2102      	movs	r1, #2
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f884 	bl	8001190 <SetPresetModeL3CX>
 8001088:	4603      	mov	r3, r0
 800108a:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 800108c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d106      	bne.n	80010a2 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001094:	f248 2135 	movw	r1, #33333	@ 0x8235
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f8ef 	bl	800127c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 800109e:	4603      	mov	r3, r0
 80010a0:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 80010a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10a      	bne.n	80010c0 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 80010b4:	3318      	adds	r3, #24
 80010b6:	220c      	movs	r2, #12
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f01a f834 	bl	801b128 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 80010c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d105      	bne.n	80010d4 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 80010c8:	2102      	movs	r1, #2
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f003 fb24 	bl	8004718 <VL53LX_set_dmax_mode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 80010d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 80010dc:	2100      	movs	r1, #0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fdac 	bl	8001c3c <VL53LX_SmudgeCorrectionEnable>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80010e8:	2320      	movs	r3, #32
 80010ea:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	70da      	strb	r2, [r3, #3]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010f8:	2202      	movs	r2, #2
 80010fa:	f883 2a40 	strb.w	r2, [r3, #2624]	@ 0xa40
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80010fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001116:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f00e fcd7 	bl	800face <VL53LX_poll_for_boot_completion>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001124:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001140:	4a12      	ldr	r2, [pc, #72]	@ (800118c <ComputeDevicePresetMode+0x5c>)
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	4611      	mov	r1, r2
 800114a:	8019      	strh	r1, [r3, #0]
 800114c:	3302      	adds	r3, #2
 800114e:	0c12      	lsrs	r2, r2, #16
 8001150:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d002      	beq.n	800115e <ComputeDevicePresetMode+0x2e>
 8001158:	2b02      	cmp	r3, #2
 800115a:	d003      	beq.n	8001164 <ComputeDevicePresetMode+0x34>
 800115c:	e005      	b.n	800116a <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
		break;
 8001162:	e004      	b.n	800116e <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
		break;
 8001168:	e001      	b.n	800116e <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3310      	adds	r3, #16
 8001172:	443b      	add	r3, r7
 8001174:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	701a      	strb	r2, [r3, #0]

	return Status;
 800117c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	0801d208 	.word	0x0801d208

08001190 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b08e      	sub	sp, #56	@ 0x38
 8001194:	af04      	add	r7, sp, #16
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	460b      	mov	r3, r1
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80011b4:	2320      	movs	r3, #32
 80011b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 80011ba:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ffb4 	bl	8001130 <ComputeDevicePresetMode>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 80011ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d112      	bne.n	80011fc <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 80011d6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80011da:	f107 001c 	add.w	r0, r7, #28
 80011de:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4603      	mov	r3, r0
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f001 fd27 	bl	8002c44 <VL53LX_get_preset_mode_timing_cfg>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80011fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001200:	2b00      	cmp	r3, #0
 8001202:	d112      	bne.n	800122a <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001204:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8001208:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800120a:	69fd      	ldr	r5, [r7, #28]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	9102      	str	r1, [sp, #8]
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	462b      	mov	r3, r5
 800121a:	4622      	mov	r2, r4
 800121c:	4601      	mov	r1, r0
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f001 fd70 	bl	8002d04 <VL53LX_set_preset_mode>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 800122a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001238:	70da      	strb	r2, [r3, #3]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 800123a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800123e:	4618      	mov	r0, r3
 8001240:	3728      	adds	r7, #40	@ 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bdb0      	pop	{r4, r5, r7, pc}

08001246 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f893 33cb 	ldrb.w	r3, [r3, #971]	@ 0x3cb
 800125c:	2baa      	cmp	r3, #170	@ 0xaa
 800125e:	d106      	bne.n	800126e <IsL4+0x28>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	f893 33ca 	ldrb.w	r3, [r3, #970]	@ 0x3ca
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001266:	2beb      	cmp	r3, #235	@ 0xeb
 8001268:	d101      	bne.n	800126e <IsL4+0x28>
		devL4 = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
	return devL4;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001286:	2300      	movs	r3, #0
 8001288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001298:	4b31      	ldr	r3, [pc, #196]	@ (8001360 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 800129a:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	4a31      	ldr	r2, [pc, #196]	@ (8001364 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d902      	bls.n	80012aa <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80012a4:	23fc      	movs	r3, #252	@ 0xfc
 80012a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53LX_ERROR_NONE)
 80012aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10b      	bne.n	80012ca <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	f107 0210 	add.w	r2, r7, #16
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f001 fc00 	bl	8002ac4 <VL53LX_get_timeouts_us>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 80012ca:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 80012ce:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 80012d0:	2306      	movs	r3, #6
 80012d2:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ffb6 	bl	8001246 <IsL4>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 80012e0:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 80012e2:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d803      	bhi.n	80012f4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80012ec:	23fc      	movs	r3, #252	@ 0xfc
 80012ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012f2:	e003      	b.n	80012fc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80012fa:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 80012fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001300:	2b00      	cmp	r3, #0
 8001302:	d11c      	bne.n	800133e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	6a3a      	ldr	r2, [r7, #32]
 8001308:	429a      	cmp	r2, r3
 800130a:	d203      	bcs.n	8001314 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 800130c:	23fc      	movs	r3, #252	@ 0xfc
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001312:	e00d      	b.n	8001330 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f001 fb95 	bl	8002a54 <VL53LX_set_timeouts_us>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8001330:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	611a      	str	r2, [r3, #16]
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 800133e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001342:	2b00      	cmp	r3, #0
 8001344:	d106      	bne.n	8001354 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800134c:	461a      	mov	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f8c2 3a44 	str.w	r3, [r2, #2628]	@ 0xa44
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001354:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001358:	4618      	mov	r0, r3
 800135a:	3728      	adds	r7, #40	@ 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	00086470 	.word	0x00086470
 8001364:	00989680 	.word	0x00989680
 8001368:	00030d40 	.word	0x00030d40

0800136c <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 ff37 	bl	80021f0 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	75bb      	strb	r3, [r7, #22]
 8001386:	e01a      	b.n	80013be <VL53LX_StartMeasurement+0x52>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001388:	7dbb      	ldrb	r3, [r7, #22]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8001390:	3304      	adds	r3, #4
 8001392:	2100      	movs	r1, #0
 8001394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001398:	7dbb      	ldrb	r3, [r7, #22]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4413      	add	r3, r2
 800139e:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80013a2:	3310      	adds	r3, #16
 80013a4:	22ff      	movs	r2, #255	@ 0xff
 80013a6:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80013a8:	7dbb      	ldrb	r3, [r7, #22]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80013b2:	3314      	adds	r3, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80013b8:	7dbb      	ldrb	r3, [r7, #22]
 80013ba:	3301      	adds	r3, #1
 80013bc:	75bb      	strb	r3, [r7, #22]
 80013be:	7dbb      	ldrb	r3, [r7, #22]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d9e1      	bls.n	8001388 <VL53LX_StartMeasurement+0x1c>
	}
	pdev->PreviousStreamCount = 0;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
	pdev->PreviousRangeActiveResults = 0;
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	78db      	ldrb	r3, [r3, #3]
 80013e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 80013e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d107      	bne.n	80013fa <VL53LX_StartMeasurement+0x8e>
		Status = VL53LX_init_and_start_range(
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2206      	movs	r2, #6
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f001 fd4b 	bl	8002e8c <VL53LX_init_and_start_range>
 80013f6:	4603      	mov	r3, r0
 80013f8:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 80013fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <VL53LX_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f002 fcc5 	bl	8003dac <VL53LX_clear_interrupt_and_enable_next_range>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f00e fb0a 	bl	800fa5c <VL53LX_is_new_data_ready>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800144c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3b05      	subs	r3, #5
 8001466:	2b12      	cmp	r3, #18
 8001468:	d840      	bhi.n	80014ec <ConvertStatusHisto+0x94>
 800146a:	a201      	add	r2, pc, #4	@ (adr r2, 8001470 <ConvertStatusHisto+0x18>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	080014bd 	.word	0x080014bd
 8001474:	080014c3 	.word	0x080014c3
 8001478:	080014cf 	.word	0x080014cf
 800147c:	080014ed 	.word	0x080014ed
 8001480:	080014e7 	.word	0x080014e7
 8001484:	080014ed 	.word	0x080014ed
 8001488:	080014ed 	.word	0x080014ed
 800148c:	080014ed 	.word	0x080014ed
 8001490:	080014ed 	.word	0x080014ed
 8001494:	080014ed 	.word	0x080014ed
 8001498:	080014ed 	.word	0x080014ed
 800149c:	080014ed 	.word	0x080014ed
 80014a0:	080014ed 	.word	0x080014ed
 80014a4:	080014ed 	.word	0x080014ed
 80014a8:	080014c9 	.word	0x080014c9
 80014ac:	080014db 	.word	0x080014db
 80014b0:	080014ed 	.word	0x080014ed
 80014b4:	080014e1 	.word	0x080014e1
 80014b8:	080014d5 	.word	0x080014d5
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80014bc:	2304      	movs	r3, #4
 80014be:	73fb      	strb	r3, [r7, #15]
		break;
 80014c0:	e016      	b.n	80014f0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
		break;
 80014c6:	e013      	b.n	80014f0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 80014c8:	2306      	movs	r3, #6
 80014ca:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 80014cc:	e010      	b.n	80014f0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80014ce:	2307      	movs	r3, #7
 80014d0:	73fb      	strb	r3, [r7, #15]
		break;
 80014d2:	e00d      	b.n	80014f0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 80014d4:	230c      	movs	r3, #12
 80014d6:	73fb      	strb	r3, [r7, #15]
		break;
 80014d8:	e00a      	b.n	80014f0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80014da:	2307      	movs	r3, #7
 80014dc:	73fb      	strb	r3, [r7, #15]
		break;
 80014de:	e007      	b.n	80014f0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 80014e0:	230b      	movs	r3, #11
 80014e2:	73fb      	strb	r3, [r7, #15]
		break;
 80014e4:	e004      	b.n	80014f0 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
		break;
 80014ea:	e001      	b.n	80014f0 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 80014ec:	23ff      	movs	r3, #255	@ 0xff
 80014ee:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	@ 0x38
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4603      	mov	r3, r0
 8001510:	70fb      	strb	r3, [r7, #3]
 8001512:	460b      	mov	r3, r1
 8001514:	70bb      	strb	r3, [r7, #2]
 8001516:	4613      	mov	r3, r2
 8001518:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	VL53LX_LLDriverData_t *pdev =
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8001524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001526:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
	int16_t AddOffset;
	uint8_t histo_merge_nb;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001532:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800153e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001540:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001542:	025b      	lsls	r3, r3, #9
 8001544:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8001546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800154c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800154e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001550:	025b      	lsls	r3, r3, #9
 8001552:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800155a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800155c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800155e:	025b      	lsls	r3, r3, #9
 8001560:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8001562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800156a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 800156e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001570:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8001572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001574:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8001578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800157a:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 800157c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800157e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 8001582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001584:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8001586:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800158a:	2b11      	cmp	r3, #17
 800158c:	d009      	beq.n	80015a2 <SetTargetData+0xa2>
 800158e:	2b11      	cmp	r3, #17
 8001590:	dc0f      	bgt.n	80015b2 <SetTargetData+0xb2>
 8001592:	2b03      	cmp	r3, #3
 8001594:	dc02      	bgt.n	800159c <SetTargetData+0x9c>
 8001596:	2b00      	cmp	r3, #0
 8001598:	dc03      	bgt.n	80015a2 <SetTargetData+0xa2>
 800159a:	e00a      	b.n	80015b2 <SetTargetData+0xb2>
 800159c:	2b0d      	cmp	r3, #13
 800159e:	d004      	beq.n	80015aa <SetTargetData+0xaa>
 80015a0:	e007      	b.n	80015b2 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 80015a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015a4:	2205      	movs	r2, #5
 80015a6:	749a      	strb	r2, [r3, #18]
		break;
 80015a8:	e006      	b.n	80015b8 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 80015aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ac:	220d      	movs	r2, #13
 80015ae:	749a      	strb	r2, [r3, #18]
		break;
 80015b0:	e002      	b.n	80015b8 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 80015b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015b4:	2200      	movs	r2, #0
 80015b6:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 80015b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ba:	7c9b      	ldrb	r3, [r3, #18]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d117      	bne.n	80015f0 <SetTargetData+0xf0>
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d114      	bne.n	80015f0 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 80015c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015c8:	22ff      	movs	r2, #255	@ 0xff
 80015ca:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 80015cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 80015d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 80015d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015da:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80015de:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 80015e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015e2:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80015e6:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 80015e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ea:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80015ee:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 80015f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015f2:	7c9b      	ldrb	r3, [r3, #18]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d108      	bne.n	800160a <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 80015f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff2b 	bl	8001458 <ConvertStatusHisto>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8001606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001608:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	461a      	mov	r2, r3
 8001610:	f248 0191 	movw	r1, #32913	@ 0x8091
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f003 f8bd 	bl	8004794 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 800161a:	78bb      	ldrb	r3, [r7, #2]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8001628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800162a:	8a1b      	ldrh	r3, [r3, #16]
 800162c:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	86bb      	strh	r3, [r7, #52]	@ 0x34

	pRangeData->ExtendedRange = 0;
 8001632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001634:	2200      	movs	r2, #0
 8001636:	74da      	strb	r2, [r3, #19]


	Status = VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8001638:	f107 030b 	add.w	r3, r7, #11
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f008 fe60 	bl	800a304 <VL53LX_compute_histo_merge_nb>
 8001644:	4603      	mov	r3, r0
 8001646:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if ((active_results != 1) ||
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d109      	bne.n	8001664 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 8001650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001652:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001656:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
	if ((active_results != 1) ||
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <SetTargetData+0x164>
		(pdev->PreviousRangeActiveResults != 1)||(histo_merge_nb == 0))
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <SetTargetData+0x168>
		ExtendedRangeEnabled = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 81db 	beq.w	8001a26 <SetTargetData+0x526>
		(pRangeData->RangeStatus ==
 8001670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001672:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8001674:	2b07      	cmp	r3, #7
 8001676:	d004      	beq.n	8001682 <SetTargetData+0x182>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8001678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800167a:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 800167c:	2b04      	cmp	r3, #4
 800167e:	f040 81d2 	bne.w	8001a26 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8001682:	787b      	ldrb	r3, [r7, #1]
 8001684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001686:	4413      	add	r3, r2
 8001688:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800168c:	3310      	adds	r3, #16
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b07      	cmp	r3, #7
 8001692:	d01c      	beq.n	80016ce <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001698:	4413      	add	r3, r2
 800169a:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800169e:	3310      	adds	r3, #16
 80016a0:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d013      	beq.n	80016ce <SetTargetData+0x1ce>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80016a6:	787b      	ldrb	r3, [r7, #1]
 80016a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80016b0:	3310      	adds	r3, #16
 80016b2:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 81b6 	bne.w	8001a26 <SetTargetData+0x526>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80016ba:	787b      	ldrb	r3, [r7, #1]
 80016bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016be:	4413      	add	r3, r2
 80016c0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80016c4:	3314      	adds	r3, #20
 80016c6:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 81ac 	bne.w	8001a26 <SetTargetData+0x526>
	{
		if (((pdev->PreviousStreamCount) ==
 80016ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016d4:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 80016d8:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80016da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016dc:	f893 3477 	ldrb.w	r3, [r3, #1143]	@ 0x477
 80016e0:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d00c      	beq.n	8001700 <SetTargetData+0x200>
		|| ((pdev->PreviousStreamCount) ==
 80016e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016ec:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 80016f0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80016f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f4:	f893 3477 	ldrb.w	r3, [r3, #1143]	@ 0x477
 80016f8:	337f      	adds	r3, #127	@ 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80016fa:	429a      	cmp	r2, r3
 80016fc:	f040 816b 	bne.w	80019d6 <SetTargetData+0x4d6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8001700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001702:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001706:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800170c:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8001710:	3304      	adds	r3, #4
 8001712:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001716:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	b29b      	uxth	r3, r3
 800171c:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		switch (pdev->preset_mode) {
 8001724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	2b21      	cmp	r3, #33	@ 0x21
 800172a:	d008      	beq.n	800173e <SetTargetData+0x23e>
 800172c:	2b21      	cmp	r3, #33	@ 0x21
 800172e:	f300 814e 	bgt.w	80019ce <SetTargetData+0x4ce>
 8001732:	2b1b      	cmp	r3, #27
 8001734:	f000 80d7 	beq.w	80018e6 <SetTargetData+0x3e6>
 8001738:	2b1e      	cmp	r3, #30
 800173a:	d004      	beq.n	8001746 <SetTargetData+0x246>
 800173c:	e147      	b.n	80019ce <SetTargetData+0x4ce>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8001744:	e147      	b.n	80019d6 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001748:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 800174c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001750:	429a      	cmp	r2, r3
 8001752:	dd0e      	ble.n	8001772 <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001756:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800175a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800175e:	429a      	cmp	r2, r3
 8001760:	da07      	bge.n	8001772 <SetTargetData+0x272>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d104      	bne.n	8001772 <SetTargetData+0x272>
					sequency == 1) {
					AddOffset =
 8001768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800176e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001770:	e0b8      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001772:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001778:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	@ 0x8e
 800177c:	425b      	negs	r3, r3
 800177e:	429a      	cmp	r2, r3
 8001780:	da0f      	bge.n	80017a2 <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001782:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001788:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	@ 0x90
 800178c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800178e:	429a      	cmp	r2, r3
 8001790:	dd07      	ble.n	80017a2 <SetTargetData+0x2a2>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d104      	bne.n	80017a2 <SetTargetData+0x2a2>
					sequency == 0) {
					AddOffset =
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179a:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800179e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80017a0:	e0a0      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80017a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a4:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80017a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dd0e      	ble.n	80017ce <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80017b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	da07      	bge.n	80017ce <SetTargetData+0x2ce>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d104      	bne.n	80017ce <SetTargetData+0x2ce>
					sequency == 0) {
					AddOffset =
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80017ca:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80017cc:	e08a      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80017ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d4:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80017d8:	425b      	negs	r3, r3
 80017da:	429a      	cmp	r2, r3
 80017dc:	da0f      	bge.n	80017fe <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80017de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e4:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 80017e8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dd07      	ble.n	80017fe <SetTargetData+0x2fe>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d104      	bne.n	80017fe <SetTargetData+0x2fe>
					sequency == 1) {
					AddOffset =
 80017f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80017fa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80017fc:	e072      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80017fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001800:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8001804:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001808:	429a      	cmp	r2, r3
 800180a:	dd0e      	ble.n	800182a <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800180c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001812:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001816:	429a      	cmp	r2, r3
 8001818:	da07      	bge.n	800182a <SetTargetData+0x32a>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d104      	bne.n	800182a <SetTargetData+0x32a>
					sequency == 1) {
					AddOffset =
 8001820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001822:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8001826:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001828:	e05c      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800182a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800182e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001830:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	@ 0x96
 8001834:	425b      	negs	r3, r3
 8001836:	429a      	cmp	r2, r3
 8001838:	da0f      	bge.n	800185a <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800183a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800183e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001840:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	@ 0x98
 8001844:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001846:	429a      	cmp	r2, r3
 8001848:	dd07      	ble.n	800185a <SetTargetData+0x35a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d104      	bne.n	800185a <SetTargetData+0x35a>
					sequency == 0) {
					AddOffset =
 8001850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001852:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8001856:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001858:	e044      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800185a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8001860:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001864:	429a      	cmp	r2, r3
 8001866:	dd0e      	ble.n	8001886 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186a:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800186e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001872:	429a      	cmp	r2, r3
 8001874:	da07      	bge.n	8001886 <SetTargetData+0x386>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d104      	bne.n	8001886 <SetTargetData+0x386>
					sequency == 0) {
					AddOffset =
 800187c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8001882:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001884:	e02e      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001886:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800188a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	@ 0x9a
 8001890:	425b      	negs	r3, r3
 8001892:	429a      	cmp	r2, r3
 8001894:	da0f      	bge.n	80018b6 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001896:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800189a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189c:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	@ 0x9c
 80018a0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dd07      	ble.n	80018b6 <SetTargetData+0x3b6>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d104      	bne.n	80018b6 <SetTargetData+0x3b6>
					sequency == 1) {
					AddOffset =
 80018ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ae:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80018b2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80018b4:	e016      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80018b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b8:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 80018bc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	da0b      	bge.n	80018dc <SetTargetData+0x3dc>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80018c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c6:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80018ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dd04      	ble.n	80018dc <SetTargetData+0x3dc>
					AddOffset =
 80018d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80018d8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80018da:	e003      	b.n	80018e4 <SetTargetData+0x3e4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80018e2:	e078      	b.n	80019d6 <SetTargetData+0x4d6>
 80018e4:	e077      	b.n	80019d6 <SetTargetData+0x4d6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80018e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80018ec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dd0e      	ble.n	8001912 <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80018f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f6:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80018fa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018fe:	429a      	cmp	r2, r3
 8001900:	da07      	bge.n	8001912 <SetTargetData+0x412>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <SetTargetData+0x412>
					sequency == 0) {
					AddOffset =
 8001908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800190a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 800190e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001910:	e05c      	b.n	80019cc <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001912:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001918:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 800191c:	425b      	negs	r3, r3
 800191e:	429a      	cmp	r2, r3
 8001920:	da0f      	bge.n	8001942 <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001922:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001928:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 800192c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800192e:	429a      	cmp	r2, r3
 8001930:	dd07      	ble.n	8001942 <SetTargetData+0x442>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d104      	bne.n	8001942 <SetTargetData+0x442>
					sequency == 1) {
					AddOffset =
 8001938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800193e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001940:	e044      	b.n	80019cc <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001944:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8001948:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800194c:	429a      	cmp	r2, r3
 800194e:	dd0e      	ble.n	800196e <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001952:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001956:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800195a:	429a      	cmp	r2, r3
 800195c:	da07      	bge.n	800196e <SetTargetData+0x46e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d104      	bne.n	800196e <SetTargetData+0x46e>
					sequency == 1) {
					AddOffset =
 8001964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001966:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800196a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800196c:	e02e      	b.n	80019cc <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800196e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001974:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8001978:	425b      	negs	r3, r3
 800197a:	429a      	cmp	r2, r3
 800197c:	da0f      	bge.n	800199e <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800197e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001984:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8001988:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800198a:	429a      	cmp	r2, r3
 800198c:	dd07      	ble.n	800199e <SetTargetData+0x49e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d104      	bne.n	800199e <SetTargetData+0x49e>
					sequency == 0) {
					AddOffset =
 8001994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001996:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 800199a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800199c:	e016      	b.n	80019cc <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800199e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a0:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 80019a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	da0b      	bge.n	80019c4 <SetTargetData+0x4c4>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80019ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ae:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80019b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dd04      	ble.n	80019c4 <SetTargetData+0x4c4>
					AddOffset =
 80019ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019bc:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 80019c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80019c2:	e003      	b.n	80019cc <SetTargetData+0x4cc>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80019ca:	e004      	b.n	80019d6 <SetTargetData+0x4d6>
 80019cc:	e003      	b.n	80019d6 <SetTargetData+0x4d6>

			default:
				uwr_status = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80019d4:	bf00      	nop
			}
		}

		if (uwr_status) {
 80019d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d023      	beq.n	8001a26 <SetTargetData+0x526>
			pRangeData->RangeMilliMeter += AddOffset;
 80019de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80019e8:	4413      	add	r3, r2
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019f0:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80019f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80019fc:	4413      	add	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a04:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8001a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001a10:	4413      	add	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a18:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8001a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8001a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a22:	2200      	movs	r2, #0
 8001a24:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8001a26:	787b      	ldrb	r3, [r7, #1]
 8001a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a2a:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8001a2e:	3304      	adds	r3, #4
 8001a30:	8ab9      	ldrh	r1, [r7, #20]
 8001a32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8001a36:	787b      	ldrb	r3, [r7, #1]
 8001a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a3a:	7c91      	ldrb	r1, [r2, #18]
 8001a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8001a44:	3310      	adds	r3, #16
 8001a46:	460a      	mov	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8001a4a:	787b      	ldrb	r3, [r7, #1]
 8001a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a4e:	7cd1      	ldrb	r1, [r2, #19]
 8001a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8001a58:	3314      	adds	r3, #20
 8001a5a:	460a      	mov	r2, r1
 8001a5c:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8001a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a60:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a64:	461a      	mov	r2, r3
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	f882 30d8 	strb.w	r3, [r2, #216]	@ 0xd8

	Range = pRangeData->RangeMilliMeter;
 8001a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a6e:	8a1b      	ldrh	r3, [r3, #16]
 8001a70:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a74:	7c9b      	ldrb	r3, [r3, #18]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d110      	bne.n	8001a9c <SetTargetData+0x59c>
 8001a7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da0c      	bge.n	8001a9c <SetTargetData+0x59c>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8001a82:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <SetTargetData+0x5a8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	da03      	bge.n	8001a96 <SetTargetData+0x596>
			pRangeData->RangeStatus =
 8001a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a90:	220e      	movs	r2, #14
 8001a92:	749a      	strb	r2, [r3, #18]
 8001a94:	e002      	b.n	8001a9c <SetTargetData+0x59c>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8001a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a98:	2200      	movs	r2, #0
 8001a9a:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8001a9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3738      	adds	r7, #56	@ 0x38
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000

08001aac <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b08f      	sub	sp, #60	@ 0x3c
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	7c9a      	ldrb	r2, [r3, #18]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


	pMultiRangingData->TimeStamp = 0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	78da      	ldrb	r2, [r3, #3]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	7c9b      	ldrb	r3, [r3, #18]
 8001ae8:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8001aea:	7ffb      	ldrb	r3, [r7, #31]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d103      	bne.n	8001af8 <SetMeasurementData+0x4c>

		iteration = 1;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001af6:	e002      	b.n	8001afe <SetMeasurementData+0x52>
	else
		iteration = ActiveResults;
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	for (i = 0; i < iteration; i++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b04:	e035      	b.n	8001b72 <SetMeasurementData+0xc6>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8001b06:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	3308      	adds	r3, #8
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8001b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b1e:	224c      	movs	r2, #76	@ 0x4c
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	3310      	adds	r3, #16
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	4413      	add	r3, r2
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8001b2e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d113      	bne.n	8001b5e <SetMeasurementData+0xb2>
			Status = SetTargetData(Dev, ActiveResults,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7918      	ldrb	r0, [r3, #4]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	7c1b      	ldrb	r3, [r3, #16]
 8001b3e:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8001b42:	7ff9      	ldrb	r1, [r7, #31]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	9202      	str	r2, [sp, #8]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	9201      	str	r2, [sp, #4]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4623      	mov	r3, r4
 8001b50:	4602      	mov	r2, r0
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fcd4 	bl	8001500 <SetTargetData>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	for (i = 0; i < iteration; i++) {
 8001b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b72:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001b76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d3c3      	bcc.n	8001b06 <SetMeasurementData+0x5a>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f893 2477 	ldrb.w	r2, [r3, #1143]	@ 0x477
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b8a:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b96:	e01f      	b.n	8001bd8 <SetMeasurementData+0x12c>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8001baa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bae:	6a3a      	ldr	r2, [r7, #32]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8001bb6:	3310      	adds	r3, #16
 8001bb8:	22ff      	movs	r2, #255	@ 0xff
 8001bba:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8001bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc0:	6a3a      	ldr	r2, [r7, #32]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8001bc8:	3314      	adds	r3, #20
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001bce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d9db      	bls.n	8001b98 <SetMeasurementData+0xec>
	}

	return Status;
 8001be0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	372c      	adds	r7, #44	@ 0x2c
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f503 53a1 	add.w	r3, r3, #5152	@ 0x1420
 8001c04:	3318      	adds	r3, #24
 8001c06:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8001c08:	225c      	movs	r2, #92	@ 0x5c
 8001c0a:	21ff      	movs	r1, #255	@ 0xff
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f019 fa8b 	bl	801b128 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	2102      	movs	r1, #2
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f001 fcc4 	bl	80035a4 <VL53LX_get_device_results>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	68f9      	ldr	r1, [r7, #12]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff41 	bl	8001aac <SetMeasurementData>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8001c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <VL53LX_SmudgeCorrectionEnable>:
}


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d84a      	bhi.n	8001cf4 <VL53LX_SmudgeCorrectionEnable+0xb8>
 8001c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c64 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c95 	.word	0x08001c95
 8001c6c:	08001cb5 	.word	0x08001cb5
 8001c70:	08001cd5 	.word	0x08001cd5
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f003 fc95 	bl	80055a4 <VL53LX_dynamic_xtalk_correction_disable>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f003 fca6 	bl	80055d0 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8001c84:	4603      	mov	r3, r0
 8001c86:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f003 fccd 	bl	8005628 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	733b      	strb	r3, [r7, #12]
		break;
 8001c92:	e032      	b.n	8001cfa <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f003 fc6f 	bl	8005578 <VL53LX_dynamic_xtalk_correction_enable>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f003 fcd8 	bl	8005654 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f003 fcbd 	bl	8005628 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	733b      	strb	r3, [r7, #12]
		break;
 8001cb2:	e022      	b.n	8001cfa <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f003 fc5f 	bl	8005578 <VL53LX_dynamic_xtalk_correction_enable>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f003 fcc8 	bl	8005654 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f003 fc97 	bl	80055fc <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	733b      	strb	r3, [r7, #12]
		break;
 8001cd2:	e012      	b.n	8001cfa <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f003 fc4f 	bl	8005578 <VL53LX_dynamic_xtalk_correction_enable>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f003 fc76 	bl	80055d0 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f003 fc9d 	bl	8005628 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	733b      	strb	r3, [r7, #12]
		break;
 8001cf2:	e002      	b.n	8001cfa <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001cf4:	23fc      	movs	r3, #252	@ 0xfc
 8001cf6:	73fb      	strb	r3, [r7, #15]
		break;
 8001cf8:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8001d0e:	7b7b      	ldrb	r3, [r7, #13]
 8001d10:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8001d1a:	7b3b      	ldrb	r3, [r7, #12]
 8001d1c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop

08001d2c <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	2b21      	cmp	r3, #33	@ 0x21
 8001d40:	d006      	beq.n	8001d50 <select_offset_per_vcsel+0x24>
 8001d42:	2b21      	cmp	r3, #33	@ 0x21
 8001d44:	dc2b      	bgt.n	8001d9e <select_offset_per_vcsel+0x72>
 8001d46:	2b1b      	cmp	r3, #27
 8001d48:	d01c      	beq.n	8001d84 <select_offset_per_vcsel+0x58>
 8001d4a:	2b1e      	cmp	r3, #30
 8001d4c:	d00d      	beq.n	8001d6a <select_offset_per_vcsel+0x3e>
 8001d4e:	e026      	b.n	8001d9e <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d56:	f8b3 3c38 	ldrh.w	r3, [r3, #3128]	@ 0xc38
 8001d5a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d62:	f8b3 3c3a 	ldrh.w	r3, [r3, #3130]	@ 0xc3a
 8001d66:	817b      	strh	r3, [r7, #10]
		break;
 8001d68:	e02b      	b.n	8001dc2 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d70:	f8b3 3c3c 	ldrh.w	r3, [r3, #3132]	@ 0xc3c
 8001d74:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7c:	f8b3 3c3e 	ldrh.w	r3, [r3, #3134]	@ 0xc3e
 8001d80:	817b      	strh	r3, [r7, #10]
		break;
 8001d82:	e01e      	b.n	8001dc2 <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d8a:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	@ 0xc40
 8001d8e:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d96:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	@ 0xc42
 8001d9a:	817b      	strh	r3, [r7, #10]
		break;
 8001d9c:	e011      	b.n	8001dc2 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da4:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	@ 0xc40
 8001da8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db0:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	@ 0xc42
 8001db4:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8001db6:	23fc      	movs	r3, #252	@ 0xfc
 8001db8:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	801a      	strh	r2, [r3, #0]
		break;
 8001dc0:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001dc8:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10b      	bne.n	8001dea <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8001dd2:	7a7b      	ldrb	r3, [r7, #9]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <select_offset_per_vcsel+0xb6>
 8001ddc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001de0:	e001      	b.n	8001de6 <select_offset_per_vcsel+0xba>
 8001de2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	8013      	strh	r3, [r2, #0]

	return status;
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8001dfa:	b490      	push	{r4, r7}
 8001dfc:	b08a      	sub	sp, #40	@ 0x28
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	4611      	mov	r1, r2
 8001e06:	461a      	mov	r2, r3
 8001e08:	460b      	mov	r3, r1
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int32_t    total_rate_pre = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001e2c:	e021      	b.n	8001e72 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8001e2e:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	0052      	lsls	r2, r2, #1
 8001e3c:	441a      	add	r2, r3
 8001e3e:	00d3      	lsls	r3, r2, #3
 8001e40:	461a      	mov	r2, r3
 8001e42:	460b      	mov	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	440b      	add	r3, r1
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4423      	add	r3, r4
 8001e4e:	f203 7312 	addw	r3, r3, #1810	@ 0x712
 8001e52:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8001e56:	6a3a      	ldr	r2, [r7, #32]
 8001e58:	4413      	add	r3, r2
 8001e5a:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8001e5c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3206      	adds	r2, #6
 8001e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8001e6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e6e:	3301      	adds	r3, #1
 8001e70:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001e72:	79bb      	ldrb	r3, [r7, #6]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d3d8      	bcc.n	8001e2e <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d047      	beq.n	8001f12 <vl53lx_diff_histo_stddev+0x118>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d044      	beq.n	8001f12 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001e90:	e03a      	b.n	8001f08 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8001e92:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	0052      	lsls	r2, r2, #1
 8001ea0:	441a      	add	r2, r3
 8001ea2:	00d3      	lsls	r3, r2, #3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	440b      	add	r3, r1
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	4413      	add	r3, r2
 8001eb0:	4423      	add	r3, r4
 8001eb2:	f203 7312 	addw	r3, r3, #1810	@ 0x712
 8001eb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ec2:	fb03 f202 	mul.w	r2, r3, r2
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ecc:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8001ece:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3206      	adds	r2, #6
 8001ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001edc:	fb03 f202 	mul.w	r2, r3, r2
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	69b9      	ldr	r1, [r7, #24]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8001ef2:	69b8      	ldr	r0, [r7, #24]
 8001ef4:	6979      	ldr	r1, [r7, #20]
 8001ef6:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	441a      	add	r2, r3
 8001efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f00:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8001f02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f04:	3301      	adds	r3, #1
 8001f06:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3bf      	bcc.n	8001e92 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	@ 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc90      	pop	{r4, r7}
 8001f1a:	4770      	bx	lr

08001f1c <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	b08c      	sub	sp, #48	@ 0x30
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t    i                        = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	int32_t    TuningBinRecSize		    = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t    timing					= 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8001f4a:	2318      	movs	r3, #24
 8001f4c:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	461a      	mov	r2, r3
 8001f54:	f248 018f 	movw	r1, #32911	@ 0x808f
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f002 fc1b 	bl	8004794 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	461a      	mov	r2, r3
 8001f64:	f248 018e 	movw	r1, #32910	@ 0x808e
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f002 fc13 	bl	8004794 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f74:	f893 3c45 	ldrb.w	r3, [r3, #3141]	@ 0xc45
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f040 811b 	bne.w	80021b4 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8001f98:	7efb      	ldrb	r3, [r7, #27]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	7eba      	ldrb	r2, [r7, #26]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001faa:	f893 3c44 	ldrb.w	r3, [r3, #3140]	@ 0xc44
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <vl53lx_histo_merge+0xa8>
			prev_pos = pdev->bin_rec_pos - 1;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb8:	f893 3c44 	ldrb.w	r3, [r3, #3140]	@ 0xc44
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fc2:	e004      	b.n	8001fce <vl53lx_histo_merge+0xb2>
		else
			prev_pos = (TuningBinRecSize - 1);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8001fce:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8001fd2:	7efb      	ldrb	r3, [r7, #27]
 8001fd4:	69f8      	ldr	r0, [r7, #28]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	0052      	lsls	r2, r2, #1
 8001fda:	441a      	add	r2, r3
 8001fdc:	0153      	lsls	r3, r2, #5
 8001fde:	461a      	mov	r2, r3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	440b      	add	r3, r1
 8001fe6:	019b      	lsls	r3, r3, #6
 8001fe8:	4413      	add	r3, r2
 8001fea:	4403      	add	r3, r0
 8001fec:	f503 53e2 	add.w	r3, r3, #7232	@ 0x1c40
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	dd0c      	ble.n	8002012 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8001ff8:	7e79      	ldrb	r1, [r7, #25]
 8001ffa:	7efa      	ldrb	r2, [r7, #27]
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	6839      	ldr	r1, [r7, #0]
 800200c:	69f8      	ldr	r0, [r7, #28]
 800200e:	f7ff fef4 	bl	8001dfa <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	429a      	cmp	r2, r3
 8002018:	db23      	blt.n	8002062 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f503 53e2 	add.w	r3, r3, #7232	@ 0x1c40
 8002020:	3308      	adds	r3, #8
 8002022:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f019 f87d 	bl	801b128 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2c44 	strb.w	r2, [r3, #3140]	@ 0xc44

			recom_been_reset = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			if (timing == 0)
 8002040:	7efb      	ldrb	r3, [r7, #27]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800204c:	2206      	movs	r2, #6
 800204e:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45
 8002052:	e034      	b.n	80020be <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205a:	2207      	movs	r2, #7
 800205c:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45
 8002060:	e02d      	b.n	80020be <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	f893 3c44 	ldrb.w	r3, [r3, #3140]	@ 0xc44
 800206c:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002074:	e01e      	b.n	80020b4 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8002076:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 800207a:	7e39      	ldrb	r1, [r7, #24]
 800207c:	7efb      	ldrb	r3, [r7, #27]
 800207e:	f897 5025 	ldrb.w	r5, [r7, #37]	@ 0x25
					pdata->bin_data[i];
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	3006      	adds	r0, #6
 8002086:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 800208a:	69f8      	ldr	r0, [r7, #28]
 800208c:	461a      	mov	r2, r3
 800208e:	0052      	lsls	r2, r2, #1
 8002090:	441a      	add	r2, r3
 8002092:	00d3      	lsls	r3, r2, #3
 8002094:	461a      	mov	r2, r3
 8002096:	460b      	mov	r3, r1
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	440b      	add	r3, r1
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	442b      	add	r3, r5
 80020a2:	f203 7312 	addw	r3, r3, #1810	@ 0x712
 80020a6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80020aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020ae:	3301      	adds	r3, #1
 80020b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80020b4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80020b8:	7ebb      	ldrb	r3, [r7, #26]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3db      	bcc.n	8002076 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c4:	f893 3c44 	ldrb.w	r3, [r3, #3140]	@ 0xc44
 80020c8:	461a      	mov	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d109      	bne.n	80020e6 <vl53lx_histo_merge+0x1ca>
 80020d2:	7efb      	ldrb	r3, [r7, #27]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2c44 	strb.w	r2, [r3, #3140]	@ 0xc44
 80020e4:	e00e      	b.n	8002104 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 80020e6:	7efb      	ldrb	r3, [r7, #27]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d10b      	bne.n	8002104 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f2:	f893 3c44 	ldrb.w	r3, [r3, #3140]	@ 0xc44
 80020f6:	3301      	adds	r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002100:	f883 2c44 	strb.w	r2, [r3, #3140]	@ 0xc44

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8002104:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002108:	2b01      	cmp	r3, #1
 800210a:	d102      	bne.n	8002112 <vl53lx_histo_merge+0x1f6>
 800210c:	7efb      	ldrb	r3, [r7, #27]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d069      	beq.n	80021e6 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002118:	f893 3c45 	ldrb.w	r3, [r3, #3141]	@ 0xc45
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d162      	bne.n	80021e6 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8002120:	2300      	movs	r3, #0
 8002122:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002124:	e008      	b.n	8002138 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8002126:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	3206      	adds	r2, #6
 800212c:	2100      	movs	r1, #0
 800212e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8002132:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002134:	3301      	adds	r3, #1
 8002136:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002138:	7ebb      	ldrb	r3, [r7, #26]
 800213a:	b29b      	uxth	r3, r3
 800213c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800213e:	429a      	cmp	r2, r3
 8002140:	d3f1      	bcc.n	8002126 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8002142:	2300      	movs	r3, #0
 8002144:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002146:	e02f      	b.n	80021a8 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800214e:	e023      	b.n	8002198 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8002150:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3206      	adds	r2, #6
 8002156:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 800215a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800215e:	7efb      	ldrb	r3, [r7, #27]
 8002160:	8cfd      	ldrh	r5, [r7, #38]	@ 0x26
 8002162:	69fc      	ldr	r4, [r7, #28]
 8002164:	461a      	mov	r2, r3
 8002166:	0052      	lsls	r2, r2, #1
 8002168:	441a      	add	r2, r3
 800216a:	00d3      	lsls	r3, r2, #3
 800216c:	461a      	mov	r2, r3
 800216e:	460b      	mov	r3, r1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	440b      	add	r3, r1
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	4413      	add	r3, r2
 8002178:	442b      	add	r3, r5
 800217a:	f203 7312 	addw	r3, r3, #1810	@ 0x712
 800217e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8002182:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002184:	18c1      	adds	r1, r0, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3206      	adds	r2, #6
 800218a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 800218e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002192:	3301      	adds	r3, #1
 8002194:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002198:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	429a      	cmp	r2, r3
 80021a0:	dbd6      	blt.n	8002150 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 80021a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80021a4:	3301      	adds	r3, #1
 80021a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80021a8:	7ebb      	ldrb	r3, [r7, #26]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d3ca      	bcc.n	8002148 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80021b2:	e018      	b.n	80021e6 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ba:	f893 3c45 	ldrb.w	r3, [r3, #3141]	@ 0xc45
 80021be:	3b01      	subs	r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c8:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45
		if (pdev->pos_before_next_recom == 255)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d2:	f893 3c45 	ldrb.w	r3, [r3, #3141]	@ 0xc45
 80021d6:	2bff      	cmp	r3, #255	@ 0xff
 80021d8:	d105      	bne.n	80021e6 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45
}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	@ 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021f0 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0c6      	sub	sp, #280	@ 0x118
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021fe:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	int32_t patch_tuning = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800220c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 8002214:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002218:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800221c:	2200      	movs	r2, #0
 800221e:	2185      	movs	r1, #133	@ 0x85
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	f00f fed5 	bl	8011fd0 <VL53LX_WrByte>
 8002226:	4603      	mov	r3, r0
 8002228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800222c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 8002234:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002238:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	f005 f989 	bl	8007554 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8002242:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8002246:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800224a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800224e:	f248 018c 	movw	r1, #32908	@ 0x808c
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	f002 fa9e 	bl	8004794 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8002258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800225c:	2b03      	cmp	r3, #3
 800225e:	d81b      	bhi.n	8002298 <VL53LX_load_patch+0xa8>
 8002260:	a201      	add	r2, pc, #4	@ (adr r2, 8002268 <VL53LX_load_patch+0x78>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	08002279 	.word	0x08002279
 800226c:	08002281 	.word	0x08002281
 8002270:	08002289 	.word	0x08002289
 8002274:	08002291 	.word	0x08002291
	case 0:
		patch_power = 0x00;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800227e:	e00e      	b.n	800229e <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8002280:	2310      	movs	r3, #16
 8002282:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002286:	e00a      	b.n	800229e <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8002288:	2320      	movs	r3, #32
 800228a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800228e:	e006      	b.n	800229e <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8002290:	2340      	movs	r3, #64	@ 0x40
 8002292:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8002296:	e002      	b.n	800229e <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 800229e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d134      	bne.n	8002310 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80022a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022ae:	2229      	movs	r2, #41	@ 0x29
 80022b0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80022b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022ba:	22c9      	movs	r2, #201	@ 0xc9
 80022bc:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80022be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022c6:	220e      	movs	r2, #14
 80022c8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80022ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80022d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022de:	2228      	movs	r2, #40	@ 0x28
 80022e0:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80022e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022f0:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 80022f2:	f107 020c 	add.w	r2, r7, #12
 80022f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022fa:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80022fe:	2306      	movs	r3, #6
 8002300:	f240 4176 	movw	r1, #1142	@ 0x476
 8002304:	6800      	ldr	r0, [r0, #0]
 8002306:	f00f fdf7 	bl	8011ef8 <VL53LX_WriteMulti>
 800230a:	4603      	mov	r3, r0
 800230c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8002310:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002314:	2b00      	cmp	r3, #0
 8002316:	d132      	bne.n	800237e <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8002318:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800231c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002320:	2203      	movs	r2, #3
 8002322:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8002324:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002328:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800232c:	226d      	movs	r2, #109	@ 0x6d
 800232e:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8002330:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002334:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002338:	2203      	movs	r2, #3
 800233a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800233c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002340:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002344:	226f      	movs	r2, #111	@ 0x6f
 8002346:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8002348:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800234c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002350:	2207      	movs	r2, #7
 8002352:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8002354:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002358:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800235c:	2229      	movs	r2, #41	@ 0x29
 800235e:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8002360:	f107 020c 	add.w	r2, r7, #12
 8002364:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002368:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800236c:	2306      	movs	r3, #6
 800236e:	f240 4196 	movw	r1, #1174	@ 0x496
 8002372:	6800      	ldr	r0, [r0, #0]
 8002374:	f00f fdc0 	bl	8011ef8 <VL53LX_WriteMulti>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800237e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11a      	bne.n	80023bc <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8002386:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800238a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8002392:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002396:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800239a:	2207      	movs	r2, #7
 800239c:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 800239e:	f107 020c 	add.w	r2, r7, #12
 80023a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023a6:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80023aa:	2302      	movs	r3, #2
 80023ac:	f240 4172 	movw	r1, #1138	@ 0x472
 80023b0:	6800      	ldr	r0, [r0, #0]
 80023b2:	f00f fda1 	bl	8011ef8 <VL53LX_WriteMulti>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 80023bc:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d11a      	bne.n	80023fa <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 80023c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80023d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023d8:	2207      	movs	r2, #7
 80023da:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80023dc:	f107 020c 	add.w	r2, r7, #12
 80023e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023e4:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80023e8:	2302      	movs	r3, #2
 80023ea:	f240 4174 	movw	r1, #1140	@ 0x474
 80023ee:	6800      	ldr	r0, [r0, #0]
 80023f0:	f00f fd82 	bl	8011ef8 <VL53LX_WriteMulti>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 80023fa:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10c      	bne.n	800241c <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 8002402:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002406:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800240a:	2201      	movs	r2, #1
 800240c:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	f00f fddd 	bl	8011fd0 <VL53LX_WrByte>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 800241c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8002424:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002428:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800242c:	2201      	movs	r2, #1
 800242e:	2185      	movs	r1, #133	@ 0x85
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	f00f fdcd 	bl	8011fd0 <VL53LX_WrByte>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800243c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 8002440:	4618      	mov	r0, r3
 8002442:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop

0800244c <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af04      	add	r7, sp, #16
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8002466:	3320      	adds	r3, #32
 8002468:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 800246e:	2162      	movs	r1, #98	@ 0x62
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f004 f948 	bl	8006706 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2204      	movs	r2, #4
 800247a:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2210      	movs	r2, #16
 8002486:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244
	pres->zone_results.active_zones    = 0;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002492:	2300      	movs	r3, #0
 8002494:	75bb      	strb	r3, [r7, #22]
 8002496:	e01b      	b.n	80024d0 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8002498:	7dba      	ldrb	r2, [r7, #22]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	3308      	adds	r3, #8
 80024ac:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2200      	movs	r2, #0
 80024b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	63da      	str	r2, [r3, #60]	@ 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		pobjects->xmonitor.range_status =
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80024ca:	7dbb      	ldrb	r3, [r7, #22]
 80024cc:	3301      	adds	r3, #1
 80024ce:	75bb      	strb	r3, [r7, #22]
 80024d0:	7dbb      	ldrb	r3, [r7, #22]
 80024d2:	2b0f      	cmp	r3, #15
 80024d4:	d9e0      	bls.n	8002498 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2210      	movs	r2, #16
 80024da:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
	pres->zone_hists.active_zones      = 0;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2689 	strb.w	r2, [r3, #1673]	@ 0x689



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2210      	movs	r2, #16
 80024ea:	f883 279b 	strb.w	r2, [r3, #1947]	@ 0x79b
	pres->zone_cal.active_zones        = 0;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 279c 	strb.w	r2, [r3, #1948]	@ 0x79c
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80024f6:	2300      	movs	r3, #0
 80024f8:	75bb      	strb	r3, [r7, #22]
 80024fa:	e039      	b.n	8002570 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 80024fc:	7dba      	ldrb	r2, [r7, #22]
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8002512:	7dba      	ldrb	r2, [r7, #22]
 8002514:	68f9      	ldr	r1, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f203 73a4 	addw	r3, r3, #1956	@ 0x7a4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8002528:	7dba      	ldrb	r2, [r7, #22]
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 63f5 	add.w	r3, r3, #1960	@ 0x7a8
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 800253e:	7dba      	ldrb	r2, [r7, #22]
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f203 73b4 	addw	r3, r3, #1972	@ 0x7b4
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8002554:	7dba      	ldrb	r2, [r7, #22]
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800256a:	7dbb      	ldrb	r3, [r7, #22]
 800256c:	3301      	adds	r3, #1
 800256e:	75bb      	strb	r3, [r7, #22]
 8002570:	7dbb      	ldrb	r3, [r7, #22]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	d9c2      	bls.n	80024fc <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	221e      	movs	r2, #30
 8002580:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2200      	movs	r2, #0
 8002586:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2200      	movs	r2, #0
 800258c:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2201      	movs	r2, #1
 8002592:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2201      	movs	r2, #1
 8002598:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2201      	movs	r2, #1
 800259e:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025a6:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80025ae:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80025b6:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2264      	movs	r2, #100	@ 0x64
 80025bc:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80025c4:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d4:	2203      	movs	r2, #3
 80025d6:	f883 231a 	strb.w	r2, [r3, #794]	@ 0x31a
	pdev->offset_results.active_results = 0;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 231b 	strb.w	r2, [r3, #795]	@ 0x31b



	pdev->gain_cal.standard_ranging_gain_factor =
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f240 72db 	movw	r2, #2011	@ 0x7db
 80025ec:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 80025f6:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f004 f868 	bl	80066d0 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f503 53e2 	add.w	r3, r3, #7232	@ 0x1c40
 8002606:	3308      	adds	r3, #8
 8002608:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f018 fd8a 	bl	801b128 <memset>
	pdev->bin_rec_pos = 0;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2c44 	strb.w	r2, [r3, #3140]	@ 0xc44
	pdev->pos_before_next_recom = 0;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <VL53LX_data_init+0x1f8>
 8002632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d104      	bne.n	8002644 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f8b8 	bl	80027b0 <VL53LX_read_p2p_data>
 8002640:	4603      	mov	r3, r0
 8002642:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002652:	4618      	mov	r0, r3
 8002654:	f003 f814 	bl	8005680 <VL53LX_init_refspadchar_config_struct>
 8002658:	4603      	mov	r3, r0
 800265a:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 800265c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800266a:	4618      	mov	r0, r3
 800266c:	f003 f82c 	bl	80056c8 <VL53LX_init_ssc_config_struct>
 8002670:	4603      	mov	r3, r0
 8002672:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f003 f83d 	bl	800570a <VL53LX_init_xtalk_config_struct>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d107      	bne.n	80026ac <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 f8a4 	bl	80057f0 <VL53LX_init_xtalk_extract_config_struct>
 80026a8:	4603      	mov	r3, r0
 80026aa:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 80026ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 f8c7 	bl	800584e <VL53LX_init_offset_cal_config_struct>
 80026c0:	4603      	mov	r3, r0
 80026c2:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80026c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d107      	bne.n	80026dc <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 f8e2 	bl	800589c <VL53LX_init_zone_cal_config_struct>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80026dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f893 22d4 	ldrb.w	r2, [r3, #724]	@ 0x2d4
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f003 f8f6 	bl	80058e4 <VL53LX_init_hist_post_process_config_struct>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 80026fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800270a:	4618      	mov	r0, r3
 800270c:	f003 faf5 	bl	8005cfa <VL53LX_init_hist_gen3_dmax_config_struct>
 8002710:	4603      	mov	r3, r0
 8002712:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8002714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <VL53LX_data_init+0x2e0>
		status = VL53LX_init_tuning_parm_storage_struct(
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f94d 	bl	80059c2 <VL53LX_init_tuning_parm_storage_struct>
 8002728:	4603      	mov	r3, r0
 800272a:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 800272c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <VL53LX_data_init+0x316>
		status = VL53LX_set_preset_mode(
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	7858      	ldrb	r0, [r3, #1]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	8b1c      	ldrh	r4, [r3, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	689d      	ldr	r5, [r3, #8]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	6912      	ldr	r2, [r2, #16]
 8002748:	6939      	ldr	r1, [r7, #16]
 800274a:	6949      	ldr	r1, [r1, #20]
 800274c:	9102      	str	r1, [sp, #8]
 800274e:	9201      	str	r2, [sp, #4]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	462b      	mov	r3, r5
 8002754:	4622      	mov	r2, r4
 8002756:	4601      	mov	r1, r0
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fad3 	bl	8002d04 <VL53LX_set_preset_mode>
 800275e:	4603      	mov	r3, r0
 8002760:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 8002768:	461a      	mov	r2, r3
 800276a:	2118      	movs	r1, #24
 800276c:	2000      	movs	r0, #0
 800276e:	f008 fa4a 	bl	800ac06 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8002778:	461a      	mov	r2, r3
 800277a:	2118      	movs	r1, #24
 800277c:	2000      	movs	r0, #0
 800277e:	f008 fa42 	bl	800ac06 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f203 5354 	addw	r3, r3, #1364	@ 0x554
 8002788:	461a      	mov	r2, r3
 800278a:	210c      	movs	r1, #12
 800278c:	2000      	movs	r0, #0
 800278e:	f004 fd22 	bl	80071d6 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f007 fc6c 	bl	800a070 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f007 fb73 	bl	8009e84 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f007 fc90 	bl	800a0c4 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80027a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bdb0      	pop	{r4, r5, r7, pc}

080027b0 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b091      	sub	sp, #68	@ 0x44
 80027b4:	af04      	add	r7, sp, #16
 80027b6:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	3348      	adds	r3, #72	@ 0x48
 80027ce:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	339c      	adds	r3, #156	@ 0x9c
 80027d4:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80027d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <VL53LX_read_p2p_data+0x42>
		status = VL53LX_get_static_nvm_managed(
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80027e4:	4619      	mov	r1, r3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f00b fd89 	bl	800e2fe <VL53LX_get_static_nvm_managed>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 80027f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <VL53LX_read_p2p_data+0x5c>
		status = VL53LX_get_customer_nvm_managed(
 80027fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fc:	3348      	adds	r3, #72	@ 0x48
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f00b feba 	bl	800e57a <VL53LX_get_customer_nvm_managed>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 800280c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002810:	2b00      	cmp	r3, #0
 8002812:	d117      	bne.n	8002844 <VL53LX_read_p2p_data+0x94>

		status = VL53LX_get_nvm_copy_data(
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	f203 33ca 	addw	r3, r3, #970	@ 0x3ca
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f00c fd8f 	bl	800f340 <VL53LX_get_nvm_copy_data>
 8002822:	4603      	mov	r3, r0
 8002824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8002828:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <VL53LX_read_p2p_data+0x94>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	f203 32ca 	addw	r2, r3, #970	@ 0x3ca
 8002836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002838:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f004 fa54 	bl	8006cec <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8002844:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10e      	bne.n	800286a <VL53LX_read_p2p_data+0xba>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	895b      	ldrh	r3, [r3, #10]
 8002850:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	62da      	str	r2, [r3, #44]	@ 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	865a      	strh	r2, [r3, #50]	@ 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 800286a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800286e:	2b00      	cmp	r3, #0
 8002870:	d108      	bne.n	8002884 <VL53LX_read_p2p_data+0xd4>
		status =
			VL53LX_read_nvm_optical_centre(
 8002872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002874:	33c0      	adds	r3, #192	@ 0xc0
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f00b fbf4 	bl	800e066 <VL53LX_read_nvm_optical_centre>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8002884:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <VL53LX_read_p2p_data+0xee>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	3360      	adds	r3, #96	@ 0x60
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f00b fc0a 	bl	800e0ac <VL53LX_read_nvm_cal_peak_rate_map>
 8002898:	4603      	mov	r3, r0
 800289a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 800289e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d12d      	bne.n	8002902 <VL53LX_read_p2p_data+0x152>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 80028a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a8:	339c      	adds	r3, #156	@ 0x9c
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f00b fc23 	bl	800e0f8 <VL53LX_read_nvm_additional_offset_cal_data>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	889b      	ldrh	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d120      	bne.n	8002902 <VL53LX_read_p2p_data+0x152>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11c      	bne.n	8002902 <VL53LX_read_p2p_data+0x152>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2280      	movs	r2, #128	@ 0x80
 80028cc:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028d4:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 80028d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d8:	f893 03fa 	ldrb.w	r0, [r3, #1018]	@ 0x3fa
 80028dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028de:	f893 43fb 	ldrb.w	r4, [r3, #1019]	@ 0x3fb
 80028e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e4:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	69f9      	ldr	r1, [r7, #28]
 80028ec:	3102      	adds	r1, #2
 80028ee:	9103      	str	r1, [sp, #12]
 80028f0:	9202      	str	r2, [sp, #8]
 80028f2:	2238      	movs	r2, #56	@ 0x38
 80028f4:	9201      	str	r2, [sp, #4]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	23ff      	movs	r3, #255	@ 0xff
 80028fa:	22c7      	movs	r2, #199	@ 0xc7
 80028fc:	4621      	mov	r1, r4
 80028fe:	f006 f9f2 	bl	8008ce6 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8002902:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002906:	2b00      	cmp	r3, #0
 8002908:	d12f      	bne.n	800296a <VL53LX_read_p2p_data+0x1ba>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	461a      	mov	r2, r3
 8002910:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f00b fc12 	bl	800e13e <VL53LX_read_nvm_fmt_range_results_data>
 800291a:	4603      	mov	r3, r0
 800291c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8002920:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002924:	2b00      	cmp	r3, #0
 8002926:	d120      	bne.n	800296a <VL53LX_read_p2p_data+0x1ba>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8002928:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8002930:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8002938:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002946:	2b00      	cmp	r3, #0
 8002948:	d006      	beq.n	8002958 <VL53LX_read_p2p_data+0x1a8>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 8002956:	e003      	b.n	8002960 <VL53LX_read_p2p_data+0x1b0>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8002958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295a:	2214      	movs	r2, #20
 800295c:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002966:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 800296a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10b      	bne.n	800298a <VL53LX_read_p2p_data+0x1da>
		status =
			VL53LX_RdWord(
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002978:	331c      	adds	r3, #28
 800297a:	461a      	mov	r2, r3
 800297c:	21de      	movs	r1, #222	@ 0xde
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f00f fbb6 	bl	80120f0 <VL53LX_RdWord>
 8002984:	4603      	mov	r3, r0
 8002986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800298a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298c:	f8b3 3316 	ldrh.w	r3, [r3, #790]	@ 0x316
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d204      	bcs.n	80029a0 <VL53LX_read_p2p_data+0x1f0>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 800299c:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316
	}



	if (status == VL53LX_ERROR_NONE)
 80029a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <VL53LX_read_p2p_data+0x20a>
		status =
			VL53LX_get_mode_mitigation_roi(
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029aa:	33bc      	adds	r3, #188	@ 0xbc
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f914 	bl	8002bdc <VL53LX_get_mode_mitigation_roi>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d114      	bne.n	80029ee <VL53LX_read_p2p_data+0x23e>
		pdev->optical_centre.y_centre == 0) {
 80029c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <VL53LX_read_p2p_data+0x23e>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80029ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80029d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029da:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80029de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e0:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80029e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ea:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80029ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3734      	adds	r7, #52	@ 0x34
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}

080029fa <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a12:	f8b3 339c 	ldrh.w	r3, [r3, #924]	@ 0x39c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <VL53LX_set_inter_measurement_period_ms+0x24>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8002a1a:	23f1      	movs	r3, #241	@ 0xf1
 8002a1c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10e      	bne.n	8002a44 <VL53LX_set_inter_measurement_period_ms+0x4a>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a32:	f8b3 339c 	ldrh.w	r3, [r3, #924]	@ 0x39c
 8002a36:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	}

	LOG_FUNCTION_END(status);

	return status;
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f8b3 3316 	ldrh.w	r3, [r3, #790]	@ 0x316
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <VL53LX_set_timeouts_us+0x24>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8002a74:	23f1      	movs	r3, #241	@ 0xf1
 8002a76:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8002a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11b      	bne.n	8002ab8 <VL53LX_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f8b3 1316 	ldrh.w	r1, [r3, #790]	@ 0x316
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	f502 725b 	add.w	r2, r2, #876	@ 0x36c
 8002aa4:	9201      	str	r2, [sp, #4]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68b8      	ldr	r0, [r7, #8]
 8002ab0:	f004 fefb 	bl	80078aa <VL53LX_calc_timeout_register_values>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8002ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f8b3 3316 	ldrh.w	r3, [r3, #790]	@ 0x316
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <VL53LX_get_timeouts_us+0x2c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8002aec:	23f1      	movs	r3, #241	@ 0xf1
 8002aee:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8002af0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d148      	bne.n	8002b8a <VL53LX_get_timeouts_us+0xc6>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f8b3 2316 	ldrh.w	r2, [r3, #790]	@ 0x316
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f893 3372 	ldrb.w	r3, [r3, #882]	@ 0x372
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f004 fd48 	bl	800759c <VL53LX_calc_macro_period_us>
 8002b0c:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f893 335d 	ldrb.w	r3, [r3, #861]	@ 0x35d
			VL53LX_calc_timeout_us(
 8002b14:	6979      	ldr	r1, [r7, #20]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 fe07 	bl	800772a <VL53LX_calc_timeout_us>
 8002b1c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f893 336c 	ldrb.w	r3, [r3, #876]	@ 0x36c
		timeout_encoded =
 8002b28:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8002b2a:	8a7b      	ldrh	r3, [r7, #18]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	f892 236d 	ldrb.w	r2, [r2, #877]	@ 0x36d
		timeout_encoded = (timeout_encoded << 8) +
 8002b36:	4413      	add	r3, r2
 8002b38:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8002b3a:	8a7b      	ldrh	r3, [r7, #18]
 8002b3c:	6979      	ldr	r1, [r7, #20]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 fe5a 	bl	80077f8 <VL53LX_calc_decoded_timeout_us>
 8002b44:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f893 3370 	ldrb.w	r3, [r3, #880]	@ 0x370
		timeout_encoded =
 8002b50:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8002b52:	8a7b      	ldrh	r3, [r7, #18]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	b29b      	uxth	r3, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	f892 2371 	ldrb.w	r2, [r2, #881]	@ 0x371
		timeout_encoded = (timeout_encoded << 8) +
 8002b5e:	4413      	add	r3, r2
 8002b60:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8002b62:	8a7b      	ldrh	r3, [r7, #18]
 8002b64:	6979      	ldr	r1, [r7, #20]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 fe46 	bl	80077f8 <VL53LX_calc_decoded_timeout_us>
 8002b6c:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8002b8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	7858      	ldrb	r0, [r3, #1]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	7819      	ldrb	r1, [r3, #0]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f203 3393 	addw	r3, r3, #915	@ 0x393
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f005 ff14 	bl	80089e4 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	7898      	ldrb	r0, [r3, #2]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	78d9      	ldrb	r1, [r3, #3]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f005 ff49 	bl	8008a62 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8002bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f893 33fa 	ldrb.w	r3, [r3, #1018]	@ 0x3fa
 8002c00:	f107 020e 	add.w	r2, r7, #14
 8002c04:	f107 010d 	add.w	r1, r7, #13
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f008 f8a5 	bl	800ad58 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8002c0e:	7bba      	ldrb	r2, [r7, #14]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8002c14:	7b7a      	ldrb	r2, [r7, #13]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f893 33fb 	ldrb.w	r3, [r3, #1019]	@ 0x3fb
 8002c20:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8002c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	460b      	mov	r3, r1
 8002c52:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
 8002c5e:	2b21      	cmp	r3, #33	@ 0x21
 8002c60:	d030      	beq.n	8002cc4 <VL53LX_get_preset_mode_timing_cfg+0x80>
 8002c62:	2b21      	cmp	r3, #33	@ 0x21
 8002c64:	dc43      	bgt.n	8002cee <VL53LX_get_preset_mode_timing_cfg+0xaa>
 8002c66:	2b1b      	cmp	r3, #27
 8002c68:	d002      	beq.n	8002c70 <VL53LX_get_preset_mode_timing_cfg+0x2c>
 8002c6a:	2b1e      	cmp	r3, #30
 8002c6c:	d015      	beq.n	8002c9a <VL53LX_get_preset_mode_timing_cfg+0x56>
 8002c6e:	e03e      	b.n	8002cee <VL53LX_get_preset_mode_timing_cfg+0xaa>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
		*pdss_config__target_total_rate_mcps =
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
		*pphasecal_config_timeout_us =
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
		*pmm_config_timeout_us =
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
		*prange_config_timeout_us =
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	601a      	str	r2, [r3, #0]

	break;
 8002c98:	e02c      	b.n	8002cf4 <VL53LX_get_preset_mode_timing_cfg+0xb0>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
		*pdss_config__target_total_rate_mcps =
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
		*pphasecal_config_timeout_us =
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
		*pmm_config_timeout_us =
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
		*prange_config_timeout_us =
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	601a      	str	r2, [r3, #0]
	break;
 8002cc2:	e017      	b.n	8002cf4 <VL53LX_get_preset_mode_timing_cfg+0xb0>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
		*pdss_config__target_total_rate_mcps =
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
		*pphasecal_config_timeout_us =
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
		*pmm_config_timeout_us =
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
		*prange_config_timeout_us =
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	601a      	str	r2, [r3, #0]
	break;
 8002cec:	e002      	b.n	8002cf4 <VL53LX_get_preset_mode_timing_cfg+0xb0>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002cee:	23fc      	movs	r3, #252	@ 0xfc
 8002cf0:	75fb      	strb	r3, [r7, #23]
		break;
 8002cf2:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8002cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b096      	sub	sp, #88	@ 0x58
 8002d08:	af06      	add	r7, sp, #24
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	72fb      	strb	r3, [r7, #11]
 8002d12:	4613      	mov	r3, r2
 8002d14:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53LX_LLDriverData_t *pdev =
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8002d26:	3320      	adds	r3, #32
 8002d28:	637b      	str	r3, [r7, #52]	@ 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d2c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8002d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d34:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8002d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8002d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d44:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8002d50:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8002d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d54:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8002d58:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5c:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8002d60:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	33c2      	adds	r3, #194	@ 0xc2
 8002d66:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8002d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002d6e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8002d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d72:	7afa      	ldrb	r2, [r7, #11]
 8002d74:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8002d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d7a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d80:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002d86:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8002d88:	2103      	movs	r1, #3
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f003 fcbb 	bl	8006706 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8002d90:	7afb      	ldrb	r3, [r7, #11]
 8002d92:	2b21      	cmp	r3, #33	@ 0x21
 8002d94:	d02e      	beq.n	8002df4 <VL53LX_set_preset_mode+0xf0>
 8002d96:	2b21      	cmp	r3, #33	@ 0x21
 8002d98:	dc40      	bgt.n	8002e1c <VL53LX_set_preset_mode+0x118>
 8002d9a:	2b1b      	cmp	r3, #27
 8002d9c:	d002      	beq.n	8002da4 <VL53LX_set_preset_mode+0xa0>
 8002d9e:	2b1e      	cmp	r3, #30
 8002da0:	d014      	beq.n	8002dcc <VL53LX_set_preset_mode+0xc8>
 8002da2:	e03b      	b.n	8002e1c <VL53LX_set_preset_mode+0x118>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	9304      	str	r3, [sp, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	9303      	str	r3, [sp, #12]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dc0:	f003 f9df 	bl	8006182 <VL53LX_preset_mode_histogram_long_range>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8002dca:	e02b      	b.n	8002e24 <VL53LX_set_preset_mode+0x120>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	9304      	str	r3, [sp, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	9303      	str	r3, [sp, #12]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	9302      	str	r3, [sp, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002de4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002de6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002de8:	f003 fa69 	bl	80062be <VL53LX_preset_mode_histogram_medium_range>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8002df2:	e017      	b.n	8002e24 <VL53LX_set_preset_mode+0x120>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	9304      	str	r3, [sp, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	9303      	str	r3, [sp, #12]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	9302      	str	r3, [sp, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e10:	f003 faf3 	bl	80063fa <VL53LX_preset_mode_histogram_short_range>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8002e1a:	e003      	b.n	8002e24 <VL53LX_set_preset_mode+0x120>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002e1c:	23fc      	movs	r3, #252	@ 0xfc
 8002e1e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		break;
 8002e22:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8002e24:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <VL53LX_set_preset_mode+0x134>

		pstatic->dss_config__target_total_rate_mcps =
 8002e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2e:	893a      	ldrh	r2, [r7, #8]
 8002e30:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8002e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8002e38:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d108      	bne.n	8002e52 <VL53LX_set_preset_mode+0x14e>
		status =
			VL53LX_set_timeouts_us(
 8002e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fe04 	bl	8002a54 <VL53LX_set_timeouts_us>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8002e52:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <VL53LX_set_preset_mode+0x164>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8002e5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff fdcc 	bl	80029fa <VL53LX_set_inter_measurement_period_ms>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8002e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
	V53L1_init_zone_results_structure(
 8002e6e:	3301      	adds	r3, #1
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f004 f856 	bl	8006f2c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8002e80:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3740      	adds	r7, #64	@ 0x40
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b0d2      	sub	sp, #328	@ 0x148
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002e96:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e9a:	6018      	str	r0, [r3, #0]
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ea4:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002eb0:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002ebe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ec2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	VL53LX_LLDriverResults_t  *pres =
 8002ecc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ed0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8002eda:	3320      	adds	r3, #32
 8002edc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8002ee0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002ee4:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8002ee8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8002eec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002ef0:	3348      	adds	r3, #72	@ 0x48
 8002ef2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8002ef6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002efa:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8002efe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8002f02:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f06:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8002f0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8002f0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f12:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8002f16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8002f1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f1e:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8002f22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8002f26:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f2a:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8002f2e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8002f32:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f36:	332c      	adds	r3, #44	@ 0x2c
 8002f38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8002f3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f40:	3348      	adds	r3, #72	@ 0x48
 8002f42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint16_t i                          = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t i2c_index                  = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8002f66:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f6a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002f6e:	f2a2 1245 	subw	r2, r2, #325	@ 0x145
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8002f76:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f7a:	791b      	ldrb	r3, [r3, #4]
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8002f84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f88:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8002f8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8002f96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f9a:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8002f9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002fa0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
		VL53LX_set_user_zone(
 8002fa4:	3336      	adds	r3, #54	@ 0x36
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8002fac:	4413      	add	r3, r2
 8002fae:	1d9a      	adds	r2, r3, #6
 8002fb0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002fb4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fb8:	4611      	mov	r1, r2
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	f7ff fdeb 	bl	8002b96 <VL53LX_set_user_zone>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8002fc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002fca:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d019      	beq.n	8003006 <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8002fd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002fd6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002fda:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002fe8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002fec:	4413      	add	r3, r2
 8002fee:	1c9a      	adds	r2, r3, #2
 8002ff0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ff4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	f001 fb66 	bl	80046cc <VL53LX_set_zone_dss_config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8003006:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800300a:	f893 339c 	ldrb.w	r3, [r3, #924]	@ 0x39c
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8003016:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800301a:	f893 32d4 	ldrb.w	r3, [r3, #724]	@ 0x2d4
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003022:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003026:	f8b3 22dc 	ldrh.w	r2, [r3, #732]	@ 0x2dc
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800302a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800302e:	f8a3 234e 	strh.w	r2, [r3, #846]	@ 0x34e





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8003032:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800303a:	f893 342a 	ldrb.w	r3, [r3, #1066]	@ 0x42a
 800303e:	2bff      	cmp	r3, #255	@ 0xff
 8003040:	d106      	bne.n	8003050 <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8003042:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800304a:	2200      	movs	r2, #0
 800304c:	f883 242a 	strb.w	r2, [r3, #1066]	@ 0x42a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003050:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003058:	f893 3429 	ldrb.w	r3, [r3, #1065]	@ 0x429
 800305c:	2b01      	cmp	r3, #1
 800305e:	d139      	bne.n	80030d4 <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8003060:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003068:	f893 342a 	ldrb.w	r3, [r3, #1066]	@ 0x42a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800306c:	2b00      	cmp	r3, #0
 800306e:	d131      	bne.n	80030d4 <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8003070:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003074:	f893 2358 	ldrb.w	r2, [r3, #856]	@ 0x358
		pdev->low_power_auto_data.saved_interrupt_config =
 8003078:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800307c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003080:	f883 242b 	strb.w	r2, [r3, #1067]	@ 0x42b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8003084:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

		if ((pdev->dyn_cfg.system__sequence_config & (
 800308e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003092:	f893 3395 	ldrb.w	r3, [r3, #917]	@ 0x395
 8003096:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 800309e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030a2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80030a6:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 80030a8:	b21a      	sxth	r2, r3
 80030aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030ae:	825a      	strh	r2, [r3, #18]
 80030b0:	e003      	b.n	80030ba <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 80030b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030b6:	2200      	movs	r2, #0
 80030b8:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 80030ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80030be:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d805      	bhi.n	80030d4 <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80030c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80030cc:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80030d0:	2205      	movs	r2, #5
 80030d2:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80030d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030dc:	f893 3429 	ldrb.w	r3, [r3, #1065]	@ 0x429
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d117      	bne.n	8003114 <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80030e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ec:	f893 342a 	ldrb.w	r3, [r3, #1066]	@ 0x42a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10f      	bne.n	8003114 <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80030f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030fc:	f893 242b 	ldrb.w	r2, [r3, #1067]	@ 0x42b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8003100:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003104:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8003108:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800310c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003110:	2206      	movs	r2, #6
 8003112:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8003114:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 800311c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003120:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	f005 ff48 	bl	8008fba <VL53LX_save_cfg_data>
 800312a:	4603      	mov	r3, r0
 800312c:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147



	switch (device_config_level) {
 8003130:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003134:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	3b01      	subs	r3, #1
 800313c:	2b05      	cmp	r3, #5
 800313e:	d827      	bhi.n	8003190 <VL53LX_init_and_start_range+0x304>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <VL53LX_init_and_start_range+0x2bc>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003189 	.word	0x08003189
 800314c:	08003181 	.word	0x08003181
 8003150:	08003179 	.word	0x08003179
 8003154:	08003171 	.word	0x08003171
 8003158:	08003169 	.word	0x08003169
 800315c:	08003161 	.word	0x08003161
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8003160:	2301      	movs	r3, #1
 8003162:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003166:	e017      	b.n	8003198 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8003168:	230d      	movs	r3, #13
 800316a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800316e:	e013      	b.n	8003198 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8003170:	2324      	movs	r3, #36	@ 0x24
 8003172:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003176:	e00f      	b.n	8003198 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8003178:	2344      	movs	r3, #68	@ 0x44
 800317a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800317e:	e00b      	b.n	8003198 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8003180:	235a      	movs	r3, #90	@ 0x5a
 8003182:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003186:	e007      	b.n	8003198 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8003188:	2371      	movs	r3, #113	@ 0x71
 800318a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 800318e:	e003      	b.n	8003198 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8003190:	2383      	movs	r3, #131	@ 0x83
 8003192:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		break;
 8003196:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8003198:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800319c:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80031a0:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 80031b2:	e00b      	b.n	80031cc <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 80031b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80031c2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80031c6:	3301      	adds	r3, #1
 80031c8:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 80031cc:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 80031d0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3ed      	bcc.n	80031b4 <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80031d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80031dc:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d917      	bls.n	8003216 <VL53LX_init_and_start_range+0x38a>
 80031e6:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d113      	bne.n	8003216 <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80031ee:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80031f2:	f1c3 0301 	rsb	r3, r3, #1
 80031f6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80031fa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 80031fe:	f107 020c 	add.w	r2, r7, #12
 8003202:	4413      	add	r3, r2
 8003204:	461a      	mov	r2, r3
 8003206:	210b      	movs	r1, #11
 8003208:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800320c:	f00a ffc2 	bl	800e194 <VL53LX_i2c_encode_static_nvm_managed>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8003216:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800321a:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d917      	bls.n	8003254 <VL53LX_init_and_start_range+0x3c8>
 8003224:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003228:	2b00      	cmp	r3, #0
 800322a:	d113      	bne.n	8003254 <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800322c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003230:	f1c3 030d 	rsb	r3, r3, #13
 8003234:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003238:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 800323c:	f107 020c 	add.w	r2, r7, #12
 8003240:	4413      	add	r3, r2
 8003242:	461a      	mov	r2, r3
 8003244:	2117      	movs	r1, #23
 8003246:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800324a:	f00b f87f 	bl	800e34c <VL53LX_i2c_encode_customer_nvm_managed>
 800324e:	4603      	mov	r3, r0
 8003250:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8003254:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003258:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d917      	bls.n	8003292 <VL53LX_init_and_start_range+0x406>
 8003262:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003266:	2b00      	cmp	r3, #0
 8003268:	d113      	bne.n	8003292 <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800326a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800326e:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003272:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003276:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_static_config(
 800327a:	f107 020c 	add.w	r2, r7, #12
 800327e:	4413      	add	r3, r2
 8003280:	461a      	mov	r2, r3
 8003282:	2120      	movs	r1, #32
 8003284:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8003288:	f00b f9c2 	bl	800e610 <VL53LX_i2c_encode_static_config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8003292:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003296:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d917      	bls.n	80032d0 <VL53LX_init_and_start_range+0x444>
 80032a0:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d113      	bne.n	80032d0 <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80032a8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80032ac:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80032b0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80032b4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_general_config(
 80032b8:	f107 020c 	add.w	r2, r7, #12
 80032bc:	4413      	add	r3, r2
 80032be:	461a      	mov	r2, r3
 80032c0:	2116      	movs	r1, #22
 80032c2:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80032c6:	f00b fa86 	bl	800e7d6 <VL53LX_i2c_encode_general_config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80032d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032d4:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d917      	bls.n	800330e <VL53LX_init_and_start_range+0x482>
 80032de:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d113      	bne.n	800330e <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80032e6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80032ea:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80032ee:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80032f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_timing_config(
 80032f6:	f107 020c 	add.w	r2, r7, #12
 80032fa:	4413      	add	r3, r2
 80032fc:	461a      	mov	r2, r3
 80032fe:	2117      	movs	r1, #23
 8003300:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003304:	f00b faeb 	bl	800e8de <VL53LX_i2c_encode_timing_config>
 8003308:	4603      	mov	r3, r0
 800330a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800330e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003312:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d036      	beq.n	800338a <VL53LX_init_and_start_range+0x4fe>
 800331c:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003320:	2b00      	cmp	r3, #0
 8003322:	d132      	bne.n	800338a <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003324:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003328:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 800332c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8003330:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003334:	791b      	ldrb	r3, [r3, #4]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d017      	beq.n	800336e <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	b2da      	uxtb	r2, r3
 800334a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800334e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003354:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	b2da      	uxtb	r2, r3
 800335c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003360:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003366:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8003368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800336c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800336e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8003372:	f107 020c 	add.w	r2, r7, #12
 8003376:	4413      	add	r3, r2
 8003378:	461a      	mov	r2, r3
 800337a:	2112      	movs	r1, #18
 800337c:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8003380:	f00b fb2f 	bl	800e9e2 <VL53LX_i2c_encode_dynamic_config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 800338a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800338e:	2b00      	cmp	r3, #0
 8003390:	d113      	bne.n	80033ba <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8003392:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8003396:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 800339a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800339e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53LX_i2c_encode_system_control(
 80033a2:	f107 020c 	add.w	r2, r7, #12
 80033a6:	4413      	add	r3, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	2105      	movs	r1, #5
 80033ac:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80033b0:	f00b fb9c 	bl	800eaec <VL53LX_i2c_encode_system_control>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 80033ba:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 80033c2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80033c6:	f107 020c 	add.w	r2, r7, #12
 80033ca:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 80033ce:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80033d2:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 80033d6:	6800      	ldr	r0, [r0, #0]
 80033d8:	f00e fd8e 	bl	8011ef8 <VL53LX_WriteMulti>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 80033e2:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 80033ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	f003 f9b6 	bl	8006764 <VL53LX_update_ll_driver_rd_state>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	if (status == VL53LX_ERROR_NONE)
 80033fe:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8003406:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800340a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	f003 fb46 	bl	8006aa0 <VL53LX_update_ll_driver_cfg_state>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	LOG_FUNCTION_END(status);

	return status;
 800341a:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 800341e:	4618      	mov	r0, r3
 8003420:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b0c8      	sub	sp, #288	@ 0x120
 800342c:	af00      	add	r7, sp, #0
 800342e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003432:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003436:	6018      	str	r0, [r3, #0]
 8003438:	460a      	mov	r2, r1
 800343a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800343e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003442:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800344a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800344e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8003458:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800345c:	f203 339e 	addw	r3, r3, #926	@ 0x39e
 8003460:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8003464:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003468:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 800346c:	3310      	adds	r3, #16
 800346e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8003472:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003476:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800347a:	3314      	adds	r3, #20
 800347c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8003480:	2388      	movs	r3, #136	@ 0x88
 8003482:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8003492:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003496:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d008      	beq.n	80034b2 <VL53LX_get_measurement_results+0x8a>
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d10d      	bne.n	80034c0 <VL53LX_get_measurement_results+0x98>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80034a4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80034a8:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 80034ac:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80034b0:	e00a      	b.n	80034c8 <VL53LX_get_measurement_results+0xa0>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80034b2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80034b6:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80034ba:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80034be:	e003      	b.n	80034c8 <VL53LX_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 80034c0:	232c      	movs	r3, #44	@ 0x2c
 80034c2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80034c6:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80034c8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10f      	bne.n	80034f0 <VL53LX_get_measurement_results+0xc8>
		status =
			VL53LX_ReadMulti(
 80034d0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80034d4:	f107 0208 	add.w	r2, r7, #8
 80034d8:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 80034dc:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80034e0:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 80034e4:	6800      	ldr	r0, [r0, #0]
 80034e6:	f00e fd3d 	bl	8011f64 <VL53LX_ReadMulti>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 80034f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034f4:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d917      	bls.n	800352e <VL53LX_get_measurement_results+0x106>
 80034fe:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <VL53LX_get_measurement_results+0x106>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003506:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800350a:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 800350e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003512:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_debug_results(
 8003516:	f107 0208 	add.w	r2, r7, #8
 800351a:	4413      	add	r3, r2
 800351c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003520:	4619      	mov	r1, r3
 8003522:	2038      	movs	r0, #56	@ 0x38
 8003524:	f00b fc74 	bl	800ee10 <VL53LX_i2c_decode_debug_results>
 8003528:	4603      	mov	r3, r0
 800352a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 800352e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003532:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d017      	beq.n	800356c <VL53LX_get_measurement_results+0x144>
 800353c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003540:	2b00      	cmp	r3, #0
 8003542:	d113      	bne.n	800356c <VL53LX_get_measurement_results+0x144>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003544:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8003548:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 800354c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003550:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_core_results(
 8003554:	f107 0208 	add.w	r2, r7, #8
 8003558:	4413      	add	r3, r2
 800355a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800355e:	4619      	mov	r1, r3
 8003560:	2021      	movs	r0, #33	@ 0x21
 8003562:	f00b fbf4 	bl	800ed4e <VL53LX_i2c_decode_core_results>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 800356c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003570:	2b00      	cmp	r3, #0
 8003572:	d110      	bne.n	8003596 <VL53LX_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800357a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53LX_i2c_decode_system_results(
 800357e:	f107 0208 	add.w	r2, r7, #8
 8003582:	4413      	add	r3, r2
 8003584:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003588:	4619      	mov	r1, r3
 800358a:	202c      	movs	r0, #44	@ 0x2c
 800358c:	f00b fae9 	bl	800eb62 <VL53LX_i2c_decode_system_results>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8003596:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 800359a:	4618      	mov	r0, r3
 800359c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80035a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a8:	b0a0      	sub	sp, #128	@ 0x80
 80035aa:	af06      	add	r7, sp, #24
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	460b      	mov	r3, r1
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	VL53LX_LLDriverData_t *pdev =
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	663b      	str	r3, [r7, #96]	@ 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 80035c4:	3320      	adds	r3, #32
 80035c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80035c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ca:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80035cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ce:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80035d2:	657b      	str	r3, [r7, #84]	@ 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80035d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035d6:	332c      	adds	r3, #44	@ 0x2c
 80035d8:	653b      	str	r3, [r7, #80]	@ 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80035da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035dc:	33c2      	adds	r3, #194	@ 0xc2
 80035de:	64fb      	str	r3, [r7, #76]	@ 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80035e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e2:	f203 638c 	addw	r3, r3, #1676	@ 0x68c
 80035e6:	64bb      	str	r3, [r7, #72]	@ 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	647b      	str	r3, [r7, #68]	@ 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80035ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035f0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80035f4:	643b      	str	r3, [r7, #64]	@ 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80035f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035f8:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80035fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80035fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003600:	f503 53a1 	add.w	r3, r3, #5152	@ 0x1420
 8003604:	3308      	adds	r3, #8
 8003606:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8003608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800360a:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003612:	3348      	adds	r3, #72	@ 0x48
 8003614:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8003616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003618:	f503 63d1 	add.w	r3, r3, #1672	@ 0x688
 800361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800361e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003620:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 8003624:	3314      	adds	r3, #20
 8003626:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8003628:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800362a:	f893 339c 	ldrb.w	r3, [r3, #924]	@ 0x39c
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8292 	beq.w	8003b5c <VL53LX_get_device_results+0x5b8>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8003638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800363a:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800363e:	4619      	mov	r1, r3
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fbcd 	bl	8003de0 <VL53LX_get_histogram_bin_data>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 800364c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003650:	2b00      	cmp	r3, #0
 8003652:	d118      	bne.n	8003686 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8003654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003656:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d114      	bne.n	8003686 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 800365c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800365e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8003666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800366e:	4413      	add	r3, r2
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003674:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f004 f98e 	bl	800799c <VL53LX_hist_copy_and_scale_ambient_info>
 8003680:	4603      	mov	r3, r0
 8003682:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8003686:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 8208 	bne.w	8003aa0 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8003690:	f107 0313 	add.w	r3, r7, #19
 8003694:	4619      	mov	r1, r3
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f006 fe34 	bl	800a304 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80036a2:	2301      	movs	r3, #1
 80036a4:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80036ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b0:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80036b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80036bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036be:	3202      	adds	r2, #2
 80036c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80036c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c6:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80036c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ca:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
		pHP->gain_factor =
 80036ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d0:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80036d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f004 f864 	bl	80077ac <VL53LX_calc_crosstalk_plane_offset_with_margin>
 80036e4:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80036e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80036ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ec:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80036f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f2:	861a      	strh	r2, [r3, #48]	@ 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80036f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80036fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036fc:	865a      	strh	r2, [r3, #50]	@ 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80036fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003700:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8003702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003704:	f883 228d 	strb.w	r2, [r3, #653]	@ 0x28d
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8003708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800370a:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 800370c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800370e:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8003712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003714:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8003716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003718:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 800371c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800371e:	f8b3 2336 	ldrh.w	r2, [r3, #822]	@ 0x336
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8003722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003724:	f8a3 22a4 	strh.w	r2, [r3, #676]	@ 0x2a4
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8003728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800372a:	f893 2369 	ldrb.w	r2, [r3, #873]	@ 0x369
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800372e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003730:	f883 22a6 	strb.w	r2, [r3, #678]	@ 0x2a6

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8003734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003736:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 800373a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373c:	86da      	strh	r2, [r3, #54]	@ 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800373e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003740:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8003744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003746:	869a      	strh	r2, [r3, #52]	@ 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8003748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374a:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 800374c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374e:	871a      	strh	r2, [r3, #56]	@ 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8003750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003752:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8003754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003756:	875a      	strh	r2, [r3, #58]	@ 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8003758:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800375a:	f203 32ca 	addw	r2, r3, #970	@ 0x3ca
 800375e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003760:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f003 fac0 	bl	8006cec <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 800376c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800376e:	795b      	ldrb	r3, [r3, #5]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d002      	beq.n	800377a <VL53LX_get_device_results+0x1d6>
 8003774:	2b03      	cmp	r3, #3
 8003776:	d02e      	beq.n	80037d6 <VL53LX_get_device_results+0x232>
 8003778:	e03d      	b.n	80037f6 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 800377a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800377c:	f893 3369 	ldrb.w	r3, [r3, #873]	@ 0x369
 8003780:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8003790:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003792:	f893 e3fa 	ldrb.w	lr, [r3, #1018]	@ 0x3fa
 8003796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003798:	f893 83fb 	ldrb.w	r8, [r3, #1019]	@ 0x3fb
 800379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379e:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80037a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037a4:	f892 20a9 	ldrb.w	r2, [r2, #169]	@ 0xa9
 80037a8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80037aa:	319c      	adds	r1, #156	@ 0x9c
 80037ac:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80037ae:	f500 7004 	add.w	r0, r0, #528	@ 0x210
 80037b2:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
 80037b6:	b2a4      	uxth	r4, r4
 80037b8:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 80037ba:	351c      	adds	r5, #28
 80037bc:	9505      	str	r5, [sp, #20]
 80037be:	9404      	str	r4, [sp, #16]
 80037c0:	9003      	str	r0, [sp, #12]
 80037c2:	9102      	str	r1, [sp, #8]
 80037c4:	9201      	str	r2, [sp, #4]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	4643      	mov	r3, r8
 80037ca:	4672      	mov	r2, lr
 80037cc:	4661      	mov	r1, ip
 80037ce:	4630      	mov	r0, r6
 80037d0:	f005 f858 	bl	8008884 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80037d4:	e013      	b.n	80037fe <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80037d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d8:	331c      	adds	r3, #28
 80037da:	4619      	mov	r1, r3
 80037dc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80037de:	f7fe faa5 	bl	8001d2c <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80037e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	b21a      	sxth	r2, r3
 80037f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f2:	839a      	strh	r2, [r3, #28]
		break;
 80037f4:	e003      	b.n	80037fe <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 80037f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f8:	2200      	movs	r2, #0
 80037fa:	839a      	strh	r2, [r3, #28]
		break;
 80037fc:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 80037fe:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 814e 	bne.w	8003aa4 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8003808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380a:	f893 00a8 	ldrb.w	r0, [r3, #168]	@ 0xa8
 800380e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003810:	f893 10a9 	ldrb.w	r1, [r3, #169]	@ 0xa9
 8003814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003816:	f503 7204 	add.w	r2, r3, #528	@ 0x210
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 800381a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800381c:	f893 3369 	ldrb.w	r3, [r3, #873]	@ 0x369
		VL53LX_calc_max_effective_spads(
 8003820:	461c      	mov	r4, r3
 8003822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003824:	f203 23a2 	addw	r3, r3, #674	@ 0x2a2
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4623      	mov	r3, r4
 800382c:	f005 f9cd 	bl	8008bca <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8003830:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003832:	799b      	ldrb	r3, [r3, #6]
 8003834:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003836:	4619      	mov	r1, r3
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 ff82 	bl	8004742 <VL53LX_get_dmax_calibration_data>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8003844:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 812d 	bne.w	8003aa8 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 800384e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003850:	f503 7523 	add.w	r5, r3, #652	@ 0x28c
 8003854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003856:	f503 7613 	add.w	r6, r3, #588	@ 0x24c
 800385a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800385c:	f503 717f 	add.w	r1, r3, #1020	@ 0x3fc
 8003860:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003862:	f203 5054 	addw	r0, r3, #1364	@ 0x554
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8003866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003868:	f503 53a1 	add.w	r3, r3, #5152	@ 0x1420
 800386c:	3318      	adds	r3, #24
				pdev->wArea2,
 800386e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003870:	f502 52d1 	add.w	r2, r2, #6688	@ 0x1a20
 8003874:	3218      	adds	r2, #24
		status = VL53LX_ipp_hist_process_data(
 8003876:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8003878:	9405      	str	r4, [sp, #20]
 800387a:	f107 0413 	add.w	r4, r7, #19
 800387e:	9404      	str	r4, [sp, #16]
 8003880:	9203      	str	r2, [sp, #12]
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	9001      	str	r0, [sp, #4]
 8003886:	9100      	str	r1, [sp, #0]
 8003888:	4633      	mov	r3, r6
 800388a:	462a      	mov	r2, r5
 800388c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f00e fd56 	bl	8012340 <VL53LX_ipp_hist_process_data>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800389a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800389c:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d150      	bne.n	8003946 <VL53LX_get_device_results+0x3a2>
			(histo_merge_nb > 1))
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d94d      	bls.n	8003946 <VL53LX_get_device_results+0x3a2>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80038b0:	e045      	b.n	800393e <VL53LX_get_device_results+0x39a>
			pdata = &(presults->VL53LX_p_003[i]);
 80038b2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80038b6:	224c      	movs	r2, #76	@ 0x4c
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	3310      	adds	r3, #16
 80038be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	7cfa      	ldrb	r2, [r7, #19]
 80038cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	7cfa      	ldrb	r2, [r7, #19]
 80038da:	fbb3 f2f2 	udiv	r2, r3, r2
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	7cfa      	ldrb	r2, [r7, #19]
 80038e8:	fb93 f2f2 	sdiv	r2, r3, r2
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80038f4:	461a      	mov	r2, r3
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003906:	461a      	mov	r2, r3
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	fb92 f3f3 	sdiv	r3, r2, r3
 800390e:	b29a      	uxth	r2, r3
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003918:	461a      	mov	r2, r3
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003920:	b29a      	uxth	r2, r3
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	7cfa      	ldrb	r2, [r7, #19]
 800392c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	639a      	str	r2, [r3, #56]	@ 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003934:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003938:	3301      	adds	r3, #1
 800393a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800393e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003942:	2b03      	cmp	r3, #3
 8003944:	d9b5      	bls.n	80038b2 <VL53LX_get_device_results+0x30e>
		}


		if (status != VL53LX_ERROR_NONE)
 8003946:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 80ae 	bne.w	8003aac <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8003950:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003952:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8003956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003958:	f503 717f 	add.w	r1, r3, #1020	@ 0x3fc
 800395c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800395e:	330e      	adds	r3, #14
 8003960:	461a      	mov	r2, r3
 8003962:	f004 ff59 	bl	8008818 <VL53LX_hist_wrap_dmax>
 8003966:	4603      	mov	r3, r0
 8003968:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 800396c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 809d 	bne.w	8003ab0 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8003976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003978:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800397c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8003980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003988:	4413      	add	r3, r2
 800398a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 800398c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_phase_consistency_check(
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800399c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800399e:	4413      	add	r3, r2
 80039a0:	f103 0208 	add.w	r2, r3, #8
 80039a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f004 fa56 	bl	8007e58 <VL53LX_hist_phase_consistency_check>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80039b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d17c      	bne.n	8003ab4 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80039ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80039c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80039c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039cc:	4413      	add	r3, r2
 80039ce:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80039d0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80039e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80039e2:	4413      	add	r3, r2
 80039e4:	f103 0208 	add.w	r2, r3, #8
 80039e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ea:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f004 febb 	bl	800876a <VL53LX_hist_xmonitor_consistency_check>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 80039fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d15a      	bne.n	8003ab8 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8003a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a04:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	2210      	movs	r2, #16
 8003a10:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8003a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a14:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8003a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1e:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8003a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a22:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003a26:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8003a28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a2a:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
		if (zid <
 8003a2e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d222      	bcs.n	8003a7c <VL53LX_get_device_results+0x4d8>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8003a36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			phist_info =
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a3e:	4413      	add	r3, r2
 8003a40:	3304      	adds	r3, #4
 8003a42:	64bb      	str	r3, [r7, #72]	@ 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8003a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a46:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8003a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a4a:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8003a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a52:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8003a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a56:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
			phist_info->result__dss_actual_effective_spads =
 8003a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a5c:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a60:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
			phist_info->VL53LX_p_005 =
 8003a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a66:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
			phist_info->total_periods_elapsed =
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a70:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8003a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a74:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			phist_info->ambient_events_sum =
 8003a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a7a:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8003a7c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11b      	bne.n	8003abc <VL53LX_get_device_results+0x518>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8003a84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a86:	f503 707f 	add.w	r0, r3, #1020	@ 0x3fc
 8003a8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a8c:	f203 329e 	addw	r2, r3, #926	@ 0x39e
 8003a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a92:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 8003a96:	3310      	adds	r3, #16
 8003a98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003a9a:	f005 f9f3 	bl	8008e84 <VL53LX_hist_copy_results_to_sys_and_core>
 8003a9e:	e00e      	b.n	8003abe <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8003aa0:	bf00      	nop
 8003aa2:	e00c      	b.n	8003abe <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8003aa4:	bf00      	nop
 8003aa6:	e00a      	b.n	8003abe <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8003aa8:	bf00      	nop
 8003aaa:	e008      	b.n	8003abe <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8003aac:	bf00      	nop
 8003aae:	e006      	b.n	8003abe <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8003ab0:	bf00      	nop
 8003ab2:	e004      	b.n	8003abe <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8003ab4:	bf00      	nop
 8003ab6:	e002      	b.n	8003abe <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8003ab8:	bf00      	nop
 8003aba:	e000      	b.n	8003abe <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 8003abc:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8003abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac0:	785b      	ldrb	r3, [r3, #1]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d036      	beq.n	8003b34 <VL53LX_get_device_results+0x590>
			if (pstate->rd_device_state !=
 8003ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ac8:	79db      	ldrb	r3, [r3, #7]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d00a      	beq.n	8003ae4 <VL53LX_get_device_results+0x540>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8003ace:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <VL53LX_get_device_results+0x540>
					status = VL53LX_dynamic_zone_update(
 8003ad6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f005 faa7 	bl	800902c <VL53LX_dynamic_zone_update>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003aea:	e015      	b.n	8003b18 <VL53LX_get_device_results+0x574>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8003aec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aee:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
						& 0x01) ?
 8003af2:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <VL53LX_get_device_results+0x55a>
 8003afa:	2103      	movs	r1, #3
 8003afc:	e000      	b.n	8003b00 <VL53LX_get_device_results+0x55c>
 8003afe:	2101      	movs	r1, #1
 8003b00:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b06:	4413      	add	r3, r2
 8003b08:	460a      	mov	r2, r1
 8003b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003b0e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003b12:	3301      	adds	r3, #1
 8003b14:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003b18:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003b1c:	2b0f      	cmp	r3, #15
 8003b1e:	d9e5      	bls.n	8003aec <VL53LX_get_device_results+0x548>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8003b20:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <VL53LX_get_device_results+0x590>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f005 faf9 	bl	8009120 <VL53LX_multizone_hist_bins_update>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8003b34:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d105      	bne.n	8003b48 <VL53LX_get_device_results+0x5a4>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f005 feef 	bl	8009920 <VL53LX_dynamic_xtalk_correction_corrector>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8003b48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4a:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d151      	bne.n	8003bf6 <VL53LX_get_device_results+0x652>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8003b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b54:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8003b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e04c      	b.n	8003bf6 <VL53LX_get_device_results+0x652>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8003b5c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <VL53LX_get_device_results+0x5d0>
			status = VL53LX_get_measurement_results(
 8003b64:	7afb      	ldrb	r3, [r7, #11]
 8003b66:	4619      	mov	r1, r3
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fc5d 	bl	8003428 <VL53LX_get_measurement_results>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8003b74:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <VL53LX_get_device_results+0x5f4>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8003b7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b7e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8003b82:	4618      	mov	r0, r3
 8003b84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b86:	f203 319e 	addw	r1, r3, #926	@ 0x39e
 8003b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b8c:	f503 529b 	add.w	r2, r3, #4960	@ 0x1360
 8003b90:	3210      	adds	r2, #16
 8003b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b94:	f000 fc26 	bl	80043e4 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d12a      	bne.n	8003bf6 <VL53LX_get_device_results+0x652>

			if ((status == VL53LX_ERROR_NONE) &&
 8003ba0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10d      	bne.n	8003bc4 <VL53LX_get_device_results+0x620>
				(pL->low_power_auto_range_count == 0)) {
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003baa:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <VL53LX_get_device_results+0x620>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f006 face 	bl	800a152 <VL53LX_low_power_auto_setup_manual_calibration>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	709a      	strb	r2, [r3, #2]
 8003bc2:	e00a      	b.n	8003bda <VL53LX_get_device_results+0x636>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8003bc4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <VL53LX_get_device_results+0x636>
				(pL->low_power_auto_range_count == 1)) {
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bce:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <VL53LX_get_device_results+0x636>
				pL->low_power_auto_range_count = 2;
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	789b      	ldrb	r3, [r3, #2]
 8003bde:	2bff      	cmp	r3, #255	@ 0xff
 8003be0:	d009      	beq.n	8003bf6 <VL53LX_get_device_results+0x652>
 8003be2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <VL53LX_get_device_results+0x652>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f006 fb02 	bl	800a1f4 <VL53LX_low_power_auto_update_DSS>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8003bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bf8:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bfe:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8003c00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c02:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8003c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c08:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8003c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c0c:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8003c10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c12:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8003c14:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f040 80b0 	bne.w	8003d7e <VL53LX_get_device_results+0x7da>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8003c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c20:	2210      	movs	r2, #16
 8003c22:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8003c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c28:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c32:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245
		zid = pdev->ll_state.rd_zone_id;
 8003c36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c38:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (zid < pres->zone_results.max_zones) {
 8003c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c42:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 8003c46:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	f080 8097 	bcs.w	8003d7e <VL53LX_get_device_results+0x7da>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8003c50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
			pobjects =
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003c60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c62:	4413      	add	r3, r2
 8003c64:	3308      	adds	r3, #8
 8003c66:	657b      	str	r3, [r7, #84]	@ 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8003c68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c6a:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6e:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8003c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c72:	785a      	ldrb	r2, [r3, #1]
 8003c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c76:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8003c78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c7a:	789a      	ldrb	r2, [r3, #2]
 8003c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7e:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8003c80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c82:	78da      	ldrb	r2, [r3, #3]
 8003c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c86:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8003c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c8a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c90:	639a      	str	r2, [r3, #56]	@ 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8003c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c94:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8003c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8003c9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c9e:	f8b3 2184 	ldrh.w	r2, [r3, #388]	@ 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8003ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003caa:	f893 218e 	ldrb.w	r2, [r3, #398]	@ 0x18e
			pobjects->xmonitor.range_status =
 8003cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			pobjects->max_objects      = presults->max_results;
 8003cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cb6:	7c5a      	ldrb	r2, [r3, #17]
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cba:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8003cbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cbe:	7c9a      	ldrb	r2, [r3, #18]
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc2:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003cca:	e052      	b.n	8003d72 <VL53LX_get_device_results+0x7ce>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8003ccc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8003cd0:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8003cd4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003cd6:	204c      	movs	r0, #76	@ 0x4c
 8003cd8:	fb00 f303 	mul.w	r3, r0, r3
 8003cdc:	440b      	add	r3, r1
 8003cde:	3338      	adds	r3, #56	@ 0x38
 8003ce0:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8003ce2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4403      	add	r3, r0
 8003cee:	3308      	adds	r3, #8
 8003cf0:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8003cf2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8003cf6:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8003cfa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003cfc:	204c      	movs	r0, #76	@ 0x4c
 8003cfe:	fb00 f303 	mul.w	r3, r0, r3
 8003d02:	440b      	add	r3, r1
 8003d04:	333c      	adds	r3, #60	@ 0x3c
 8003d06:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8003d08:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4403      	add	r3, r0
 8003d14:	330c      	adds	r3, #12
 8003d16:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8003d18:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8003d1c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8003d20:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003d22:	204c      	movs	r0, #76	@ 0x4c
 8003d24:	fb00 f303 	mul.w	r3, r0, r3
 8003d28:	440b      	add	r3, r1
 8003d2a:	3354      	adds	r3, #84	@ 0x54
 8003d2c:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8003d2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	3310      	adds	r3, #16
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8003d40:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8003d44:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
					presults->VL53LX_p_003[i].range_status;
 8003d48:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003d4a:	204c      	movs	r0, #76	@ 0x4c
 8003d4c:	fb00 f303 	mul.w	r3, r0, r3
 8003d50:	440b      	add	r3, r1
 8003d52:	335e      	adds	r3, #94	@ 0x5e
 8003d54:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8003d56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3312      	adds	r3, #18
 8003d64:	4602      	mov	r2, r0
 8003d66:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8003d68:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003d72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d74:	7c9b      	ldrb	r3, [r3, #18]
 8003d76:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d3a6      	bcc.n	8003ccc <VL53LX_get_device_results+0x728>
		}
	}



	memcpy(
 8003d7e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8003d82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f017 fa70 	bl	801b26a <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8003d8a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <VL53LX_get_device_results+0x7fa>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f002 fdd2 	bl	800693c <VL53LX_check_ll_driver_rd_state>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8003d9e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3768      	adds	r7, #104	@ 0x68
 8003da6:	46bd      	mov	sp, r7
 8003da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003dac <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8003dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d107      	bne.n	8003dd4 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff f85e 	bl	8002e8c <VL53LX_init_and_start_range>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8003dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b0d2      	sub	sp, #328	@ 0x148
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003dea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003dee:	6018      	str	r0, [r3, #0]
 8003df0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003df4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003df8:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	VL53LX_LLDriverData_t *pdev =
 8003e00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e04:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003e0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e12:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8003e1c:	3320      	adds	r3, #32
 8003e1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8003e22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e26:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8003e2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8003e2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e32:	f203 3336 	addw	r3, r3, #822	@ 0x336
 8003e36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8003e3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e3e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8003e42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8003e46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e4a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8003e4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8003e52:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8003e5a:	f107 030c 	add.w	r3, r7, #12
 8003e5e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	uint8_t    bin_23_0 = 0x00;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint16_t   bin                      = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	uint16_t   encoded_timeout          = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

	uint32_t   pll_period_us            = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t    i                        = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

	int32_t    hist_merge				= 0;
 8003e8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003e90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8003e98:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10d      	bne.n	8003ebc <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 8003ea0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ea4:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8003ea8:	2353      	movs	r3, #83	@ 0x53
 8003eaa:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8003eae:	2188      	movs	r1, #136	@ 0x88
 8003eb0:	6800      	ldr	r0, [r0, #0]
 8003eb2:	f00e f857 	bl	8011f64 <VL53LX_ReadMulti>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8003ebc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ec6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8003ed0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003ed4:	785a      	ldrb	r2, [r3, #1]
 8003ed6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003eda:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8003ee4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003ee8:	789a      	ldrb	r2, [r3, #2]
 8003eea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003eee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8003ef8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003efc:	78da      	ldrb	r2, [r3, #3]
 8003efe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f02:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8003f0c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	2002      	movs	r0, #2
 8003f16:	f003 f9dc 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8003f1e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f22:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c



	i2c_buffer_offset_bytes =
 8003f2c:	234e      	movs	r3, #78	@ 0x4e
 8003f2e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8003f32:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8003f36:	f107 020c 	add.w	r2, r7, #12
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8003f40:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003f44:	2002      	movs	r0, #2
 8003f46:	f003 f9c4 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8003f4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f52:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	i2c_buffer_offset_bytes =
 8003f5c:	2350      	movs	r3, #80	@ 0x50
 8003f5e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8003f62:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8003f66:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003f6a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003f6e:	5cd2      	ldrb	r2, [r2, r3]
 8003f70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f74:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8003f7e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f82:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8b3 207e 	ldrh.w	r2, [r3, #126]	@ 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8003f8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f94:	f8a3 2394 	strh.w	r2, [r3, #916]	@ 0x394
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8003f98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003f9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8003fa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fae:	f883 2396 	strb.w	r2, [r3, #918]	@ 0x396



	i2c_buffer_offset_bytes =
 8003fb2:	2351      	movs	r3, #81	@ 0x51
 8003fb4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8003fb8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8003fbc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003fc0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003fc4:	5cd3      	ldrb	r3, [r2, r3]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8003fcc:	2352      	movs	r3, #82	@ 0x52
 8003fce:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8003fd2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8003fd6:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003fda:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003fde:	5cd2      	ldrb	r2, [r2, r3]
 8003fe0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	i2c_buffer_offset_bytes =
 8003fea:	234d      	movs	r3, #77	@ 0x4d
 8003fec:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8003ff0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8003ff4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003ff8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003ffc:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8004000:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8004002:	2306      	movs	r3, #6
 8004004:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8004008:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800400c:	f107 020c 	add.w	r2, r7, #12
 8004010:	4413      	add	r3, r2
 8004012:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8004016:	2300      	movs	r3, #0
 8004018:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 800401c:	e01a      	b.n	8004054 <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800401e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004022:	2003      	movs	r0, #3
 8004024:	f003 f9f4 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 8004028:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 800402a:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800402e:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8004030:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004034:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3206      	adds	r2, #6
 800403c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8004040:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004044:	3303      	adds	r3, #3
 8004046:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800404a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800404e:	3301      	adds	r3, #1
 8004050:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
 8004054:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8004058:	2b17      	cmp	r3, #23
 800405a:	d9e0      	bls.n	800401e <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 800405c:	f107 0208 	add.w	r2, r7, #8
 8004060:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004064:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004068:	f248 018d 	movw	r1, #32909	@ 0x808d
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	f000 fb91 	bl	8004794 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8004072:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004076:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004084:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004088:	f503 53e2 	add.w	r3, r3, #7232	@ 0x1c40
 800408c:	3308      	adds	r3, #8
 800408e:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f017 f847 	bl	801b128 <memset>
		pdev->bin_rec_pos = 0;
 800409a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800409e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2c44 	strb.w	r2, [r3, #3140]	@ 0xc44
		pdev->pos_before_next_recom = 0;
 80040a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2c45 	strb.w	r2, [r3, #3141]	@ 0xc45
	}

	if (hist_merge == 1)
 80040b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040ba:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10b      	bne.n	80040dc <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 80040c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040c8:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 80040cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80040d4:	6811      	ldr	r1, [r2, #0]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	f7fd ff20 	bl	8001f1c <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 80040dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040e0:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 80040e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 80040f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80040f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80040fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004102:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2218      	movs	r2, #24
 800410a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800410c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004110:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2218      	movs	r2, #24
 8004118:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800411a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800411e:	78da      	ldrb	r2, [r3, #3]
 8004120:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004124:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 800412e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004132:	799b      	ldrb	r3, [r3, #6]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8004138:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800413c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->vcsel_width +=
 8004146:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800414a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8004154:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004158:	7c12      	ldrb	r2, [r2, #16]
	pdata->vcsel_width +=
 800415a:	4413      	add	r3, r2
 800415c:	b29a      	uxth	r2, r3
 800415e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004162:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 800416c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004170:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8004172:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004176:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8004180:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004184:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8004188:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800418c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004190:	6811      	ldr	r1, [r2, #0]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	f003 fd03 	bl	8007b9e <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8004198:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800419c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d115      	bne.n	80041d0 <VL53LX_get_histogram_bin_data+0x3f0>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80041a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041a8:	791b      	ldrb	r3, [r3, #4]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80041ae:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80041b2:	7952      	ldrb	r2, [r2, #5]
		encoded_timeout =
 80041b4:	4413      	add	r3, r2
 80041b6:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 80041ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041be:	799a      	ldrb	r2, [r3, #6]
 80041c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80041ce:	e014      	b.n	80041fa <VL53LX_get_histogram_bin_data+0x41a>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 80041d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041d4:	79db      	ldrb	r3, [r3, #7]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	b29b      	uxth	r3, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80041da:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80041de:	7a12      	ldrb	r2, [r2, #8]
		encoded_timeout =
 80041e0:	4413      	add	r3, r2
 80041e2:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 80041e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041ea:	7a5a      	ldrb	r2, [r3, #9]
 80041ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80041fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80041fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8004208:	2300      	movs	r3, #0
 800420a:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800420e:	e01f      	b.n	8004250 <VL53LX_get_histogram_bin_data+0x470>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8004210:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8004214:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004218:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	4413      	add	r3, r2
 8004220:	7b1b      	ldrb	r3, [r3, #12]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b07      	cmp	r3, #7
 8004228:	d10d      	bne.n	8004246 <VL53LX_get_histogram_bin_data+0x466>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800422a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800422e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	7adb      	ldrb	r3, [r3, #11]
 8004236:	3304      	adds	r3, #4
 8004238:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800423a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800423e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8004246:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800424a:	3301      	adds	r3, #1
 800424c:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8004250:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8004254:	2b05      	cmp	r3, #5
 8004256:	d9db      	bls.n	8004210 <VL53LX_get_histogram_bin_data+0x430>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8004258:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800425c:	4618      	mov	r0, r3
 800425e:	f003 fb0e 	bl	800787e <VL53LX_decode_timeout>
 8004262:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8004264:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004268:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8004272:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004276:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8004280:	4618      	mov	r0, r3
 8004282:	f006 f87e 	bl	800a382 <VL53LX_calc_pll_period_us>
 8004286:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800428a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800428e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	3301      	adds	r3, #1
 800429a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 800429e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042a2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
		VL53LX_duration_maths(
 80042ac:	4619      	mov	r1, r3
 80042ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042b6:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80042ba:	f006 f879 	bl	800a3b0 <VL53LX_duration_maths>
 80042be:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80042c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80042ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042d2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80042de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042e2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	f006 f988 	bl	800a5fc <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80042ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80042f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	f006 fda0 	bl	800ae3a <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80042fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80042fe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004302:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004306:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800430e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004312:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8004316:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800431a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8004322:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004326:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	789b      	ldrb	r3, [r3, #2]
 800432e:	461a      	mov	r2, r3
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800433c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8004340:	4413      	add	r3, r2
 8004342:	3302      	adds	r3, #2
 8004344:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800434c:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 800434e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004352:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800435c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004360:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8004362:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004366:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8004370:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004374:	2200      	movs	r2, #0
 8004376:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8004378:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800437c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2b11      	cmp	r3, #17
 800438c:	bf8c      	ite	hi
 800438e:	2201      	movhi	r2, #1
 8004390:	2200      	movls	r2, #0
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	2a00      	cmp	r2, #0
 8004396:	d11c      	bne.n	80043d2 <VL53LX_get_histogram_bin_data+0x5f2>
 8004398:	4a11      	ldr	r2, [pc, #68]	@ (80043e0 <VL53LX_get_histogram_bin_data+0x600>)
 800439a:	fa22 f303 	lsr.w	r3, r2, r3
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <VL53LX_get_histogram_bin_data+0x5f2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 80043b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80043b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043c8:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 80043ca:	23fa      	movs	r3, #250	@ 0xfa
 80043cc:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	break;
 80043d0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80043d2:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	0002200e 	.word	0x0002200e

080043e4 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b08b      	sub	sp, #44	@ 0x2c
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	78da      	ldrb	r2, [r3, #3]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2200      	movs	r2, #0
 8004412:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2204      	movs	r2, #4
 8004418:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2201      	movs	r2, #1
 800441e:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	8a1b      	ldrh	r3, [r3, #16]
 8004424:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	8a9b      	ldrh	r3, [r3, #20]
 800442a:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	8a5b      	ldrh	r3, [r3, #18]
 8004430:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004438:	e00b      	b.n	8004452 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800443a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4413      	add	r3, r2
 8004444:	2200      	movs	r2, #0
 8004446:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8004448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800444c:	3301      	adds	r3, #1
 800444e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004456:	2b04      	cmp	r3, #4
 8004458:	d9ef      	bls.n	800443a <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	3314      	adds	r3, #20
 800445e:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8004460:	2300      	movs	r3, #0
 8004462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004466:	e0fe      	b.n	8004666 <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800446e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	2200      	movs	r2, #0
 8004474:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	78db      	ldrb	r3, [r3, #3]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8004486:	2b09      	cmp	r3, #9
 8004488:	d104      	bne.n	8004494 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	2213      	movs	r2, #19
 800448e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8004492:	e007      	b.n	80044a4 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2200      	movs	r2, #0
 80044a8:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	2200      	movs	r2, #0
 80044ae:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	2200      	movs	r2, #0
 80044b4:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	2200      	movs	r2, #0
 80044ba:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2200      	movs	r2, #0
 80044c0:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	2200      	movs	r2, #0
 80044c6:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80044c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d05c      	beq.n	800458e <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 80044d4:	e0a8      	b.n	8004628 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	789b      	ldrb	r3, [r3, #2]
 80044da:	2b07      	cmp	r3, #7
 80044dc:	d103      	bne.n	80044e6 <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	8a7a      	ldrh	r2, [r7, #18]
 80044e2:	82da      	strh	r2, [r3, #22]
 80044e4:	e00b      	b.n	80044fe <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d103      	bne.n	80044f6 <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	8aba      	ldrh	r2, [r7, #20]
 80044f2:	82da      	strh	r2, [r3, #22]
 80044f4:	e003      	b.n	80044fe <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	8afa      	ldrh	r2, [r7, #22]
 8004502:	861a      	strh	r2, [r3, #48]	@ 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	895b      	ldrh	r3, [r3, #10]
 8004518:	015b      	lsls	r3, r3, #5
 800451a:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004522:	d302      	bcc.n	800452a <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8004524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004528:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	b29a      	uxth	r2, r3
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8004540:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004552:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	da01      	bge.n	800455e <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 800455a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800455e:	12db      	asrs	r3, r3, #11
 8004560:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	b21a      	sxth	r2, r3
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 800458c:	e04c      	b.n	8004628 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->avg_signal_count_rate_mcps =
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045a4:	865a      	strh	r2, [r3, #50]	@ 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	869a      	strh	r2, [r3, #52]	@ 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	8bdb      	ldrh	r3, [r3, #30]
 80045b2:	015b      	lsls	r3, r3, #5
 80045b4:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045bc:	d302      	bcc.n	80045c4 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 80045be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045c2:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	879a      	strh	r2, [r3, #60]	@ 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm = (int32_t)(
 80045da:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ec:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da01      	bge.n	80045f8 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 80045f4:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80045f8:	12db      	asrs	r3, r3, #11
 80045fa:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	b21a      	sxth	r2, r3
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	62da      	str	r2, [r3, #44]	@ 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	625a      	str	r2, [r3, #36]	@ 0x24

			break;
 8004626:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	87da      	strh	r2, [r3, #62]	@ 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

		pdata++;
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	334c      	adds	r3, #76	@ 0x4c
 800465a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 800465c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004660:	3301      	adds	r3, #1
 8004662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800466a:	2b01      	cmp	r3, #1
 800466c:	f67f aefc 	bls.w	8004468 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2b11      	cmp	r3, #17
 8004680:	bf8c      	ite	hi
 8004682:	2201      	movhi	r2, #1
 8004684:	2200      	movls	r2, #0
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	2a00      	cmp	r2, #0
 800468a:	d117      	bne.n	80046bc <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 800468c:	4a0e      	ldr	r2, [pc, #56]	@ (80046c8 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 800468e:	fa22 f303 	lsr.w	r3, r2, r3
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 80046ba:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80046bc:	bf00      	nop
 80046be:	372c      	adds	r7, #44	@ 0x2c
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	0002200e 	.word	0x0002200e

080046cc <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	332c      	adds	r3, #44	@ 0x2c
 80046e2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b05      	cmp	r3, #5
 80046ea:	d109      	bne.n	8004700 <VL53LX_set_zone_dss_config+0x34>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f8a3 2366 	strh.w	r2, [r3, #870]	@ 0x366
 80046fe:	e003      	b.n	8004708 <VL53LX_set_zone_dss_config+0x3c>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8004708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	78fa      	ldrb	r2, [r7, #3]
 8004730:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8004732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	460b      	mov	r3, r1
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004750:	2300      	movs	r3, #0
 8004752:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8004758:	7afb      	ldrb	r3, [r7, #11]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d009      	beq.n	8004772 <VL53LX_get_dmax_calibration_data+0x30>
 800475e:	2b02      	cmp	r3, #2
 8004760:	d10f      	bne.n	8004782 <VL53LX_get_dmax_calibration_data+0x40>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	33ae      	adds	r3, #174	@ 0xae
		memcpy(
 8004766:	220a      	movs	r2, #10
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f016 fd7d 	bl	801b26a <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8004770:	e00a      	b.n	8004788 <VL53LX_get_dmax_calibration_data+0x46>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	33a4      	adds	r3, #164	@ 0xa4
		memcpy(
 8004776:	220a      	movs	r2, #10
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f016 fd75 	bl	801b26a <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8004780:	e002      	b.n	8004788 <VL53LX_get_dmax_calibration_data+0x46>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004782:	23fc      	movs	r3, #252	@ 0xfc
 8004784:	75fb      	strb	r3, [r7, #23]
	break;
 8004786:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004788:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	@ 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	460b      	mov	r3, r1
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80047b0:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80047b8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80047c0:	2bb9      	cmp	r3, #185	@ 0xb9
 80047c2:	f200 86c9 	bhi.w	8005558 <VL53LX_get_tuning_parm+0xdc4>
 80047c6:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <VL53LX_get_tuning_parm+0x38>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	08004ab5 	.word	0x08004ab5
 80047d0:	08004ac5 	.word	0x08004ac5
 80047d4:	08004ad5 	.word	0x08004ad5
 80047d8:	08004ae5 	.word	0x08004ae5
 80047dc:	08004af3 	.word	0x08004af3
 80047e0:	08004b01 	.word	0x08004b01
 80047e4:	08004b0f 	.word	0x08004b0f
 80047e8:	08004b1d 	.word	0x08004b1d
 80047ec:	08004b2b 	.word	0x08004b2b
 80047f0:	08004b39 	.word	0x08004b39
 80047f4:	08004b47 	.word	0x08004b47
 80047f8:	08004b53 	.word	0x08004b53
 80047fc:	08004b61 	.word	0x08004b61
 8004800:	08004b6f 	.word	0x08004b6f
 8004804:	08004b7b 	.word	0x08004b7b
 8004808:	08004b89 	.word	0x08004b89
 800480c:	08004b97 	.word	0x08004b97
 8004810:	08004ba7 	.word	0x08004ba7
 8004814:	08004bb7 	.word	0x08004bb7
 8004818:	08004bc5 	.word	0x08004bc5
 800481c:	08004bd5 	.word	0x08004bd5
 8004820:	08004be3 	.word	0x08004be3
 8004824:	08004bf3 	.word	0x08004bf3
 8004828:	08004c03 	.word	0x08004c03
 800482c:	08004c13 	.word	0x08004c13
 8004830:	08004c23 	.word	0x08004c23
 8004834:	08004c33 	.word	0x08004c33
 8004838:	08004c43 	.word	0x08004c43
 800483c:	08004c53 	.word	0x08004c53
 8004840:	08004c63 	.word	0x08004c63
 8004844:	08004c73 	.word	0x08004c73
 8004848:	08004c81 	.word	0x08004c81
 800484c:	08004c91 	.word	0x08004c91
 8004850:	08004ca1 	.word	0x08004ca1
 8004854:	08004cb1 	.word	0x08004cb1
 8004858:	08004cc1 	.word	0x08004cc1
 800485c:	08004cd1 	.word	0x08004cd1
 8004860:	08004ce1 	.word	0x08004ce1
 8004864:	08004cf1 	.word	0x08004cf1
 8004868:	08004d01 	.word	0x08004d01
 800486c:	08004d11 	.word	0x08004d11
 8004870:	08004d21 	.word	0x08004d21
 8004874:	08004d31 	.word	0x08004d31
 8004878:	08004d41 	.word	0x08004d41
 800487c:	08004d51 	.word	0x08004d51
 8004880:	08004d61 	.word	0x08004d61
 8004884:	08004d6f 	.word	0x08004d6f
 8004888:	08004d7d 	.word	0x08004d7d
 800488c:	08004d8b 	.word	0x08004d8b
 8004890:	08004d99 	.word	0x08004d99
 8004894:	08004da7 	.word	0x08004da7
 8004898:	08004db5 	.word	0x08004db5
 800489c:	08004dc3 	.word	0x08004dc3
 80048a0:	08004dd1 	.word	0x08004dd1
 80048a4:	08004ddf 	.word	0x08004ddf
 80048a8:	08004ded 	.word	0x08004ded
 80048ac:	08004dfb 	.word	0x08004dfb
 80048b0:	08004e09 	.word	0x08004e09
 80048b4:	08004e17 	.word	0x08004e17
 80048b8:	08004e25 	.word	0x08004e25
 80048bc:	08004e33 	.word	0x08004e33
 80048c0:	08004e41 	.word	0x08004e41
 80048c4:	08004e4f 	.word	0x08004e4f
 80048c8:	08004e5d 	.word	0x08004e5d
 80048cc:	08004e6b 	.word	0x08004e6b
 80048d0:	08004e79 	.word	0x08004e79
 80048d4:	08004e87 	.word	0x08004e87
 80048d8:	08004e95 	.word	0x08004e95
 80048dc:	08004ea3 	.word	0x08004ea3
 80048e0:	08004eb1 	.word	0x08004eb1
 80048e4:	08004ebf 	.word	0x08004ebf
 80048e8:	08004ecd 	.word	0x08004ecd
 80048ec:	08004edb 	.word	0x08004edb
 80048f0:	08004ee9 	.word	0x08004ee9
 80048f4:	08004ef5 	.word	0x08004ef5
 80048f8:	08004f03 	.word	0x08004f03
 80048fc:	08004f11 	.word	0x08004f11
 8004900:	08004f1d 	.word	0x08004f1d
 8004904:	08004f29 	.word	0x08004f29
 8004908:	08004f35 	.word	0x08004f35
 800490c:	08004f41 	.word	0x08004f41
 8004910:	08004f4d 	.word	0x08004f4d
 8004914:	08004f59 	.word	0x08004f59
 8004918:	08004f67 	.word	0x08004f67
 800491c:	08004f75 	.word	0x08004f75
 8004920:	08004f83 	.word	0x08004f83
 8004924:	08004f91 	.word	0x08004f91
 8004928:	08004f9f 	.word	0x08004f9f
 800492c:	08004fad 	.word	0x08004fad
 8004930:	08004fbb 	.word	0x08004fbb
 8004934:	08004fc9 	.word	0x08004fc9
 8004938:	08004fd7 	.word	0x08004fd7
 800493c:	08004fe5 	.word	0x08004fe5
 8004940:	08004ff3 	.word	0x08004ff3
 8004944:	08005001 	.word	0x08005001
 8004948:	0800500f 	.word	0x0800500f
 800494c:	0800501d 	.word	0x0800501d
 8004950:	0800502b 	.word	0x0800502b
 8004954:	08005039 	.word	0x08005039
 8004958:	08005047 	.word	0x08005047
 800495c:	08005055 	.word	0x08005055
 8004960:	08005063 	.word	0x08005063
 8004964:	08005071 	.word	0x08005071
 8004968:	0800507f 	.word	0x0800507f
 800496c:	0800508d 	.word	0x0800508d
 8004970:	0800509b 	.word	0x0800509b
 8004974:	080050a9 	.word	0x080050a9
 8004978:	080050b7 	.word	0x080050b7
 800497c:	080050c5 	.word	0x080050c5
 8004980:	080050d3 	.word	0x080050d3
 8004984:	080050e1 	.word	0x080050e1
 8004988:	080050ef 	.word	0x080050ef
 800498c:	080050fd 	.word	0x080050fd
 8004990:	0800510b 	.word	0x0800510b
 8004994:	08005119 	.word	0x08005119
 8004998:	08005127 	.word	0x08005127
 800499c:	08005135 	.word	0x08005135
 80049a0:	08005143 	.word	0x08005143
 80049a4:	08005151 	.word	0x08005151
 80049a8:	08005163 	.word	0x08005163
 80049ac:	08005175 	.word	0x08005175
 80049b0:	08005187 	.word	0x08005187
 80049b4:	08005199 	.word	0x08005199
 80049b8:	080051ab 	.word	0x080051ab
 80049bc:	080051bd 	.word	0x080051bd
 80049c0:	080051cf 	.word	0x080051cf
 80049c4:	080051e1 	.word	0x080051e1
 80049c8:	080051f3 	.word	0x080051f3
 80049cc:	08005205 	.word	0x08005205
 80049d0:	08005217 	.word	0x08005217
 80049d4:	08005229 	.word	0x08005229
 80049d8:	0800523b 	.word	0x0800523b
 80049dc:	0800524d 	.word	0x0800524d
 80049e0:	0800525f 	.word	0x0800525f
 80049e4:	08005271 	.word	0x08005271
 80049e8:	08005283 	.word	0x08005283
 80049ec:	08005295 	.word	0x08005295
 80049f0:	080052a7 	.word	0x080052a7
 80049f4:	080052b5 	.word	0x080052b5
 80049f8:	080052c3 	.word	0x080052c3
 80049fc:	080052d1 	.word	0x080052d1
 8004a00:	080052df 	.word	0x080052df
 8004a04:	080052ed 	.word	0x080052ed
 8004a08:	080052fb 	.word	0x080052fb
 8004a0c:	08005309 	.word	0x08005309
 8004a10:	0800531b 	.word	0x0800531b
 8004a14:	08005329 	.word	0x08005329
 8004a18:	08005337 	.word	0x08005337
 8004a1c:	08005345 	.word	0x08005345
 8004a20:	08005353 	.word	0x08005353
 8004a24:	08005361 	.word	0x08005361
 8004a28:	0800536f 	.word	0x0800536f
 8004a2c:	0800537d 	.word	0x0800537d
 8004a30:	0800538b 	.word	0x0800538b
 8004a34:	08005399 	.word	0x08005399
 8004a38:	080053a7 	.word	0x080053a7
 8004a3c:	080053b5 	.word	0x080053b5
 8004a40:	080053c3 	.word	0x080053c3
 8004a44:	080053d1 	.word	0x080053d1
 8004a48:	080053df 	.word	0x080053df
 8004a4c:	080053ed 	.word	0x080053ed
 8004a50:	080053fb 	.word	0x080053fb
 8004a54:	08005409 	.word	0x08005409
 8004a58:	08005417 	.word	0x08005417
 8004a5c:	08005425 	.word	0x08005425
 8004a60:	08005433 	.word	0x08005433
 8004a64:	08005441 	.word	0x08005441
 8004a68:	0800544f 	.word	0x0800544f
 8004a6c:	0800545d 	.word	0x0800545d
 8004a70:	0800546b 	.word	0x0800546b
 8004a74:	08005479 	.word	0x08005479
 8004a78:	08005487 	.word	0x08005487
 8004a7c:	08005495 	.word	0x08005495
 8004a80:	080054a3 	.word	0x080054a3
 8004a84:	080054b1 	.word	0x080054b1
 8004a88:	080054bf 	.word	0x080054bf
 8004a8c:	080054cd 	.word	0x080054cd
 8004a90:	080054db 	.word	0x080054db
 8004a94:	080054e9 	.word	0x080054e9
 8004a98:	080054f7 	.word	0x080054f7
 8004a9c:	08005505 	.word	0x08005505
 8004aa0:	08005513 	.word	0x08005513
 8004aa4:	08005521 	.word	0x08005521
 8004aa8:	0800552f 	.word	0x0800552f
 8004aac:	0800553d 	.word	0x0800553d
 8004ab0:	0800554b 	.word	0x0800554b

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 8004aba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
	break;
 8004ac0:	f000 bd51 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f8b3 3132 	ldrh.w	r3, [r3, #306]	@ 0x132
 8004aca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
	break;
 8004ad0:	f000 bd49 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f8b3 3134 	ldrh.w	r3, [r3, #308]	@ 0x134
 8004ada:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	601a      	str	r2, [r3, #0]
	break;
 8004ae0:	f000 bd41 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
	break;
 8004aee:	f000 bd3a 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	601a      	str	r2, [r3, #0]
	break;
 8004afc:	f000 bd33 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	789b      	ldrb	r3, [r3, #2]
 8004b04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	601a      	str	r2, [r3, #0]
	break;
 8004b0a:	f000 bd2c 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	78db      	ldrb	r3, [r3, #3]
 8004b12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]
	break;
 8004b18:	f000 bd25 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	791b      	ldrb	r3, [r3, #4]
 8004b20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
	break;
 8004b26:	f000 bd1e 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	795b      	ldrb	r3, [r3, #5]
 8004b2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
	break;
 8004b34:	f000 bd17 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	799b      	ldrb	r3, [r3, #6]
 8004b3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
	break;
 8004b42:	f000 bd10 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
	break;
 8004b4e:	f000 bd0a 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	891b      	ldrh	r3, [r3, #8]
 8004b56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	601a      	str	r2, [r3, #0]
	break;
 8004b5c:	f000 bd03 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	8a1b      	ldrh	r3, [r3, #16]
 8004b64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
	break;
 8004b6a:	f000 bcfc 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
	break;
 8004b76:	f000 bcf6 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	7e1b      	ldrb	r3, [r3, #24]
 8004b7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
	break;
 8004b84:	f000 bcef 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	8b5b      	ldrh	r3, [r3, #26]
 8004b8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
	break;
 8004b92:	f000 bce8 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8004b9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
	break;
 8004ba2:	f000 bce0 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004bac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
	break;
 8004bb2:	f000 bcd8 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
	break;
 8004bc0:	f000 bcd1 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8004bca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	601a      	str	r2, [r3, #0]
	break;
 8004bd0:	f000 bcc9 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004bd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
	break;
 8004bde:	f000 bcc2 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8004be8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
	break;
 8004bee:	f000 bcba 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 8004bf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
	break;
 8004bfe:	f000 bcb2 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f893 313e 	ldrb.w	r3, [r3, #318]	@ 0x13e
 8004c08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
	break;
 8004c0e:	f000 bcaa 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f893 313f 	ldrb.w	r3, [r3, #319]	@ 0x13f
 8004c18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
	break;
 8004c1e:	f000 bca2 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8004c28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
	break;
 8004c2e:	f000 bc9a 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f893 3141 	ldrb.w	r3, [r3, #321]	@ 0x141
 8004c38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
	break;
 8004c3e:	f000 bc92 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f9b3 32de 	ldrsh.w	r3, [r3, #734]	@ 0x2de
		*ptuning_parm_value = (int32_t)(
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
	break;
 8004c4e:	f000 bc8a 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f9b3 32e0 	ldrsh.w	r3, [r3, #736]	@ 0x2e0
		*ptuning_parm_value = (int32_t)(
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
	break;
 8004c5e:	f000 bc82 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f8b3 32e4 	ldrh.w	r3, [r3, #740]	@ 0x2e4
 8004c68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
	break;
 8004c6e:	f000 bc7a 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	601a      	str	r2, [r3, #0]
	break;
 8004c7c:	f000 bc73 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f8b3 32e2 	ldrh.w	r3, [r3, #738]	@ 0x2e2
		*ptuning_parm_value = (int32_t)(
 8004c86:	461a      	mov	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	601a      	str	r2, [r3, #0]
	break;
 8004c8c:	f000 bc6b 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
	break;
 8004c9c:	f000 bc63 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f9b3 32d6 	ldrsh.w	r3, [r3, #726]	@ 0x2d6
 8004ca6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	601a      	str	r2, [r3, #0]
	break;
 8004cac:	f000 bc5b 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8004cb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	601a      	str	r2, [r3, #0]
	break;
 8004cbc:	f000 bc53 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8004cc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
	break;
 8004ccc:	f000 bc4b 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8004cd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	601a      	str	r2, [r3, #0]
	break;
 8004cdc:	f000 bc43 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8004ce6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	601a      	str	r2, [r3, #0]
	break;
 8004cec:	f000 bc3b 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8004cf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]
	break;
 8004cfc:	f000 bc33 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8004d06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	601a      	str	r2, [r3, #0]
	break;
 8004d0c:	f000 bc2b 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f8b3 314a 	ldrh.w	r3, [r3, #330]	@ 0x14a
 8004d16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	601a      	str	r2, [r3, #0]
	break;
 8004d1c:	f000 bc23 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f8b3 314c 	ldrh.w	r3, [r3, #332]	@ 0x14c
 8004d26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	601a      	str	r2, [r3, #0]
	break;
 8004d2c:	f000 bc1b 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	f8b3 314e 	ldrh.w	r3, [r3, #334]	@ 0x14e
		*ptuning_parm_value = (int32_t)(
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
	break;
 8004d3c:	f000 bc13 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f8b3 3150 	ldrh.w	r3, [r3, #336]	@ 0x150
 8004d46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	601a      	str	r2, [r3, #0]
	break;
 8004d4c:	f000 bc0b 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
		*ptuning_parm_value = (int32_t)(
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
	break;
 8004d5c:	f000 bc03 	b.w	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004d66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
	break;
 8004d6c:	e3fb      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8004d74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
	break;
 8004d7a:	e3f4      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 8004d82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
	break;
 8004d88:	e3ed      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
 8004d90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
	break;
 8004d96:	e3e6      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f893 3157 	ldrb.w	r3, [r3, #343]	@ 0x157
 8004d9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
	break;
 8004da4:	e3df      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8004dac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	601a      	str	r2, [r3, #0]
	break;
 8004db2:	e3d8      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f893 315a 	ldrb.w	r3, [r3, #346]	@ 0x15a
 8004dba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]
	break;
 8004dc0:	e3d1      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	@ 0x2d8
 8004dc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
	break;
 8004dce:	e3ca      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8004dd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	601a      	str	r2, [r3, #0]
	break;
 8004ddc:	e3c3      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f893 3137 	ldrb.w	r3, [r3, #311]	@ 0x137
 8004de4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]
	break;
 8004dea:	e3bc      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8004df2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
	break;
 8004df8:	e3b5      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f893 3139 	ldrb.w	r3, [r3, #313]	@ 0x139
 8004e00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
	break;
 8004e06:	e3ae      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 8004e0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
	break;
 8004e14:	e3a7      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f893 313b 	ldrb.w	r3, [r3, #315]	@ 0x13b
 8004e1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
	break;
 8004e22:	e3a0      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8004e2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]
	break;
 8004e30:	e399      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f893 328c 	ldrb.w	r3, [r3, #652]	@ 0x28c
 8004e38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
	break;
 8004e3e:	e392      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f8b3 3298 	ldrh.w	r3, [r3, #664]	@ 0x298
 8004e46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	601a      	str	r2, [r3, #0]
	break;
 8004e4c:	e38b      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f8b3 329a 	ldrh.w	r3, [r3, #666]	@ 0x29a
 8004e54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
	break;
 8004e5a:	e384      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f8b3 329c 	ldrh.w	r3, [r3, #668]	@ 0x29c
 8004e62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
	break;
 8004e68:	e37d      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	f8b3 329e 	ldrh.w	r3, [r3, #670]	@ 0x29e
 8004e70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	601a      	str	r2, [r3, #0]
	break;
 8004e76:	e376      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	@ 0x2a0
 8004e7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]
	break;
 8004e84:	e36f      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f893 3318 	ldrb.w	r3, [r3, #792]	@ 0x318
 8004e8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
	break;
 8004e92:	e368      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8004e9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
	break;
 8004ea0:	e361      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f893 3231 	ldrb.w	r3, [r3, #561]	@ 0x231
 8004ea8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
	break;
 8004eae:	e35a      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8004eb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	601a      	str	r2, [r3, #0]
	break;
 8004ebc:	e353      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f8b3 3238 	ldrh.w	r3, [r3, #568]	@ 0x238
 8004ec4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
	break;
 8004eca:	e34c      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f8b3 323a 	ldrh.w	r3, [r3, #570]	@ 0x23a
 8004ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	601a      	str	r2, [r3, #0]
	break;
 8004ed8:	e345      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f8b3 323c 	ldrh.w	r3, [r3, #572]	@ 0x23c
 8004ee0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
	break;
 8004ee6:	e33e      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	7c1b      	ldrb	r3, [r3, #16]
 8004eec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	601a      	str	r2, [r3, #0]
	break;
 8004ef2:	e338      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004efa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	601a      	str	r2, [r3, #0]
	break;
 8004f00:	e331      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004f08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	601a      	str	r2, [r3, #0]
	break;
 8004f0e:	e32a      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
	break;
 8004f1a:	e324      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
	break;
 8004f26:	e31e      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	8adb      	ldrh	r3, [r3, #22]
 8004f2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	601a      	str	r2, [r3, #0]
	break;
 8004f32:	e318      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	8b1b      	ldrh	r3, [r3, #24]
 8004f38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
	break;
 8004f3e:	e312      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
	break;
 8004f4a:	e30c      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
	break;
 8004f56:	e306      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	@ 0x2e8
 8004f5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
	break;
 8004f64:	e2ff      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8004f6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]
	break;
 8004f72:	e2f8      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8004f7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]
	break;
 8004f80:	e2f1      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 8004f88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
	break;
 8004f8e:	e2ea      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8004f96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	601a      	str	r2, [r3, #0]
	break;
 8004f9c:	e2e3      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8004fa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
	break;
 8004faa:	e2dc      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f893 32fa 	ldrb.w	r3, [r3, #762]	@ 0x2fa
 8004fb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]
	break;
 8004fb8:	e2d5      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
 8004fc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
	break;
 8004fc6:	e2ce      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8004fce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]
	break;
 8004fd4:	e2c7      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8004fdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
	break;
 8004fe2:	e2c0      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f8b3 330c 	ldrh.w	r3, [r3, #780]	@ 0x30c
 8004fea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	601a      	str	r2, [r3, #0]
	break;
 8004ff0:	e2b9      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 8004ff8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
	break;
 8004ffe:	e2b2      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f8b3 330e 	ldrh.w	r3, [r3, #782]	@ 0x30e
 8005006:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	601a      	str	r2, [r3, #0]
	break;
 800500c:	e2ab      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8005014:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
	break;
 800501a:	e2a4      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8005022:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]
	break;
 8005028:	e29d      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f8b3 3248 	ldrh.w	r3, [r3, #584]	@ 0x248
 8005030:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
	break;
 8005036:	e296      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f8b3 315c 	ldrh.w	r3, [r3, #348]	@ 0x15c
 800503e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
	break;
 8005044:	e28f      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 800504c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
	break;
 8005052:	e288      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 800505a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	601a      	str	r2, [r3, #0]
	break;
 8005060:	e281      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8005068:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
	break;
 800506e:	e27a      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8005076:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
	break;
 800507c:	e273      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8005084:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
	break;
 800508a:	e26c      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8005092:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]
	break;
 8005098:	e265      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80050a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	601a      	str	r2, [r3, #0]
	break;
 80050a6:	e25e      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80050ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
	break;
 80050b4:	e257      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80050bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
	break;
 80050c2:	e250      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80050ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]
	break;
 80050d0:	e249      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80050d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
	break;
 80050de:	e242      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80050e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	601a      	str	r2, [r3, #0]
	break;
 80050ec:	e23b      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80050f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
	break;
 80050fa:	e234      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8005102:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]
	break;
 8005108:	e22d      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8005110:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]
	break;
 8005116:	e226      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800511e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	601a      	str	r2, [r3, #0]
	break;
 8005124:	e21f      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800512c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	601a      	str	r2, [r3, #0]
	break;
 8005132:	e218      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800513a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	601a      	str	r2, [r3, #0]
	break;
 8005140:	e211      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8005148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
	break;
 800514e:	e20a      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005156:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	@ 0x3d0
 800515a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	601a      	str	r2, [r3, #0]
	break;
 8005160:	e201      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005168:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800516c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	601a      	str	r2, [r3, #0]
	break;
 8005172:	e1f8      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800517a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800517e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
	break;
 8005184:	e1ef      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800518c:	f893 33dc 	ldrb.w	r3, [r3, #988]	@ 0x3dc
 8005190:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
	break;
 8005196:	e1e6      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800519e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80051a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	break;
 80051a8:	e1dd      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b0:	f8d3 33e4 	ldr.w	r3, [r3, #996]	@ 0x3e4
 80051b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	601a      	str	r2, [r3, #0]
	break;
 80051ba:	e1d4      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c2:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 80051c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	601a      	str	r2, [r3, #0]
	break;
 80051cc:	e1cb      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 80051d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	601a      	str	r2, [r3, #0]
	break;
 80051de:	e1c2      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 80051ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]
	break;
 80051f0:	e1b9      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f8:	f9b3 33f6 	ldrsh.w	r3, [r3, #1014]	@ 0x3f6
 80051fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
	break;
 8005202:	e1b0      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800520a:	f9b3 33f8 	ldrsh.w	r3, [r3, #1016]	@ 0x3f8
 800520e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
	break;
 8005214:	e1a7      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521c:	f893 33fa 	ldrb.w	r3, [r3, #1018]	@ 0x3fa
 8005220:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
	break;
 8005226:	e19e      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800522e:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 8005232:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
	break;
 8005238:	e195      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005240:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
		*ptuning_parm_value = (int32_t)(
 8005244:	461a      	mov	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
	break;
 800524a:	e18c      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005252:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8005256:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	601a      	str	r2, [r3, #0]
	break;
 800525c:	e183      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005264:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8005268:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	601a      	str	r2, [r3, #0]
	break;
 800526e:	e17a      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005276:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800527a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	601a      	str	r2, [r3, #0]
	break;
 8005280:	e171      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005288:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 800528c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
	break;
 8005292:	e168      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529a:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800529e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
	break;
 80052a4:	e15f      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80052ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
	break;
 80052b2:	e158      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 80052ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	601a      	str	r2, [r3, #0]
	break;
 80052c0:	e151      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 80052c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
	break;
 80052ce:	e14a      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80052d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	601a      	str	r2, [r3, #0]
	break;
 80052dc:	e143      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 80052e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	601a      	str	r2, [r3, #0]
	break;
 80052ea:	e13c      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 80052f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
	break;
 80052f8:	e135      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f893 31bc 	ldrb.w	r3, [r3, #444]	@ 0x1bc
 8005300:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
	break;
 8005306:	e12e      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8005312:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	601a      	str	r2, [r3, #0]
	break;
 8005318:	e125      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f893 31bd 	ldrb.w	r3, [r3, #445]	@ 0x1bd
 8005320:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	601a      	str	r2, [r3, #0]
	break;
 8005326:	e11e      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 800532e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
	break;
 8005334:	e117      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 800533c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
	break;
 8005342:	e110      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	@ 0x1c2
 800534a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]
	break;
 8005350:	e109      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	@ 0x1c4
 8005358:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
	break;
 800535e:	e102      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	@ 0x1c6
 8005366:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
	break;
 800536c:	e0fb      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	@ 0x1c8
 8005374:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
	break;
 800537a:	e0f4      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	@ 0x1ca
 8005382:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
	break;
 8005388:	e0ed      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	@ 0x1cc
 8005390:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
	break;
 8005396:	e0e6      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	@ 0x1ce
 800539e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
	break;
 80053a4:	e0df      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	@ 0x1d0
 80053ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
	break;
 80053b2:	e0d8      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	@ 0x1d2
 80053ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	601a      	str	r2, [r3, #0]
	break;
 80053c0:	e0d1      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	@ 0x1d4
 80053c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
	break;
 80053ce:	e0ca      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	@ 0x1d6
 80053d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
	break;
 80053dc:	e0c3      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	@ 0x1d8
 80053e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
	break;
 80053ea:	e0bc      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	@ 0x1da
 80053f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	601a      	str	r2, [r3, #0]
	break;
 80053f8:	e0b5      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	@ 0x1dc
 8005400:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	601a      	str	r2, [r3, #0]
	break;
 8005406:	e0ae      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	@ 0x1de
 800540e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
	break;
 8005414:	e0a7      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	@ 0x1e0
 800541c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
	break;
 8005422:	e0a0      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	@ 0x1e2
 800542a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	601a      	str	r2, [r3, #0]
	break;
 8005430:	e099      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	@ 0x1e4
 8005438:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
	break;
 800543e:	e092      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	@ 0x1e6
 8005446:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	601a      	str	r2, [r3, #0]
	break;
 800544c:	e08b      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	@ 0x1e8
 8005454:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
	break;
 800545a:	e084      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	@ 0x1ea
 8005462:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
	break;
 8005468:	e07d      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	@ 0x1ec
 8005470:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
	break;
 8005476:	e076      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	@ 0x1ee
 800547e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	601a      	str	r2, [r3, #0]
	break;
 8005484:	e06f      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	@ 0x1f0
 800548c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	601a      	str	r2, [r3, #0]
	break;
 8005492:	e068      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	@ 0x1f2
 800549a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	601a      	str	r2, [r3, #0]
	break;
 80054a0:	e061      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 80054a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
	break;
 80054ae:	e05a      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	@ 0x1f6
 80054b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]
	break;
 80054bc:	e053      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 80054c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
	break;
 80054ca:	e04c      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	@ 0x1fa
 80054d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	601a      	str	r2, [r3, #0]
	break;
 80054d8:	e045      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	@ 0x1fc
 80054e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
	break;
 80054e6:	e03e      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	@ 0x1fe
 80054ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	601a      	str	r2, [r3, #0]
	break;
 80054f4:	e037      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	@ 0x200
 80054fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	601a      	str	r2, [r3, #0]
	break;
 8005502:	e030      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	@ 0x202
 800550a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
	break;
 8005510:	e029      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	@ 0x204
 8005518:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
	break;
 800551e:	e022      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	@ 0x206
 8005526:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	601a      	str	r2, [r3, #0]
	break;
 800552c:	e01b      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	@ 0x208
 8005534:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	601a      	str	r2, [r3, #0]
	break;
 800553a:	e014      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	@ 0x20a
 8005542:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]
	break;
 8005548:	e00d      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	@ 0x20c
 8005550:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
	break;
 8005556:	e006      	b.n	8005566 <VL53LX_get_tuning_parm+0xdd2>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800555e:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005560:	23fc      	movs	r3, #252	@ 0xfc
 8005562:	77fb      	strb	r3, [r7, #31]
	break;
 8005564:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005566:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3724      	adds	r7, #36	@ 0x24
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005580:	2300      	movs	r3, #0
 8005582:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800558e:	2201      	movs	r2, #1
 8005590:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

	LOG_FUNCTION_END(status);

	return status;
 8005594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

	LOG_FUNCTION_END(status);

	return status;
 80055c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80055d8:	2300      	movs	r3, #0
 80055da:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd

	LOG_FUNCTION_END(status);

	return status;
 80055ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005604:	2300      	movs	r3, #0
 8005606:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005612:	2201      	movs	r2, #1
 8005614:	f883 23ce 	strb.w	r2, [r3, #974]	@ 0x3ce

	LOG_FUNCTION_END(status);

	return status;
 8005618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005630:	2300      	movs	r3, #0
 8005632:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800563e:	2200      	movs	r2, #0
 8005640:	f883 23ce 	strb.w	r2, [r3, #974]	@ 0x3ce

	LOG_FUNCTION_END(status);

	return status;
 8005644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800566a:	2201      	movs	r2, #1
 800566c:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd

	LOG_FUNCTION_END(status);

	return status;
 8005670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2208      	movs	r2, #8
 8005690:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	220b      	movs	r2, #11
 8005696:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800569e:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80056a6:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80056ae:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80056b6:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80056b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2212      	movs	r2, #18
 80056de:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	220f      	movs	r2, #15
 80056e4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 80056f2:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	220c      	movs	r2, #12
 80056f8:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80056fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	895b      	ldrh	r3, [r3, #10]
 800571c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	895b      	ldrh	r3, [r3, #10]
 800573a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2240      	movs	r2, #64	@ 0x40
 8005764:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10d      	bne.n	800578a <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d108      	bne.n	800578a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2200      	movs	r2, #0
 8005786:	741a      	strb	r2, [r3, #16]
 8005788:	e002      	b.n	8005790 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2201      	movs	r2, #1
 800578e:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8005790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d114      	bne.n	80057c2 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 800579c:	2b01      	cmp	r3, #1
 800579e:	d110      	bne.n	80057c2 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	7d9b      	ldrb	r3, [r3, #22]
 80057b4:	f001 ff22 	bl	80075fc <VL53LX_calc_range_ignore_threshold>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	831a      	strh	r2, [r3, #24]
 80057c0:	e002      	b.n	80057c8 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2200      	movs	r2, #0
 80057c6:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 80057ce:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2232      	movs	r2, #50	@ 0x32
 80057d4:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80057dc:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	228c      	movs	r2, #140	@ 0x8c
 80057e2:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80057e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8005802:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800580a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2207      	movs	r2, #7
 8005810:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8005818:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005820:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 8005828:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2246      	movs	r2, #70	@ 0x46
 800582e:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005836:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	228c      	movs	r2, #140	@ 0x8c
 800583c:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800583e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8005860:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8005868:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8005870:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8005878:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2208      	movs	r2, #8
 800587e:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2228      	movs	r2, #40	@ 0x28
 8005884:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2209      	movs	r2, #9
 800588a:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800588c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80058ae:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80058b6:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058be:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80058c6:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2210      	movs	r2, #16
 80058cc:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2208      	movs	r2, #8
 80058d2:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80058d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	6039      	str	r1, [r7, #0]
 80058ee:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2204      	movs	r2, #4
 80058f8:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2201      	movs	r2, #1
 80058fe:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2201      	movs	r2, #1
 8005904:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2202      	movs	r2, #2
 800590a:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2201      	movs	r2, #1
 8005910:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2250      	movs	r2, #80	@ 0x50
 8005916:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2264      	movs	r2, #100	@ 0x64
 800591c:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f241 023d 	movw	r2, #4157	@ 0x103d
 8005924:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2210      	movs	r2, #16
 800592a:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2232      	movs	r2, #50	@ 0x32
 8005930:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2264      	movs	r2, #100	@ 0x64
 8005936:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	22b4      	movs	r2, #180	@ 0xb4
 8005942:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8005950:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2208      	movs	r2, #8
 8005956:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2288      	movs	r2, #136	@ 0x88
 800595e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2208      	movs	r2, #8
 8005966:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005978:	849a      	strh	r2, [r3, #36]	@ 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	84da      	strh	r2, [r3, #38]	@ 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	79fa      	ldrb	r2, [r7, #7]
 8005984:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f64f 72ce 	movw	r2, #65486	@ 0xffce
 800598e:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2232      	movs	r2, #50	@ 0x32
 8005994:	86da      	strh	r2, [r3, #54]	@ 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800599c:	871a      	strh	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	228c      	movs	r2, #140	@ 0x8c
 80059a2:	875a      	strh	r2, [r3, #58]	@ 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2250      	movs	r2, #80	@ 0x50
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2232      	movs	r2, #50	@ 0x32
 80059b0:	87da      	strh	r2, [r3, #62]	@ 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80059b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	221e      	movs	r2, #30
 80059d2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	220e      	movs	r2, #14
 80059d8:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f642 7294 	movw	r2, #12180	@ 0x2f94
 80059e0:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	220e      	movs	r2, #14
 80059e6:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	220a      	movs	r2, #10
 80059ec:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2206      	movs	r2, #6
 80059f2:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	220e      	movs	r2, #14
 80059f8:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	220a      	movs	r2, #10
 80059fe:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2206      	movs	r2, #6
 8005a04:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2209      	movs	r2, #9
 8005a0a:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2205      	movs	r2, #5
 8005a10:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2203      	movs	r2, #3
 8005a16:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2206      	movs	r2, #6
 8005a1c:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2206      	movs	r2, #6
 8005a22:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2206      	movs	r2, #6
 8005a28:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2221      	movs	r2, #33	@ 0x21
 8005a34:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	223c      	movs	r2, #60	@ 0x3c
 8005a46:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	223c      	movs	r2, #60	@ 0x3c
 8005a4c:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	223c      	movs	r2, #60	@ 0x3c
 8005a52:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2280      	movs	r2, #128	@ 0x80
 8005a58:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2280      	movs	r2, #128	@ 0x80
 8005a5e:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2280      	movs	r2, #128	@ 0x80
 8005a64:	845a      	strh	r2, [r3, #34]	@ 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2210      	movs	r2, #16
 8005a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005aac:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f640 22be 	movw	r2, #2750	@ 0xabe
 8005ab6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	22fa      	movs	r2, #250	@ 0xfa
 8005abe:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ac8:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8005ad2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8005adc:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8005ae6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8005af0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8005afa:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	22c8      	movs	r2, #200	@ 0xc8
 8005b02:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f640 1238 	movw	r2, #2360	@ 0x938
 8005b0c:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f640 1247 	movw	r2, #2375	@ 0x947
 8005b1e:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f640 4235 	movw	r2, #3125	@ 0xc35
 8005b28:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f241 2270 	movw	r2, #4720	@ 0x1270
 8005b32:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f640 429e 	movw	r2, #3230	@ 0xc9e
 8005b3c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f241 228e 	movw	r2, #4750	@ 0x128e
 8005b46:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f641 02ce 	movw	r2, #6350	@ 0x18ce
 8005b50:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	22fa      	movs	r2, #250	@ 0xfa
 8005b68:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8005b72:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 8005b7c:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f241 1294 	movw	r2, #4500	@ 0x1194
 8005b86:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8005b90:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	22c8      	movs	r2, #200	@ 0xc8
 8005b98:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8005bc2:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8005bcc:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f640 720a 	movw	r2, #3850	@ 0xf0a
 8005bd6:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8005c18:	859a      	strh	r2, [r3, #44]	@ 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8005c20:	85da      	strh	r2, [r3, #46]	@ 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8005c28:	861a      	strh	r2, [r3, #48]	@ 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8005c30:	865a      	strh	r2, [r3, #50]	@ 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8005c40:	63da      	str	r2, [r3, #60]	@ 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8005c48:	641a      	str	r2, [r3, #64]	@ 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8005c50:	645a      	str	r2, [r3, #68]	@ 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8005c58:	649a      	str	r2, [r3, #72]	@ 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f242 3228 	movw	r2, #9000	@ 0x2328
 8005c60:	64da      	str	r2, [r3, #76]	@ 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f241 7270 	movw	r2, #6000	@ 0x1770
 8005c68:	651a      	str	r2, [r3, #80]	@ 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c70:	655a      	str	r2, [r3, #84]	@ 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005c78:	659a      	str	r2, [r3, #88]	@ 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005c80:	65da      	str	r2, [r3, #92]	@ 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005c88:	661a      	str	r2, [r3, #96]	@ 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005c90:	665a      	str	r2, [r3, #100]	@ 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8005c98:	66da      	str	r2, [r3, #108]	@ 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8005ca0:	671a      	str	r2, [r3, #112]	@ 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8005ca8:	675a      	str	r2, [r3, #116]	@ 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8005cb0:	679a      	str	r2, [r3, #120]	@ 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	669a      	str	r2, [r3, #104]	@ 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8005cbe:	67da      	str	r2, [r3, #124]	@ 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8005cc6:	869a      	strh	r2, [r3, #52]	@ 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8005cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2206      	movs	r2, #6
 8005ce6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8005cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8005d0c:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2238      	movs	r2, #56	@ 0x38
 8005d12:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2270      	movs	r2, #112	@ 0x70
 8005d1e:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2210      	movs	r2, #16
 8005d24:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2264      	movs	r2, #100	@ 0x64
 8005d2a:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d32:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	220f      	movs	r2, #15
 8005d38:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2234      	movs	r2, #52	@ 0x34
 8005d3e:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	22c8      	movs	r2, #200	@ 0xc8
 8005d44:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005d4c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005d54:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8005d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b087      	sub	sp, #28
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
 8005d72:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8005d7e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2211      	movs	r2, #17
 8005dc0:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	22ff      	movs	r2, #255	@ 0xff
 8005e1a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	220b      	movs	r2, #11
 8005e54:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	220d      	movs	r2, #13
 8005e68:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8005e90:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2238      	movs	r2, #56	@ 0x38
 8005e9c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	22ff      	movs	r2, #255	@ 0xff
 8005ea2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	221a      	movs	r2, #26
 8005eb4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	22cc      	movs	r2, #204	@ 0xcc
 8005ecc:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	220b      	movs	r2, #11
 8005ed2:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	22f5      	movs	r2, #245	@ 0xf5
 8005ede:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2209      	movs	r2, #9
 8005ee4:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2278      	movs	r2, #120	@ 0x78
 8005f00:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2207      	movs	r2, #7
 8005f12:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2221      	movs	r2, #33	@ 0x21
 8005f18:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2243      	movs	r2, #67	@ 0x43
 8005f1e:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2210      	movs	r2, #16
 8005f24:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2232      	movs	r2, #50	@ 0x32
 8005f2a:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2254      	movs	r2, #84	@ 0x54
 8005f30:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2207      	movs	r2, #7
 8005f36:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2221      	movs	r2, #33	@ 0x21
 8005f3c:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2243      	movs	r2, #67	@ 0x43
 8005f42:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2210      	movs	r2, #16
 8005f48:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2243      	movs	r2, #67	@ 0x43
 8005f54:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2205      	movs	r2, #5
 8005f5a:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2207      	movs	r2, #7
 8005f66:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2221      	movs	r2, #33	@ 0x21
 8005f6c:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2243      	movs	r2, #67	@ 0x43
 8005f72:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2210      	movs	r2, #16
 8005f78:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2232      	movs	r2, #50	@ 0x32
 8005f7e:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2254      	movs	r2, #84	@ 0x54
 8005f84:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f8c:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f94:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8005f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9e:	2210      	movs	r2, #16
 8005fa0:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8005fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005faa:	220f      	movs	r2, #15
 8005fac:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8005fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
	pdynamic->system__seed_config =
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	220b      	movs	r2, #11
 8005fe6:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2209      	movs	r2, #9
 8005fec:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8005ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff8:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	2201      	movs	r2, #1
 8006002:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
	pdynamic->sd_config__first_order_select =
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006010:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
	pdynamic->sd_config__quantifier         =
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	22c7      	movs	r2, #199	@ 0xc7
 800601c:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	22ff      	movs	r2, #255	@ 0xff
 8006022:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	22db      	movs	r2, #219	@ 0xdb
 8006028:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	2202      	movs	r2, #2
 800602e:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	2200      	movs	r2, #0
 8006034:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	2201      	movs	r2, #1
 800603a:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	2201      	movs	r2, #1
 8006040:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	2221      	movs	r2, #33	@ 0x21
 8006046:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8006048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800604c:	4618      	mov	r0, r3
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b090      	sub	sp, #64	@ 0x40
 800605c:	af0a      	add	r7, sp, #40	@ 0x28
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	9303      	str	r3, [sp, #12]
 800606e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006070:	9302      	str	r3, [sp, #8]
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	68b8      	ldr	r0, [r7, #8]
 8006082:	f7ff fe70 	bl	8005d66 <VL53LX_preset_mode_standard_ranging>
 8006086:	4603      	mov	r3, r0
 8006088:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800608a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d171      	bne.n	8006176 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006098:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	9308      	str	r3, [sp, #32]
 800609e:	2305      	movs	r3, #5
 80060a0:	9307      	str	r3, [sp, #28]
 80060a2:	2304      	movs	r3, #4
 80060a4:	9306      	str	r3, [sp, #24]
 80060a6:	2303      	movs	r3, #3
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	2302      	movs	r3, #2
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	2301      	movs	r3, #1
 80060b0:	9303      	str	r3, [sp, #12]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9302      	str	r3, [sp, #8]
 80060b6:	2304      	movs	r3, #4
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	2303      	movs	r3, #3
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2302      	movs	r3, #2
 80060c0:	2201      	movs	r2, #1
 80060c2:	2100      	movs	r1, #0
 80060c4:	2007      	movs	r0, #7
 80060c6:	f000 ff66 	bl	8006f96 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	3302      	adds	r3, #2
 80060ce:	9308      	str	r3, [sp, #32]
 80060d0:	2305      	movs	r3, #5
 80060d2:	9307      	str	r3, [sp, #28]
 80060d4:	2304      	movs	r3, #4
 80060d6:	9306      	str	r3, [sp, #24]
 80060d8:	2303      	movs	r3, #3
 80060da:	9305      	str	r3, [sp, #20]
 80060dc:	2302      	movs	r3, #2
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	2301      	movs	r3, #1
 80060e2:	9303      	str	r3, [sp, #12]
 80060e4:	2300      	movs	r3, #0
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	2304      	movs	r3, #4
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	2303      	movs	r3, #3
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2302      	movs	r3, #2
 80060f2:	2201      	movs	r2, #1
 80060f4:	2100      	movs	r1, #0
 80060f6:	2007      	movs	r0, #7
 80060f8:	f000 ffdd 	bl	80070b6 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	2209      	movs	r2, #9
 8006100:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	220b      	movs	r2, #11
 8006106:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	2209      	movs	r2, #9
 800610c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	220b      	movs	r2, #11
 8006112:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	2220      	movs	r2, #32
 800611e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	2200      	movs	r2, #0
 8006124:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	221a      	movs	r2, #26
 800612a:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	2200      	movs	r2, #0
 8006130:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	2228      	movs	r2, #40	@ 0x28
 8006136:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	2200      	movs	r2, #0
 800613c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	2221      	movs	r2, #33	@ 0x21
 8006142:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	22f5      	movs	r2, #245	@ 0xf5
 8006148:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2208      	movs	r2, #8
 800614e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2288      	movs	r2, #136	@ 0x88
 8006156:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f9e6 	bl	8006536 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	229b      	movs	r2, #155	@ 0x9b
 800616e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	2226      	movs	r2, #38	@ 0x26
 8006174:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b090      	sub	sp, #64	@ 0x40
 8006186:	af0a      	add	r7, sp, #40	@ 0x28
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006190:	2300      	movs	r3, #0
 8006192:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619a:	9303      	str	r3, [sp, #12]
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	9302      	str	r3, [sp, #8]
 80061a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff ff52 	bl	8006058 <VL53LX_preset_mode_histogram_ranging>
 80061b4:	4603      	mov	r3, r0
 80061b6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80061b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d178      	bne.n	80062b2 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	9308      	str	r3, [sp, #32]
 80061c4:	2305      	movs	r3, #5
 80061c6:	9307      	str	r3, [sp, #28]
 80061c8:	2304      	movs	r3, #4
 80061ca:	9306      	str	r3, [sp, #24]
 80061cc:	2303      	movs	r3, #3
 80061ce:	9305      	str	r3, [sp, #20]
 80061d0:	2302      	movs	r3, #2
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	2301      	movs	r3, #1
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	2300      	movs	r3, #0
 80061da:	9302      	str	r3, [sp, #8]
 80061dc:	2304      	movs	r3, #4
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	2303      	movs	r3, #3
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	2302      	movs	r3, #2
 80061e6:	2201      	movs	r2, #1
 80061e8:	2100      	movs	r1, #0
 80061ea:	2007      	movs	r0, #7
 80061ec:	f000 fed3 	bl	8006f96 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	3302      	adds	r3, #2
 80061f4:	9308      	str	r3, [sp, #32]
 80061f6:	2305      	movs	r3, #5
 80061f8:	9307      	str	r3, [sp, #28]
 80061fa:	2304      	movs	r3, #4
 80061fc:	9306      	str	r3, [sp, #24]
 80061fe:	2303      	movs	r3, #3
 8006200:	9305      	str	r3, [sp, #20]
 8006202:	2302      	movs	r3, #2
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	2301      	movs	r3, #1
 8006208:	9303      	str	r3, [sp, #12]
 800620a:	2300      	movs	r3, #0
 800620c:	9302      	str	r3, [sp, #8]
 800620e:	2304      	movs	r3, #4
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	2303      	movs	r3, #3
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	2302      	movs	r3, #2
 8006218:	2201      	movs	r2, #1
 800621a:	2100      	movs	r1, #0
 800621c:	2007      	movs	r0, #7
 800621e:	f000 ff4a 	bl	80070b6 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f982 	bl	8006536 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2209      	movs	r2, #9
 8006236:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	220b      	movs	r2, #11
 800623c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	2221      	movs	r2, #33	@ 0x21
 8006248:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	2200      	movs	r2, #0
 800624e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	221b      	movs	r2, #27
 8006254:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2200      	movs	r2, #0
 800625a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2229      	movs	r2, #41	@ 0x29
 8006260:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	2200      	movs	r2, #0
 8006266:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2222      	movs	r2, #34	@ 0x22
 800626c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2209      	movs	r2, #9
 8006272:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	22f5      	movs	r2, #245	@ 0xf5
 8006278:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	2209      	movs	r2, #9
 800627e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	220b      	movs	r2, #11
 8006284:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8006286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006288:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800628e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006290:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2208      	movs	r2, #8
 800629a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2288      	movs	r2, #136	@ 0x88
 80062a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	229b      	movs	r2, #155	@ 0x9b
 80062aa:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	2226      	movs	r2, #38	@ 0x26
 80062b0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80062b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b090      	sub	sp, #64	@ 0x40
 80062c2:	af0a      	add	r7, sp, #40	@ 0x28
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	9303      	str	r3, [sp, #12]
 80062d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062da:	9302      	str	r3, [sp, #8]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f7ff feb4 	bl	8006058 <VL53LX_preset_mode_histogram_ranging>
 80062f0:	4603      	mov	r3, r0
 80062f2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80062f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d178      	bne.n	80063ee <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	9308      	str	r3, [sp, #32]
 8006300:	2303      	movs	r3, #3
 8006302:	9307      	str	r3, [sp, #28]
 8006304:	2302      	movs	r3, #2
 8006306:	9306      	str	r3, [sp, #24]
 8006308:	2301      	movs	r3, #1
 800630a:	9305      	str	r3, [sp, #20]
 800630c:	2302      	movs	r3, #2
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	2301      	movs	r3, #1
 8006312:	9303      	str	r3, [sp, #12]
 8006314:	2300      	movs	r3, #0
 8006316:	9302      	str	r3, [sp, #8]
 8006318:	2302      	movs	r3, #2
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	2302      	movs	r3, #2
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	2301      	movs	r3, #1
 8006322:	2201      	movs	r2, #1
 8006324:	2100      	movs	r1, #0
 8006326:	2007      	movs	r0, #7
 8006328:	f000 fe35 	bl	8006f96 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	3302      	adds	r3, #2
 8006330:	9308      	str	r3, [sp, #32]
 8006332:	2303      	movs	r3, #3
 8006334:	9307      	str	r3, [sp, #28]
 8006336:	2302      	movs	r3, #2
 8006338:	9306      	str	r3, [sp, #24]
 800633a:	2301      	movs	r3, #1
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	2302      	movs	r3, #2
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	2301      	movs	r3, #1
 8006344:	9303      	str	r3, [sp, #12]
 8006346:	2300      	movs	r3, #0
 8006348:	9302      	str	r3, [sp, #8]
 800634a:	2302      	movs	r3, #2
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	2302      	movs	r3, #2
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	2301      	movs	r3, #1
 8006354:	2201      	movs	r2, #1
 8006356:	2100      	movs	r1, #0
 8006358:	2007      	movs	r0, #7
 800635a:	f000 feac 	bl	80070b6 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f8e4 	bl	8006536 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	2205      	movs	r2, #5
 8006372:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	2207      	movs	r2, #7
 8006378:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	2236      	movs	r2, #54	@ 0x36
 8006384:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	2200      	movs	r2, #0
 800638a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	2228      	movs	r2, #40	@ 0x28
 8006390:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	2200      	movs	r2, #0
 8006396:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	2244      	movs	r2, #68	@ 0x44
 800639c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	2200      	movs	r2, #0
 80063a2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	2233      	movs	r2, #51	@ 0x33
 80063a8:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2205      	movs	r2, #5
 80063ae:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	22f5      	movs	r2, #245	@ 0xf5
 80063b4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	2205      	movs	r2, #5
 80063ba:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	2207      	movs	r2, #7
 80063c0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80063c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c4:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80063ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063cc:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2208      	movs	r2, #8
 80063d6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2248      	movs	r2, #72	@ 0x48
 80063de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	229b      	movs	r2, #155	@ 0x9b
 80063e6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	2226      	movs	r2, #38	@ 0x26
 80063ec:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80063ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b090      	sub	sp, #64	@ 0x40
 80063fe:	af0a      	add	r7, sp, #40	@ 0x28
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006408:	2300      	movs	r3, #0
 800640a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff fe16 	bl	8006058 <VL53LX_preset_mode_histogram_ranging>
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8006430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d178      	bne.n	800652a <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	9308      	str	r3, [sp, #32]
 800643c:	2302      	movs	r3, #2
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	2302      	movs	r3, #2
 8006442:	9306      	str	r3, [sp, #24]
 8006444:	2301      	movs	r3, #1
 8006446:	9305      	str	r3, [sp, #20]
 8006448:	2301      	movs	r3, #1
 800644a:	9304      	str	r3, [sp, #16]
 800644c:	2301      	movs	r3, #1
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	2300      	movs	r3, #0
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	2301      	movs	r3, #1
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	2301      	movs	r3, #1
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	2301      	movs	r3, #1
 800645e:	2200      	movs	r2, #0
 8006460:	2107      	movs	r1, #7
 8006462:	2007      	movs	r0, #7
 8006464:	f000 fd97 	bl	8006f96 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	3302      	adds	r3, #2
 800646c:	9308      	str	r3, [sp, #32]
 800646e:	2302      	movs	r3, #2
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	2302      	movs	r3, #2
 8006474:	9306      	str	r3, [sp, #24]
 8006476:	2301      	movs	r3, #1
 8006478:	9305      	str	r3, [sp, #20]
 800647a:	2301      	movs	r3, #1
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	2301      	movs	r3, #1
 8006480:	9303      	str	r3, [sp, #12]
 8006482:	2300      	movs	r3, #0
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	2301      	movs	r3, #1
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	2301      	movs	r3, #1
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	2301      	movs	r3, #1
 8006490:	2200      	movs	r2, #0
 8006492:	2107      	movs	r1, #7
 8006494:	2007      	movs	r0, #7
 8006496:	f000 fe0e 	bl	80070b6 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f846 	bl	8006536 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	2203      	movs	r2, #3
 80064ae:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	2205      	movs	r2, #5
 80064b4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	2252      	movs	r2, #82	@ 0x52
 80064c0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	2200      	movs	r2, #0
 80064c6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	2237      	movs	r2, #55	@ 0x37
 80064cc:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	2200      	movs	r2, #0
 80064d2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	2266      	movs	r2, #102	@ 0x66
 80064d8:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	2200      	movs	r2, #0
 80064de:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	2244      	movs	r2, #68	@ 0x44
 80064e4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2203      	movs	r2, #3
 80064ea:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	22f5      	movs	r2, #245	@ 0xf5
 80064f0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	2203      	movs	r2, #3
 80064f6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	2205      	movs	r2, #5
 80064fc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80064fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006500:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2208      	movs	r2, #8
 8006512:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2228      	movs	r2, #40	@ 0x28
 800651a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pdynamic->system__sequence_config =
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	22bb      	movs	r2, #187	@ 0xbb
 8006522:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	2226      	movs	r2, #38	@ 0x26
 8006528:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800652a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	7a12      	ldrb	r2, [r2, #8]
 8006580:	4413      	add	r3, r2
 8006582:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	7892      	ldrb	r2, [r2, #2]
 80065c4:	4413      	add	r3, r2
 80065c6:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	7912      	ldrb	r2, [r2, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8006608:	bf00      	nop
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	79db      	ldrb	r3, [r3, #7]
				<< 8)
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	7a12      	ldrb	r2, [r2, #8]
 800665c:	4413      	add	r3, r2
 800665e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	785b      	ldrb	r3, [r3, #1]
				<< 8)
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	7892      	ldrb	r2, [r2, #2]
 8006698:	4413      	add	r3, r2
 800669a:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	78db      	ldrb	r3, [r3, #3]
				<< 8)
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	b29b      	uxth	r3, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	7912      	ldrb	r2, [r2, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 80066c4:	bf00      	nop
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	332c      	adds	r3, #44	@ 0x2c
 800671a:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2202      	movs	r2, #2
 800672c:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2200      	movs	r2, #0
 8006732:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2200      	movs	r2, #0
 8006744:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2202      	movs	r2, #2
 800674a:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	735a      	strb	r2, [r3, #13]

}
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 800676c:	2300      	movs	r3, #0
 800676e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	332c      	adds	r3, #44	@ 0x2c
 8006778:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f893 339c 	ldrb.w	r3, [r3, #924]	@ 0x39c
 8006780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d115      	bne.n	80067b4 <VL53LX_update_ll_driver_rd_state+0x50>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2203      	movs	r2, #3
 800678c:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2202      	movs	r2, #2
 80067a4:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	735a      	strb	r2, [r3, #13]
 80067b2:	e0bd      	b.n	8006930 <VL53LX_update_ll_driver_rd_state+0x1cc>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	7a1b      	ldrb	r3, [r3, #8]
 80067b8:	2bff      	cmp	r3, #255	@ 0xff
 80067ba:	d103      	bne.n	80067c4 <VL53LX_update_ll_driver_rd_state+0x60>
			pstate->rd_stream_count = 0x80;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2280      	movs	r2, #128	@ 0x80
 80067c0:	721a      	strb	r2, [r3, #8]
 80067c2:	e005      	b.n	80067d0 <VL53LX_update_ll_driver_rd_state+0x6c>
		else
			pstate->rd_stream_count++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	7a1b      	ldrb	r3, [r3, #8]
 80067c8:	3301      	adds	r3, #1
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7a19      	ldrb	r1, [r3, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f103 0209 	add.w	r2, r3, #9
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	330a      	adds	r3, #10
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f002 fd47 	bl	8009272 <VL53LX_update_internal_stream_counters>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	7adb      	ldrb	r3, [r3, #11]
 80067ec:	f083 0302 	eor.w	r3, r3, #2
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	79db      	ldrb	r3, [r3, #7]
 80067fa:	3b03      	subs	r3, #3
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	f200 8081 	bhi.w	8006904 <VL53LX_update_ll_driver_rd_state+0x1a0>
 8006802:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <VL53LX_update_ll_driver_rd_state+0xa4>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	08006821 	.word	0x08006821
 800680c:	08006905 	.word	0x08006905
 8006810:	08006905 	.word	0x08006905
 8006814:	08006873 	.word	0x08006873
 8006818:	080068a9 	.word	0x080068a9
 800681c:	080068d3 	.word	0x080068d3

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f893 3396 	ldrb.w	r3, [r3, #918]	@ 0x396
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	dd03      	ble.n	8006836 <VL53LX_update_ll_driver_rd_state+0xd2>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2206      	movs	r2, #6
 8006832:	71da      	strb	r2, [r3, #7]
 8006834:	e00d      	b.n	8006852 <VL53LX_update_ll_driver_rd_state+0xee>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
				if (pstate->rd_zone_id >=
 8006840:	429a      	cmp	r2, r3
 8006842:	d303      	bcc.n	800684c <VL53LX_update_ll_driver_rd_state+0xe8>
					pstate->rd_device_state =
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2208      	movs	r2, #8
 8006848:	71da      	strb	r2, [r3, #7]
 800684a:	e002      	b.n	8006852 <VL53LX_update_ll_driver_rd_state+0xee>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2207      	movs	r2, #7
 8006850:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	735a      	strb	r2, [r3, #13]

			break;
 8006870:	e05e      	b.n	8006930 <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 8006894:	429a      	cmp	r2, r3
 8006896:	d303      	bcc.n	80068a0 <VL53LX_update_ll_driver_rd_state+0x13c>
				pstate->rd_device_state =
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2208      	movs	r2, #8
 800689c:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800689e:	e047      	b.n	8006930 <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2207      	movs	r2, #7
 80068a4:	71da      	strb	r2, [r3, #7]
			break;
 80068a6:	e043      	b.n	8006930 <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	7b5b      	ldrb	r3, [r3, #13]
 80068ac:	3301      	adds	r3, #1
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 80068be:	429a      	cmp	r2, r3
 80068c0:	d303      	bcc.n	80068ca <VL53LX_update_ll_driver_rd_state+0x166>
				pstate->rd_device_state =
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2208      	movs	r2, #8
 80068c6:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80068c8:	e032      	b.n	8006930 <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2207      	movs	r2, #7
 80068ce:	71da      	strb	r2, [r3, #7]
			break;
 80068d0:	e02e      	b.n	8006930 <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	7b1b      	ldrb	r3, [r3, #12]
 80068dc:	f083 0301 	eor.w	r3, r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->rd_zone_id >=
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d303      	bcc.n	80068fc <VL53LX_update_ll_driver_rd_state+0x198>
				pstate->rd_device_state =
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2208      	movs	r2, #8
 80068f8:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 80068fa:	e019      	b.n	8006930 <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2207      	movs	r2, #7
 8006900:	71da      	strb	r2, [r3, #7]
			break;
 8006902:	e015      	b.n	8006930 <VL53LX_update_ll_driver_rd_state+0x1cc>

		default:
			pstate->rd_device_state  =
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2203      	movs	r2, #3
 8006908:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2202      	movs	r2, #2
 8006920:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	735a      	strb	r2, [r3, #13]
			break;
 800692e:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8006930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800693c:	b480      	push	{r7}
 800693e:	b08d      	sub	sp, #52	@ 0x34
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8006944:	2300      	movs	r3, #0
 8006946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	62bb      	str	r3, [r7, #40]	@ 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8006954:	3320      	adds	r3, #32
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	332c      	adds	r3, #44	@ 0x2c
 800695c:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 800695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006960:	f203 339e 	addw	r3, r3, #926	@ 0x39e
 8006964:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8006966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006968:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800696c:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006974:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t   histogram_mode        = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	78db      	ldrb	r3, [r3, #3]
 800699e:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80069a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a2:	f893 339c 	ldrb.w	r3, [r3, #924]	@ 0x39c
 80069a6:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bf14      	ite	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	2300      	moveq	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
	histogram_mode =
 80069b4:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80069ba:	111b      	asrs	r3, r3, #4
 80069bc:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (histogram_mode)
 80069c6:	7c7b      	ldrb	r3, [r7, #17]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80069d2:	111b      	asrs	r3, r3, #4
 80069d4:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	f893 339c 	ldrb.w	r3, [r3, #924]	@ 0x39c
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d04e      	beq.n	8006a8a <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	79db      	ldrb	r3, [r3, #7]
 80069f0:	2b06      	cmp	r3, #6
 80069f2:	d109      	bne.n	8006a08 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 80069f4:	7c7b      	ldrb	r3, [r7, #17]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d14a      	bne.n	8006a90 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 80069fa:	7cfb      	ldrb	r3, [r7, #19]
 80069fc:	2b12      	cmp	r3, #18
 80069fe:	d047      	beq.n	8006a90 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8006a00:	23ef      	movs	r3, #239	@ 0xef
 8006a02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006a06:	e043      	b.n	8006a90 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	7a1b      	ldrb	r3, [r3, #8]
 8006a0c:	7cba      	ldrb	r2, [r7, #18]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d002      	beq.n	8006a18 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8006a12:	23ee      	movs	r3, #238	@ 0xee
 8006a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	7adb      	ldrb	r3, [r3, #11]
 8006a1c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d002      	beq.n	8006a2a <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8006a24:	23ed      	movs	r3, #237	@ 0xed
 8006a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	7b5b      	ldrb	r3, [r3, #13]
 8006a2e:	4619      	mov	r1, r3
		expected_stream_count =
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	460b      	mov	r3, r1
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	7b5b      	ldrb	r3, [r3, #13]
 8006a46:	4619      	mov	r1, r3
		expected_gph_id =
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4413      	add	r3, r2
 8006a54:	3303      	adds	r3, #3
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8006a5a:	7c3a      	ldrb	r2, [r7, #16]
 8006a5c:	7cbb      	ldrb	r3, [r7, #18]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d00a      	beq.n	8006a78 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <VL53LX_check_ll_driver_rd_state+0x136>
 8006a6c:	7cbb      	ldrb	r3, [r7, #18]
 8006a6e:	2bff      	cmp	r3, #255	@ 0xff
 8006a70:	d002      	beq.n	8006a78 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8006a72:	23ec      	movs	r3, #236	@ 0xec
 8006a74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8006a78:	7bfa      	ldrb	r2, [r7, #15]
 8006a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d005      	beq.n	8006a8e <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8006a82:	23eb      	movs	r3, #235	@ 0xeb
 8006a84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006a88:	e002      	b.n	8006a90 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8006a8a:	bf00      	nop
 8006a8c:	e000      	b.n	8006a90 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8006a8e:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8006a90:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3734      	adds	r7, #52	@ 0x34
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8006ab6:	3320      	adds	r3, #32
 8006ab8:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	332c      	adds	r3, #44	@ 0x2c
 8006abe:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006ac6:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f893 339c 	ldrb.w	r3, [r3, #924]	@ 0x39c
 8006ace:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d11b      	bne.n	8006b0e <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2200      	movs	r2, #0
 8006aec:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2202      	movs	r2, #2
 8006af2:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2200      	movs	r2, #0
 8006af8:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2200      	movs	r2, #0
 8006afe:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	773b      	strb	r3, [r7, #28]
 8006b0c:	e0b1      	b.n	8006c72 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	791b      	ldrb	r3, [r3, #4]
 8006b12:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	799b      	ldrb	r3, [r3, #6]
 8006b18:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	785b      	ldrb	r3, [r3, #1]
 8006b24:	2bff      	cmp	r3, #255	@ 0xff
 8006b26:	d103      	bne.n	8006b30 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2280      	movs	r2, #128	@ 0x80
 8006b2c:	705a      	strb	r2, [r3, #1]
 8006b2e:	e005      	b.n	8006b3c <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	3301      	adds	r3, #1
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	7859      	ldrb	r1, [r3, #1]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3303      	adds	r3, #3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f002 fb92 	bl	8009272 <VL53LX_update_internal_stream_counters>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	791b      	ldrb	r3, [r3, #4]
 8006b56:	f083 0302 	eor.w	r3, r3, #2
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	d053      	beq.n	8006c10 <VL53LX_update_ll_driver_cfg_state+0x170>
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	dc69      	bgt.n	8006c40 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d002      	beq.n	8006b76 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d02d      	beq.n	8006bd0 <VL53LX_update_ll_driver_cfg_state+0x130>
 8006b74:	e064      	b.n	8006c40 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d909      	bls.n	8006b9e <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	795b      	ldrb	r3, [r3, #5]
 8006b94:	f083 0301 	eor.w	r3, r3, #1
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f893 3357 	ldrb.w	r3, [r3, #855]	@ 0x357
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	70da      	strb	r2, [r3, #3]
 8006bba:	e005      	b.n	8006bc8 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2204      	movs	r2, #4
 8006bcc:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8006bce:	e050      	b.n	8006c72 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	799b      	ldrb	r3, [r3, #6]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d940      	bls.n	8006c6c <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2200      	movs	r2, #0
 8006bee:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	795b      	ldrb	r3, [r3, #5]
 8006bf4:	f083 0301 	eor.w	r3, r3, #1
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d031      	beq.n	8006c6c <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2205      	movs	r2, #5
 8006c0c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8006c0e:	e02d      	b.n	8006c6c <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	799b      	ldrb	r3, [r3, #6]
 8006c14:	3301      	adds	r3, #1
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
			if (pstate->cfg_zone_id >
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d922      	bls.n	8006c70 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	795b      	ldrb	r3, [r3, #5]
 8006c34:	f083 0301 	eor.w	r3, r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	715a      	strb	r2, [r3, #5]
			}
			break;
 8006c3e:	e017      	b.n	8006c70 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2203      	movs	r2, #3
 8006c44:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2200      	movs	r2, #0
 8006c56:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2200      	movs	r2, #0
 8006c62:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2200      	movs	r2, #0
 8006c68:	719a      	strb	r2, [r3, #6]
			break;
 8006c6a:	e002      	b.n	8006c72 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8006c70:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d11d      	bne.n	8006cb8 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8006c7c:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8006c7e:	7f3b      	ldrb	r3, [r7, #28]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b2d8      	uxtb	r0, r3
 8006c84:	68f9      	ldr	r1, [r7, #12]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	440b      	add	r3, r1
 8006c90:	3302      	adds	r3, #2
 8006c92:	4602      	mov	r2, r0
 8006c94:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	7b5b      	ldrb	r3, [r3, #13]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	7f7b      	ldrb	r3, [r7, #29]
 8006c9e:	f083 0302 	eor.w	r3, r3, #2
 8006ca2:	b2d8      	uxtb	r0, r3
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	3303      	adds	r3, #3
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e013      	b.n	8006ce0 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8006cb8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	7f3a      	ldrb	r2, [r7, #28]
 8006cca:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8006ccc:	7fba      	ldrb	r2, [r7, #30]
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	440b      	add	r3, r1
 8006cda:	3303      	adds	r3, #3
 8006cdc:	7f7a      	ldrb	r2, [r7, #29]
 8006cde:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8006ce0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	7c1a      	ldrb	r2, [r3, #16]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	7c52      	ldrb	r2, [r2, #17]
 8006d06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	7c92      	ldrb	r2, [r2, #18]
 8006d10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	3303      	adds	r3, #3
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	7cd2      	ldrb	r2, [r2, #19]
 8006d1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7d12      	ldrb	r2, [r2, #20]
 8006d24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	3305      	adds	r3, #5
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	7d52      	ldrb	r2, [r2, #21]
 8006d2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	3306      	adds	r3, #6
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7d92      	ldrb	r2, [r2, #22]
 8006d38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	3307      	adds	r3, #7
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	7dd2      	ldrb	r2, [r2, #23]
 8006d42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7e12      	ldrb	r2, [r2, #24]
 8006d4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	3309      	adds	r3, #9
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	7e52      	ldrb	r2, [r2, #25]
 8006d56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	330a      	adds	r3, #10
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7e92      	ldrb	r2, [r2, #26]
 8006d60:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	330b      	adds	r3, #11
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	7ed2      	ldrb	r2, [r2, #27]
 8006d6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	330c      	adds	r3, #12
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7f12      	ldrb	r2, [r2, #28]
 8006d74:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	330d      	adds	r3, #13
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	7f52      	ldrb	r2, [r2, #29]
 8006d7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	330e      	adds	r3, #14
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	7f92      	ldrb	r2, [r2, #30]
 8006d88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	330f      	adds	r3, #15
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	7fd2      	ldrb	r2, [r2, #31]
 8006d92:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	3310      	adds	r3, #16
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006d9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	3311      	adds	r3, #17
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8006daa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	3312      	adds	r3, #18
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8006db6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	3313      	adds	r3, #19
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8006dc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	3314      	adds	r3, #20
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8006dce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	3315      	adds	r3, #21
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8006dda:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	3316      	adds	r3, #22
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8006de6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	3317      	adds	r3, #23
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8006df2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	3318      	adds	r3, #24
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8006dfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	3319      	adds	r3, #25
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8006e0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	331a      	adds	r3, #26
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8006e16:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	331b      	adds	r3, #27
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8006e22:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	331c      	adds	r3, #28
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8006e2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	331d      	adds	r3, #29
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8006e3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	331e      	adds	r3, #30
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8006e46:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	331f      	adds	r3, #31
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8006e52:	701a      	strb	r2, [r3, #0]
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	22ff      	movs	r2, #255	@ 0xff
 8006e6c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	22ff      	movs	r2, #255	@ 0xff
 8006e72:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	22ff      	movs	r2, #255	@ 0xff
 8006e78:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	22ff      	movs	r2, #255	@ 0xff
 8006e7e:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e86:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e8e:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e96:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e9e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ea6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006eae:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006eb6:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ebe:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ec6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ece:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ed6:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ede:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ee6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006eee:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ef6:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006efe:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f06:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f0e:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f16:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	22ff      	movs	r2, #255	@ 0xff
 8006f1c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	6039      	str	r1, [r7, #0]
 8006f36:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2210      	movs	r2, #16
 8006f40:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	79fa      	ldrb	r2, [r7, #7]
 8006f46:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
 8006f4c:	e017      	b.n	8006f7e <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	4613      	mov	r3, r2
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2203      	movs	r2, #3
 8006f64:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2200      	movs	r2, #0
 8006f76:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	73fb      	strb	r3, [r7, #15]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	7bfa      	ldrb	r2, [r7, #15]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d3e2      	bcc.n	8006f4e <V53L1_init_zone_results_structure+0x22>
	}
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8006f96:	b490      	push	{r4, r7}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	71fb      	strb	r3, [r7, #7]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	71bb      	strb	r3, [r7, #6]
 8006fac:	460b      	mov	r3, r1
 8006fae:	717b      	strb	r3, [r7, #5]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8006fb4:	79bb      	ldrb	r3, [r7, #6]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8006fc4:	793b      	ldrb	r3, [r7, #4]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	797b      	ldrb	r3, [r7, #5]
 8006fcc:	4413      	add	r3, r2
 8006fce:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8006fd4:	7d3b      	ldrb	r3, [r7, #20]
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	7c3b      	ldrb	r3, [r7, #16]
 8006fdc:	4413      	add	r3, r2
 8006fde:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8006fe4:	7f3b      	ldrb	r3, [r7, #28]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	7e3b      	ldrb	r3, [r7, #24]
 8006fec:	4413      	add	r3, r2
 8006fee:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8006ff4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007000:	4413      	add	r3, r2
 8007002:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8007008:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	b2da      	uxtb	r2, r3
 8007010:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007014:	4413      	add	r3, r2
 8007016:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8007030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007032:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8007038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703a:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007042:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007044:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	b2da      	uxtb	r2, r3
 800704c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007050:	4413      	add	r3, r2
 8007052:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800705e:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	2200      	movs	r2, #0
 8007064:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800709c:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070a4:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]

}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc90      	pop	{r4, r7}
 80070b4:	4770      	bx	lr

080070b6 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 80070b6:	b490      	push	{r4, r7}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	4604      	mov	r4, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	461a      	mov	r2, r3
 80070c4:	4623      	mov	r3, r4
 80070c6:	71fb      	strb	r3, [r7, #7]
 80070c8:	4603      	mov	r3, r0
 80070ca:	71bb      	strb	r3, [r7, #6]
 80070cc:	460b      	mov	r3, r1
 80070ce:	717b      	strb	r3, [r7, #5]
 80070d0:	4613      	mov	r3, r2
 80070d2:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80070d4:	79bb      	ldrb	r3, [r7, #6]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	4413      	add	r3, r2
 80070de:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80070e4:	793b      	ldrb	r3, [r7, #4]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	797b      	ldrb	r3, [r7, #5]
 80070ec:	4413      	add	r3, r2
 80070ee:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80070f4:	7d3b      	ldrb	r3, [r7, #20]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	7c3b      	ldrb	r3, [r7, #16]
 80070fc:	4413      	add	r3, r2
 80070fe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007106:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	789a      	ldrb	r2, [r3, #2]
 8007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007112:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	78da      	ldrb	r2, [r3, #3]
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	789a      	ldrb	r2, [r3, #2]
 8007128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712a:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800712c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712e:	78da      	ldrb	r2, [r3, #3]
 8007130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007132:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	791a      	ldrb	r2, [r3, #4]
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007142:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8007144:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	b2da      	uxtb	r2, r3
 800714c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007150:	4413      	add	r3, r2
 8007152:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800715e:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	2200      	movs	r2, #0
 8007164:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8007166:	7f3b      	ldrb	r3, [r7, #28]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	b2da      	uxtb	r2, r3
 800716c:	7e3b      	ldrb	r3, [r7, #24]
 800716e:	4413      	add	r3, r2
 8007170:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8007176:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	b2da      	uxtb	r2, r3
 800717e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007182:	4413      	add	r3, r2
 8007184:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800718a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	b2da      	uxtb	r2, r3
 8007192:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007196:	4413      	add	r3, r2
 8007198:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a0:	7bda      	ldrb	r2, [r3, #15]
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	7c1a      	ldrb	r2, [r3, #16]
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	7c5a      	ldrb	r2, [r3, #17]
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071bc:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071c4:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc90      	pop	{r4, r7}
 80071d4:	4770      	bx	lr

080071d6 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	460b      	mov	r3, r1
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	220c      	movs	r2, #12
 80071fe:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8007200:	897b      	ldrh	r3, [r7, #10]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	pdata->vcsel_width                        = 0;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_015                = 0;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	pdata->zero_distance_phase                = 0;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8007236:	2300      	movs	r3, #0
 8007238:	82fb      	strh	r3, [r7, #22]
 800723a:	e015      	b.n	8007268 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 800723c:	8afa      	ldrh	r2, [r7, #22]
 800723e:	897b      	ldrh	r3, [r7, #10]
 8007240:	429a      	cmp	r2, r3
 8007242:	d207      	bcs.n	8007254 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 8007244:	8afb      	ldrh	r3, [r7, #22]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	3302      	adds	r3, #2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	e006      	b.n	8007262 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 8007254:	8afb      	ldrh	r3, [r7, #22]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	3302      	adds	r3, #2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	2200      	movs	r2, #0
 8007260:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8007262:	8afb      	ldrh	r3, [r7, #22]
 8007264:	3301      	adds	r3, #1
 8007266:	82fb      	strh	r3, [r7, #22]
 8007268:	8afb      	ldrh	r3, [r7, #22]
 800726a:	2b0b      	cmp	r3, #11
 800726c:	d9e6      	bls.n	800723c <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 800726e:	bf00      	nop
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	603a      	str	r2, [r7, #0]
 8007286:	80fb      	strh	r3, [r7, #6]
 8007288:	460b      	mov	r3, r1
 800728a:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8007298:	2300      	movs	r3, #0
 800729a:	81fb      	strh	r3, [r7, #14]
 800729c:	e00e      	b.n	80072bc <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800729e:	88ba      	ldrh	r2, [r7, #4]
 80072a0:	89fb      	ldrh	r3, [r7, #14]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	3b01      	subs	r3, #1
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	4413      	add	r3, r2
 80072aa:	89ba      	ldrh	r2, [r7, #12]
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80072b0:	89bb      	ldrh	r3, [r7, #12]
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80072b6:	89fb      	ldrh	r3, [r7, #14]
 80072b8:	3301      	adds	r3, #1
 80072ba:	81fb      	strh	r3, [r7, #14]
 80072bc:	89fa      	ldrh	r2, [r7, #14]
 80072be:	88bb      	ldrh	r3, [r7, #4]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d3ec      	bcc.n	800729e <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	4603      	mov	r3, r0
 80072da:	6039      	str	r1, [r7, #0]
 80072dc:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 80072de:	2300      	movs	r3, #0
 80072e0:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80072e2:	e00a      	b.n	80072fa <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80072e4:	89fb      	ldrh	r3, [r7, #14]
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	b21a      	sxth	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	1c59      	adds	r1, r3, #1
 80072ee:	6039      	str	r1, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	b21b      	sxth	r3, r3
 80072f4:	4313      	orrs	r3, r2
 80072f6:	b21b      	sxth	r3, r3
 80072f8:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	1e5a      	subs	r2, r3, #1
 80072fe:	80fa      	strh	r2, [r7, #6]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1ef      	bne.n	80072e4 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8007304:	89fb      	ldrh	r3, [r7, #14]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	4603      	mov	r3, r0
 800731a:	603a      	str	r2, [r7, #0]
 800731c:	80fb      	strh	r3, [r7, #6]
 800731e:	460b      	mov	r3, r1
 8007320:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800732e:	2300      	movs	r3, #0
 8007330:	81fb      	strh	r3, [r7, #14]
 8007332:	e00f      	b.n	8007354 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8007334:	88ba      	ldrh	r2, [r7, #4]
 8007336:	89fb      	ldrh	r3, [r7, #14]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	4413      	add	r3, r2
 8007340:	89ba      	ldrh	r2, [r7, #12]
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8007346:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800734a:	121b      	asrs	r3, r3, #8
 800734c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800734e:	89fb      	ldrh	r3, [r7, #14]
 8007350:	3301      	adds	r3, #1
 8007352:	81fb      	strh	r3, [r7, #14]
 8007354:	89fa      	ldrh	r2, [r7, #14]
 8007356:	88bb      	ldrh	r3, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d3eb      	bcc.n	8007334 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	4603      	mov	r3, r0
 8007372:	6039      	str	r1, [r7, #0]
 8007374:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8007376:	2300      	movs	r3, #0
 8007378:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	b25b      	sxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	da0e      	bge.n	80073a2 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8007384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007388:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800738a:	e00a      	b.n	80073a2 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800738c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007390:	021b      	lsls	r3, r3, #8
 8007392:	b21a      	sxth	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	1c59      	adds	r1, r3, #1
 8007398:	6039      	str	r1, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b21b      	sxth	r3, r3
 800739e:	4313      	orrs	r3, r2
 80073a0:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	1e5a      	subs	r2, r3, #1
 80073a6:	80fa      	strh	r2, [r7, #6]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1ef      	bne.n	800738c <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 80073ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	460b      	mov	r3, r1
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 80073d6:	2300      	movs	r3, #0
 80073d8:	82fb      	strh	r3, [r7, #22]
 80073da:	e00e      	b.n	80073fa <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80073dc:	897a      	ldrh	r2, [r7, #10]
 80073de:	8afb      	ldrh	r3, [r7, #22]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 80073f4:	8afb      	ldrh	r3, [r7, #22]
 80073f6:	3301      	adds	r3, #1
 80073f8:	82fb      	strh	r3, [r7, #22]
 80073fa:	8afa      	ldrh	r2, [r7, #22]
 80073fc:	897b      	ldrh	r3, [r7, #10]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d3ec      	bcc.n	80073dc <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	6039      	str	r1, [r7, #0]
 800741a:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8007420:	e007      	b.n	8007432 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	021a      	lsls	r2, r3, #8
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	1c59      	adds	r1, r3, #1
 800742a:	6039      	str	r1, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	1e5a      	subs	r2, r3, #1
 8007436:	80fa      	strh	r2, [r7, #6]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f2      	bne.n	8007422 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 800743c:	68fb      	ldr	r3, [r7, #12]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	4603      	mov	r3, r0
 8007452:	6039      	str	r1, [r7, #0]
 8007454:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	b25b      	sxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	da0b      	bge.n	800747c <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8007464:	f04f 33ff 	mov.w	r3, #4294967295
 8007468:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800746a:	e007      	b.n	800747c <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	021a      	lsls	r2, r3, #8
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	1e5a      	subs	r2, r3, #1
 8007480:	80fa      	strh	r2, [r7, #6]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f2      	bne.n	800746c <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8007486:	68fb      	ldr	r3, [r7, #12]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	78fa      	ldrb	r2, [r7, #3]
 80074ac:	f883 239a 	strb.w	r2, [r3, #922]	@ 0x39a

	status = VL53LX_WrByte(
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f893 339a 	ldrb.w	r3, [r3, #922]	@ 0x39a
 80074b6:	461a      	mov	r2, r3
 80074b8:	2185      	movs	r1, #133	@ 0x85
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f00a fd88 	bl	8011fd0 <VL53LX_WrByte>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80074c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 80074dc:	2101      	movs	r1, #1
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff ffd8 	bl	8007494 <VL53LX_set_firmware_enable_register>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80074e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff ffc6 	bl	8007494 <VL53LX_set_firmware_enable_register>
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800750c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	78fa      	ldrb	r2, [r7, #3]
 8007530:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

	status = VL53LX_WrByte(
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 800753a:	461a      	mov	r2, r3
 800753c:	2183      	movs	r1, #131	@ 0x83
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f00a fd46 	bl	8011fd0 <VL53LX_WrByte>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8007548:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8007560:	2101      	movs	r1, #1
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff ffd8 	bl	8007518 <VL53LX_set_powerforce_register>
 8007568:	4603      	mov	r3, r0
 800756a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800756c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8007584:	2100      	movs	r1, #0
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff ffc6 	bl	8007518 <VL53LX_set_powerforce_register>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8007590:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	460a      	mov	r2, r1
 80075a6:	80fb      	strh	r3, [r7, #6]
 80075a8:	4613      	mov	r3, r2
 80075aa:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f002 fee1 	bl	800a382 <VL53LX_calc_pll_period_us>
 80075c0:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80075c2:	797b      	ldrb	r3, [r7, #5]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f003 facd 	bl	800ab64 <VL53LX_decode_vcsel_period>
 80075ca:	4603      	mov	r3, r0
 80075cc:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4613      	mov	r3, r2
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	4413      	add	r3, r2
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	099b      	lsrs	r3, r3, #6
 80075de:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80075e0:	7cfa      	ldrb	r2, [r7, #19]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	fb02 f303 	mul.w	r3, r2, r3
 80075e8:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	099b      	lsrs	r3, r3, #6
 80075ee:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 80075f0:	68fb      	ldr	r3, [r7, #12]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b089      	sub	sp, #36	@ 0x24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4603      	mov	r3, r0
 800760c:	817b      	strh	r3, [r7, #10]
 800760e:	460b      	mov	r3, r1
 8007610:	813b      	strh	r3, [r7, #8]
 8007612:	4613      	mov	r3, r2
 8007614:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	4a23      	ldr	r2, [pc, #140]	@ (80076bc <VL53LX_calc_range_ignore_threshold+0xc0>)
 8007630:	fb82 1203 	smull	r1, r2, r2, r3
 8007634:	1192      	asrs	r2, r2, #6
 8007636:	17db      	asrs	r3, r3, #31
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800763c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007640:	2b00      	cmp	r3, #0
 8007642:	da03      	bge.n	800764c <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8007644:	897b      	ldrh	r3, [r7, #10]
 8007646:	425b      	negs	r3, r3
 8007648:	b29b      	uxth	r3, r3
 800764a:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800764c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	da03      	bge.n	800765c <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8007654:	893b      	ldrh	r3, [r7, #8]
 8007656:	425b      	negs	r3, r3
 8007658:	b29b      	uxth	r3, r3
 800765a:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800765c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007660:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007664:	4413      	add	r3, r2
 8007666:	015b      	lsls	r3, r3, #5
 8007668:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	4a13      	ldr	r2, [pc, #76]	@ (80076bc <VL53LX_calc_range_ignore_threshold+0xc0>)
 800766e:	fb82 1203 	smull	r1, r2, r2, r3
 8007672:	1192      	asrs	r2, r2, #6
 8007674:	17db      	asrs	r3, r3, #31
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	4413      	add	r3, r2
 8007680:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8007682:	79fa      	ldrb	r2, [r7, #7]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	3310      	adds	r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	da00      	bge.n	8007696 <VL53LX_calc_range_ignore_threshold+0x9a>
 8007694:	331f      	adds	r3, #31
 8007696:	115b      	asrs	r3, r3, #5
 8007698:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a0:	db03      	blt.n	80076aa <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80076a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076a6:	83fb      	strh	r3, [r7, #30]
 80076a8:	e001      	b.n	80076ae <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80076ae:	8bfb      	ldrh	r3, [r7, #30]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3724      	adds	r7, #36	@ 0x24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	10624dd3 	.word	0x10624dd3

080076c0 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	e008      	b.n	80076ec <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	031a      	lsls	r2, r3, #12
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	441a      	add	r2, r3
		timeout_mclks   =
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff ffd6 	bl	80076c0 <VL53LX_calc_timeout_mclks>
 8007714:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f887 	bl	800782a <VL53LX_encode_timeout>
 800771c:	4603      	mov	r3, r0
 800771e:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8007720:	897b      	ldrh	r3, [r7, #10]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800772a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8007736:	2100      	movs	r1, #0
 8007738:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800773a:	f04f 0000 	mov.w	r0, #0
 800773e:	f04f 0100 	mov.w	r1, #0
 8007742:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	2000      	movs	r0, #0
 800774a:	4688      	mov	r8, r1
 800774c:	4681      	mov	r9, r0
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	2000      	movs	r0, #0
 8007752:	460c      	mov	r4, r1
 8007754:	4605      	mov	r5, r0
 8007756:	fb04 f009 	mul.w	r0, r4, r9
 800775a:	fb08 f105 	mul.w	r1, r8, r5
 800775e:	4401      	add	r1, r0
 8007760:	fba8 2304 	umull	r2, r3, r8, r4
 8007764:	4419      	add	r1, r3
 8007766:	460b      	mov	r3, r1
 8007768:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800776c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8007770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007774:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8007778:	f143 0b00 	adc.w	fp, r3, #0
 800777c:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8007780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	0b02      	lsrs	r2, r0, #12
 800778e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007792:	0b0b      	lsrs	r3, r1, #12
 8007794:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800779c:	697b      	ldr	r3, [r7, #20]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80077a8:	4770      	bx	lr
	...

080077ac <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 80077c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80077c4:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80077c6:	4413      	add	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da02      	bge.n	80077d6 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e005      	b.n	80077e2 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077dc:	db01      	blt.n	80077e2 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 80077de:	4b05      	ldr	r3, [pc, #20]	@ (80077f4 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 80077e0:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 80077e6:	68bb      	ldr	r3, [r7, #8]

}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	0003ffff 	.word	0x0003ffff

080077f8 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	6039      	str	r1, [r7, #0]
 8007802:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f835 	bl	800787e <VL53LX_decode_timeout>
 8007814:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff ff86 	bl	800772a <VL53LX_calc_timeout_us>
 800781e:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8007820:	68bb      	ldr	r3, [r7, #8]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 800782a:	b480      	push	{r7}
 800782c:	b087      	sub	sp, #28
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d015      	beq.n	8007870 <VL53LX_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3b01      	subs	r3, #1
 8007848:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800784a:	e005      	b.n	8007858 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	085b      	lsrs	r3, r3, #1
 8007850:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007852:	89fb      	ldrh	r3, [r7, #14]
 8007854:	3301      	adds	r3, #1
 8007856:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2bff      	cmp	r3, #255	@ 0xff
 800785c:	d8f6      	bhi.n	800784c <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800785e:	89fb      	ldrh	r3, [r7, #14]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	b29b      	uxth	r3, r3
 8007868:	b2db      	uxtb	r3, r3
 800786a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800786c:	4413      	add	r3, r2
 800786e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007870:	8afb      	ldrh	r3, [r7, #22]
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	4603      	mov	r3, r0
 8007886:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	0a12      	lsrs	r2, r2, #8
 8007894:	b292      	uxth	r2, r2
 8007896:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007898:	3301      	adds	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800789c:	68fb      	ldr	r3, [r7, #12]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b088      	sub	sp, #32
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	607a      	str	r2, [r7, #4]
 80078b6:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80078b8:	2300      	movs	r3, #0
 80078ba:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80078c8:	887b      	ldrh	r3, [r7, #2]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80078ce:	23f1      	movs	r3, #241	@ 0xf1
 80078d0:	77fb      	strb	r3, [r7, #31]
 80078d2:	e05d      	b.n	8007990 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80078d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d6:	799a      	ldrb	r2, [r3, #6]
 80078d8:	887b      	ldrh	r3, [r7, #2]
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fe5d 	bl	800759c <VL53LX_calc_macro_period_us>
 80078e2:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 80078e4:	6979      	ldr	r1, [r7, #20]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff feea 	bl	80076c0 <VL53LX_calc_timeout_mclks>
 80078ec:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2bff      	cmp	r3, #255	@ 0xff
 80078f2:	d901      	bls.n	80078f8 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80078f4:	23ff      	movs	r3, #255	@ 0xff
 80078f6:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80078fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fe:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8007900:	6979      	ldr	r1, [r7, #20]
 8007902:	68b8      	ldr	r0, [r7, #8]
 8007904:	f7ff fef9 	bl	80076fa <VL53LX_calc_encoded_timeout>
 8007908:	4603      	mov	r3, r0
 800790a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800790c:	8a7b      	ldrh	r3, [r7, #18]
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	b29b      	uxth	r3, r3
 8007912:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8007914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007916:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007918:	8a7b      	ldrh	r3, [r7, #18]
 800791a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791e:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8007920:	6979      	ldr	r1, [r7, #20]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fee9 	bl	80076fa <VL53LX_calc_encoded_timeout>
 8007928:	4603      	mov	r3, r0
 800792a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800792c:	8a7b      	ldrh	r3, [r7, #18]
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	b29b      	uxth	r3, r3
 8007932:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8007934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007936:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007938:	8a7b      	ldrh	r3, [r7, #18]
 800793a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800793c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793e:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007942:	7a5a      	ldrb	r2, [r3, #9]
 8007944:	887b      	ldrh	r3, [r7, #2]
 8007946:	4611      	mov	r1, r2
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fe27 	bl	800759c <VL53LX_calc_macro_period_us>
 800794e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8007950:	6979      	ldr	r1, [r7, #20]
 8007952:	68b8      	ldr	r0, [r7, #8]
 8007954:	f7ff fed1 	bl	80076fa <VL53LX_calc_encoded_timeout>
 8007958:	4603      	mov	r3, r0
 800795a:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800795c:	8a7b      	ldrh	r3, [r7, #18]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8007964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007966:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007968:	8a7b      	ldrh	r3, [r7, #18]
 800796a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800796c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796e:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8007970:	6979      	ldr	r1, [r7, #20]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fec1 	bl	80076fa <VL53LX_calc_encoded_timeout>
 8007978:	4603      	mov	r3, r0
 800797a:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800797c:	8a7b      	ldrh	r3, [r7, #18]
 800797e:	0a1b      	lsrs	r3, r3, #8
 8007980:	b29b      	uxth	r3, r3
 8007982:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8007984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007986:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007988:	8a7b      	ldrh	r3, [r7, #18]
 800798a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8007990:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800799c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a0:	b09e      	sub	sp, #120	@ 0x78
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6578      	str	r0, [r7, #84]	@ 0x54
 80079a6:	6539      	str	r1, [r7, #80]	@ 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	int64_t  evts              = 0;
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	int64_t  tmpi              = 0;
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t  tmpo              = 0;
 80079c6:	f04f 0200 	mov.w	r2, #0
 80079ca:	f04f 0300 	mov.w	r3, #0
 80079ce:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80079d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d103      	bne.n	80079e2 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80079da:	23f1      	movs	r3, #241	@ 0xf1
 80079dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80079e0:	e0d6      	b.n	8007b90 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 80079e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 80d2 	beq.w	8007b90 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 80079ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ee:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f040 80cd 	bne.w	8007b90 <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 80079f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fc:	2200      	movs	r2, #0
 80079fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a00:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a06:	460b      	mov	r3, r1
 8007a08:	3301      	adds	r3, #1
 8007a0a:	623b      	str	r3, [r7, #32]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	f143 0300 	adc.w	r3, r3, #0
 8007a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a18:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8007a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a1e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2200      	movs	r2, #0
 8007a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a28:	64fa      	str	r2, [r7, #76]	@ 0x4c
			tmpo   *=
 8007a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007a30:	4602      	mov	r2, r0
 8007a32:	fb02 f203 	mul.w	r2, r2, r3
 8007a36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a38:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8007a3c:	fb01 f303 	mul.w	r3, r1, r3
 8007a40:	441a      	add	r2, r3
 8007a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a44:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a46:	fba3 4501 	umull	r4, r5, r3, r1
 8007a4a:	1953      	adds	r3, r2, r5
 8007a4c:	461d      	mov	r5, r3
 8007a4e:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58
 8007a52:	e9c7 4516 	strd	r4, r5, [r7, #88]	@ 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8007a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007a60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007a64:	460b      	mov	r3, r1
 8007a66:	3301      	adds	r3, #1
 8007a68:	61bb      	str	r3, [r7, #24]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	f143 0300 	adc.w	r3, r3, #0
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007a76:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8007a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2200      	movs	r2, #0
 8007a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a84:	637a      	str	r2, [r7, #52]	@ 0x34
			tmpi   *=
 8007a86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	fb02 f203 	mul.w	r2, r2, r3
 8007a92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a94:	4629      	mov	r1, r5
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	441a      	add	r2, r3
 8007a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	fba3 ab01 	umull	sl, fp, r3, r1
 8007aa4:	eb02 030b 	add.w	r3, r2, fp
 8007aa8:	469b      	mov	fp, r3
 8007aaa:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 8007aae:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8007ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	17da      	asrs	r2, r3, #31
 8007ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
			evts  = tmpo *
 8007abc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007abe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	fb02 f203 	mul.w	r2, r2, r3
 8007ac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007aca:	4629      	mov	r1, r5
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	fba2 8901 	umull	r8, r9, r2, r1
 8007ada:	444b      	add	r3, r9
 8007adc:	4699      	mov	r9, r3
 8007ade:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
 8007ae2:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
			evts += (tmpi/2);
 8007ae6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007aea:	0fd9      	lsrs	r1, r3, #31
 8007aec:	2000      	movs	r0, #0
 8007aee:	6139      	str	r1, [r7, #16]
 8007af0:	6178      	str	r0, [r7, #20]
 8007af2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007af6:	4621      	mov	r1, r4
 8007af8:	1889      	adds	r1, r1, r2
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	4629      	mov	r1, r5
 8007afe:	eb43 0101 	adc.w	r1, r3, r1
 8007b02:	60f9      	str	r1, [r7, #12]
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b10:	4621      	mov	r1, r4
 8007b12:	084a      	lsrs	r2, r1, #1
 8007b14:	4629      	mov	r1, r5
 8007b16:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	104b      	asrs	r3, r1, #1
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007b26:	1814      	adds	r4, r2, r0
 8007b28:	603c      	str	r4, [r7, #0]
 8007b2a:	414b      	adcs	r3, r1
 8007b2c:	607b      	str	r3, [r7, #4]
 8007b2e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007b32:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68


			if (tmpi != 0)
 8007b36:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	d009      	beq.n	8007b52 <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 8007b3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b46:	f7f9 f883 	bl	8000c50 <__aeabi_ldivmod>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			podata->ambient_events_sum = (int32_t)evts;
 8007b52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8007b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b5c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
			podata->VL53LX_p_028 =
 8007b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b62:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 +=
 8007b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8007b6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b6e:	7852      	ldrb	r2, [r2, #1]
 8007b70:	0852      	lsrs	r2, r2, #1
 8007b72:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8007b74:	441a      	add	r2, r3
 8007b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			podata->VL53LX_p_028 /=
 8007b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8007b82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b84:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8007b86:	fb93 f2f2 	sdiv	r2, r3, r2
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b8c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8007b90:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3778      	adds	r7, #120	@ 0x78
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007b9e <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b087      	sub	sp, #28
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f8b3 3332 	ldrh.w	r3, [r3, #818]	@ 0x332
	amb_thresh_low  = 1024 *
 8007bbe:	029b      	lsls	r3, r3, #10
 8007bc0:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f8b3 3334 	ldrh.w	r3, [r3, #820]	@ 0x334
	amb_thresh_high = 1024 *
 8007bc8:	029b      	lsls	r3, r3, #10
 8007bca:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f040 8095 	bne.w	8007d06 <VL53LX_hist_get_bin_sequence_config+0x168>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
		pdata->bin_seq[5] =
 8007be2:	091b      	lsrs	r3, r3, #4
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f893 3325 	ldrb.w	r3, [r3, #805]	@ 0x325
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
		pdata->bin_seq[3] =
 8007c00:	091b      	lsrs	r3, r3, #4
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
		pdata->bin_seq[1] =
 8007c1e:	091b      	lsrs	r3, r3, #4
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	da2c      	bge.n	8007c9c <VL53LX_hist_get_bin_sequence_config+0xfe>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f893 332d 	ldrb.w	r3, [r3, #813]	@ 0x32d
			pdata->bin_seq[5] =
 8007c48:	091b      	lsrs	r3, r3, #4
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f893 332d 	ldrb.w	r3, [r3, #813]	@ 0x32d
			& 0x0F;
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f893 332c 	ldrb.w	r3, [r3, #812]	@ 0x32c
			pdata->bin_seq[3] =
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f893 332c 	ldrb.w	r3, [r3, #812]	@ 0x32c
			& 0x0F;
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f893 332b 	ldrb.w	r3, [r3, #811]	@ 0x32b
			pdata->bin_seq[1] =
 8007c84:	091b      	lsrs	r3, r3, #4
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f893 332b 	ldrb.w	r3, [r3, #811]	@ 0x32b
			& 0x0F;
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	f340 80c2 	ble.w	8007e2e <VL53LX_hist_get_bin_sequence_config+0x290>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
			pdata->bin_seq[5] =
 8007cb0:	091b      	lsrs	r3, r3, #4
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
			& 0x0F;
 8007cbe:	f003 030f 	and.w	r3, r3, #15
 8007cc2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
			pdata->bin_seq[3] =
 8007cce:	091b      	lsrs	r3, r3, #4
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
			& 0x0F;
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
			pdata->bin_seq[1] =
 8007cec:	091b      	lsrs	r3, r3, #4
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
			& 0x0F;
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	731a      	strb	r2, [r3, #12]
 8007d04:	e093      	b.n	8007e2e <VL53LX_hist_get_bin_sequence_config+0x290>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f893 3329 	ldrb.w	r3, [r3, #809]	@ 0x329
			& 0x0F;
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f893 3328 	ldrb.w	r3, [r3, #808]	@ 0x328
			& 0x0F;
 8007d1c:	f003 030f 	and.w	r3, r3, #15
 8007d20:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f893 3328 	ldrb.w	r3, [r3, #808]	@ 0x328
		pdata->bin_seq[3] =
 8007d2c:	091b      	lsrs	r3, r3, #4
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f893 3327 	ldrb.w	r3, [r3, #807]	@ 0x327
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f893 3326 	ldrb.w	r3, [r3, #806]	@ 0x326
		pdata->bin_seq[1] =
 8007d4a:	091b      	lsrs	r3, r3, #4
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f893 3326 	ldrb.w	r3, [r3, #806]	@ 0x326
			& 0x0F;
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	da2c      	bge.n	8007dc8 <VL53LX_hist_get_bin_sequence_config+0x22a>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f893 3330 	ldrb.w	r3, [r3, #816]	@ 0x330
			pdata->bin_seq[5] =
 8007d74:	091b      	lsrs	r3, r3, #4
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f893 3330 	ldrb.w	r3, [r3, #816]	@ 0x330
			& 0x0F;
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f893 332f 	ldrb.w	r3, [r3, #815]	@ 0x32f
			pdata->bin_seq[3] =
 8007d92:	091b      	lsrs	r3, r3, #4
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f893 332f 	ldrb.w	r3, [r3, #815]	@ 0x32f
			& 0x0F;
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f893 332e 	ldrb.w	r3, [r3, #814]	@ 0x32e
			pdata->bin_seq[1] =
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f893 332e 	ldrb.w	r3, [r3, #814]	@ 0x32e
			& 0x0F;
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	dd2c      	ble.n	8007e2e <VL53LX_hist_get_bin_sequence_config+0x290>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
			pdata->bin_seq[5] =
 8007dda:	091b      	lsrs	r3, r3, #4
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
			& 0x0F;
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
			pdata->bin_seq[3] =
 8007df8:	091b      	lsrs	r3, r3, #4
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
			& 0x0F;
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
			pdata->bin_seq[1] =
 8007e16:	091b      	lsrs	r3, r3, #4
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
			& 0x0F;
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8007e2e:	2300      	movs	r3, #0
 8007e30:	75fb      	strb	r3, [r7, #23]
 8007e32:	e007      	b.n	8007e44 <VL53LX_hist_get_bin_sequence_config+0x2a6>
		pdata->bin_rep[i] = 1;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	4413      	add	r3, r2
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	3301      	adds	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	2b05      	cmp	r3, #5
 8007e48:	d9f4      	bls.n	8007e34 <VL53LX_hist_get_bin_sequence_config+0x296>

	LOG_FUNCTION_END(0);

}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b093      	sub	sp, #76	@ 0x4c
 8007e5c:	af04      	add	r7, sp, #16
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_LLDriverData_t *pdev =
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t   p = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	uint16_t  phase_delta      = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t  phase_tolerance  = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	857b      	strh	r3, [r7, #42]	@ 0x2a

	int32_t   events_delta     = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 8007e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e92:	f893 326f 	ldrb.w	r3, [r3, #623]	@ 0x26f
 8007e96:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8007e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9c:	f8b3 3270 	ldrh.w	r3, [r3, #624]	@ 0x270
 8007ea0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8007ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea4:	f8b3 3272 	ldrh.w	r3, [r3, #626]	@ 0x272
 8007ea8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	f893 326e 	ldrb.w	r3, [r3, #622]	@ 0x26e
 8007eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	phase_tolerance = (uint16_t)pht;
 8007eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007eb8:	857b      	strh	r3, [r7, #42]	@ 0x2a
	phase_tolerance = phase_tolerance << 8;
 8007eba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007ebc:	021b      	lsls	r3, r3, #8
 8007ebe:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (prange_prev->rd_device_state !=
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	2b07      	cmp	r3, #7
 8007ec6:	d006      	beq.n	8007ed6 <VL53LX_hist_phase_consistency_check+0x7e>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d002      	beq.n	8007ed6 <VL53LX_hist_phase_consistency_check+0x7e>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8007ed0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007ed4:	e0ec      	b.n	80080b0 <VL53LX_hist_phase_consistency_check+0x258>



	if (phase_tolerance == 0)
 8007ed6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <VL53LX_hist_phase_consistency_check+0x8a>
		return status;
 8007edc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007ee0:	e0e6      	b.n	80080b0 <VL53LX_hist_phase_consistency_check+0x258>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8007ee8:	e0d9      	b.n	800809e <VL53LX_hist_phase_consistency_check+0x246>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8007eea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	214c      	movs	r1, #76	@ 0x4c
 8007ef2:	fb01 f303 	mul.w	r3, r1, r3
 8007ef6:	4413      	add	r3, r2
 8007ef8:	335e      	adds	r3, #94	@ 0x5e
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	d00b      	beq.n	8007f18 <VL53LX_hist_phase_consistency_check+0xc0>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8007f00:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	214c      	movs	r1, #76	@ 0x4c
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	335e      	adds	r3, #94	@ 0x5e
 8007f10:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8007f12:	2b13      	cmp	r3, #19
 8007f14:	f040 80bd 	bne.w	8008092 <VL53LX_hist_phase_consistency_check+0x23a>





		if (prange_prev->active_objects == 0)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	795b      	ldrb	r3, [r3, #5]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <VL53LX_hist_phase_consistency_check+0xde>
			prange_curr->VL53LX_p_003[lc].range_status =
 8007f20:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	214c      	movs	r1, #76	@ 0x4c
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	335e      	adds	r3, #94	@ 0x5e
 8007f30:	2217      	movs	r2, #23
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	e009      	b.n	8007f4a <VL53LX_hist_phase_consistency_check+0xf2>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8007f36:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	214c      	movs	r1, #76	@ 0x4c
 8007f3e:	fb01 f303 	mul.w	r3, r1, r3
 8007f42:	4413      	add	r3, r2
 8007f44:	335e      	adds	r3, #94	@ 0x5e
 8007f46:	2207      	movs	r2, #7
 8007f48:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8007f50:	e097      	b.n	8008082 <VL53LX_hist_phase_consistency_check+0x22a>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8007f52:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	214c      	movs	r1, #76	@ 0x4c
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	4413      	add	r3, r2
 8007f60:	3354      	adds	r3, #84	@ 0x54
 8007f62:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8007f64:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4403      	add	r3, r0
 8007f74:	3310      	adds	r3, #16
 8007f76:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8007f78:	4299      	cmp	r1, r3
 8007f7a:	d915      	bls.n	8007fa8 <VL53LX_hist_phase_consistency_check+0x150>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8007f7c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	214c      	movs	r1, #76	@ 0x4c
 8007f84:	fb01 f303 	mul.w	r3, r1, r3
 8007f88:	4413      	add	r3, r2
 8007f8a:	3354      	adds	r3, #84	@ 0x54
 8007f8c:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8007f8e:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4613      	mov	r3, r2
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4403      	add	r3, r0
 8007f9e:	3310      	adds	r3, #16
 8007fa0:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8007fa2:	1acb      	subs	r3, r1, r3
 8007fa4:	867b      	strh	r3, [r7, #50]	@ 0x32
 8007fa6:	e014      	b.n	8007fd2 <VL53LX_hist_phase_consistency_check+0x17a>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8007fa8:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	3310      	adds	r3, #16
 8007fba:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8007fbc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	204c      	movs	r0, #76	@ 0x4c
 8007fc4:	fb00 f303 	mul.w	r3, r0, r3
 8007fc8:	440b      	add	r3, r1
 8007fca:	3354      	adds	r3, #84	@ 0x54
 8007fcc:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	867b      	strh	r3, [r7, #50]	@ 0x32
			}

			if (phase_delta < phase_tolerance) {
 8007fd2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8007fd4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d24e      	bcs.n	8008078 <VL53LX_hist_phase_consistency_check+0x220>





				if (status == VL53LX_ERROR_NONE)
 8007fda:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d125      	bne.n	800802e <VL53LX_hist_phase_consistency_check+0x1d6>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8007fe2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
					VL53LX_hist_events_consistency_check(
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	3308      	adds	r3, #8
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8007ff4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_events_consistency_check(
 8007ff8:	224c      	movs	r2, #76	@ 0x4c
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
 8007ffe:	3310      	adds	r3, #16
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	4413      	add	r3, r2
 8008004:	3304      	adds	r3, #4
 8008006:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8008008:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 800800c:	f107 0217 	add.w	r2, r7, #23
 8008010:	9203      	str	r2, [sp, #12]
 8008012:	f107 021c 	add.w	r2, r7, #28
 8008016:	9202      	str	r2, [sp, #8]
 8008018:	f107 0218 	add.w	r2, r7, #24
 800801c:	9201      	str	r2, [sp, #4]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	4623      	mov	r3, r4
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	f000 f848 	bl	80080b8 <VL53LX_hist_events_consistency_check>
 8008028:	4603      	mov	r3, r0
 800802a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 800802e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008032:	2b00      	cmp	r3, #0
 8008034:	d115      	bne.n	8008062 <VL53LX_hist_phase_consistency_check+0x20a>
					range_status ==
 8008036:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8008038:	2b09      	cmp	r3, #9
 800803a:	d112      	bne.n	8008062 <VL53LX_hist_phase_consistency_check+0x20a>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 800803c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8008040:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					VL53LX_hist_merged_pulse_check(
 8008044:	224c      	movs	r2, #76	@ 0x4c
 8008046:	fb02 f303 	mul.w	r3, r2, r3
 800804a:	3310      	adds	r3, #16
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	4413      	add	r3, r2
 8008050:	3304      	adds	r3, #4
 8008052:	f107 0217 	add.w	r2, r7, #23
 8008056:	4619      	mov	r1, r3
 8008058:	f000 fb44 	bl	80086e4 <VL53LX_hist_merged_pulse_check>
 800805c:	4603      	mov	r3, r0
 800805e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8008062:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008066:	7df8      	ldrb	r0, [r7, #23]
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	214c      	movs	r1, #76	@ 0x4c
 800806c:	fb01 f303 	mul.w	r3, r1, r3
 8008070:	4413      	add	r3, r2
 8008072:	335e      	adds	r3, #94	@ 0x5e
 8008074:	4602      	mov	r2, r0
 8008076:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8008078:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800807c:	3301      	adds	r3, #1
 800807e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	795b      	ldrb	r3, [r3, #5]
 8008086:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800808a:	429a      	cmp	r2, r3
 800808c:	f4ff af61 	bcc.w	8007f52 <VL53LX_hist_phase_consistency_check+0xfa>
 8008090:	e000      	b.n	8008094 <VL53LX_hist_phase_consistency_check+0x23c>
			continue;
 8008092:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8008094:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008098:	3301      	adds	r3, #1
 800809a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	7c9b      	ldrb	r3, [r3, #18]
 80080a2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80080a6:	429a      	cmp	r2, r3
 80080a8:	f4ff af1f 	bcc.w	8007eea <VL53LX_hist_phase_consistency_check+0x92>

	}

	LOG_FUNCTION_END(status);

	return status;
 80080ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	373c      	adds	r7, #60	@ 0x3c
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd90      	pop	{r4, r7, pc}

080080b8 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 80080b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080bc:	b0d4      	sub	sp, #336	@ 0x150
 80080be:	af00      	add	r7, sp, #0
 80080c0:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80080c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80080c8:	4603      	mov	r3, r0
 80080ca:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 80080ce:	460b      	mov	r3, r1
 80080d0:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

	int64_t   tmpp                   = 0;
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int64_t   tmpc                   = 0;
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t   events_scaler          = 0;
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	int64_t   events_scaler_sq       = 0;
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int64_t   c_signal_events        = 0;
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int64_t   c_sig_noise_sq         = 0;
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	int64_t   c_amb_noise_sq         = 0;
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	int64_t   p_amb_noise_sq         = 0;
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

	int32_t   p_signal_events        = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint32_t  noise_sq_sum           = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100



	if (event_sigma == 0) {
 8008146:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800814e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008152:	2209      	movs	r2, #9
 8008154:	701a      	strb	r2, [r3, #0]
		return status;
 8008156:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 800815a:	e2bd      	b.n	80086d8 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800815c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008168:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800816c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008170:	460b      	mov	r3, r1
 8008172:	3301      	adds	r3, #1
 8008174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008178:	4613      	mov	r3, r2
 800817a:	f143 0300 	adc.w	r3, r3, #0
 800817e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008182:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8008186:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800818a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	b29b      	uxth	r3, r3
 8008192:	2200      	movs	r2, #0
 8008194:	469a      	mov	sl, r3
 8008196:	4693      	mov	fp, r2
 8008198:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800819c:	fb0a f203 	mul.w	r2, sl, r3
 80081a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80081a4:	fb0b f303 	mul.w	r3, fp, r3
 80081a8:	441a      	add	r2, r3
 80081aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80081ae:	fba3 450a 	umull	r4, r5, r3, sl
 80081b2:	1953      	adds	r3, r2, r5
 80081b4:	461d      	mov	r5, r3
 80081b6:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138
 80081ba:	e9c7 454e 	strd	r4, r5, [r7, #312]	@ 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 80081be:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081ca:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80081ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081d2:	460b      	mov	r3, r1
 80081d4:	3301      	adds	r3, #1
 80081d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081da:	4613      	mov	r3, r2
 80081dc:	f143 0300 	adc.w	r3, r3, #0
 80081e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081e4:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80081e8:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 80081ec:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80081f0:	8adb      	ldrh	r3, [r3, #22]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081fa:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80081fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008202:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8008206:	4622      	mov	r2, r4
 8008208:	fb02 f203 	mul.w	r2, r2, r3
 800820c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008210:	4629      	mov	r1, r5
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	441a      	add	r2, r3
 8008218:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800821c:	4621      	mov	r1, r4
 800821e:	fba3 8901 	umull	r8, r9, r3, r1
 8008222:	eb02 0309 	add.w	r3, r2, r9
 8008226:	4699      	mov	r9, r3
 8008228:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
 800822c:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130



	events_scaler  = tmpp * 4096;
 8008230:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8008234:	f04f 0000 	mov.w	r0, #0
 8008238:	f04f 0100 	mov.w	r1, #0
 800823c:	0319      	lsls	r1, r3, #12
 800823e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8008242:	0310      	lsls	r0, r2, #12
 8008244:	e9c7 0152 	strd	r0, r1, [r7, #328]	@ 0x148
	if (tmpc != 0) {
 8008248:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800824c:	4313      	orrs	r3, r2
 800824e:	d035      	beq.n	80082bc <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 8008250:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8008254:	0fd9      	lsrs	r1, r3, #31
 8008256:	2000      	movs	r0, #0
 8008258:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800825c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8008260:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8008264:	4621      	mov	r1, r4
 8008266:	1889      	adds	r1, r1, r2
 8008268:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800826c:	4629      	mov	r1, r5
 800826e:	eb43 0101 	adc.w	r1, r3, r1
 8008272:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8008282:	4621      	mov	r1, r4
 8008284:	084a      	lsrs	r2, r1, #1
 8008286:	4629      	mov	r1, r5
 8008288:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800828c:	4629      	mov	r1, r5
 800828e:	104b      	asrs	r3, r1, #1
 8008290:	4610      	mov	r0, r2
 8008292:	4619      	mov	r1, r3
 8008294:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8008298:	1814      	adds	r4, r2, r0
 800829a:	67bc      	str	r4, [r7, #120]	@ 0x78
 800829c:	414b      	adcs	r3, r1
 800829e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082a0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80082a4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 80082a8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80082ac:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80082b0:	f7f8 fcce 	bl	8000c50 <__aeabi_ldivmod>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 80082bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80082c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80082c4:	fb03 f102 	mul.w	r1, r3, r2
 80082c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80082cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80082d0:	fb02 f303 	mul.w	r3, r2, r3
 80082d4:	18ca      	adds	r2, r1, r3
 80082d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80082da:	fba3 1303 	umull	r1, r3, r3, r3
 80082de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082e2:	460b      	mov	r3, r1
 80082e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80082ec:	18d3      	adds	r3, r2, r3
 80082ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082f2:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 80082f6:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 80082fa:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq += 2048;
 80082fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008302:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8008306:	6739      	str	r1, [r7, #112]	@ 0x70
 8008308:	f143 0300 	adc.w	r3, r3, #0
 800830c:	677b      	str	r3, [r7, #116]	@ 0x74
 800830e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8008312:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	events_scaler_sq /= 4096;
 8008316:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800831a:	2b00      	cmp	r3, #0
 800831c:	da08      	bge.n	8008330 <VL53LX_hist_events_consistency_check+0x278>
 800831e:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8008322:	1851      	adds	r1, r2, r1
 8008324:	66b9      	str	r1, [r7, #104]	@ 0x68
 8008326:	f143 0300 	adc.w	r3, r3, #0
 800832a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800832c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008330:	f04f 0000 	mov.w	r0, #0
 8008334:	f04f 0100 	mov.w	r1, #0
 8008338:	0b10      	lsrs	r0, r2, #12
 800833a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800833e:	1319      	asrs	r1, r3, #12
 8008340:	e9c7 014a 	strd	r0, r1, [r7, #296]	@ 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8008344:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8008348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834a:	2200      	movs	r2, #0
 800834c:	663b      	str	r3, [r7, #96]	@ 0x60
 800834e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008350:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8008354:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8008358:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	2200      	movs	r2, #0
 8008360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008364:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8008368:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800836c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8008370:	4621      	mov	r1, r4
 8008372:	1a51      	subs	r1, r2, r1
 8008374:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008376:	4629      	mov	r1, r5
 8008378:	eb63 0301 	sbc.w	r3, r3, r1
 800837c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800837e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8008382:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events *= (int64_t)events_scaler;
 8008386:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800838a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800838e:	fb03 f102 	mul.w	r1, r3, r2
 8008392:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008396:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800839a:	fb02 f303 	mul.w	r3, r2, r3
 800839e:	4419      	add	r1, r3
 80083a0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80083a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80083a8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083b0:	4613      	mov	r3, r2
 80083b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ba:	18cb      	adds	r3, r1, r3
 80083bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083c0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80083c4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80083c8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events += 2048;
 80083cc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80083d0:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 80083d4:	6539      	str	r1, [r7, #80]	@ 0x50
 80083d6:	f143 0300 	adc.w	r3, r3, #0
 80083da:	657b      	str	r3, [r7, #84]	@ 0x54
 80083dc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80083e0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	c_signal_events /= 4096;
 80083e4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	da08      	bge.n	80083fe <VL53LX_hist_events_consistency_check+0x346>
 80083ec:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80083f0:	1851      	adds	r1, r2, r1
 80083f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80083f4:	f143 0300 	adc.w	r3, r3, #0
 80083f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80083fe:	f04f 0000 	mov.w	r0, #0
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	0b10      	lsrs	r0, r2, #12
 8008408:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800840c:	1319      	asrs	r1, r3, #12
 800840e:	e9c7 0148 	strd	r0, r1, [r7, #288]	@ 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8008412:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008416:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800841a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008420:	2200      	movs	r2, #0
 8008422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008426:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800842a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800842e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8008432:	4622      	mov	r2, r4
 8008434:	fb02 f203 	mul.w	r2, r2, r3
 8008438:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800843c:	4629      	mov	r1, r5
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	441a      	add	r2, r3
 8008444:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008448:	4621      	mov	r1, r4
 800844a:	fba3 1301 	umull	r1, r3, r3, r1
 800844e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008452:	460b      	mov	r3, r1
 8008454:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800845c:	18d3      	adds	r3, r2, r3
 800845e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008462:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8008466:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800846a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq += 2048;
 800846e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8008472:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8008476:	6439      	str	r1, [r7, #64]	@ 0x40
 8008478:	f143 0300 	adc.w	r3, r3, #0
 800847c:	647b      	str	r3, [r7, #68]	@ 0x44
 800847e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8008482:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	c_sig_noise_sq /= 4096;
 8008486:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800848a:	2b00      	cmp	r3, #0
 800848c:	da08      	bge.n	80084a0 <VL53LX_hist_events_consistency_check+0x3e8>
 800848e:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8008492:	1851      	adds	r1, r2, r1
 8008494:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008496:	f143 0300 	adc.w	r3, r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800849c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80084a0:	f04f 0000 	mov.w	r0, #0
 80084a4:	f04f 0100 	mov.w	r1, #0
 80084a8:	0b10      	lsrs	r0, r2, #12
 80084aa:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80084ae:	1319      	asrs	r1, r3, #12
 80084b0:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 80084b4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80084b8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 80084bc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80084c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084c8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80084cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80084d4:	4622      	mov	r2, r4
 80084d6:	fb02 f203 	mul.w	r2, r2, r3
 80084da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80084de:	4629      	mov	r1, r5
 80084e0:	fb01 f303 	mul.w	r3, r1, r3
 80084e4:	441a      	add	r2, r3
 80084e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80084ea:	4621      	mov	r1, r4
 80084ec:	fba3 1301 	umull	r1, r3, r3, r1
 80084f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084f4:	460b      	mov	r3, r1
 80084f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084fe:	18d3      	adds	r3, r2, r3
 8008500:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008504:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8008508:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 800850c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq += 2048;
 8008510:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8008514:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 8008518:	6339      	str	r1, [r7, #48]	@ 0x30
 800851a:	f143 0300 	adc.w	r3, r3, #0
 800851e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008520:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8008524:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4096;
 8008528:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800852c:	4610      	mov	r0, r2
 800852e:	4619      	mov	r1, r3
 8008530:	2900      	cmp	r1, #0
 8008532:	da08      	bge.n	8008546 <VL53LX_hist_events_consistency_check+0x48e>
 8008534:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8008538:	18c3      	adds	r3, r0, r3
 800853a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800853c:	f141 0300 	adc.w	r3, r1, #0
 8008540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008542:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008546:	f04f 0200 	mov.w	r2, #0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	0b02      	lsrs	r2, r0, #12
 8008550:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008554:	130b      	asrs	r3, r1, #12
 8008556:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110


	c_amb_noise_sq += 2;
 800855a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800855e:	1c91      	adds	r1, r2, #2
 8008560:	6239      	str	r1, [r7, #32]
 8008562:	f143 0300 	adc.w	r3, r3, #0
 8008566:	627b      	str	r3, [r7, #36]	@ 0x24
 8008568:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800856c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	c_amb_noise_sq /= 4;
 8008570:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8008574:	2b00      	cmp	r3, #0
 8008576:	da06      	bge.n	8008586 <VL53LX_hist_events_consistency_check+0x4ce>
 8008578:	1cd1      	adds	r1, r2, #3
 800857a:	61b9      	str	r1, [r7, #24]
 800857c:	f143 0300 	adc.w	r3, r3, #0
 8008580:	61fb      	str	r3, [r7, #28]
 8008582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008586:	f04f 0000 	mov.w	r0, #0
 800858a:	f04f 0100 	mov.w	r1, #0
 800858e:	0890      	lsrs	r0, r2, #2
 8008590:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8008594:	1099      	asrs	r1, r3, #2
 8008596:	e9c7 0144 	strd	r0, r1, [r7, #272]	@ 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 800859a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800859e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80085a0:	2200      	movs	r2, #0
 80085a2:	613b      	str	r3, [r7, #16]
 80085a4:	617a      	str	r2, [r7, #20]
 80085a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80085aa:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108


	p_amb_noise_sq += 2;
 80085ae:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80085b2:	1c91      	adds	r1, r2, #2
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	f143 0300 	adc.w	r3, r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80085c0:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	p_amb_noise_sq /= 4;
 80085c4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	da06      	bge.n	80085da <VL53LX_hist_events_consistency_check+0x522>
 80085cc:	1cd1      	adds	r1, r2, #3
 80085ce:	6039      	str	r1, [r7, #0]
 80085d0:	f143 0300 	adc.w	r3, r3, #0
 80085d4:	607b      	str	r3, [r7, #4]
 80085d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085da:	f04f 0000 	mov.w	r0, #0
 80085de:	f04f 0100 	mov.w	r1, #0
 80085e2:	0890      	lsrs	r0, r2, #2
 80085e4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80085e8:	1099      	asrs	r1, r3, #2
 80085ea:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 80085ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085f2:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 80085f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 80085f8:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 80085fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		(uint32_t)c_sig_noise_sq +
 80085fe:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8008600:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
	noise_sq_sum =
 8008604:	4413      	add	r3, r2
 8008606:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800860a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	4618      	mov	r0, r3
 8008612:	f001 ffbf 	bl	800a594 <VL53LX_isqrt>
 8008616:	4603      	mov	r3, r0
 8008618:	461a      	mov	r2, r3
	*pevents_tolerance =
 800861a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800861e:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8008620:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 800862a:	fb03 f202 	mul.w	r2, r3, r2
 800862e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008632:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8008634:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f103 0220 	add.w	r2, r3, #32
 800863e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008642:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8008644:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	da00      	bge.n	8008650 <VL53LX_hist_events_consistency_check+0x598>
 800864e:	333f      	adds	r3, #63	@ 0x3f
 8008650:	119b      	asrs	r3, r3, #6
 8008652:	461a      	mov	r2, r3
 8008654:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008658:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800865a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 8008676:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800867a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800867e:	429a      	cmp	r2, r3
 8008680:	da08      	bge.n	8008694 <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 8008682:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868a:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800868c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e007      	b.n	80086a4 <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 8008694:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008698:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800869c:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800869e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80086a2:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 80086a4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	dd0b      	ble.n	80086cc <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 80086b4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80086b8:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 80086ba:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 80086be:	429a      	cmp	r2, r3
 80086c0:	d204      	bcs.n	80086cc <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 80086c2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80086c6:	2214      	movs	r2, #20
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	e003      	b.n	80086d4 <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80086cc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80086d0:	2209      	movs	r2, #9
 80086d2:	701a      	strb	r2, [r3, #0]





	return status;
 80086d4:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
}
 80086d8:	4618      	mov	r0, r3
 80086da:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 80086de:	46bd      	mov	sp, r7
 80086e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080086e4 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8008706:	429a      	cmp	r2, r3
 8008708:	dd0b      	ble.n	8008722 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8008710:	b29a      	uxth	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8008718:	b29b      	uxth	r3, r3
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	b29b      	uxth	r3, r3
		delta_mm =
 800871e:	82fb      	strh	r3, [r7, #22]
 8008720:	e00a      	b.n	8008738 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8008728:	b29a      	uxth	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8008730:	b29b      	uxth	r3, r3
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	b29b      	uxth	r3, r3
		delta_mm =
 8008736:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8008738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800873c:	2b00      	cmp	r3, #0
 800873e:	dd09      	ble.n	8008754 <VL53LX_hist_merged_pulse_check+0x70>
 8008740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008748:	429a      	cmp	r2, r3
 800874a:	dd03      	ble.n	8008754 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2216      	movs	r2, #22
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e002      	b.n	800875a <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2209      	movs	r2, #9
 8008758:	701a      	strb	r2, [r3, #0]

	return status;
 800875a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800875e:	4618      	mov	r0, r3
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b08e      	sub	sp, #56	@ 0x38
 800876e:	af04      	add	r7, sp, #16
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
 8008776:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53LX_LLDriverData_t *pdev =
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	f893 3288 	ldrb.w	r3, [r3, #648]	@ 0x288
 8008790:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	f8b3 3270 	ldrh.w	r3, [r3, #624]	@ 0x270
 8008798:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80087a0:	2b09      	cmp	r3, #9
 80087a2:	d009      	beq.n	80087b8 <VL53LX_hist_xmonitor_consistency_check+0x4e>
		prange_curr->range_status ==
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80087aa:	2b13      	cmp	r3, #19
 80087ac:	d004      	beq.n	80087b8 <VL53LX_hist_xmonitor_consistency_check+0x4e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80087b4:	2b14      	cmp	r3, #20
 80087b6:	d129      	bne.n	800880c <VL53LX_hist_xmonitor_consistency_check+0xa2>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087be:	2b09      	cmp	r3, #9
 80087c0:	d009      	beq.n	80087d6 <VL53LX_hist_xmonitor_consistency_check+0x6c>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80087c8:	2b13      	cmp	r3, #19
 80087ca:	d004      	beq.n	80087d6 <VL53LX_hist_xmonitor_consistency_check+0x6c>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80087d2:	2b14      	cmp	r3, #20
 80087d4:	d11a      	bne.n	800880c <VL53LX_hist_xmonitor_consistency_check+0xa2>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2209      	movs	r2, #9
 80087da:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	334a      	adds	r3, #74	@ 0x4a
				VL53LX_hist_events_consistency_check(
 80087e8:	8bb9      	ldrh	r1, [r7, #28]
 80087ea:	7ff8      	ldrb	r0, [r7, #31]
 80087ec:	9303      	str	r3, [sp, #12]
 80087ee:	f107 0318 	add.w	r3, r7, #24
 80087f2:	9302      	str	r3, [sp, #8]
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	f7ff fc59 	bl	80080b8 <VL53LX_hist_events_consistency_check>
 8008806:	4603      	mov	r3, r0
 8008808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		}
	}

	return status;
 800880c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008810:	4618      	mov	r0, r3
 8008812:	3728      	adds	r7, #40	@ 0x28
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8008824:	2300      	movs	r3, #0
 8008826:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8008840:	2b00      	cmp	r3, #0
 8008842:	d019      	beq.n	8008878 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800884a:	4618      	mov	r0, r3
 800884c:	f002 f809 	bl	800a862 <VL53LX_calc_pll_period_mm>
 8008850:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		wrap_dmax_phase =
 8008858:	021b      	lsls	r3, r3, #8
 800885a:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	fb02 f303 	mul.w	r3, r2, r3
 8008864:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800886c:	0bdb      	lsrs	r3, r3, #15
 800886e:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	b21a      	sxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008878:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 8008884:	b590      	push	{r4, r7, lr}
 8008886:	b08d      	sub	sp, #52	@ 0x34
 8008888:	af04      	add	r7, sp, #16
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	4611      	mov	r1, r2
 8008890:	461a      	mov	r2, r3
 8008892:	4623      	mov	r3, r4
 8008894:	80fb      	strh	r3, [r7, #6]
 8008896:	4603      	mov	r3, r0
 8008898:	80bb      	strh	r3, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
 800889e:	4613      	mov	r3, r2
 80088a0:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 80088c2:	78b9      	ldrb	r1, [r7, #2]
 80088c4:	78f8      	ldrb	r0, [r7, #3]
 80088c6:	f107 030c 	add.w	r3, r7, #12
 80088ca:	9303      	str	r3, [sp, #12]
 80088cc:	f107 030e 	add.w	r3, r7, #14
 80088d0:	9302      	str	r3, [sp, #8]
 80088d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	23ff      	movs	r3, #255	@ 0xff
 80088de:	22c7      	movs	r2, #199	@ 0xc7
 80088e0:	f000 fa01 	bl	8008ce6 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 80088e4:	89fb      	ldrh	r3, [r7, #14]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d050      	beq.n	800898c <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 80088ea:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d04d      	beq.n	800898c <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 80088f0:	f897 4034 	ldrb.w	r4, [r7, #52]	@ 0x34
 80088f4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80088f8:	78b9      	ldrb	r1, [r7, #2]
 80088fa:	78f8      	ldrb	r0, [r7, #3]
 80088fc:	f107 0308 	add.w	r3, r7, #8
 8008900:	9303      	str	r3, [sp, #12]
 8008902:	f107 030a 	add.w	r3, r7, #10
 8008906:	9302      	str	r3, [sp, #8]
 8008908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4623      	mov	r3, r4
 8008914:	f000 f9e7 	bl	8008ce6 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800891c:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800891e:	897b      	ldrh	r3, [r7, #10]
 8008920:	461a      	mov	r2, r3
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	fb02 f303 	mul.w	r3, r2, r3
 8008928:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800892a:	89fb      	ldrh	r3, [r7, #14]
 800892c:	461a      	mov	r2, r3
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	fbb3 f3f2 	udiv	r3, r3, r2
 8008934:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800893a:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800893c:	893b      	ldrh	r3, [r7, #8]
 800893e:	461a      	mov	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	fb02 f303 	mul.w	r3, r2, r3
 8008946:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8008948:	89bb      	ldrh	r3, [r7, #12]
 800894a:	461a      	mov	r2, r3
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008952:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8008954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8008960:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	fb02 f303 	mul.w	r3, r2, r3
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	4413      	add	r3, r2
 800896e:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8008970:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8008972:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8008974:	4413      	add	r3, r2
 8008976:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	009a      	lsls	r2, r3, #2
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	fb92 f3f3 	sdiv	r3, r2, r3
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	e002      	b.n	8008992 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800898c:	bf00      	nop
 800898e:	e000      	b.n	8008992 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8008990:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	b21a      	sxth	r2, r3
 8008996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008998:	801a      	strh	r2, [r3, #0]

}
 800899a:	bf00      	nop
 800899c:	3724      	adds	r7, #36	@ 0x24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd90      	pop	{r4, r7, pc}

080089a2 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	603b      	str	r3, [r7, #0]
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	08db      	lsrs	r3, r3, #3
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	2301      	movs	r3, #1
 80089d0:	4093      	lsls	r3, r2
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	701a      	strb	r2, [r3, #0]

}
 80089d8:	bf00      	nop
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	603a      	str	r2, [r7, #0]
 80089ee:	71fb      	strb	r3, [r7, #7]
 80089f0:	460b      	mov	r3, r1
 80089f2:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b07      	cmp	r3, #7
 80089f8:	d90a      	bls.n	8008a10 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 80089fa:	79bb      	ldrb	r3, [r7, #6]
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	3b71      	subs	r3, #113	@ 0x71
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8008a0e:	e00a      	b.n	8008a26 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8008a10:	79bb      	ldrb	r3, [r7, #6]
 8008a12:	f1c3 030f 	rsb	r3, r3, #15
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	4413      	add	r3, r2
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	701a      	strb	r2, [r3, #0]
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	4603      	mov	r3, r0
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	091b      	lsrs	r3, r3, #4
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	701a      	strb	r2, [r3, #0]

}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	4603      	mov	r3, r0
 8008a6a:	603a      	str	r2, [r7, #0]
 8008a6c:	71fb      	strb	r3, [r7, #7]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8008a72:	79bb      	ldrb	r3, [r7, #6]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	701a      	strb	r2, [r3, #0]

}
 8008a82:	bf00      	nop
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b086      	sub	sp, #24
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60ba      	str	r2, [r7, #8]
 8008a96:	607b      	str	r3, [r7, #4]
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8008ab0:	f107 0217 	add.w	r2, r7, #23
 8008ab4:	f107 0116 	add.w	r1, r7, #22
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 f94c 	bl	800ad58 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8008ac0:	f107 0214 	add.w	r2, r7, #20
 8008ac4:	f107 0115 	add.w	r1, r7, #21
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff ffb1 	bl	8008a32 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	7d7b      	ldrb	r3, [r7, #21]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	0fda      	lsrs	r2, r3, #31
 8008ada:	4413      	add	r3, r2
 8008adc:	105b      	asrs	r3, r3, #1
 8008ade:	425b      	negs	r3, r3
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	440b      	add	r3, r1
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	b21a      	sxth	r2, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	da02      	bge.n	8008afc <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2200      	movs	r2, #0
 8008afa:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	7d7a      	ldrb	r2, [r7, #21]
 8008b06:	4413      	add	r3, r2
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	b21a      	sxth	r2, r3
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b16:	2b0f      	cmp	r3, #15
 8008b18:	dd02      	ble.n	8008b20 <VL53LX_decode_zone_limits+0x92>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	220f      	movs	r2, #15
 8008b1e:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8008b20:	7dbb      	ldrb	r3, [r7, #22]
 8008b22:	4619      	mov	r1, r3
 8008b24:	7d3b      	ldrb	r3, [r7, #20]
 8008b26:	3301      	adds	r3, #1
 8008b28:	0fda      	lsrs	r2, r3, #31
 8008b2a:	4413      	add	r3, r2
 8008b2c:	105b      	asrs	r3, r3, #1
 8008b2e:	425b      	negs	r3, r3
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	440b      	add	r3, r1
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	b21a      	sxth	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	da02      	bge.n	8008b4c <VL53LX_decode_zone_limits+0xbe>
		*py_ll = 0;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	7d3a      	ldrb	r2, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	b21a      	sxth	r2, r3
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5e:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b66:	2b0f      	cmp	r3, #15
 8008b68:	dd02      	ble.n	8008b70 <VL53LX_decode_zone_limits+0xe2>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	220f      	movs	r2, #15
 8008b6e:	801a      	strh	r2, [r3, #0]
}
 8008b70:	bf00      	nop
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	460a      	mov	r2, r1
 8008b82:	71fb      	strb	r3, [r7, #7]
 8008b84:	4613      	mov	r3, r2
 8008b86:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8008b94:	79bb      	ldrb	r3, [r7, #6]
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d104      	bne.n	8008bac <VL53LX_is_aperture_location+0x34>
 8008ba2:	7b7b      	ldrb	r3, [r7, #13]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d101      	bne.n	8008bac <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d104      	bne.n	8008bbc <VL53LX_is_aperture_location+0x44>
 8008bb2:	7b7b      	ldrb	r3, [r7, #13]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8008bca:	b590      	push	{r4, r7, lr}
 8008bcc:	b08b      	sub	sp, #44	@ 0x2c
 8008bce:	af02      	add	r7, sp, #8
 8008bd0:	603a      	str	r2, [r7, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	71fb      	strb	r3, [r7, #7]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	71bb      	strb	r3, [r7, #6]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8008c0c:	f107 0416 	add.w	r4, r7, #22
 8008c10:	f107 0218 	add.w	r2, r7, #24
 8008c14:	79b9      	ldrb	r1, [r7, #6]
 8008c16:	79f8      	ldrb	r0, [r7, #7]
 8008c18:	f107 0312 	add.w	r3, r7, #18
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	f107 0314 	add.w	r3, r7, #20
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4623      	mov	r3, r4
 8008c26:	f7ff ff32 	bl	8008a8e <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8008c30:	8afb      	ldrh	r3, [r7, #22]
 8008c32:	83bb      	strh	r3, [r7, #28]
 8008c34:	e04c      	b.n	8008cd0 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8008c36:	8b3b      	ldrh	r3, [r7, #24]
 8008c38:	83fb      	strh	r3, [r7, #30]
 8008c3a:	e03d      	b.n	8008cb8 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8008c3c:	8bbb      	ldrh	r3, [r7, #28]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	8bfa      	ldrh	r2, [r7, #30]
 8008c42:	b2d1      	uxtb	r1, r2
 8008c44:	f107 0211 	add.w	r2, r7, #17
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fecb 	bl	80089e4 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8008c4e:	7c78      	ldrb	r0, [r7, #17]
 8008c50:	f107 030e 	add.w	r3, r7, #14
 8008c54:	f107 020f 	add.w	r2, r7, #15
 8008c58:	f107 0110 	add.w	r1, r7, #16
 8008c5c:	f7ff fea1 	bl	80089a2 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8008c60:	7c3b      	ldrb	r3, [r7, #16]
 8008c62:	461a      	mov	r2, r3
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	4413      	add	r3, r2
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01b      	beq.n	8008cac <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8008c74:	8bbb      	ldrh	r3, [r7, #28]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	8bfa      	ldrh	r2, [r7, #30]
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff ff7a 	bl	8008b78 <VL53LX_is_aperture_location>
 8008c84:	4603      	mov	r3, r0
 8008c86:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8008c88:	7efb      	ldrb	r3, [r7, #27]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c90:	881a      	ldrh	r2, [r3, #0]
 8008c92:	88bb      	ldrh	r3, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e006      	b.n	8008cac <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8008cac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	83fb      	strh	r3, [r7, #30]
 8008cb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008cbc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	ddbb      	ble.n	8008c3c <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8008cc4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	3301      	adds	r3, #1
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	83bb      	strh	r3, [r7, #28]
 8008cd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cd4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	ddac      	ble.n	8008c36 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	3724      	adds	r7, #36	@ 0x24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd90      	pop	{r4, r7, pc}

08008ce6 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8008ce6:	b590      	push	{r4, r7, lr}
 8008ce8:	b08d      	sub	sp, #52	@ 0x34
 8008cea:	af02      	add	r7, sp, #8
 8008cec:	4604      	mov	r4, r0
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4623      	mov	r3, r4
 8008cf6:	71fb      	strb	r3, [r7, #7]
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	71bb      	strb	r3, [r7, #6]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	717b      	strb	r3, [r7, #5]
 8008d00:	4613      	mov	r3, r2
 8008d02:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t   y         = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int16_t   mm_x_ll   = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint16_t  spad_attenuation = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	847b      	strh	r3, [r7, #34]	@ 0x22



	VL53LX_decode_zone_limits(
 8008d46:	f107 041c 	add.w	r4, r7, #28
 8008d4a:	f107 021e 	add.w	r2, r7, #30
 8008d4e:	79b9      	ldrb	r1, [r7, #6]
 8008d50:	79f8      	ldrb	r0, [r7, #7]
 8008d52:	f107 0318 	add.w	r3, r7, #24
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	f107 031a 	add.w	r3, r7, #26
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	4623      	mov	r3, r4
 8008d60:	f7ff fe95 	bl	8008a8e <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8008d64:	f107 0414 	add.w	r4, r7, #20
 8008d68:	f107 0216 	add.w	r2, r7, #22
 8008d6c:	7939      	ldrb	r1, [r7, #4]
 8008d6e:	7978      	ldrb	r0, [r7, #5]
 8008d70:	f107 0310 	add.w	r3, r7, #16
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	f107 0312 	add.w	r3, r7, #18
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	f7ff fe86 	bl	8008a8e <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8008d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d84:	2200      	movs	r2, #0
 8008d86:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8008d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8008d8e:	8abb      	ldrh	r3, [r7, #20]
 8008d90:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008d92:	e06c      	b.n	8008e6e <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8008d94:	8afb      	ldrh	r3, [r7, #22]
 8008d96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008d98:	e05d      	b.n	8008e56 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8008d9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008da0:	b2d1      	uxtb	r1, r2
 8008da2:	f107 020f 	add.w	r2, r7, #15
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fe1c 	bl	80089e4 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8008dac:	7bf8      	ldrb	r0, [r7, #15]
 8008dae:	f107 030c 	add.w	r3, r7, #12
 8008db2:	f107 020d 	add.w	r2, r7, #13
 8008db6:	f107 010e 	add.w	r1, r7, #14
 8008dba:	f7ff fdf2 	bl	80089a2 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc4:	4413      	add	r3, r2
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	7b3b      	ldrb	r3, [r7, #12]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d03b      	beq.n	8008e4a <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8008dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff fecb 	bl	8008b78 <VL53LX_is_aperture_location>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8008de8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8008df0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008df2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008df4:	e002      	b.n	8008dfc <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8008df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008dfa:	847b      	strh	r3, [r7, #34]	@ 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8008dfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008e00:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8008e04:	429a      	cmp	r2, r3
 8008e06:	db19      	blt.n	8008e3c <VL53LX_calc_mm_effective_spads+0x156>
 8008e08:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e0c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8008e10:	429a      	cmp	r2, r3
 8008e12:	dc13      	bgt.n	8008e3c <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8008e14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8008e18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	db0d      	blt.n	8008e3c <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8008e20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e24:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	dc07      	bgt.n	8008e3c <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8008e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e2e:	881a      	ldrh	r2, [r3, #0]
 8008e30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e32:	4413      	add	r3, r2
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	e006      	b.n	8008e4a <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8008e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e3e:	881a      	ldrh	r2, [r3, #0]
 8008e40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e42:	4413      	add	r3, r2
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e48:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8008e4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	3301      	adds	r3, #1
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008e56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e5a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	dd9b      	ble.n	8008d9a <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8008e62:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	3301      	adds	r3, #1
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008e6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008e72:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8008e76:	429a      	cmp	r2, r3
 8008e78:	dd8c      	ble.n	8008d94 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	372c      	adds	r7, #44	@ 0x2c
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd90      	pop	{r4, r7, pc}

08008e84 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7fd ffe2 	bl	8006e60 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	7c9a      	ldrb	r2, [r3, #18]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f893 207a 	ldrb.w	r2, [r3, #122]	@ 0x7a
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8008ec8:	2300      	movs	r3, #0
 8008eca:	75fb      	strb	r3, [r7, #23]
 8008ecc:	e06b      	b.n	8008fa6 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d034      	beq.n	8008f42 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8008ed8:	e05f      	b.n	8008f9a <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8008f12:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	8a9a      	ldrh	r2, [r3, #20]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd0 =
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	601a      	str	r2, [r3, #0]

			break;
 8008f40:	e02b      	b.n	8008f9a <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8008f72:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	845a      	strh	r2, [r3, #34]	@ 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
			pcore->result_core__ranging_total_events_sd1 =
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
			pcore->result_core__signal_total_events_sd1 =
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			pcore->result_core__ambient_window_events_sd1 =
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	611a      	str	r2, [r3, #16]
			break;
 8008f98:	bf00      	nop
		}

		pdata++;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	334c      	adds	r3, #76	@ 0x4c
 8008f9e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	75fb      	strb	r3, [r7, #23]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	7c9b      	ldrb	r3, [r3, #18]
 8008faa:	7dfa      	ldrb	r2, [r7, #23]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d38e      	bcc.n	8008ece <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b089      	sub	sp, #36	@ 0x24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8008fd0:	3320      	adds	r3, #32
 8008fd2:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8008fda:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008fe2:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	3302      	adds	r3, #2
 8008ff6:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
	pzone_dyn_cfg->expected_stream_count =
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
	pzone_dyn_cfg->expected_gph_id =
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800901c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3724      	adds	r7, #36	@ 0x24
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800902c:	b480      	push	{r7}
 800902e:	b08b      	sub	sp, #44	@ 0x2c
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009036:	2300      	movs	r3, #0
 8009038:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009044:	3320      	adds	r3, #32
 8009046:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800904e:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009056:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	f8b3 3336 	ldrh.w	r3, [r3, #822]	@ 0x336
 800905e:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 8009060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009064:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 8009066:	7bfa      	ldrb	r2, [r7, #15]
 8009068:	6939      	ldr	r1, [r7, #16]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	440b      	add	r3, r1
 8009074:	3306      	adds	r3, #6
 8009076:	2200      	movs	r2, #0
 8009078:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009080:	84bb      	strh	r3, [r7, #36]	@ 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 8009082:	2301      	movs	r3, #1
 8009084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009088:	e01a      	b.n	80090c0 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800908a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	214c      	movs	r1, #76	@ 0x4c
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	4413      	add	r3, r2
 8009098:	334a      	adds	r3, #74	@ 0x4a
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800909e:	429a      	cmp	r2, r3
 80090a0:	d209      	bcs.n	80090b6 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 80090a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			max_total_rate_per_spads =
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	214c      	movs	r1, #76	@ 0x4c
 80090aa:	fb01 f303 	mul.w	r3, r1, r3
 80090ae:	4413      	add	r3, r2
 80090b0:	334a      	adds	r3, #74	@ 0x4a
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (i = 1; i < presults->active_results; i++) {
 80090b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090ba:	3301      	adds	r3, #1
 80090bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	7c9b      	ldrb	r3, [r3, #18]
 80090c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d3de      	bcc.n	800908a <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 80090cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d103      	bne.n	80090da <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 80090d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80090d6:	623b      	str	r3, [r7, #32]
 80090d8:	e00e      	b.n	80090f8 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 80090da:	89bb      	ldrh	r3, [r7, #12]
 80090dc:	039b      	lsls	r3, r3, #14
 80090de:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 80090e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090e2:	6a3a      	ldr	r2, [r7, #32]
 80090e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e8:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f0:	d302      	bcc.n	80090f8 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 80090f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80090f6:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 80090f8:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 80090fe:	6939      	ldr	r1, [r7, #16]
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	440b      	add	r3, r1
 800910a:	3306      	adds	r3, #6
 800910c:	4602      	mov	r2, r0
 800910e:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 8009110:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009114:	4618      	mov	r0, r3
 8009116:	372c      	adds	r7, #44	@ 0x2c
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08a      	sub	sp, #40	@ 0x28
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009128:	2300      	movs	r3, #0
 800912a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	332c      	adds	r3, #44	@ 0x2c
 8009136:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	33c2      	adds	r3, #194	@ 0xc2
 800913c:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8009144:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	3302      	adds	r3, #2
 800914a:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	785b      	ldrb	r3, [r3, #1]
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800915c:	461a      	mov	r2, r3
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	4413      	add	r3, r2
 8009162:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009166:	2b01      	cmp	r3, #1
 8009168:	d11e      	bne.n	80091a8 <VL53LX_multizone_hist_bins_update+0x88>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10b      	bne.n	8009188 <VL53LX_multizone_hist_bins_update+0x68>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d05d      	beq.n	800924a <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	719a      	strb	r2, [r3, #6]
 80091a6:	e050      	b.n	800924a <VL53LX_multizone_hist_bins_update+0x12a>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80091ae:	461a      	mov	r2, r3
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	4413      	add	r3, r2
 80091b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d11e      	bne.n	80091fa <VL53LX_multizone_hist_bins_update+0xda>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10b      	bne.n	80091da <VL53LX_multizone_hist_bins_update+0xba>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d034      	beq.n	800924a <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	719a      	strb	r2, [r3, #6]
 80091f8:	e027      	b.n	800924a <VL53LX_multizone_hist_bins_update+0x12a>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009200:	461a      	mov	r2, r3
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	4413      	add	r3, r2
 8009206:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800920a:	2b03      	cmp	r3, #3
 800920c:	d11d      	bne.n	800924a <VL53LX_multizone_hist_bins_update+0x12a>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10b      	bne.n	800922c <VL53LX_multizone_hist_bins_update+0x10c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800924a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800924e:	2b00      	cmp	r3, #0
 8009250:	d109      	bne.n	8009266 <VL53LX_multizone_hist_bins_update+0x146>
		VL53LX_copy_hist_bins_to_static_cfg(
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	f203 3136 	addw	r1, r3, #822	@ 0x336
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800925e:	461a      	mov	r2, r3
 8009260:	6978      	ldr	r0, [r7, #20]
 8009262:	f7fd f9d7 	bl	8006614 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8009266:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800926a:	4618      	mov	r0, r3
 800926c:	3728      	adds	r7, #40	@ 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 8009272:	b480      	push	{r7}
 8009274:	b089      	sub	sp, #36	@ 0x24
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	460b      	mov	r3, r1
 8009280:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009282:	2300      	movs	r3, #0
 8009284:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	f893 3357 	ldrb.w	r3, [r3, #855]	@ 0x357
 8009290:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d103      	bne.n	80092a0 <VL53LX_update_internal_stream_counters+0x2e>


		*pinternal_stream_count = external_stream_count;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	7afa      	ldrb	r2, [r7, #11]
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	e01e      	b.n	80092de <VL53LX_update_internal_stream_counters+0x6c>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d111      	bne.n	80092d2 <VL53LX_update_internal_stream_counters+0x60>


		if (*pinternal_stream_count == 0xFF)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2bff      	cmp	r3, #255	@ 0xff
 80092b4:	d103      	bne.n	80092be <VL53LX_update_internal_stream_counters+0x4c>
			*pinternal_stream_count = 0x80;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2280      	movs	r2, #128	@ 0x80
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	e005      	b.n	80092ca <VL53LX_update_internal_stream_counters+0x58>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	3301      	adds	r3, #1
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2200      	movs	r2, #0
 80092ce:	701a      	strb	r2, [r3, #0]
 80092d0:	e005      	b.n	80092de <VL53LX_update_internal_stream_counters+0x6c>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 80092de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3724      	adds	r7, #36	@ 0x24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 80092ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092f2:	b0a2      	sub	sp, #136	@ 0x88
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	64f8      	str	r0, [r7, #76]	@ 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80092fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009300:	673b      	str	r3, [r7, #112]	@ 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8009302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009304:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009308:	3320      	adds	r3, #32
 800930a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800930c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800930e:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 8009312:	330c      	adds	r3, #12
 8009314:	66bb      	str	r3, [r7, #104]	@ 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 8009316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009318:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800931c:	3310      	adds	r3, #16
 800931e:	667b      	str	r3, [r7, #100]	@ 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 8009320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009322:	663b      	str	r3, [r7, #96]	@ 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 8009324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009326:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800932a:	65fb      	str	r3, [r7, #92]	@ 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800932c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 8009334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		pxmonitor->VL53LX_p_016;
 8009338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800933a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800933c:	4413      	add	r3, r2
 800933e:	2200      	movs	r2, #0
 8009340:	461c      	mov	r4, r3
 8009342:	4615      	mov	r5, r2
 8009344:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
	if (peak_duration_us == 0)
 8009348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800934c:	2b00      	cmp	r3, #0
 800934e:	d103      	bne.n	8009358 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 8009350:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 8009358:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800935c:	4622      	mov	r2, r4
 800935e:	462b      	mov	r3, r5
 8009360:	f04f 0000 	mov.w	r0, #0
 8009364:	f04f 0100 	mov.w	r1, #0
 8009368:	0159      	lsls	r1, r3, #5
 800936a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800936e:	0150      	lsls	r0, r2, #5
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	ebb2 0804 	subs.w	r8, r2, r4
 8009378:	eb63 0905 	sbc.w	r9, r3, r5
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	f04f 0300 	mov.w	r3, #0
 8009384:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8009388:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800938c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8009390:	4690      	mov	r8, r2
 8009392:	4699      	mov	r9, r3
 8009394:	eb18 0304 	adds.w	r3, r8, r4
 8009398:	633b      	str	r3, [r7, #48]	@ 0x30
 800939a:	eb49 0305 	adc.w	r3, r9, r5
 800939e:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80093ac:	4629      	mov	r1, r5
 80093ae:	00cb      	lsls	r3, r1, #3
 80093b0:	4621      	mov	r1, r4
 80093b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093b6:	4621      	mov	r1, r4
 80093b8:	00ca      	lsls	r2, r1, #3
 80093ba:	4610      	mov	r0, r2
 80093bc:	4619      	mov	r1, r3
 80093be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093c2:	2200      	movs	r2, #0
 80093c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80093c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80093c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80093cc:	f7f7 fc90 	bl	8000cf0 <__aeabi_uldivmod>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 80093d8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80093dc:	4622      	mov	r2, r4
 80093de:	462b      	mov	r3, r5
 80093e0:	f04f 0000 	mov.w	r0, #0
 80093e4:	f04f 0100 	mov.w	r1, #0
 80093e8:	0159      	lsls	r1, r3, #5
 80093ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093ee:	0150      	lsls	r0, r2, #5
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	ebb2 0a04 	subs.w	sl, r2, r4
 80093f8:	eb63 0b05 	sbc.w	fp, r3, r5
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009408:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800940c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8009410:	4692      	mov	sl, r2
 8009412:	469b      	mov	fp, r3
 8009414:	eb1a 0304 	adds.w	r3, sl, r4
 8009418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800941a:	eb4b 0305 	adc.w	r3, fp, r5
 800941e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009420:	f04f 0200 	mov.w	r2, #0
 8009424:	f04f 0300 	mov.w	r3, #0
 8009428:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800942c:	4629      	mov	r1, r5
 800942e:	00cb      	lsls	r3, r1, #3
 8009430:	4621      	mov	r1, r4
 8009432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009436:	4621      	mov	r1, r4
 8009438:	00ca      	lsls	r2, r1, #3
 800943a:	4610      	mov	r0, r2
 800943c:	4619      	mov	r1, r3
 800943e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009442:	2200      	movs	r2, #0
 8009444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009446:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800944c:	f7f7 fc50 	bl	8000cf0 <__aeabi_uldivmod>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 8009458:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800945e:	8ad2      	ldrh	r2, [r2, #22]
 8009460:	fb02 f303 	mul.w	r3, r2, r3
 8009464:	2200      	movs	r2, #0
 8009466:	623b      	str	r3, [r7, #32]
 8009468:	627a      	str	r2, [r7, #36]	@ 0x24
 800946a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800946e:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
	if (temp64z == 0)
 8009472:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009476:	4313      	orrs	r3, r2
 8009478:	d105      	bne.n	8009486 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800947a:	f04f 0201 	mov.w	r2, #1
 800947e:	f04f 0300 	mov.w	r3, #0
 8009482:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp64a = temp64a * 1000 * 256;
 8009486:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	f04f 0400 	mov.w	r4, #0
 8009492:	f04f 0500 	mov.w	r5, #0
 8009496:	015d      	lsls	r5, r3, #5
 8009498:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800949c:	0154      	lsls	r4, r2, #5
 800949e:	4622      	mov	r2, r4
 80094a0:	462b      	mov	r3, r5
 80094a2:	1a14      	subs	r4, r2, r0
 80094a4:	61bc      	str	r4, [r7, #24]
 80094a6:	eb63 0301 	sbc.w	r3, r3, r1
 80094aa:	61fb      	str	r3, [r7, #28]
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80094b8:	464c      	mov	r4, r9
 80094ba:	00a3      	lsls	r3, r4, #2
 80094bc:	4644      	mov	r4, r8
 80094be:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80094c2:	4644      	mov	r4, r8
 80094c4:	00a2      	lsls	r2, r4, #2
 80094c6:	4614      	mov	r4, r2
 80094c8:	461d      	mov	r5, r3
 80094ca:	4623      	mov	r3, r4
 80094cc:	181b      	adds	r3, r3, r0
 80094ce:	613b      	str	r3, [r7, #16]
 80094d0:	462b      	mov	r3, r5
 80094d2:	eb41 0303 	adc.w	r3, r1, r3
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	f04f 0300 	mov.w	r3, #0
 80094e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80094e4:	4629      	mov	r1, r5
 80094e6:	02cb      	lsls	r3, r1, #11
 80094e8:	4621      	mov	r1, r4
 80094ea:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80094ee:	4621      	mov	r1, r4
 80094f0:	02ca      	lsls	r2, r1, #11
 80094f2:	461c      	mov	r4, r3
 80094f4:	4613      	mov	r3, r2
 80094f6:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 80094fa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80094fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009502:	f7f7 fbf5 	bl	8000cf0 <__aeabi_uldivmod>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp64a = temp64a * 1000 * 256;
 800950e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	f04f 0400 	mov.w	r4, #0
 800951a:	f04f 0500 	mov.w	r5, #0
 800951e:	015d      	lsls	r5, r3, #5
 8009520:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8009524:	0154      	lsls	r4, r2, #5
 8009526:	4622      	mov	r2, r4
 8009528:	462b      	mov	r3, r5
 800952a:	1a14      	subs	r4, r2, r0
 800952c:	60bc      	str	r4, [r7, #8]
 800952e:	eb63 0301 	sbc.w	r3, r3, r1
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8009540:	464c      	mov	r4, r9
 8009542:	00a3      	lsls	r3, r4, #2
 8009544:	4644      	mov	r4, r8
 8009546:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800954a:	4644      	mov	r4, r8
 800954c:	00a2      	lsls	r2, r4, #2
 800954e:	4614      	mov	r4, r2
 8009550:	461d      	mov	r5, r3
 8009552:	4623      	mov	r3, r4
 8009554:	181b      	adds	r3, r3, r0
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	462b      	mov	r3, r5
 800955a:	eb41 0303 	adc.w	r3, r1, r3
 800955e:	607b      	str	r3, [r7, #4]
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9d7 4500 	ldrd	r4, r5, [r7]
 800956c:	4629      	mov	r1, r5
 800956e:	02cb      	lsls	r3, r1, #11
 8009570:	4621      	mov	r1, r4
 8009572:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8009576:	4621      	mov	r1, r4
 8009578:	02ca      	lsls	r2, r1, #11
 800957a:	461c      	mov	r4, r3
 800957c:	4613      	mov	r3, r2
 800957e:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	temp64a = do_division_u(temp64a, temp64z);
 8009582:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009586:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800958a:	f7f7 fbb1 	bl	8000cf0 <__aeabi_uldivmod>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	pint->required_samples = (uint32_t)temp64a;
 8009596:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800959a:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800959c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d802      	bhi.n	80095aa <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 80095a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095a6:	2202      	movs	r2, #2
 80095a8:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 80095aa:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3788      	adds	r7, #136	@ 0x88
 80095b2:	46bd      	mov	sp, r7
 80095b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080095b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b096      	sub	sp, #88	@ 0x58
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	637b      	str	r3, [r7, #52]	@ 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	long int SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 80095d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d2:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80095d6:	633b      	str	r3, [r7, #48]	@ 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 80095d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095da:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 80095de:	3314      	adds	r3, #20
 80095e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 80095e2:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d107      	bne.n	80095fa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x42>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	889b      	ldrh	r3, [r3, #4]
 80095ee:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	609a      	str	r2, [r3, #8]
 80095f8:	e002      	b.n	8009600 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x48>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	653b      	str	r3, [r7, #80]	@ 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	899b      	ldrh	r3, [r3, #12]
 800960a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009610:	89db      	ldrh	r3, [r3, #14]
 8009612:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800961c:	2b00      	cmp	r3, #0
 800961e:	d004      	beq.n	800962a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x72>
		(pconfig->scaler_calc_method == 1)) &&
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if (((pconfig->user_scaler_set == 0) ||
 8009626:	2b01      	cmp	r3, #1
 8009628:	d126      	bne.n	8009678 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800962e:	2b00      	cmp	r3, #0
 8009630:	d022      	beq.n	8009678 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc0>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8009632:	f107 0317 	add.w	r3, r7, #23
 8009636:	4619      	mov	r1, r3
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fe63 	bl	800a304 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x90>
			histo_merge_nb = 1;
 8009644:	2301      	movs	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 8009648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964a:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 800964e:	2b01      	cmp	r3, #1
 8009650:	d003      	beq.n	800965a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa2>
			orig_xtalk_offset =
 8009652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	653b      	str	r3, [r7, #80]	@ 0x50
 8009658:	e006      	b.n	8009668 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800965a:	7dfb      	ldrb	r3, [r7, #23]
 800965c:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800965e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009660:	3202      	adds	r2, #2
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	653b      	str	r3, [r7, #80]	@ 0x50

		orig_x_gradient =
 8009668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966a:	889b      	ldrh	r3, [r3, #4]
 800966c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 8009670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009672:	88db      	ldrh	r3, [r3, #6]
 8009674:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
 8009682:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		pout->gradient_zero_flag |= 0x01;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	795b      	ldrb	r3, [r3, #5]
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	b2da      	uxtb	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 80096a2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x02;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	795b      	ldrb	r3, [r3, #5]
 80096ae:	f043 0302 	orr.w	r3, r3, #2
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 80096b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10a>
		orig_xtalk_offset = 1;
 80096be:	2301      	movs	r3, #1
 80096c0:	653b      	str	r3, [r7, #80]	@ 0x50



	if (pconfig->user_scaler_set == 1) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d108      	bne.n	80096de <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x126>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096d0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096d8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 80096dc:	e017      	b.n	800970e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x156>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 80096de:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80096e2:	019a      	lsls	r2, r3, #6
 80096e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 80096f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 80096f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80096fa:	019a      	lsls	r2, r3, #6
 80096fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009702:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800970c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009714:	2b00      	cmp	r3, #0
 8009716:	d12a      	bne.n	800976e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b6>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 8009720:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 8009724:	647b      	str	r3, [r7, #68]	@ 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 8009726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009728:	119b      	asrs	r3, r3, #6
 800972a:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800972c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800972e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009732:	db02      	blt.n	800973a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x182>
			itemp32 = 0xFFFF;
 8009734:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009738:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800973a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800973c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800974a:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800974e:	647b      	str	r3, [r7, #68]	@ 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 8009750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009752:	119b      	asrs	r3, r3, #6
 8009754:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 8009756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800975c:	db02      	blt.n	8009764 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ac>
			itemp32 = 0xFFFF;
 800975e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009762:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 8009764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009766:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	81da      	strh	r2, [r3, #14]
 800976c:	e042      	b.n	80097f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23c>
	} else if (pconfig->scaler_calc_method == 1) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009774:	2b01      	cmp	r3, #1
 8009776:	d13d      	bne.n	80097f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23c>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800977c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 8009782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009784:	2b00      	cmp	r3, #0
 8009786:	da00      	bge.n	800978a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d2>
 8009788:	330f      	adds	r3, #15
 800978a:	111b      	asrs	r3, r3, #4
 800978c:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 800978e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 8009794:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800979a:	4413      	add	r3, r2
 800979c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 800979e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097a4:	db02      	blt.n	80097ac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f4>
			itemp32 = 0xFFFF;
 80097a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097aa:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 80097ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ae:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 80097b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 80097be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097c0:	4a55      	ldr	r2, [pc, #340]	@ (8009918 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x360>)
 80097c2:	fb82 1203 	smull	r1, r2, r2, r3
 80097c6:	1152      	asrs	r2, r2, #5
 80097c8:	17db      	asrs	r3, r3, #31
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 << 2;
 80097ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	647b      	str	r3, [r7, #68]	@ 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 80097d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80097d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097da:	4413      	add	r3, r2
 80097dc:	647b      	str	r3, [r7, #68]	@ 0x44
		if (itemp32 > 0xFFFF)
 80097de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097e4:	db02      	blt.n	80097ec <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x234>
			itemp32 = 0xFFFF;
 80097e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097ea:	647b      	str	r3, [r7, #68]	@ 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 80097ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ee:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	785b      	ldrb	r3, [r3, #1]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d17f      	bne.n	80098fc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x344>
 80097fc:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8009800:	2b01      	cmp	r3, #1
 8009802:	d07b      	beq.n	80098fc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x344>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2201      	movs	r2, #1
 8009808:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	62bb      	str	r3, [r7, #40]	@ 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8009810:	f107 0317 	add.w	r3, r7, #23
 8009814:	4619      	mov	r1, r3
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fd74 	bl	800a304 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800981c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981e:	f893 31bc 	ldrb.w	r3, [r3, #444]	@ 0x1bc
 8009822:	627b      	str	r3, [r7, #36]	@ 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 8009824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009826:	3308      	adds	r3, #8
 8009828:	643b      	str	r3, [r7, #64]	@ 0x40
		if ((histo_merge_nb > 0) &&
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d049      	beq.n	80098c4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30c>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 8009830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009832:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
		if ((histo_merge_nb > 0) &&
 8009836:	2b01      	cmp	r3, #1
 8009838:	d144      	bne.n	80098c4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30c>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983c:	2b00      	cmp	r3, #0
 800983e:	d041      	beq.n	80098c4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30c>
			(nXtalk != 0)) {
			cXtalk =
 8009840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = ((long int)(nXtalk) - (long int)(cXtalk))/512;
 8009846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	da01      	bge.n	8009854 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x29c>
 8009850:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009854:	125b      	asrs	r3, r3, #9
 8009856:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 8009858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b2>
				(SmudgeFactor >= (long int)(pconfig->max_smudge_factor)))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009862:	461a      	mov	r2, r3
			if ((max ==  0)||
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4293      	cmp	r3, r2
 8009868:	db03      	blt.n	8009872 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2ba>
				pout->new_xtalk_applied_flag = 0;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2200      	movs	r2, #0
 800986e:	719a      	strb	r2, [r3, #6]
 8009870:	e028      	b.n	80098c4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x30c>
			else {
				incXtalk = nXtalk / max;
 8009872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009876:	fbb2 f3f3 	udiv	r3, r2, r3
 800987a:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (i = 0; i < max-1; i++) {
 8009880:	2300      	movs	r3, #0
 8009882:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8009886:	e014      	b.n	80098b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fa>
					cval += incXtalk;
 8009888:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	4413      	add	r3, r2
 800988e:	63fb      	str	r3, [r7, #60]	@ 0x3c
					*pcpo = cval + cval/100;
 8009890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009892:	4a22      	ldr	r2, [pc, #136]	@ (800991c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x364>)
 8009894:	fba2 2303 	umull	r2, r3, r2, r3
 8009898:	095a      	lsrs	r2, r3, #5
 800989a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800989c:	441a      	add	r2, r3
 800989e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098a0:	601a      	str	r2, [r3, #0]
					pcpo++;
 80098a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098a4:	3304      	adds	r3, #4
 80098a6:	643b      	str	r3, [r7, #64]	@ 0x40
				for (i = 0; i < max-1; i++) {
 80098a8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80098ac:	3301      	adds	r3, #1
 80098ae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80098b2:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80098b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b8:	3b01      	subs	r3, #1
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d3e4      	bcc.n	8009888 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d0>
				}
				*pcpo = nXtalk;
 80098be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098c2:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	799b      	ldrb	r3, [r3, #6]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d017      	beq.n	80098fc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x344>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d2:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80098da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098dc:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80098e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e6:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	789b      	ldrb	r3, [r3, #2]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d105      	bne.n	80098fc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x344>

			pconfig->smudge_corr_apply_enabled = 0;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 80098fc:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8009900:	2b01      	cmp	r3, #1
 8009902:	d002      	beq.n	800990a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x352>
		pout->smudge_corr_valid = 1;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2201      	movs	r2, #1
 8009908:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800990a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
}
 800990e:	4618      	mov	r0, r3
 8009910:	3758      	adds	r7, #88	@ 0x58
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	66666667 	.word	0x66666667
 800991c:	51eb851f 	.word	0x51eb851f

08009920 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 8009920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009924:	b0a2      	sub	sp, #136	@ 0x88
 8009926:	af02      	add	r7, sp, #8
 8009928:	6278      	str	r0, [r7, #36]	@ 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800992a:	2300      	movs	r3, #0
 800992c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	66bb      	str	r3, [r7, #104]	@ 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8009934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009936:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 800993a:	3320      	adds	r3, #32
 800993c:	667b      	str	r3, [r7, #100]	@ 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 800993e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009940:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 8009944:	330c      	adds	r3, #12
 8009946:	663b      	str	r3, [r7, #96]	@ 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 8009948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800994a:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800994e:	3310      	adds	r3, #16
 8009950:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 8009952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009954:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009958:	65bb      	str	r3, [r7, #88]	@ 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800995a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800995c:	657b      	str	r3, [r7, #84]	@ 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800995e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009960:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8009964:	653b      	str	r3, [r7, #80]	@ 0x50

	uint8_t	run_smudge_detection = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t merging_complete = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t	run_nodetect = 0;
 8009972:	2300      	movs	r3, #0
 8009974:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t ambient_check = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int32_t itemp32 = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint64_t utemp64 = 0;
 8009982:	f04f 0200 	mov.w	r2, #0
 8009986:	f04f 0300 	mov.w	r3, #0
 800998a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800998e:	2300      	movs	r3, #0
 8009990:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint32_t xtalk_offset_out = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t xtalk_offset_in = 0;
 8009998:	2300      	movs	r3, #0
 800999a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t current_xtalk = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t smudge_margin_adjusted = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t i = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t nodetect_index = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80099b0:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80099b4:	4619      	mov	r1, r3
 80099b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099b8:	f000 fca4 	bl	800a304 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 80099bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d004      	beq.n	80099ce <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 80099c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099c6:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
	if ((histo_merge_nb == 0) ||
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d002      	beq.n	80099d4 <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 80099d4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80099d6:	f000 fb1b 	bl	800a010 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 80099da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 80099e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099ea:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 80099ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099f0:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d901      	bls.n	80099fc <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 80099f8:	2301      	movs	r3, #1
 80099fa:	e000      	b.n	80099fe <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8009a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a04:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d106      	bne.n	8009a1a <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 8009a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a0e:	f893 21bc 	ldrb.w	r2, [r3, #444]	@ 0x1bc
 8009a12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d101      	bne.n	8009a1e <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e000      	b.n	8009a20 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 8009a1e:	2300      	movs	r3, #0
	merging_complete =
 8009a20:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 8009a24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a26:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d10e      	bne.n	8009a4a <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 8009a2c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00a      	beq.n	8009a4a <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 8009a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a36:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
		ambient_check &&
 8009a3a:	2b09      	cmp	r3, #9
 8009a3c:	d105      	bne.n	8009a4a <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8009a3e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e000      	b.n	8009a4c <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 8009a4a:	2300      	movs	r3, #0
	run_smudge_detection =
 8009a4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 8009a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a52:	f893 318e 	ldrb.w	r3, [r3, #398]	@ 0x18e
 8009a56:	2b09      	cmp	r3, #9
 8009a58:	f000 80a6 	beq.w	8009ba8 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 8009a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a5e:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	f040 80a1 	bne.w	8009ba8 <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 8009a66:	2302      	movs	r3, #2
 8009a68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		for (i = 0; i < pR->active_results; i++) {
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009a72:	e02d      	b.n	8009ad0 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 8009a74:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8009a78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a7a:	234c      	movs	r3, #76	@ 0x4c
 8009a7c:	fb01 f303 	mul.w	r3, r1, r3
 8009a80:	4413      	add	r3, r2
 8009a82:	335e      	adds	r3, #94	@ 0x5e
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b09      	cmp	r3, #9
 8009a88:	d11d      	bne.n	8009ac6 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 8009a8a:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8009a8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a90:	234c      	movs	r3, #76	@ 0x4c
 8009a92:	fb01 f303 	mul.w	r3, r1, r3
 8009a96:	4413      	add	r3, r2
 8009a98:	335a      	adds	r3, #90	@ 0x5a
 8009a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a9e:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 8009aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aa2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	dc03      	bgt.n	8009ab0 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8009aae:	e00a      	b.n	8009ac6 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 8009ab0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d106      	bne.n	8009ac6 <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						nodetect_index = i;
 8009abe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009ac2:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		for (i = 0; i < pR->active_results; i++) {
 8009ac6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009aca:	3301      	adds	r3, #1
 8009acc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ad2:	7c9a      	ldrb	r2, [r3, #18]
 8009ad4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d3cb      	bcc.n	8009a74 <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 8009adc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d102      	bne.n	8009aea <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 8009aea:	f897 106e 	ldrb.w	r1, [r7, #110]	@ 0x6e
		amr =
 8009aee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009af0:	234c      	movs	r3, #76	@ 0x4c
 8009af2:	fb01 f303 	mul.w	r3, r1, r3
 8009af6:	4413      	add	r3, r2
 8009af8:	3348      	adds	r3, #72	@ 0x48
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	867b      	strh	r3, [r7, #50]	@ 0x32

		if (run_nodetect == 1) {
 8009afe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d150      	bne.n	8009ba8 <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 8009b06:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009b08:	2200      	movs	r2, #0
 8009b0a:	469a      	mov	sl, r3
 8009b0c:	4693      	mov	fp, r2
 8009b0e:	4652      	mov	r2, sl
 8009b10:	465b      	mov	r3, fp
 8009b12:	f04f 0000 	mov.w	r0, #0
 8009b16:	f04f 0100 	mov.w	r1, #0
 8009b1a:	0159      	lsls	r1, r3, #5
 8009b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b20:	0150      	lsls	r0, r2, #5
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	ebb2 040a 	subs.w	r4, r2, sl
 8009b2a:	eb63 050b 	sbc.w	r5, r3, fp
 8009b2e:	f04f 0200 	mov.w	r2, #0
 8009b32:	f04f 0300 	mov.w	r3, #0
 8009b36:	00ab      	lsls	r3, r5, #2
 8009b38:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009b3c:	00a2      	lsls	r2, r4, #2
 8009b3e:	4614      	mov	r4, r2
 8009b40:	461d      	mov	r5, r3
 8009b42:	eb14 080a 	adds.w	r8, r4, sl
 8009b46:	eb45 090b 	adc.w	r9, r5, fp
 8009b4a:	f04f 0200 	mov.w	r2, #0
 8009b4e:	f04f 0300 	mov.w	r3, #0
 8009b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b5e:	4690      	mov	r8, r2
 8009b60:	4699      	mov	r9, r3
 8009b62:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40


			utemp64 = utemp64 << 9;
 8009b66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	f04f 0300 	mov.w	r3, #0
 8009b72:	024b      	lsls	r3, r1, #9
 8009b74:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8009b78:	0242      	lsls	r2, r0, #9
 8009b7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8009b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b82:	2200      	movs	r2, #0
 8009b84:	61bb      	str	r3, [r7, #24]
 8009b86:	61fa      	str	r2, [r7, #28]
 8009b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b8c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8009b90:	4621      	mov	r1, r4
 8009b92:	428a      	cmp	r2, r1
 8009b94:	4629      	mov	r1, r5
 8009b96:	418b      	sbcs	r3, r1
 8009b98:	d203      	bcs.n	8009ba2 <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8009ba0:	e002      	b.n	8009ba8 <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		}
	}


	if (run_smudge_detection) {
 8009ba8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 810b 	beq.w	8009dc8 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 8009bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 8009bb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009bba:	f7ff fb98 	bl	80092ee <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 8009bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bc0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8009bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 8009bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	63bb      	str	r3, [r7, #56]	@ 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 8009bd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bd4:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	637b      	str	r3, [r7, #52]	@ 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 8009bda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be2:	4413      	add	r3, r2
 8009be4:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 8009be6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da02      	bge.n	8009bf2 <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 8009bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bee:	425b      	negs	r3, r3
 8009bf0:	67bb      	str	r3, [r7, #120]	@ 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8009bf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	dd0c      	ble.n	8009c18 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 8009bfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted)) {
 8009c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 8009c02:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 8009c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c06:	429a      	cmp	r2, r3
 8009c08:	da03      	bge.n	8009c12 <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 8009c0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	709a      	strb	r2, [r3, #2]
 8009c10:	e002      	b.n	8009c18 <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 8009c12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c14:	2202      	movs	r2, #2
 8009c16:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 8009c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c20:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 8009c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d906      	bls.n	8009c3c <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 8009c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c30:	2201      	movs	r2, #1
 8009c32:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 8009c34:	2302      	movs	r3, #2
 8009c36:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009c3a:	e014      	b.n	8009c66 <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 8009c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009c42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c44:	2000      	movs	r0, #0
 8009c46:	6139      	str	r1, [r7, #16]
 8009c48:	6178      	str	r0, [r7, #20]
 8009c4a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009c4e:	4621      	mov	r1, r4
 8009c50:	1851      	adds	r1, r2, r1
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	4629      	mov	r1, r5
 8009c56:	eb43 0101 	adc.w	r1, r3, r1
 8009c5a:	60f9      	str	r1, [r7, #12]
 8009c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009c62:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 8009c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d202      	bcs.n	8009c78 <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 8009c72:	2301      	movs	r3, #1
 8009c74:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 8009c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c7a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009c7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2200      	movs	r2, #0
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c8c:	f7f7 f830 	bl	8000cf0 <__aeabi_uldivmod>
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
		xtalk_offset_out =
 8009c94:	4613      	mov	r3, r2
 8009c96:	673b      	str	r3, [r7, #112]	@ 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 8009c98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	1ad2      	subs	r2, r2, r3
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca0:	4413      	add	r3, r2
 8009ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 8009ca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da02      	bge.n	8009cb0 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 8009caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cac:	425b      	negs	r3, r3
 8009cae:	67bb      	str	r3, [r7, #120]	@ 0x78

		if (continue_processing == CONT_CONTINUE &&
 8009cb0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d112      	bne.n	8009cde <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 8009cb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8009cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	db0c      	blt.n	8009cde <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 8009cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
					(int32_t)smudge_margin_adjusted))
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				((int32_t)current_xtalk -
 8009cc8:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 8009cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	da03      	bge.n	8009cd8 <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 8009cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	70da      	strb	r2, [r3, #3]
 8009cd6:	e002      	b.n	8009cde <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 8009cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cda:	2202      	movs	r2, #2
 8009cdc:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 8009cde:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d108      	bne.n	8009cf8 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 8009ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8009cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	da02      	bge.n	8009cf8 <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77



		pout->smudge_corr_clipped = 0;
 8009cf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 8009cfe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d112      	bne.n	8009d2c <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 8009d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d08:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00e      	beq.n	8009d2c <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 8009d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8009d16:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 8009d1a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d905      	bls.n	8009d2c <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 8009d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d22:	2201      	movs	r2, #1
 8009d24:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 8009d26:	2302      	movs	r3, #2
 8009d28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 8009d2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d2e:	7c1b      	ldrb	r3, [r3, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d007      	beq.n	8009d44 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 8009d34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d36:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 8009d38:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d902      	bls.n	8009d44 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 8009d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 8009d44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d46:	7c1b      	ldrb	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d107      	bne.n	8009d5c <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 8009d4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d4e:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 8009d50:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d202      	bcs.n	8009d5c <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 8009d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	673b      	str	r3, [r7, #112]	@ 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 8009d5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d5e:	089b      	lsrs	r3, r3, #2
 8009d60:	673b      	str	r3, [r7, #112]	@ 0x70
		if (xtalk_offset_out > 0x3FFFF)
 8009d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d68:	d301      	bcc.n	8009d6e <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 8009d6a:	4b45      	ldr	r3, [pc, #276]	@ (8009e80 <VL53LX_dynamic_xtalk_correction_corrector+0x560>)
 8009d6c:	673b      	str	r3, [r7, #112]	@ 0x70


		if (continue_processing == CONT_CONTINUE) {
 8009d6e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10d      	bne.n	8009d92 <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8009d76:	2300      	movs	r3, #0
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d82:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009d84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d86:	f7ff fc17 	bl	80095b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009d90:	e009      	b.n	8009da6 <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8009d92:	2301      	movs	r3, #1
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	2301      	movs	r3, #1
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d9e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009da0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009da2:	f7ff fc09 	bl	80095b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 8009da6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d10c      	bne.n	8009dc8 <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 8009dae:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8009db0:	f04f 0200 	mov.w	r2, #0
 8009db4:	f04f 0300 	mov.w	r3, #0
 8009db8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 8009dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 8009dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (run_nodetect == 1) {
 8009dce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d14d      	bne.n	8009e72 <VL53LX_dynamic_xtalk_correction_corrector+0x552>

		pint->nodetect_counter += 1;
 8009dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dde:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8009de0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009de2:	691a      	ldr	r2, [r3, #16]
 8009de4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d202      	bcs.n	8009df2 <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 8009dec:	2301      	movs	r3, #1
 8009dee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 8009df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df6:	673b      	str	r3, [r7, #112]	@ 0x70

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8009df8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009dfa:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d107      	bne.n	8009e12 <VL53LX_dynamic_xtalk_correction_corrector+0x4f2>
			xtalk_offset_out = xtalk_offset_out *
			(uint32_t)(pdev->tuning_parms.tp_hist_merge_max_size);
 8009e02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e04:	f893 31bc 	ldrb.w	r3, [r3, #444]	@ 0x1bc
 8009e08:	461a      	mov	r2, r3
			xtalk_offset_out = xtalk_offset_out *
 8009e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e0c:	fb02 f303 	mul.w	r3, r2, r3
 8009e10:	673b      	str	r3, [r7, #112]	@ 0x70

		if (continue_processing == CONT_CONTINUE) {
 8009e12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d110      	bne.n	8009e3c <VL53LX_dynamic_xtalk_correction_corrector+0x51c>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e26:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009e28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e2a:	f7ff fbc5 	bl	80095b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 8009e2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e30:	2202      	movs	r2, #2
 8009e32:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 8009e34:	2302      	movs	r3, #2
 8009e36:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009e3a:	e009      	b.n	8009e50 <VL53LX_dynamic_xtalk_correction_corrector+0x530>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	2300      	movs	r3, #0
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e48:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009e4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e4c:	f7ff fbb4 	bl	80095b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 8009e50:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d10c      	bne.n	8009e72 <VL53LX_dynamic_xtalk_correction_corrector+0x552>
			pint->accumulator = 0;
 8009e58:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8009e5a:	f04f 0200 	mov.w	r2, #0
 8009e5e:	f04f 0300 	mov.w	r3, #0
 8009e62:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 8009e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 8009e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e6e:	2200      	movs	r2, #0
 8009e70:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e72:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3780      	adds	r7, #128	@ 0x80
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e80:	0003ffff 	.word	0x0003ffff

08009e84 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f503 5303 	add.w	r3, r3, #8384	@ 0x20c0
 8009e9a:	3320      	adds	r3, #32
 8009e9c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 23cd 	strb.w	r2, [r3, #973]	@ 0x3cd
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 23ce 	strb.w	r2, [r3, #974]	@ 0x3ce
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8a3 23d0 	strh.w	r2, [r3, #976]	@ 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	2364      	movs	r3, #100	@ 0x64
 8009ed8:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f8c2 33d8 	str.w	r3, [r2, #984]	@ 0x3d8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009efc:	461a      	mov	r2, r3
 8009efe:	23c8      	movs	r3, #200	@ 0xc8
 8009f00:	f8c2 33e0 	str.w	r3, [r2, #992]	@ 0x3e0
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f10:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f44f 739a 	mov.w	r3, #308	@ 0x134
 8009f20:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009f30:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	2380      	movs	r3, #128	@ 0x80
 8009f3e:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f58:	f8a3 23f6 	strh.w	r2, [r3, #1014]	@ 0x3f6
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f66:	f8a3 23f8 	strh.w	r2, [r3, #1016]	@ 0x3f8
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
 8009f82:	f8c2 33fc 	str.w	r3, [r2, #1020]	@ 0x3fc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	2328      	movs	r3, #40	@ 0x28
 8009f90:	f8c2 3400 	str.w	r3, [r2, #1024]	@ 0x400
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 8009fa0:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009faa:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8009fae:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fb8:	461a      	mov	r2, r3
 8009fba:	2312      	movs	r3, #18
 8009fbc:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410
	pdev->smudge_corrector_internals.required_samples = 0;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f8c2 3414 	str.w	r3, [r2, #1044]	@ 0x414
	pdev->smudge_corrector_internals.accumulator = 0;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f503 53a1 	add.w	r3, r3, #5152	@ 0x1420
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f000 f806 	bl	800a010 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800a004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800a022:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	2200      	movs	r2, #0
 800a028:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2200      	movs	r2, #0
 800a02e:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2200      	movs	r2, #0
 800a034:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2200      	movs	r2, #0
 800a03a:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2200      	movs	r2, #0
 800a040:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2200      	movs	r2, #0
 800a046:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2200      	movs	r2, #0
 800a04c:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2200      	movs	r2, #0
 800a052:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2200      	movs	r2, #0
 800a058:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2200      	movs	r2, #0
 800a05e:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800a060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a086:	461a      	mov	r2, r3
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a094:	2200      	movs	r2, #0
 800a096:	f8a3 2278 	strh.w	r2, [r3, #632]	@ 0x278
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8a3 227a 	strh.w	r2, [r3, #634]	@ 0x27a
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 800a0ac:	331c      	adds	r3, #28
 800a0ae:	2218      	movs	r2, #24
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f011 f838 	bl	801b128 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800a0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0da:	2203      	movs	r2, #3
 800a0dc:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 242a 	strb.w	r2, [r3, #1066]	@ 0x42a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 242b 	strb.w	r2, [r3, #1067]	@ 0x42b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a116:	2200      	movs	r2, #0
 800a118:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a122:	2200      	movs	r2, #0
 800a124:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a12e:	461a      	mov	r2, r3
 800a130:	2300      	movs	r3, #0
 800a132:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
	pdev->low_power_auto_data.dss__required_spads = 0;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a13c:	2200      	movs	r2, #0
 800a13e:	f8a3 2434 	strh.w	r2, [r3, #1076]	@ 0x434

	LOG_FUNCTION_END(status);

	return status;
 800a142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800a152:	b480      	push	{r7}
 800a154:	b085      	sub	sp, #20
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a15e:	2300      	movs	r3, #0
 800a160:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f893 231b 	ldrb.w	r2, [r3, #795]	@ 0x31b
	pdev->low_power_auto_data.saved_vhv_init =
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a16e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f893 2318 	ldrb.w	r2, [r3, #792]	@ 0x318
	pdev->low_power_auto_data.saved_vhv_timeout =
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a17e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f893 331b 	ldrb.w	r3, [r3, #795]	@ 0x31b
 800a188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f883 231b 	strb.w	r2, [r3, #795]	@ 0x31b

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f893 3318 	ldrb.w	r3, [r3, #792]	@ 0x318
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1a6:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a1ae:	4413      	add	r3, r2
 800a1b0:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 235f 	strb.w	r2, [r3, #863]	@ 0x35f
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1c6:	f893 2396 	ldrb.w	r2, [r3, #918]	@ 0x396
	pdev->low_power_auto_data.first_run_phasecal_result =
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1d0:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1da:	f893 242e 	ldrb.w	r2, [r3, #1070]	@ 0x42e
	pdev->gen_cfg.cal_config__vcsel_start =
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

	LOG_FUNCTION_END(status);

	return status;
 800a1e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f203 339e 	addw	r3, r3, #926	@ 0x39e
 800a206:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a208:	2300      	movs	r3, #0
 800a20a:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	8a1b      	ldrh	r3, [r3, #16]
 800a210:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	891b      	ldrh	r3, [r3, #8]
 800a216:	4413      	add	r3, r2
	utemp32a =
 800a218:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a220:	d302      	bcc.n	800a228 <VL53LX_low_power_auto_update_DSS+0x34>
		utemp32a = 0xFFFF;
 800a222:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a226:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	041b      	lsls	r3, r3, #16
 800a22c:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <VL53LX_low_power_auto_update_DSS+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800a238:	23f1      	movs	r3, #241	@ 0xf1
 800a23a:	75fb      	strb	r3, [r7, #23]
 800a23c:	e040      	b.n	800a2c0 <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800a244:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	fbb3 f3f2 	udiv	r3, r3, r2
 800a24c:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a254:	461a      	mov	r2, r3
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8b3 3336 	ldrh.w	r3, [r3, #822]	@ 0x336
 800a262:	041b      	lsls	r3, r3, #16
 800a264:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a26c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800a274:	23f1      	movs	r3, #241	@ 0xf1
 800a276:	75fb      	strb	r3, [r7, #23]
 800a278:	e022      	b.n	800a2c0 <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a280:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
			utemp32a = utemp32a /
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28a:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a292:	d302      	bcc.n	800a29a <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800a294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a298:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2a4:	f8a3 2434 	strh.w	r2, [r3, #1076]	@ 0x434


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2ae:	f8b3 2434 	ldrh.w	r2, [r3, #1076]	@ 0x434
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8a3 2366 	strh.w	r2, [r3, #870]	@ 0x366
			pdev->gen_cfg.dss_config__roi_mode_control =
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800a2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2c4:	f113 0f0f 	cmn.w	r3, #15
 800a2c8:	d114      	bne.n	800a2f4 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a2d4:	f8a3 2434 	strh.w	r2, [r3, #1076]	@ 0x434


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2de:	f8b3 2434 	ldrh.w	r2, [r3, #1076]	@ 0x434
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8a3 2366 	strh.w	r2, [r3, #870]	@ 0x366
		pdev->gen_cfg.dss_config__roi_mode_control =
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f893 3408 	ldrb.w	r3, [r3, #1032]	@ 0x408
 800a320:	2b07      	cmp	r3, #7
 800a322:	bf0c      	ite	eq
 800a324:	2301      	moveq	r3, #1
 800a326:	2300      	movne	r3, #0
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800a32c:	2300      	movs	r3, #0
 800a32e:	75fb      	strb	r3, [r7, #23]
 800a330:	e019      	b.n	800a366 <VL53LX_compute_histo_merge_nb+0x62>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800a332:	7df9      	ldrb	r1, [r7, #23]
 800a334:	7bbb      	ldrb	r3, [r7, #14]
 800a336:	6938      	ldr	r0, [r7, #16]
 800a338:	461a      	mov	r2, r3
 800a33a:	0052      	lsls	r2, r2, #1
 800a33c:	441a      	add	r2, r3
 800a33e:	0153      	lsls	r3, r2, #5
 800a340:	461a      	mov	r2, r3
 800a342:	460b      	mov	r3, r1
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	440b      	add	r3, r1
 800a348:	019b      	lsls	r3, r3, #6
 800a34a:	4413      	add	r3, r2
 800a34c:	4403      	add	r3, r0
 800a34e:	f503 53e3 	add.w	r3, r3, #7264	@ 0x1c60
 800a352:	3304      	adds	r3, #4
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	dd02      	ble.n	800a360 <VL53LX_compute_histo_merge_nb+0x5c>
			sum++;
 800a35a:	7dbb      	ldrb	r3, [r7, #22]
 800a35c:	3301      	adds	r3, #1
 800a35e:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	3301      	adds	r3, #1
 800a364:	75fb      	strb	r3, [r7, #23]
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	2b05      	cmp	r3, #5
 800a36a:	d9e2      	bls.n	800a332 <VL53LX_compute_histo_merge_nb+0x2e>
	*histo_merge_nb = sum;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	7dba      	ldrb	r2, [r7, #22]
 800a370:	701a      	strb	r2, [r3, #0]

	return status;
 800a372:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	371c      	adds	r7, #28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800a382:	b480      	push	{r7}
 800a384:	b085      	sub	sp, #20
 800a386:	af00      	add	r7, sp, #0
 800a388:	4603      	mov	r3, r0
 800a38a:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800a390:	88fb      	ldrh	r3, [r7, #6]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a39c:	fb92 f3f3 	sdiv	r3, r2, r3
 800a3a0:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800a3b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a3b4:	b089      	sub	sp, #36	@ 0x24
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	607a      	str	r2, [r7, #4]
 800a3be:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800a3c0:	f04f 0200 	mov.w	r2, #0
 800a3c4:	f04f 0300 	mov.w	r3, #0
 800a3c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	fb02 f303 	mul.w	r3, r2, r3
 800a3d8:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	0b1b      	lsrs	r3, r3, #12
 800a3de:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	469a      	mov	sl, r3
 800a3e6:	4693      	mov	fp, r2
 800a3e8:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	fb02 f303 	mul.w	r3, r2, r3
 800a3f4:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	091b      	lsrs	r3, r3, #4
 800a3fa:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2200      	movs	r2, #0
 800a400:	4698      	mov	r8, r3
 800a402:	4691      	mov	r9, r2
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	fb08 f203 	mul.w	r2, r8, r3
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	fb09 f303 	mul.w	r3, r9, r3
 800a410:	4413      	add	r3, r2
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	fba2 4508 	umull	r4, r5, r2, r8
 800a418:	442b      	add	r3, r5
 800a41a:	461d      	mov	r5, r3
 800a41c:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800a420:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800a424:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	f04f 0300 	mov.w	r3, #0
 800a430:	0b02      	lsrs	r2, r0, #12
 800a432:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800a436:	0b0b      	lsrs	r3, r1, #12
 800a438:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800a43c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d305      	bcc.n	800a450 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800a444:	f04f 32ff 	mov.w	r2, #4294967295
 800a448:	f04f 0300 	mov.w	r3, #0
 800a44c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	617b      	str	r3, [r7, #20]

	return duration_us;
 800a454:	697b      	ldr	r3, [r7, #20]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3724      	adds	r7, #36	@ 0x24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a460:	4770      	bx	lr

0800a462 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800a462:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a466:	b096      	sub	sp, #88	@ 0x58
 800a468:	af00      	add	r7, sp, #0
 800a46a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a46c:	460b      	mov	r3, r1
 800a46e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a470:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint64_t total_hist_counts  = 0;
 800a472:	f04f 0200 	mov.w	r2, #0
 800a476:	f04f 0300 	mov.w	r3, #0
 800a47a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_per_spad     = 0;
 800a47e:	f04f 0200 	mov.w	r2, #0
 800a482:	f04f 0300 	mov.w	r3, #0
 800a486:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	uint32_t rate_per_spad_kcps = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	647b      	str	r3, [r7, #68]	@ 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800a48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a490:	17da      	asrs	r2, r3, #31
 800a492:	469a      	mov	sl, r3
 800a494:	4693      	mov	fp, r2
 800a496:	4652      	mov	r2, sl
 800a498:	465b      	mov	r3, fp
 800a49a:	f04f 0000 	mov.w	r0, #0
 800a49e:	f04f 0100 	mov.w	r1, #0
 800a4a2:	0159      	lsls	r1, r3, #5
 800a4a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a4a8:	0150      	lsls	r0, r2, #5
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	ebb2 040a 	subs.w	r4, r2, sl
 800a4b2:	eb63 050b 	sbc.w	r5, r3, fp
 800a4b6:	f04f 0200 	mov.w	r2, #0
 800a4ba:	f04f 0300 	mov.w	r3, #0
 800a4be:	00ab      	lsls	r3, r5, #2
 800a4c0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a4c4:	00a2      	lsls	r2, r4, #2
 800a4c6:	4614      	mov	r4, r2
 800a4c8:	461d      	mov	r5, r3
 800a4ca:	eb14 080a 	adds.w	r8, r4, sl
 800a4ce:	eb45 090b 	adc.w	r9, r5, fp
 800a4d2:	f04f 0200 	mov.w	r2, #0
 800a4d6:	f04f 0300 	mov.w	r3, #0
 800a4da:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800a4de:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800a4e2:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800a4e6:	4690      	mov	r8, r2
 800a4e8:	4699      	mov	r9, r3
 800a4ea:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800a4ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00d      	beq.n	800a510 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800a4f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	61bb      	str	r3, [r7, #24]
 800a4fa:	61fa      	str	r2, [r7, #28]
 800a4fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a500:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800a504:	f7f6 fbf4 	bl	8000cf0 <__aeabi_uldivmod>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	2b00      	cmp	r3, #0
 800a514:	d02a      	beq.n	800a56c <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800a516:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a51a:	f04f 0200 	mov.w	r2, #0
 800a51e:	f04f 0300 	mov.w	r3, #0
 800a522:	02cb      	lsls	r3, r1, #11
 800a524:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a528:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800a52a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a52c:	0849      	lsrs	r1, r1, #1
 800a52e:	2000      	movs	r0, #0
 800a530:	6139      	str	r1, [r7, #16]
 800a532:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800a534:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a538:	4621      	mov	r1, r4
 800a53a:	1851      	adds	r1, r2, r1
 800a53c:	6039      	str	r1, [r7, #0]
 800a53e:	4629      	mov	r1, r5
 800a540:	eb43 0101 	adc.w	r1, r3, r1
 800a544:	6079      	str	r1, [r7, #4]
 800a546:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a54a:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800a54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a550:	2200      	movs	r2, #0
 800a552:	60bb      	str	r3, [r7, #8]
 800a554:	60fa      	str	r2, [r7, #12]
 800a556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a55a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800a55e:	f7f6 fbc7 	bl	8000cf0 <__aeabi_uldivmod>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800a56a:	e00b      	b.n	800a584 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800a56c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a570:	f04f 0200 	mov.w	r2, #0
 800a574:	f04f 0300 	mov.w	r3, #0
 800a578:	02cb      	lsls	r3, r1, #11
 800a57a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a57e:	02c2      	lsls	r2, r0, #11
 800a580:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800a584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a586:	647b      	str	r3, [r7, #68]	@ 0x44

	return rate_per_spad_kcps;
 800a588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3758      	adds	r7, #88	@ 0x58
 800a58e:	46bd      	mov	sp, r7
 800a590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a594 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a5a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a5a4:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800a5a6:	e002      	b.n	800a5ae <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	089b      	lsrs	r3, r3, #2
 800a5ac:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d8f8      	bhi.n	800a5a8 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800a5b6:	e017      	b.n	800a5e8 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	4413      	add	r3, r2
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d30b      	bcc.n	800a5dc <VL53LX_isqrt+0x48>
			num -= res + bit;
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	085b      	lsrs	r3, r3, #1
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	e002      	b.n	800a5e2 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	085b      	lsrs	r3, r3, #1
 800a5e0:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	089b      	lsrs	r3, r3, #2
 800a5e6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e4      	bne.n	800a5b8 <VL53LX_isqrt+0x24>
	}

	return res;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a612:	4618      	mov	r0, r3
 800a614:	f000 faa6 	bl	800ab64 <VL53LX_decode_vcsel_period>
 800a618:	4603      	mov	r3, r0
	period = 2048 *
 800a61a:	02db      	lsls	r3, r3, #11
 800a61c:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800a628:	461a      	mov	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4413      	add	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a636:	02db      	lsls	r3, r3, #11
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4413      	add	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a644:	02db      	lsls	r3, r3, #11
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d009      	beq.n	800a666 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	fbb3 f2f2 	udiv	r2, r3, r2
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	fb01 f202 	mul.w	r2, r1, r2
 800a660:	1a9b      	subs	r3, r3, r2
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	e001      	b.n	800a66a <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	LOG_FUNCTION_END(0);
}
 800a674:	bf00      	nop
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800a68e:	6838      	ldr	r0, [r7, #0]
 800a690:	f000 fb91 	bl	800adb6 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff ff7a 	bl	800a594 <VL53LX_isqrt>
 800a6a0:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800a6a2:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ac:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	3307      	adds	r3, #7
 800a6b2:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	111b      	asrs	r3, r3, #4
 800a6b8:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum        = 0;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
 800a6da:	e01e      	b.n	800a71a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800a6dc:	7bfa      	ldrb	r2, [r7, #15]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	3206      	adds	r2, #6
 800a6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	dd13      	ble.n	800a714 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a6f2:	7bf9      	ldrb	r1, [r7, #15]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	3106      	adds	r1, #6
 800a6f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6fc:	441a      	add	r2, r3
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			pdata->number_of_ambient_samples++;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800a70a:	3301      	adds	r3, #1
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	3301      	adds	r3, #1
 800a718:	73fb      	strb	r3, [r7, #15]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	7a9b      	ldrb	r3, [r3, #10]
 800a71e:	7bfa      	ldrb	r2, [r7, #15]
 800a720:	429a      	cmp	r2, r3
 800a722:	d3db      	bcc.n	800a6dc <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d01c      	beq.n	800a768 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
		pdata->VL53LX_p_028 =
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
 800a746:	0852      	lsrs	r2, r2, #1
 800a748:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800a74a:	441a      	add	r2, r3
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	f892 209e 	ldrb.w	r2, [r2, #158]	@ 0x9e
		pdata->VL53LX_p_028 /=
 800a75e:	fb93 f2f2 	sdiv	r2, r3, r2
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800a768:	bf00      	nop
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	7b1b      	ldrb	r3, [r3, #12]
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	2b07      	cmp	r3, #7
 800a78e:	d13a      	bne.n	800a806 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800a794:	2300      	movs	r3, #0
 800a796:	73bb      	strb	r3, [r7, #14]
 800a798:	e01f      	b.n	800a7da <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	4413      	add	r3, r2
 800a7a0:	7b1b      	ldrb	r3, [r3, #12]
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b07      	cmp	r3, #7
 800a7a8:	d014      	beq.n	800a7d4 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800a7aa:	7bba      	ldrb	r2, [r7, #14]
 800a7ac:	7b7b      	ldrb	r3, [r7, #13]
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	440a      	add	r2, r1
 800a7b2:	7b11      	ldrb	r1, [r2, #12]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	460a      	mov	r2, r1
 800a7ba:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800a7bc:	7bba      	ldrb	r2, [r7, #14]
 800a7be:	7b7b      	ldrb	r3, [r7, #13]
 800a7c0:	6879      	ldr	r1, [r7, #4]
 800a7c2:	440a      	add	r2, r1
 800a7c4:	7c91      	ldrb	r1, [r2, #18]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	460a      	mov	r2, r1
 800a7cc:	749a      	strb	r2, [r3, #18]
				i++;
 800a7ce:	7b7b      	ldrb	r3, [r7, #13]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	73bb      	strb	r3, [r7, #14]
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
 800a7dc:	2b05      	cmp	r3, #5
 800a7de:	d9dc      	bls.n	800a79a <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800a7e0:	7b7b      	ldrb	r3, [r7, #13]
 800a7e2:	73bb      	strb	r3, [r7, #14]
 800a7e4:	e00c      	b.n	800a800 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	2210      	movs	r2, #16
 800a7ee:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	73bb      	strb	r3, [r7, #14]
 800a800:	7bbb      	ldrb	r3, [r7, #14]
 800a802:	2b05      	cmp	r3, #5
 800a804:	d9ef      	bls.n	800a7e6 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	7adb      	ldrb	r3, [r3, #11]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d023      	beq.n	800a856 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	7adb      	ldrb	r3, [r3, #11]
 800a812:	73fb      	strb	r3, [r7, #15]
 800a814:	e00f      	b.n	800a836 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800a816:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	7ad2      	ldrb	r2, [r2, #11]
 800a81e:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3106      	adds	r1, #6
 800a824:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3206      	adds	r2, #6
 800a82c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800a830:	7bfb      	ldrb	r3, [r7, #15]
 800a832:	3301      	adds	r3, #1
 800a834:	73fb      	strb	r3, [r7, #15]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	7a5b      	ldrb	r3, [r3, #9]
 800a83a:	7bfa      	ldrb	r2, [r7, #15]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d3ea      	bcc.n	800a816 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	72da      	strb	r2, [r3, #11]
	}
}
 800a856:	bf00      	nop
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b084      	sub	sp, #16
 800a866:	af00      	add	r7, sp, #0
 800a868:	4603      	mov	r3, r0
 800a86a:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800a874:	88fb      	ldrh	r3, [r7, #6]
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff fd83 	bl	800a382 <VL53LX_calc_pll_period_us>
 800a87c:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800a882:	f249 2257 	movw	r2, #37463	@ 0x9257
 800a886:	fb02 f303 	mul.w	r3, r2, r3
 800a88a:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800a892:	0c1b      	lsrs	r3, r3, #16
 800a894:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800a896:	68bb      	ldr	r3, [r7, #8]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800a8ae:	2307      	movs	r3, #7
 800a8b0:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8bc:	db03      	blt.n	800a8c6 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800a8be:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	e004      	b.n	800a8d0 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dd01      	ble.n	800a8d0 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8d6:	dd02      	ble.n	800a8de <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	613b      	str	r3, [r7, #16]
 800a8dc:	e001      	b.n	800a8e2 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800a8de:	2307      	movs	r3, #7
 800a8e0:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d009      	beq.n	800a8fc <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	409a      	lsls	r2, r3
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	085b      	lsrs	r3, r3, #1
 800a8f2:	441a      	add	r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8fa:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a902:	dd02      	ble.n	800a90a <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a910:	d302      	bcc.n	800a918 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800a912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a916:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800a91c:	89fb      	ldrh	r3, [r7, #14]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b087      	sub	sp, #28
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	603b      	str	r3, [r7, #0]
 800a936:	4613      	mov	r3, r2
 800a938:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d010      	beq.n	800a96a <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	021a      	lsls	r2, r3, #8
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	fa02 f303 	lsl.w	r3, r2, r3
 800a952:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800a954:	88fb      	ldrh	r3, [r7, #6]
 800a956:	085b      	lsrs	r3, r3, #1
 800a958:	b29b      	uxth	r3, r3
 800a95a:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800a960:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800a962:	fbb2 f3f3 	udiv	r3, r2, r3
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	e004      	b.n	800a974 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	fa02 f303 	lsl.w	r3, r2, r3
 800a972:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d901      	bls.n	800a980 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800a984:	8a7b      	ldrh	r3, [r7, #18]
}
 800a986:	4618      	mov	r0, r3
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
	...

0800a994 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	b093      	sub	sp, #76	@ 0x4c
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	461e      	mov	r6, r3
 800a99e:	4603      	mov	r3, r0
 800a9a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a9aa:	4633      	mov	r3, r6
 800a9ac:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29


	uint32_t    pll_period_us = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	643b      	str	r3, [r7, #64]	@ 0x40
	int64_t     tmp_long_int  = 0;
 800a9b4:	f04f 0200 	mov.w	r2, #0
 800a9b8:	f04f 0300 	mov.w	r3, #0
 800a9bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	int32_t     range_mm      = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t     range_mm_10   = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	637b      	str	r3, [r7, #52]	@ 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800a9c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff fcd9 	bl	800a382 <VL53LX_calc_pll_period_us>
 800a9d0:	6438      	str	r0, [r7, #64]	@ 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800a9d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	623b      	str	r3, [r7, #32]
 800a9d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a9da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a9dc:	2200      	movs	r2, #0
 800a9de:	61bb      	str	r3, [r7, #24]
 800a9e0:	61fa      	str	r2, [r7, #28]
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	1a9b      	subs	r3, r3, r2
 800a9ec:	613b      	str	r3, [r7, #16]
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	460a      	mov	r2, r1
 800a9f2:	eb63 0302 	sbc.w	r3, r3, r2
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a9fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800aa00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa02:	2200      	movs	r2, #0
 800aa04:	469a      	mov	sl, r3
 800aa06:	4693      	mov	fp, r2
 800aa08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa0a:	fb0a f203 	mul.w	r2, sl, r3
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa10:	fb0b f303 	mul.w	r3, fp, r3
 800aa14:	4413      	add	r3, r2
 800aa16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa18:	fba2 890a 	umull	r8, r9, r2, sl
 800aa1c:	444b      	add	r3, r9
 800aa1e:	4699      	mov	r9, r3
 800aa20:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
 800aa24:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800aa28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	da08      	bge.n	800aa42 <VL53LX_range_maths+0xae>
 800aa30:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800aa34:	1851      	adds	r1, r2, r1
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	f143 0300 	adc.w	r3, r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa42:	f04f 0000 	mov.w	r0, #0
 800aa46:	f04f 0100 	mov.w	r1, #0
 800aa4a:	0a50      	lsrs	r0, r2, #9
 800aa4c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800aa50:	1259      	asrs	r1, r3, #9
 800aa52:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800aa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa58:	f249 2257 	movw	r2, #37463	@ 0x9257
 800aa5c:	fb03 f202 	mul.w	r2, r3, r2
 800aa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa62:	2100      	movs	r1, #0
 800aa64:	fb01 f303 	mul.w	r3, r1, r3
 800aa68:	4413      	add	r3, r2
 800aa6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa6c:	f249 2157 	movw	r1, #37463	@ 0x9257
 800aa70:	fba2 4501 	umull	r4, r5, r2, r1
 800aa74:	442b      	add	r3, r5
 800aa76:	461d      	mov	r5, r3
 800aa78:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800aa7c:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800aa80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	da07      	bge.n	800aa98 <VL53LX_range_maths+0x104>
 800aa88:	4934      	ldr	r1, [pc, #208]	@ (800ab5c <VL53LX_range_maths+0x1c8>)
 800aa8a:	1851      	adds	r1, r2, r1
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	f143 0300 	adc.w	r3, r3, #0
 800aa92:	607b      	str	r3, [r7, #4]
 800aa94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa98:	f04f 0000 	mov.w	r0, #0
 800aa9c:	f04f 0100 	mov.w	r1, #0
 800aaa0:	0d90      	lsrs	r0, r2, #22
 800aaa2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800aaa6:	1599      	asrs	r1, r3, #22
 800aaa8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800aaac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800aab0:	4413      	add	r3, r2
 800aab2:	647b      	str	r3, [r7, #68]	@ 0x44


	range_mm *= gain_factor;
 800aab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aab6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aab8:	fb02 f303 	mul.w	r3, r2, r3
 800aabc:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm += 0x0400;
 800aabe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aac0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aac4:	647b      	str	r3, [r7, #68]	@ 0x44
	range_mm /= 0x0800;
 800aac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	da01      	bge.n	800aad0 <VL53LX_range_maths+0x13c>
 800aacc:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800aad0:	12db      	asrs	r3, r3, #11
 800aad2:	647b      	str	r3, [r7, #68]	@ 0x44


	if (fractional_bits == 0) {
 800aad4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d130      	bne.n	800ab3e <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800aadc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	637b      	str	r3, [r7, #52]	@ 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800aae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	da00      	bge.n	800aaf0 <VL53LX_range_maths+0x15c>
 800aaee:	3303      	adds	r3, #3
 800aaf0:	109b      	asrs	r3, r3, #2
 800aaf2:	637b      	str	r3, [r7, #52]	@ 0x34
		if ((range_mm_10 % 10) < 5)
 800aaf4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800aaf6:	4b1a      	ldr	r3, [pc, #104]	@ (800ab60 <VL53LX_range_maths+0x1cc>)
 800aaf8:	fb83 2301 	smull	r2, r3, r3, r1
 800aafc:	109a      	asrs	r2, r3, #2
 800aafe:	17cb      	asrs	r3, r1, #31
 800ab00:	1ad2      	subs	r2, r2, r3
 800ab02:	4613      	mov	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	1aca      	subs	r2, r1, r3
 800ab0c:	2a04      	cmp	r2, #4
 800ab0e:	dc09      	bgt.n	800ab24 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ab10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab12:	4a13      	ldr	r2, [pc, #76]	@ (800ab60 <VL53LX_range_maths+0x1cc>)
 800ab14:	fb82 1203 	smull	r1, r2, r2, r3
 800ab18:	1092      	asrs	r2, r2, #2
 800ab1a:	17db      	asrs	r3, r3, #31
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	b21b      	sxth	r3, r3
 800ab20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab22:	e015      	b.n	800ab50 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800ab24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab26:	4a0e      	ldr	r2, [pc, #56]	@ (800ab60 <VL53LX_range_maths+0x1cc>)
 800ab28:	fb82 1203 	smull	r1, r2, r2, r3
 800ab2c:	1092      	asrs	r2, r2, #2
 800ab2e:	17db      	asrs	r3, r3, #31
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	3301      	adds	r3, #1
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	b21b      	sxth	r3, r3
 800ab3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab3c:	e008      	b.n	800ab50 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800ab3e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d104      	bne.n	800ab50 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800ab46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab48:	0fda      	lsrs	r2, r3, #31
 800ab4a:	4413      	add	r3, r2
 800ab4c:	105b      	asrs	r3, r3, #1
 800ab4e:	647b      	str	r3, [r7, #68]	@ 0x44

	return range_mm;
 800ab50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	374c      	adds	r7, #76	@ 0x4c
 800ab56:	46bd      	mov	sp, r7
 800ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5c:	003fffff 	.word	0x003fffff
 800ab60:	66666667 	.word	0x66666667

0800ab64 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800ab72:	79fb      	ldrb	r3, [r7, #7]
 800ab74:	3301      	adds	r3, #1
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
	phist->cal_config__vcsel_start =
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
	phist->VL53LX_p_015 =
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
	phist->phasecal_result__reference_phase   =
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
	phist->phasecal_result__vcsel_start       =
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
	phist->vcsel_width =
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
	phist->zero_distance_phase =
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	781a      	ldrb	r2, [r3, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	7a5a      	ldrb	r2, [r3, #9]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	605a      	str	r2, [r3, #4]
}
 800abfa:	bf00      	nop
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b087      	sub	sp, #28
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	607a      	str	r2, [r7, #4]
 800ac12:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2203      	movs	r2, #3
 800ac1c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2203      	movs	r2, #3
 800ac22:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2218      	movs	r2, #24
 800ac3a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800ac3c:	897b      	ldrh	r3, [r7, #10]
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	pdata->result__range_status               = 0;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	pdata->result__report_status              = 0;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	pdata->result__stream_count               = 0;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	pdata->cal_config__vcsel_start            = 0;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	pdata->vcsel_width                        = 0;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	pdata->VL53LX_p_005                       = 0;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	pdata->VL53LX_p_015                = 0;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	pdata->total_periods_elapsed              = 0;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	pdata->min_bin_value                      = 0;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pdata->max_bin_value                      = 0;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	pdata->zero_distance_phase                = 0;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	pdata->number_of_ambient_samples          = 0;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	pdata->ambient_events_sum                 = 0;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pdata->VL53LX_p_028             = 0;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800acda:	2300      	movs	r3, #0
 800acdc:	82fb      	strh	r3, [r7, #22]
 800acde:	e009      	b.n	800acf4 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800ace0:	8afb      	ldrh	r3, [r7, #22]
 800ace2:	8afa      	ldrh	r2, [r7, #22]
 800ace4:	b2d1      	uxtb	r1, r2
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	4413      	add	r3, r2
 800acea:	460a      	mov	r2, r1
 800acec:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800acee:	8afb      	ldrh	r3, [r7, #22]
 800acf0:	3301      	adds	r3, #1
 800acf2:	82fb      	strh	r3, [r7, #22]
 800acf4:	8afb      	ldrh	r3, [r7, #22]
 800acf6:	2b05      	cmp	r3, #5
 800acf8:	d9f2      	bls.n	800ace0 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800acfa:	2300      	movs	r3, #0
 800acfc:	82fb      	strh	r3, [r7, #22]
 800acfe:	e007      	b.n	800ad10 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800ad00:	8afb      	ldrh	r3, [r7, #22]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	4413      	add	r3, r2
 800ad06:	2201      	movs	r2, #1
 800ad08:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ad0a:	8afb      	ldrh	r3, [r7, #22]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	82fb      	strh	r3, [r7, #22]
 800ad10:	8afb      	ldrh	r3, [r7, #22]
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d9f4      	bls.n	800ad00 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800ad16:	2300      	movs	r3, #0
 800ad18:	82fb      	strh	r3, [r7, #22]
 800ad1a:	e013      	b.n	800ad44 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800ad1c:	8afa      	ldrh	r2, [r7, #22]
 800ad1e:	897b      	ldrh	r3, [r7, #10]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d206      	bcs.n	800ad32 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800ad24:	8afa      	ldrh	r2, [r7, #22]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3206      	adds	r2, #6
 800ad2a:	68f9      	ldr	r1, [r7, #12]
 800ad2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ad30:	e005      	b.n	800ad3e <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800ad32:	8afa      	ldrh	r2, [r7, #22]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3206      	adds	r2, #6
 800ad38:	2100      	movs	r1, #0
 800ad3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800ad3e:	8afb      	ldrh	r3, [r7, #22]
 800ad40:	3301      	adds	r3, #1
 800ad42:	82fb      	strh	r3, [r7, #22]
 800ad44:	8afb      	ldrh	r3, [r7, #22]
 800ad46:	2b17      	cmp	r3, #23
 800ad48:	d9e8      	bls.n	800ad1c <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800ad4a:	bf00      	nop
 800ad4c:	bf00      	nop
 800ad4e:	371c      	adds	r7, #28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800ad66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da10      	bge.n	800ad90 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	43db      	mvns	r3, r3
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	f003 0307 	and.w	r3, r3, #7
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	b2da      	uxtb	r2, r3
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	3b80      	subs	r3, #128	@ 0x80
 800ad86:	10db      	asrs	r3, r3, #3
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800ad8e:	e00c      	b.n	800adaa <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800ada2:	10db      	asrs	r3, r3, #3
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	701a      	strb	r2, [r3, #0]
}
 800adaa:	bf00      	nop
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b085      	sub	sp, #20
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]
 800adc6:	e02c      	b.n	800ae22 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d009      	beq.n	800ade2 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800add4:	7bf9      	ldrb	r1, [r7, #15]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3106      	adds	r1, #6
 800adda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adde:	429a      	cmp	r2, r3
 800ade0:	db07      	blt.n	800adf2 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800ade2:	7bfa      	ldrb	r2, [r7, #15]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3206      	adds	r2, #6
 800ade8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d009      	beq.n	800ae0c <VL53LX_hist_find_min_max_bin_values+0x56>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800adfe:	7bf9      	ldrb	r1, [r7, #15]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3106      	adds	r1, #6
 800ae04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	dc07      	bgt.n	800ae1c <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800ae0c:	7bfa      	ldrb	r2, [r7, #15]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	3206      	adds	r2, #6
 800ae12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	73fb      	strb	r3, [r7, #15]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	7a9b      	ldrb	r3, [r3, #10]
 800ae26:	7bfa      	ldrb	r2, [r7, #15]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d3cd      	bcc.n	800adc8 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b085      	sub	sp, #20
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	7adb      	ldrb	r3, [r3, #11]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d03a      	beq.n	800aec4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e



		pdata->ambient_events_sum = 0;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800ae60:	2300      	movs	r3, #0
 800ae62:	73fb      	strb	r3, [r7, #15]
 800ae64:	e00e      	b.n	800ae84 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ae6c:	7bf9      	ldrb	r1, [r7, #15]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3106      	adds	r1, #6
 800ae72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae76:	441a      	add	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	3301      	adds	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	7adb      	ldrb	r3, [r3, #11]
 800ae88:	7bfa      	ldrb	r2, [r7, #15]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d3eb      	bcc.n	800ae66 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 +=
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	7ad2      	ldrb	r2, [r2, #11]
 800aea4:	0852      	lsrs	r2, r2, #1
 800aea6:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800aea8:	441a      	add	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pdata->VL53LX_p_028 /=
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800aeba:	fb93 f2f2 	sdiv	r2, r3, r2
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800aec4:	bf00      	nop
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800aed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aed4:	b0ca      	sub	sp, #296	@ 0x128
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800aedc:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800aee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800aee4:	4603      	mov	r3, r0
 800aee6:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t    pll_period_us       = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t    periods_elapsed     = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint32_t    tmp32               = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint64_t    tmp64               = 0;
 800af02:	f04f 0200 	mov.w	r2, #0
 800af06:	f04f 0300 	mov.w	r3, #0
 800af0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	uint32_t    amb_thres_delta     = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800af14:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800af18:	2300      	movs	r3, #0
 800af1a:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800af1c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800af20:	2300      	movs	r3, #0
 800af22:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800af24:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800af28:	2300      	movs	r3, #0
 800af2a:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800af2c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800af30:	2300      	movs	r3, #0
 800af32:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800af34:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800af38:	2300      	movs	r3, #0
 800af3a:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800af3c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800af40:	2300      	movs	r3, #0
 800af42:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800af44:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800af48:	2300      	movs	r3, #0
 800af4a:	8493      	strh	r3, [r2, #36]	@ 0x24
	pdata->VL53LX_p_022            = 0;
 800af4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800af50:	2300      	movs	r3, #0
 800af52:	84d3      	strh	r3, [r2, #38]	@ 0x26

	*pambient_dmax_mm  = 0;
 800af54:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800af58:	2300      	movs	r3, #0
 800af5a:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800af5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af60:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 80e1 	beq.w	800b12c <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800af6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 80da 	beq.w	800b12c <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800af78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af7c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff f9fe 	bl	800a382 <VL53LX_calc_pll_period_us>
 800af86:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800af8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af92:	3301      	adds	r3, #1
 800af94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800af98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800afa0:	2110      	movs	r1, #16
 800afa2:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800afa6:	f7ff fa03 	bl	800a3b0 <VL53LX_duration_maths>
 800afaa:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800afac:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800afb0:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800afb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afb6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800afba:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4619      	mov	r1, r3
 800afc2:	4610      	mov	r0, r2
 800afc4:	f7ff fc6c 	bl	800a8a0 <VL53LX_rate_maths>
 800afc8:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800afca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800afce:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800afd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afd4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800afd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afdc:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 800afe0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7ff fa3b 	bl	800a462 <VL53LX_events_per_spad_maths>
 800afec:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800afee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800aff2:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800aff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aff8:	8adb      	ldrh	r3, [r3, #22]
 800affa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800affe:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800b000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b004:	8adb      	ldrh	r3, [r3, #22]
 800b006:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800b00a:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800b00c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 808a 	beq.w	800b12c <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800b018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b01c:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800b01e:	b29b      	uxth	r3, r3
 800b020:	2200      	movs	r2, #0
 800b022:	461c      	mov	r4, r3
 800b024:	4615      	mov	r5, r2
 800b026:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
			tmp64  *= 1000;
 800b02a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800b02e:	4622      	mov	r2, r4
 800b030:	462b      	mov	r3, r5
 800b032:	f04f 0000 	mov.w	r0, #0
 800b036:	f04f 0100 	mov.w	r1, #0
 800b03a:	0159      	lsls	r1, r3, #5
 800b03c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b040:	0150      	lsls	r0, r2, #5
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	ebb2 0804 	subs.w	r8, r2, r4
 800b04a:	eb63 0905 	sbc.w	r9, r3, r5
 800b04e:	f04f 0200 	mov.w	r2, #0
 800b052:	f04f 0300 	mov.w	r3, #0
 800b056:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800b05a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800b05e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800b062:	4690      	mov	r8, r2
 800b064:	4699      	mov	r9, r3
 800b066:	eb18 0a04 	adds.w	sl, r8, r4
 800b06a:	eb49 0b05 	adc.w	fp, r9, r5
 800b06e:	f04f 0200 	mov.w	r2, #0
 800b072:	f04f 0300 	mov.w	r3, #0
 800b076:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b07a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b07e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b082:	4692      	mov	sl, r2
 800b084:	469b      	mov	fp, r3
 800b086:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
			tmp64 <<= (11+1);
 800b08a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b08e:	f04f 0000 	mov.w	r0, #0
 800b092:	f04f 0100 	mov.w	r1, #0
 800b096:	0319      	lsls	r1, r3, #12
 800b098:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800b09c:	0310      	lsls	r0, r2, #12
 800b09e:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 800b0a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	085b      	lsrs	r3, r3, #1
 800b0aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			tmp64 += (uint64_t)tmp32;
 800b0ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b0bc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b0c0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	1851      	adds	r1, r2, r1
 800b0c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	eb43 0101 	adc.w	r1, r3, r1
 800b0d0:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800b0d2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800b0d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
			tmp64 = do_division_u(tmp64,
 800b0da:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0e6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b0ea:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800b0ee:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800b0f2:	f7f5 fdfd 	bl	8000cf0 <__aeabi_uldivmod>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800b0fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b102:	8adb      	ldrh	r3, [r3, #22]
 800b104:	b29b      	uxth	r3, r3
 800b106:	2200      	movs	r2, #0
 800b108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b10c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b110:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b114:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800b118:	4621      	mov	r1, r4
 800b11a:	428a      	cmp	r2, r1
 800b11c:	4629      	mov	r1, r5
 800b11e:	418b      	sbcs	r3, r1
 800b120:	d204      	bcs.n	800b12c <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800b122:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800b126:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800b12a:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800b12c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 82e9 	beq.w	800b70a <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 800b138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b13c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 82e2 	beq.w	800b70a <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800b146:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b14a:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 82dc 	beq.w	800b70a <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800b152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 82d5 	beq.w	800b70a <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800b160:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	b29b      	uxth	r3, r3
 800b168:	2200      	movs	r2, #0
 800b16a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b16c:	657a      	str	r2, [r7, #84]	@ 0x54
 800b16e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800b172:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 *= (1000 * 256);
 800b176:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 800b17a:	4622      	mov	r2, r4
 800b17c:	462b      	mov	r3, r5
 800b17e:	f04f 0000 	mov.w	r0, #0
 800b182:	f04f 0100 	mov.w	r1, #0
 800b186:	0159      	lsls	r1, r3, #5
 800b188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b18c:	0150      	lsls	r0, r2, #5
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	1b11      	subs	r1, r2, r4
 800b194:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b196:	eb63 0305 	sbc.w	r3, r3, r5
 800b19a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b19c:	f04f 0200 	mov.w	r2, #0
 800b1a0:	f04f 0300 	mov.w	r3, #0
 800b1a4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800b1a8:	4649      	mov	r1, r9
 800b1aa:	008b      	lsls	r3, r1, #2
 800b1ac:	4641      	mov	r1, r8
 800b1ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1b2:	4641      	mov	r1, r8
 800b1b4:	008a      	lsls	r2, r1, #2
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	191b      	adds	r3, r3, r4
 800b1be:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	eb45 0303 	adc.w	r3, r5, r3
 800b1c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1c8:	f04f 0200 	mov.w	r2, #0
 800b1cc:	f04f 0300 	mov.w	r3, #0
 800b1d0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	02cb      	lsls	r3, r1, #11
 800b1d8:	4621      	mov	r1, r4
 800b1da:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800b1de:	4621      	mov	r1, r4
 800b1e0:	02ca      	lsls	r2, r1, #11
 800b1e2:	461c      	mov	r4, r3
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800b1ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	085b      	lsrs	r3, r3, #1
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp64 += (uint64_t)tmp32;
 800b1f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b202:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b206:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b20a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800b20e:	4621      	mov	r1, r4
 800b210:	1851      	adds	r1, r2, r1
 800b212:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b214:	4629      	mov	r1, r5
 800b216:	eb43 0101 	adc.w	r1, r3, r1
 800b21a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800b21c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800b220:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800b224:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b228:	881b      	ldrh	r3, [r3, #0]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	2200      	movs	r2, #0
 800b22e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b232:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b236:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800b23a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800b23e:	f7f5 fd57 	bl	8000cf0 <__aeabi_uldivmod>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800b24a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b24e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b252:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800b254:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	011a      	lsls	r2, r3, #4
 800b25c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b260:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800b262:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2200      	movs	r2, #0
 800b26a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b26c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b26e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800b272:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800b276:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b282:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800b286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b28a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800b28e:	4622      	mov	r2, r4
 800b290:	fb02 f203 	mul.w	r2, r2, r3
 800b294:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b298:	4629      	mov	r1, r5
 800b29a:	fb01 f303 	mul.w	r3, r1, r3
 800b29e:	441a      	add	r2, r3
 800b2a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	fba3 1301 	umull	r1, r3, r3, r1
 800b2aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b2b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b2b8:	18d3      	adds	r3, r2, r3
 800b2ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b2be:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800b2c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800b2c6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800b2ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b2ce:	8b5b      	ldrh	r3, [r3, #26]
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b2dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b2e0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	fb02 f203 	mul.w	r2, r2, r3
 800b2ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	fb01 f303 	mul.w	r3, r1, r3
 800b2f4:	441a      	add	r2, r3
 800b2f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	fba3 1301 	umull	r1, r3, r3, r1
 800b300:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b304:	460b      	mov	r3, r1
 800b306:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b30e:	18d3      	adds	r3, r2, r3
 800b310:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b314:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800b318:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800b31c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800b320:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b324:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800b328:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b32a:	f143 0300 	adc.w	r3, r3, #0
 800b32e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b330:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b334:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800b338:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b33c:	f04f 0000 	mov.w	r0, #0
 800b340:	f04f 0100 	mov.w	r1, #0
 800b344:	0cd0      	lsrs	r0, r2, #19
 800b346:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800b34a:	0cd9      	lsrs	r1, r3, #19
 800b34c:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
		tmp64  +=  500;
 800b350:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b354:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800b358:	6239      	str	r1, [r7, #32]
 800b35a:	f143 0300 	adc.w	r3, r3, #0
 800b35e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b360:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b364:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800b368:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800b36c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b370:	f04f 0300 	mov.w	r3, #0
 800b374:	f7f5 fcbc 	bl	8000cf0 <__aeabi_uldivmod>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800b380:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b384:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800b388:	f173 0300 	sbcs.w	r3, r3, #0
 800b38c:	d305      	bcc.n	800b39a <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800b38e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800b39a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b39e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b3a2:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800b3a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	61fa      	str	r2, [r7, #28]
 800b3b0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b3b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800b3b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b3c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b3c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b3cc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	fb02 f203 	mul.w	r2, r2, r3
 800b3d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b3da:	4629      	mov	r1, r5
 800b3dc:	fb01 f303 	mul.w	r3, r1, r3
 800b3e0:	441a      	add	r2, r3
 800b3e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	fba3 1301 	umull	r1, r3, r3, r1
 800b3ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3fa:	18d3      	adds	r3, r2, r3
 800b3fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b400:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800b404:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800b408:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800b40c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b410:	8b5b      	ldrh	r3, [r3, #26]
 800b412:	b29b      	uxth	r3, r3
 800b414:	2200      	movs	r2, #0
 800b416:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b41a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800b41e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b422:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800b426:	4622      	mov	r2, r4
 800b428:	fb02 f203 	mul.w	r2, r2, r3
 800b42c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b430:	4629      	mov	r1, r5
 800b432:	fb01 f303 	mul.w	r3, r1, r3
 800b436:	441a      	add	r2, r3
 800b438:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b43c:	4621      	mov	r1, r4
 800b43e:	fba3 1301 	umull	r1, r3, r3, r1
 800b442:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b446:	460b      	mov	r3, r1
 800b448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b44c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b450:	18d3      	adds	r3, r2, r3
 800b452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b456:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800b45a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800b45e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  += (1<<(11+7));
 800b462:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b466:	f512 2180 	adds.w	r1, r2, #262144	@ 0x40000
 800b46a:	6139      	str	r1, [r7, #16]
 800b46c:	f143 0300 	adc.w	r3, r3, #0
 800b470:	617b      	str	r3, [r7, #20]
 800b472:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b476:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64 >>= (11+8);
 800b47a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b47e:	f04f 0000 	mov.w	r0, #0
 800b482:	f04f 0100 	mov.w	r1, #0
 800b486:	0cd0      	lsrs	r0, r2, #19
 800b488:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800b48c:	0cd9      	lsrs	r1, r3, #19
 800b48e:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800b492:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800b496:	2200      	movs	r2, #0
 800b498:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b49a:	67fa      	str	r2, [r7, #124]	@ 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800b49c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b4a0:	891b      	ldrh	r3, [r3, #8]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4a8:	677a      	str	r2, [r7, #116]	@ 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800b4aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b4b4:	4642      	mov	r2, r8
 800b4b6:	fb02 f203 	mul.w	r2, r2, r3
 800b4ba:	464b      	mov	r3, r9
 800b4bc:	4621      	mov	r1, r4
 800b4be:	fb01 f303 	mul.w	r3, r1, r3
 800b4c2:	4413      	add	r3, r2
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	fba2 1201 	umull	r1, r2, r2, r1
 800b4cc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800b4d0:	460a      	mov	r2, r1
 800b4d2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800b4d6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800b4da:	4413      	add	r3, r2
 800b4dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b4e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b4e4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	fb02 f203 	mul.w	r2, r2, r3
 800b4ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	fb01 f303 	mul.w	r3, r1, r3
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b4fe:	4621      	mov	r1, r4
 800b500:	fba2 1201 	umull	r1, r2, r2, r1
 800b504:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b508:	460a      	mov	r2, r1
 800b50a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800b50e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800b512:	4413      	add	r3, r2
 800b514:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b518:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800b51c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800b520:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800b524:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b528:	88db      	ldrh	r3, [r3, #6]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	2200      	movs	r2, #0
 800b52e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b530:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b532:	f04f 0200 	mov.w	r2, #0
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800b53e:	4629      	mov	r1, r5
 800b540:	01cb      	lsls	r3, r1, #7
 800b542:	4621      	mov	r1, r4
 800b544:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800b548:	4621      	mov	r1, r4
 800b54a:	01ca      	lsls	r2, r1, #7
 800b54c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800b550:	1884      	adds	r4, r0, r2
 800b552:	60bc      	str	r4, [r7, #8]
 800b554:	eb41 0303 	adc.w	r3, r1, r3
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b55e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64,
 800b562:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b566:	88db      	ldrh	r3, [r3, #6]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	2200      	movs	r2, #0
 800b56c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b56e:	667a      	str	r2, [r7, #100]	@ 0x64
 800b570:	f04f 0200 	mov.w	r2, #0
 800b574:	f04f 0300 	mov.w	r3, #0
 800b578:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b57c:	4629      	mov	r1, r5
 800b57e:	020b      	lsls	r3, r1, #8
 800b580:	4621      	mov	r1, r4
 800b582:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800b586:	4621      	mov	r1, r4
 800b588:	020a      	lsls	r2, r1, #8
 800b58a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800b58e:	f7f5 fbaf 	bl	8000cf0 <__aeabi_uldivmod>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800b59a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b59e:	f512 71fa 	adds.w	r1, r2, #500	@ 0x1f4
 800b5a2:	6039      	str	r1, [r7, #0]
 800b5a4:	f143 0300 	adc.w	r3, r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
 800b5aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b5ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		tmp64  = do_division_u(tmp64, 1000);
 800b5b2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800b5b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5ba:	f04f 0300 	mov.w	r3, #0
 800b5be:	f7f5 fb97 	bl	8000cf0 <__aeabi_uldivmod>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118


		if (tmp64 > 0x00FFFFFF)
 800b5ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b5ce:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800b5d2:	f173 0300 	sbcs.w	r3, r3, #0
 800b5d6:	d305      	bcc.n	800b5e4 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800b5d8:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800b5dc:	f04f 0300 	mov.w	r3, #0
 800b5e0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800b5e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b5e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b5ec:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800b5ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	021b      	lsls	r3, r3, #8
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fe ffcc 	bl	800a594 <VL53LX_isqrt>
 800b5fc:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800b600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	461a      	mov	r2, r3
 800b608:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b60c:	fb02 f303 	mul.w	r3, r2, r3
 800b610:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124



		if (pdata->VL53LX_p_028 <
 800b614:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b618:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800b61a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800b61e:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800b620:	4293      	cmp	r3, r2
 800b622:	d218      	bcs.n	800b656 <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800b624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800b62c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b630:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108


			amb_thres_delta <<= 8;
 800b638:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

			if (tmp32 < amb_thres_delta)
 800b642:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800b646:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d203      	bcs.n	800b656 <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 800b64e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b652:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800b656:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b65a:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800b65c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b660:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800b662:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800b664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b668:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800b66a:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800b66e:	f000 f854 	bl	800b71a <VL53LX_f_002>
 800b672:	4603      	mov	r3, r0
 800b674:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800b676:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b67a:	84da      	strh	r2, [r3, #38]	@ 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800b67c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800b686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b68a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800b68e:	461a      	mov	r2, r3
 800b690:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b694:	fb02 f303 	mul.w	r3, r2, r3
 800b698:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 += (1 << 3);
 800b69c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		tmp32 /= (1 << 4);
 800b6a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b6aa:	091b      	lsrs	r3, r3, #4
 800b6ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800b6b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6b4:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800b6b6:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800b6b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b6bc:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800b6be:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800b6c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6c4:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800b6c6:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800b6ca:	f000 f826 	bl	800b71a <VL53LX_f_002>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800b6d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b6d6:	849a      	strh	r2, [r3, #36]	@ 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800b6d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b6dc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800b6e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b6e4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	da07      	bge.n	800b6fc <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800b6ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b6f0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800b6f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	e006      	b.n	800b70a <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800b6fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b700:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800b704:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b708:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800b70a:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117

}
 800b70e:	4618      	mov	r0, r3
 800b710:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b714:	46bd      	mov	sp, r7
 800b716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b71a <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b086      	sub	sp, #24
 800b71e:	af00      	add	r7, sp, #0
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	607a      	str	r2, [r7, #4]
 800b726:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800b728:	2300      	movs	r3, #0
 800b72a:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	fb03 f303 	mul.w	r3, r3, r3
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	4413      	add	r3, r2
 800b740:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800b742:	6938      	ldr	r0, [r7, #16]
 800b744:	f7fe ff26 	bl	800a594 <VL53LX_isqrt>
 800b748:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	4413      	add	r3, r2
 800b750:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	011b      	lsls	r3, r3, #4
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe ff1c 	bl	800a594 <VL53LX_isqrt>
 800b75c:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	fb02 f303 	mul.w	r3, r2, r3
 800b766:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d009      	beq.n	800b782 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	4413      	add	r3, r2
 800b774:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	005b      	lsls	r3, r3, #1
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b780:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800b782:	697b      	ldr	r3, [r7, #20]

}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800b794:	2300      	movs	r3, #0
 800b796:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2218      	movs	r2, #24
 800b79c:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	73fb      	strb	r3, [r7, #15]
 800b7c2:	e01f      	b.n	800b804 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	4413      	add	r3, r2
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800b7e6:	7bfa      	ldrb	r2, [r7, #15]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	322e      	adds	r2, #46	@ 0x2e
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800b7f2:	7bfa      	ldrb	r2, [r7, #15]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	3246      	adds	r2, #70	@ 0x46
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
 800b800:	3301      	adds	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	785b      	ldrb	r3, [r3, #1]
 800b808:	7bfa      	ldrb	r2, [r7, #15]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3da      	bcc.n	800b7c4 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2208      	movs	r2, #8
 800b81a:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
	palgo->VL53LX_p_046             = 0;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800b82c:	461a      	mov	r2, r3
 800b82e:	2118      	movs	r1, #24
 800b830:	2000      	movs	r0, #0
 800b832:	f7ff f9e8 	bl	800ac06 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800b83c:	461a      	mov	r2, r3
 800b83e:	2118      	movs	r1, #24
 800b840:	2000      	movs	r0, #0
 800b842:	f7ff f9e0 	bl	800ac06 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800b84c:	461a      	mov	r2, r3
 800b84e:	2118      	movs	r1, #24
 800b850:	2000      	movs	r0, #0
 800b852:	f7ff f9d8 	bl	800ac06 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800b85c:	461a      	mov	r2, r3
 800b85e:	2118      	movs	r1, #24
 800b860:	2000      	movs	r0, #0
 800b862:	f7ff f9d0 	bl	800ac06 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800b86c:	461a      	mov	r2, r3
 800b86e:	2118      	movs	r1, #24
 800b870:	2000      	movs	r0, #0
 800b872:	f7ff f9c8 	bl	800ac06 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800b87e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b882:	b090      	sub	sp, #64	@ 0x40
 800b884:	af00      	add	r7, sp, #0
 800b886:	61b9      	str	r1, [r7, #24]
 800b888:	617a      	str	r2, [r7, #20]
 800b88a:	461a      	mov	r2, r3
 800b88c:	4603      	mov	r3, r0
 800b88e:	83fb      	strh	r3, [r7, #30]
 800b890:	4613      	mov	r3, r2
 800b892:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800b894:	2300      	movs	r3, #0
 800b896:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t  lb            = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t  VL53LX_p_001            = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	int64_t  tmp          = 0;
 800b8a6:	f04f 0200 	mov.w	r2, #0
 800b8aa:	f04f 0300 	mov.w	r3, #0
 800b8ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t  amb_events   = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  VL53LX_p_018       = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t  samples      = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800b8be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8c0:	7a5a      	ldrb	r2, [r3, #9]
 800b8c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8c4:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800b8c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8c8:	7a1a      	ldrb	r2, [r3, #8]
 800b8ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8cc:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800b8ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8d0:	7a9a      	ldrb	r2, [r3, #10]
 800b8d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8d4:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800b8d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b8dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8de:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800b8e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff f93c 	bl	800ab64 <VL53LX_decode_vcsel_period>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800b8f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8f2:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800b8f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8fa:	17da      	asrs	r2, r3, #31
 800b8fc:	60bb      	str	r3, [r7, #8]
 800b8fe:	60fa      	str	r2, [r7, #12]
 800b900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b904:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800b908:	8bfb      	ldrh	r3, [r7, #30]
 800b90a:	2200      	movs	r2, #0
 800b90c:	4698      	mov	r8, r3
 800b90e:	4691      	mov	r9, r2
 800b910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b912:	fb08 f203 	mul.w	r2, r8, r3
 800b916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b918:	fb09 f303 	mul.w	r3, r9, r3
 800b91c:	4413      	add	r3, r2
 800b91e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b920:	fba2 4508 	umull	r4, r5, r2, r8
 800b924:	442b      	add	r3, r5
 800b926:	461d      	mov	r5, r3
 800b928:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800b92c:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	tmp += 2048;
 800b930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b934:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 800b938:	f143 0b00 	adc.w	fp, r3, #0
 800b93c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
	tmp = do_division_s(tmp, 4096);
 800b940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b944:	2b00      	cmp	r3, #0
 800b946:	da08      	bge.n	800b95a <VL53LX_f_006+0xdc>
 800b948:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800b94c:	1851      	adds	r1, r2, r1
 800b94e:	6039      	str	r1, [r7, #0]
 800b950:	f143 0300 	adc.w	r3, r3, #0
 800b954:	607b      	str	r3, [r7, #4]
 800b956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b95a:	f04f 0000 	mov.w	r0, #0
 800b95e:	f04f 0100 	mov.w	r1, #0
 800b962:	0b10      	lsrs	r0, r2, #12
 800b964:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800b968:	1319      	asrs	r1, r3, #12
 800b96a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	amb_events = (int32_t)tmp;
 800b96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b970:	627b      	str	r3, [r7, #36]	@ 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800b972:	2300      	movs	r3, #0
 800b974:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b978:	e062      	b.n	800ba40 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 800b97a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b97e:	089b      	lsrs	r3, r3, #2
 800b980:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800b984:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b988:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b98a:	4413      	add	r3, r2
 800b98c:	7c9b      	ldrb	r3, [r3, #18]
 800b98e:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	2b00      	cmp	r3, #0
 800b994:	dd4f      	ble.n	800ba36 <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 800b996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b998:	7a9b      	ldrb	r3, [r3, #10]
 800b99a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d20f      	bcs.n	800b9c2 <VL53LX_f_006+0x144>
 800b9a2:	7f7b      	ldrb	r3, [r7, #29]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00c      	beq.n	800b9c2 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800b9a8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800b9ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9ae:	3206      	adds	r2, #6
 800b9b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b6:	441a      	add	r2, r3
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	fb02 f303 	mul.w	r3, r2, r3
 800b9be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9c0:	e004      	b.n	800b9cc <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9c6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ca:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fe fde0 	bl	800a594 <VL53LX_isqrt>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	63bb      	str	r3, [r7, #56]	@ 0x38

			VL53LX_p_018 += (samples/2);
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	0fda      	lsrs	r2, r3, #31
 800b9dc:	4413      	add	r3, r2
 800b9de:	105b      	asrs	r3, r3, #1
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e4:	4413      	add	r3, r2
 800b9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= samples;
 800b9e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	fb92 f3f3 	sdiv	r3, r2, r3
 800b9f0:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	fb02 f303 	mul.w	r3, r2, r3
 800b9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += 8;
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	3308      	adds	r3, #8
 800ba00:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 /= 16;
 800ba02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	da00      	bge.n	800ba0a <VL53LX_f_006+0x18c>
 800ba08:	330f      	adds	r3, #15
 800ba0a:	111b      	asrs	r3, r3, #4
 800ba0c:	63bb      	str	r3, [r7, #56]	@ 0x38
			VL53LX_p_018 += amb_events;
 800ba0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba12:	4413      	add	r3, r2
 800ba14:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800ba16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	da01      	bge.n	800ba22 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	63bb      	str	r3, [r7, #56]	@ 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800ba22:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ba26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba28:	3216      	adds	r2, #22
 800ba2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800ba30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba34:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800ba36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ba40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba42:	7a9b      	ldrb	r3, [r3, #10]
 800ba44:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d396      	bcc.n	800b97a <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 800ba4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba4e:	2200      	movs	r2, #0
 800ba50:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800ba52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba54:	7a1b      	ldrb	r3, [r3, #8]
 800ba56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ba5a:	e033      	b.n	800bac4 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800ba5c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ba60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba62:	3206      	adds	r2, #6
 800ba64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ba68:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800ba6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba6e:	3116      	adds	r1, #22
 800ba70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	dd13      	ble.n	800baa0 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 800ba78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ba7e:	4413      	add	r3, r2
 800ba80:	2201      	movs	r2, #1
 800ba82:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800ba84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ba8a:	4413      	add	r3, r2
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			palgo->VL53LX_p_039++;
 800ba92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba94:	791b      	ldrb	r3, [r3, #4]
 800ba96:	3301      	adds	r3, #1
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba9c:	711a      	strb	r2, [r3, #4]
 800ba9e:	e00c      	b.n	800baba <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800baa0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800baa4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800baa6:	4413      	add	r3, r2
 800baa8:	2200      	movs	r2, #0
 800baaa:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800baac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bab0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bab2:	4413      	add	r3, r2
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800baba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800babe:	3301      	adds	r3, #1
 800bac0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bac4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bac6:	7a9b      	ldrb	r3, [r3, #10]
 800bac8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bacc:	429a      	cmp	r2, r3
 800bace:	d3c5      	bcc.n	800ba5c <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800bad0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37

}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3740      	adds	r7, #64	@ 0x40
 800bad8:	46bd      	mov	sp, r7
 800bada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bade <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bade:	b480      	push	{r7}
 800bae0:	b085      	sub	sp, #20
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]
 800bb02:	e02d      	b.n	800bb60 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	3301      	adds	r3, #1
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	78d2      	ldrb	r2, [r2, #3]
 800bb0c:	fb93 f1f2 	sdiv	r1, r3, r2
 800bb10:	fb01 f202 	mul.w	r2, r1, r2
 800bb14:	1a9b      	subs	r3, r3, r2
 800bb16:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	789b      	ldrb	r3, [r3, #2]
 800bb1c:	7bfa      	ldrb	r2, [r7, #15]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d21b      	bcs.n	800bb5a <VL53LX_f_007+0x7c>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	789b      	ldrb	r3, [r3, #2]
 800bb26:	7b3a      	ldrb	r2, [r7, #12]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d216      	bcs.n	800bb5a <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10f      	bne.n	800bb5a <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800bb3a:	7b3b      	ldrb	r3, [r7, #12]
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d108      	bne.n	800bb5a <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800bb48:	7bbb      	ldrb	r3, [r7, #14]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d105      	bne.n	800bb5a <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	7bfa      	ldrb	r2, [r7, #15]
 800bb52:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
				found = 1;
 800bb56:	2301      	movs	r3, #1
 800bb58:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800bb5a:	7bfb      	ldrb	r3, [r7, #15]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	73fb      	strb	r3, [r7, #15]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	78db      	ldrb	r3, [r3, #3]
 800bb64:	7bfa      	ldrb	r2, [r7, #15]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d3cc      	bcc.n	800bb04 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800bb6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b085      	sub	sp, #20
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800bb98:	73fb      	strb	r3, [r7, #15]
 800bb9a:	e05a      	b.n	800bc52 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	78da      	ldrb	r2, [r3, #3]
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bba6:	fb01 f202 	mul.w	r2, r1, r2
 800bbaa:	1a9b      	subs	r3, r3, r2
 800bbac:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	78d2      	ldrb	r2, [r2, #3]
 800bbb6:	fb93 f1f2 	sdiv	r1, r3, r2
 800bbba:	fb01 f202 	mul.w	r2, r1, r2
 800bbbe:	1a9b      	subs	r3, r3, r2
 800bbc0:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	789b      	ldrb	r3, [r3, #2]
 800bbc6:	7b7a      	ldrb	r2, [r7, #13]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d23f      	bcs.n	800bc4c <VL53LX_f_008+0xd2>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	789b      	ldrb	r3, [r3, #2]
 800bbd0:	7b3a      	ldrb	r2, [r7, #12]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d23a      	bcs.n	800bc4c <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800bbd6:	7b7b      	ldrb	r3, [r7, #13]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10e      	bne.n	800bc02 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800bbe4:	7b3b      	ldrb	r3, [r7, #12]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d107      	bne.n	800bc02 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d905      	bls.n	800bc1e <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800bc1e:	7b7b      	ldrb	r3, [r7, #13]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	4413      	add	r3, r2
 800bc24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d009      	beq.n	800bc40 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800bc2c:	7b7b      	ldrb	r3, [r7, #13]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	f892 117a 	ldrb.w	r1, [r2, #378]	@ 0x17a
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	4413      	add	r3, r2
 800bc38:	460a      	mov	r2, r1
 800bc3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc3e:	e005      	b.n	800bc4c <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800bc40:	7b7b      	ldrb	r3, [r7, #13]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	4413      	add	r3, r2
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lb++) {
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800bc52:	7bfa      	ldrb	r2, [r7, #15]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800bc5a:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800bc60:	440b      	add	r3, r1
 800bc62:	429a      	cmp	r2, r3
 800bc64:	db9a      	blt.n	800bb9c <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800bc66:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b087      	sub	sp, #28
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	78db      	ldrb	r3, [r3, #3]
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800bc9e:	7cbb      	ldrb	r3, [r7, #18]
 800bca0:	085b      	lsrs	r3, r3, #1
 800bca2:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800bcaa:	75fb      	strb	r3, [r7, #23]
 800bcac:	e0a2      	b.n	800bdf4 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	78da      	ldrb	r2, [r3, #3]
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
 800bcb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcb8:	fb01 f202 	mul.w	r2, r1, r2
 800bcbc:	1a9b      	subs	r3, r3, r2
 800bcbe:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	78d2      	ldrb	r2, [r2, #3]
 800bcc8:	fb93 f1f2 	sdiv	r1, r3, r2
 800bccc:	fb01 f202 	mul.w	r2, r1, r2
 800bcd0:	1a9b      	subs	r3, r3, r2
 800bcd2:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	789b      	ldrb	r3, [r3, #2]
 800bcd8:	7d7a      	ldrb	r2, [r7, #21]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	f080 8087 	bcs.w	800bdee <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800bce4:	7d3a      	ldrb	r2, [r7, #20]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	f080 8081 	bcs.w	800bdee <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800bcec:	7d7b      	ldrb	r3, [r7, #21]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d12f      	bne.n	800bd5a <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800bcfa:	7d3b      	ldrb	r3, [r7, #20]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	4413      	add	r3, r2
 800bd00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d028      	beq.n	800bd5a <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800bd08:	7d3b      	ldrb	r3, [r7, #20]
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bd12:	3b01      	subs	r3, #1
 800bd14:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800bd1c:	7cfa      	ldrb	r2, [r7, #19]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d21b      	bcs.n	800bd5a <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800bd22:	7cfa      	ldrb	r2, [r7, #19]
 800bd24:	4613      	mov	r3, r2
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	4413      	add	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	4413      	add	r3, r2
 800bd34:	3304      	adds	r3, #4
 800bd36:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	7dfa      	ldrb	r2, [r7, #23]
 800bd3c:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	3301      	adds	r3, #1
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	22ff      	movs	r2, #255	@ 0xff
 800bd4c:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800bd5a:	7d7b      	ldrb	r3, [r7, #21]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d042      	beq.n	800bdee <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800bd68:	7d3b      	ldrb	r3, [r7, #20]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d13b      	bne.n	800bdee <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800bd76:	7d7b      	ldrb	r3, [r7, #21]
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bd80:	3b01      	subs	r3, #1
 800bd82:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800bd8a:	7cfa      	ldrb	r2, [r7, #19]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d22e      	bcs.n	800bdee <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800bd90:	7cfa      	ldrb	r2, [r7, #19]
 800bd92:	4613      	mov	r3, r2
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	4413      	add	r3, r2
 800bda2:	3304      	adds	r3, #4
 800bda4:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	7dfa      	ldrb	r2, [r7, #23]
 800bdaa:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	799b      	ldrb	r3, [r3, #6]
 800bde2:	7cba      	ldrb	r2, [r7, #18]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d202      	bcs.n	800bdee <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	7cba      	ldrb	r2, [r7, #18]
 800bdec:	719a      	strb	r2, [r3, #6]
		blb++) {
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800bdf4:	7dfa      	ldrb	r2, [r7, #23]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800bdfc:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800be02:	440b      	add	r3, r1
 800be04:	429a      	cmp	r2, r3
 800be06:	f6ff af52 	blt.w	800bcae <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800be0a:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800be0e:	4618      	mov	r0, r3
 800be10:	371c      	adds	r7, #28
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b090      	sub	sp, #64	@ 0x40
 800be1e:	af00      	add	r7, sp, #0
 800be20:	4603      	mov	r3, r0
 800be22:	6039      	str	r1, [r7, #0]
 800be24:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800be26:	2300      	movs	r3, #0
 800be28:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800be2c:	f107 030c 	add.w	r3, r7, #12
 800be30:	63bb      	str	r3, [r7, #56]	@ 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t swapped = 1;
 800be38:	2301      	movs	r3, #1
 800be3a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800be44:	2b01      	cmp	r3, #1
 800be46:	d965      	bls.n	800bf14 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800be48:	e05f      	b.n	800bf0a <VL53LX_f_016+0xf0>

		swapped = 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800be50:	2301      	movs	r3, #1
 800be52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800be56:	e051      	b.n	800befc <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800be58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be5c:	1e5a      	subs	r2, r3, #1
 800be5e:	4613      	mov	r3, r2
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	4413      	add	r3, r2
 800be6e:	3304      	adds	r3, #4
 800be70:	637b      	str	r3, [r7, #52]	@ 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800be72:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800be76:	4613      	mov	r3, r2
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	4413      	add	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	4413      	add	r3, r2
 800be86:	3304      	adds	r3, #4
 800be88:	633b      	str	r3, [r7, #48]	@ 0x30



			if (target_order
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d118      	bne.n	800bec2 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800be90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be92:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800be94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be96:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800be98:	429a      	cmp	r2, r3
 800be9a:	da2a      	bge.n	800bef2 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800be9c:	2224      	movs	r2, #36	@ 0x24
 800be9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bea0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bea2:	f00f f9e2 	bl	801b26a <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800bea6:	2224      	movs	r2, #36	@ 0x24
 800bea8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800beaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800beac:	f00f f9dd 	bl	801b26a <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800beb0:	2224      	movs	r2, #36	@ 0x24
 800beb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800beb4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800beb6:	f00f f9d8 	bl	801b26a <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800beba:	2301      	movs	r3, #1
 800bebc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800bec0:	e017      	b.n	800bef2 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800bec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec4:	699a      	ldr	r2, [r3, #24]
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	429a      	cmp	r2, r3
 800becc:	d911      	bls.n	800bef2 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800bece:	2224      	movs	r2, #36	@ 0x24
 800bed0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bed2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bed4:	f00f f9c9 	bl	801b26a <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800bed8:	2224      	movs	r2, #36	@ 0x24
 800beda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bedc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bede:	f00f f9c4 	bl	801b26a <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800bee2:	2224      	movs	r2, #36	@ 0x24
 800bee4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bee6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bee8:	f00f f9bf 	bl	801b26a <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800beec:	2301      	movs	r3, #1
 800beee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800bef2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bef6:	3301      	adds	r3, #1
 800bef8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800bf02:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d3a6      	bcc.n	800be58 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800bf0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d19b      	bne.n	800be4a <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800bf12:	e000      	b.n	800bf16 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800bf14:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800bf16:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d

}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3740      	adds	r7, #64	@ 0x40
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b087      	sub	sp, #28
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	4603      	mov	r3, r0
 800bf2a:	60b9      	str	r1, [r7, #8]
 800bf2c:	607a      	str	r2, [r7, #4]
 800bf2e:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bf30:	2300      	movs	r3, #0
 800bf32:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800bf3c:	7bfa      	ldrb	r2, [r7, #15]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	4413      	add	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	3304      	adds	r3, #4
 800bf50:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2200      	movs	r2, #0
 800bf56:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	75fb      	strb	r3, [r7, #23]
 800bf64:	e01c      	b.n	800bfa0 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	78da      	ldrb	r2, [r3, #3]
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf70:	fb01 f202 	mul.w	r2, r1, r2
 800bf74:	1a9b      	subs	r3, r3, r2
 800bf76:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	68da      	ldr	r2, [r3, #12]
 800bf7c:	7d79      	ldrb	r1, [r7, #21]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	3106      	adds	r1, #6
 800bf82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf86:	441a      	add	r2, r3
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	441a      	add	r2, r3
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	75fb      	strb	r3, [r7, #23]
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	791b      	ldrb	r3, [r3, #4]
 800bfa4:	7dfa      	ldrb	r2, [r7, #23]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d9dd      	bls.n	800bf66 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800bfb8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b08d      	sub	sp, #52	@ 0x34
 800bfcc:	af02      	add	r7, sp, #8
 800bfce:	60ba      	str	r2, [r7, #8]
 800bfd0:	607b      	str	r3, [r7, #4]
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73fb      	strb	r3, [r7, #15]
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint8_t   i            = 0;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int16_t   VL53LX_p_012 = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t  tmp_phase    = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800bff6:	7bfa      	ldrb	r2, [r7, #15]
 800bff8:	4613      	mov	r3, r2
 800bffa:	00db      	lsls	r3, r3, #3
 800bffc:	4413      	add	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	4413      	add	r3, r2
 800c008:	3304      	adds	r3, #4
 800c00a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	789b      	ldrb	r3, [r3, #2]
 800c010:	2bff      	cmp	r3, #255	@ 0xff
 800c012:	d102      	bne.n	800c01a <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	2201      	movs	r2, #1
 800c018:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	789b      	ldrb	r3, [r3, #2]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	78d2      	ldrb	r2, [r2, #3]
 800c022:	fbb3 f1f2 	udiv	r1, r3, r2
 800c026:	fb01 f202 	mul.w	r2, r1, r2
 800c02a:	1a9b      	subs	r3, r3, r2
 800c02c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	VL53LX_p_012  = (int16_t)i;
 800c030:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c034:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	8c3b      	ldrh	r3, [r7, #32]
 800c03e:	4413      	add	r3, r2
 800c040:	b29b      	uxth	r3, r3
 800c042:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800c044:	8c3b      	ldrh	r3, [r7, #32]
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	7892      	ldrb	r2, [r2, #2]
 800c04a:	1a9b      	subs	r3, r3, r2
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800c050:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c054:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	791b      	ldrb	r3, [r3, #4]
 800c05a:	461a      	mov	r2, r3
 800c05c:	8bfb      	ldrh	r3, [r7, #30]
 800c05e:	4413      	add	r3, r2
 800c060:	b29b      	uxth	r3, r3
 800c062:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800c064:	8bfb      	ldrh	r3, [r7, #30]
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	7892      	ldrb	r2, [r2, #2]
 800c06a:	1a9b      	subs	r3, r3, r2
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800c070:	8bfa      	ldrh	r2, [r7, #30]
 800c072:	8c3b      	ldrh	r3, [r7, #32]
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	b29b      	uxth	r3, r3
 800c078:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (window_width > 3)
 800c07a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c07e:	2b03      	cmp	r3, #3
 800c080:	dd01      	ble.n	800c086 <VL53LX_f_015+0xbe>
		window_width = 3;
 800c082:	2303      	movs	r3, #3
 800c084:	84bb      	strh	r3, [r7, #36]	@ 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800c086:	8c3a      	ldrh	r2, [r7, #32]
 800c088:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c08a:	4413      	add	r3, r2
 800c08c:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800c08e:	b219      	sxth	r1, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	78da      	ldrb	r2, [r3, #3]
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	3314      	adds	r3, #20
 800c098:	7bbc      	ldrb	r4, [r7, #14]
 800c09a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	4623      	mov	r3, r4
 800c0a6:	f000 f846 	bl	800c136 <VL53LX_f_020>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800c0b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d114      	bne.n	800c0e2 <VL53LX_f_015+0x11a>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800c0b8:	8bfa      	ldrh	r2, [r7, #30]
 800c0ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800c0c0:	b218      	sxth	r0, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	78da      	ldrb	r2, [r3, #3]
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	331c      	adds	r3, #28
 800c0ca:	7bbc      	ldrb	r4, [r7, #14]
 800c0cc:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	4623      	mov	r3, r4
 800c0d8:	f000 f82d 	bl	800c136 <VL53LX_f_020>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	695a      	ldr	r2, [r3, #20]
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d909      	bls.n	800c102 <VL53LX_f_015+0x13a>
		tmp_phase        = pdata->VL53LX_p_026;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	69da      	ldr	r2, [r3, #28]
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	69ba      	ldr	r2, [r7, #24]
 800c100:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	699a      	ldr	r2, [r3, #24]
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d203      	bcs.n	800c116 <VL53LX_f_015+0x14e>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	699a      	ldr	r2, [r3, #24]
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	699a      	ldr	r2, [r3, #24]
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	69db      	ldr	r3, [r3, #28]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d903      	bls.n	800c12a <VL53LX_f_015+0x162>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	699a      	ldr	r2, [r3, #24]
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800c12a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c12e:	4618      	mov	r0, r3
 800c130:	372c      	adds	r7, #44	@ 0x2c
 800c132:	46bd      	mov	sp, r7
 800c134:	bd90      	pop	{r4, r7, pc}

0800c136 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800c136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13a:	b09d      	sub	sp, #116	@ 0x74
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	461c      	mov	r4, r3
 800c140:	4603      	mov	r3, r0
 800c142:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c146:	460b      	mov	r3, r1
 800c148:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c14c:	4613      	mov	r3, r2
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c152:	4623      	mov	r3, r4
 800c154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c158:	2300      	movs	r3, #0
 800c15a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	int16_t  i            = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	int16_t  lb            = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	int64_t VL53LX_p_018        = 0;
 800c16a:	f04f 0200 	mov.w	r2, #0
 800c16e:	f04f 0300 	mov.w	r3, #0
 800c172:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	int64_t event_sum     = 0;
 800c176:	f04f 0200 	mov.w	r2, #0
 800c17a:	f04f 0300 	mov.w	r3, #0
 800c17e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int64_t weighted_sum  = 0;
 800c182:	f04f 0200 	mov.w	r2, #0
 800c186:	f04f 0300 	mov.w	r3, #0
 800c18a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800c18e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800c192:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c196:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 800c198:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 809c 	beq.w	800c2da <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800c1a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c1a6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c1aa:	e08f      	b.n	800c2cc <VL53LX_f_020+0x196>

		if (lb < 0)
 800c1ac:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	da09      	bge.n	800c1c8 <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 800c1b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c1be:	4413      	add	r3, r2
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c1c6:	e00a      	b.n	800c1de <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800c1c8:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 800c1cc:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800c1d0:	fb91 f3f2 	sdiv	r3, r1, r2
 800c1d4:	fb02 f303 	mul.w	r3, r2, r3
 800c1d8:	1acb      	subs	r3, r1, r3
 800c1da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800c1de:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	db6b      	blt.n	800c2be <VL53LX_f_020+0x188>
 800c1e6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800c1ea:	2b17      	cmp	r3, #23
 800c1ec:	dc67      	bgt.n	800c2be <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800c1ee:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800c1f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c1f6:	3306      	adds	r3, #6
 800c1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1fc:	17da      	asrs	r2, r3, #31
 800c1fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800c200:	637a      	str	r2, [r7, #52]	@ 0x34
				(int64_t)pbins->VL53LX_p_028;
 800c202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c206:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c20a:	17da      	asrs	r2, r3, #31
 800c20c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c20e:	62fa      	str	r2, [r7, #44]	@ 0x2c
			VL53LX_p_018 =
 800c210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c212:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c216:	4602      	mov	r2, r0
 800c218:	1a9b      	subs	r3, r3, r2
 800c21a:	623b      	str	r3, [r7, #32]
 800c21c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c21e:	460a      	mov	r2, r1
 800c220:	eb63 0302 	sbc.w	r3, r3, r2
 800c224:	627b      	str	r3, [r7, #36]	@ 0x24
 800c226:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c22a:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800c22e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800c232:	2b00      	cmp	r3, #0
 800c234:	d009      	beq.n	800c24a <VL53LX_f_020+0x114>
 800c236:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da05      	bge.n	800c24a <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 800c23e:	f04f 0200 	mov.w	r2, #0
 800c242:	f04f 0300 	mov.w	r3, #0
 800c246:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			event_sum += VL53LX_p_018;
 800c24a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800c24e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c252:	1884      	adds	r4, r0, r2
 800c254:	61bc      	str	r4, [r7, #24]
 800c256:	eb41 0303 	adc.w	r3, r1, r3
 800c25a:	61fb      	str	r3, [r7, #28]
 800c25c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c260:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800c264:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800c268:	17da      	asrs	r2, r3, #31
 800c26a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c26c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c26e:	f04f 0200 	mov.w	r2, #0
 800c272:	f04f 0300 	mov.w	r3, #0
 800c276:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c278:	02cb      	lsls	r3, r1, #11
 800c27a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c27c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800c280:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c282:	02ca      	lsls	r2, r1, #11
 800c284:	f512 6580 	adds.w	r5, r2, #1024	@ 0x400
 800c288:	f143 0600 	adc.w	r6, r3, #0
 800c28c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c28e:	fb06 f203 	mul.w	r2, r6, r3
 800c292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c294:	fb05 f303 	mul.w	r3, r5, r3
 800c298:	441a      	add	r2, r3
 800c29a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c29c:	fba3 ab05 	umull	sl, fp, r3, r5
 800c2a0:	eb02 030b 	add.w	r3, r2, fp
 800c2a4:	469b      	mov	fp, r3
			weighted_sum +=
 800c2a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c2aa:	eb12 010a 	adds.w	r1, r2, sl
 800c2ae:	6139      	str	r1, [r7, #16]
 800c2b0:	eb43 030b 	adc.w	r3, r3, fp
 800c2b4:	617b      	str	r3, [r7, #20]
 800c2b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c2ba:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800c2be:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c2cc:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800c2d0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	f77f af69 	ble.w	800c1ac <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800c2da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c2de:	2a01      	cmp	r2, #1
 800c2e0:	f173 0300 	sbcs.w	r3, r3, #0
 800c2e4:	db3b      	blt.n	800c35e <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800c2e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c2ea:	0fd9      	lsrs	r1, r3, #31
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	eb11 0802 	adds.w	r8, r1, r2
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	eb41 0903 	adc.w	r9, r1, r3
 800c302:	f04f 0200 	mov.w	r2, #0
 800c306:	f04f 0300 	mov.w	r3, #0
 800c30a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800c30e:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800c312:	ea4f 0369 	mov.w	r3, r9, asr #1
 800c316:	4610      	mov	r0, r2
 800c318:	4619      	mov	r1, r3
 800c31a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c31e:	1814      	adds	r4, r2, r0
 800c320:	603c      	str	r4, [r7, #0]
 800c322:	414b      	adcs	r3, r1
 800c324:	607b      	str	r3, [r7, #4]
 800c326:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c32a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800c32e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c332:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800c336:	f7f4 fc8b 	bl	8000c50 <__aeabi_ldivmod>
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		if (weighted_sum < 0)
 800c342:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c346:	2b00      	cmp	r3, #0
 800c348:	da05      	bge.n	800c356 <VL53LX_f_020+0x220>
			weighted_sum = 0;
 800c34a:	f04f 0200 	mov.w	r2, #0
 800c34e:	f04f 0300 	mov.w	r3, #0
 800c352:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		*pphase = (uint32_t)weighted_sum;
 800c356:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c358:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c35c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c35e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800c362:	4618      	mov	r0, r3
 800c364:	3774      	adds	r7, #116	@ 0x74
 800c366:	46bd      	mov	sp, r7
 800c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c36c <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60b9      	str	r1, [r7, #8]
 800c374:	607a      	str	r2, [r7, #4]
 800c376:	603b      	str	r3, [r7, #0]
 800c378:	4603      	mov	r3, r0
 800c37a:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c37c:	2300      	movs	r3, #0
 800c37e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800c388:	7bfa      	ldrb	r2, [r7, #15]
 800c38a:	4613      	mov	r3, r2
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	4413      	add	r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	4413      	add	r3, r2
 800c39a:	3304      	adds	r3, #4
 800c39c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800c39e:	22ac      	movs	r2, #172	@ 0xac
 800c3a0:	68b9      	ldr	r1, [r7, #8]
 800c3a2:	6a38      	ldr	r0, [r7, #32]
 800c3a4:	f00e ff61 	bl	801b26a <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800c3ae:	75fb      	strb	r3, [r7, #23]
 800c3b0:	e020      	b.n	800c3f4 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	7dfa      	ldrb	r2, [r7, #23]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d304      	bcc.n	800c3c6 <VL53LX_f_011+0x5a>
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	791b      	ldrb	r3, [r3, #4]
 800c3c0:	7dfa      	ldrb	r2, [r7, #23]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d913      	bls.n	800c3ee <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	78da      	ldrb	r2, [r3, #3]
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3d0:	fb01 f202 	mul.w	r2, r1, r2
 800c3d4:	1a9b      	subs	r3, r3, r2
 800c3d6:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	7a9b      	ldrb	r3, [r3, #10]
 800c3dc:	7d7a      	ldrb	r2, [r7, #21]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d205      	bcs.n	800c3ee <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800c3e2:	7d7a      	ldrb	r2, [r7, #21]
 800c3e4:	6a3b      	ldr	r3, [r7, #32]
 800c3e6:	3206      	adds	r2, #6
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800c3f4:	7dfa      	ldrb	r2, [r7, #23]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 800c3fc:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800c402:	440b      	add	r3, r1
 800c404:	429a      	cmp	r2, r3
 800c406:	dbd4      	blt.n	800c3b2 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800c408:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3718      	adds	r7, #24
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800c414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c418:	b096      	sub	sp, #88	@ 0x58
 800c41a:	af08      	add	r7, sp, #32
 800c41c:	4604      	mov	r4, r0
 800c41e:	4608      	mov	r0, r1
 800c420:	4611      	mov	r1, r2
 800c422:	461a      	mov	r2, r3
 800c424:	4623      	mov	r3, r4
 800c426:	73fb      	strb	r3, [r7, #15]
 800c428:	4603      	mov	r3, r0
 800c42a:	73bb      	strb	r3, [r7, #14]
 800c42c:	460b      	mov	r3, r1
 800c42e:	737b      	strb	r3, [r7, #13]
 800c430:	4613      	mov	r3, r2
 800c432:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800c434:	2300      	movs	r3, #0
 800c436:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800c43a:	2300      	movs	r3, #0
 800c43c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	uint8_t  i    = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	int32_t  VL53LX_p_007    = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t  VL53LX_p_032    = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t  VL53LX_p_001    = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t  a_zp = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t  c_zp = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800c466:	7b7b      	ldrb	r3, [r7, #13]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d106      	bne.n	800c47a <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800c46c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c46e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c472:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800c474:	f06f 030e 	mvn.w	r3, #14
 800c478:	e06f      	b.n	800c55a <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800c47a:	7bfb      	ldrb	r3, [r7, #15]
 800c47c:	7b7a      	ldrb	r2, [r7, #13]
 800c47e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c482:	fb01 f202 	mul.w	r2, r1, r2
 800c486:	1a9b      	subs	r3, r3, r2
 800c488:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35



	VL53LX_f_022(
 800c48c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c490:	7b39      	ldrb	r1, [r7, #12]
 800c492:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800c496:	f107 0320 	add.w	r3, r7, #32
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4a6:	f000 fddb 	bl	800d060 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800c4aa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800c4ae:	7b39      	ldrb	r1, [r7, #12]
 800c4b0:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800c4b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4c4:	f000 fdcc 	bl	800d060 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800c4c8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00e      	beq.n	800c4ee <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800c4d0:	f107 021c 	add.w	r2, r7, #28
 800c4d4:	7b39      	ldrb	r1, [r7, #12]
 800c4d6:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 800c4da:	f107 0314 	add.w	r3, r7, #20
 800c4de:	9301      	str	r3, [sp, #4]
 800c4e0:	f107 0318 	add.w	r3, r7, #24
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c4ea:	f000 fdb9 	bl	800d060 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f0:	469c      	mov	ip, r3
 800c4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f4:	469e      	mov	lr, r3
 800c4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f8:	4698      	mov	r8, r3
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	461c      	mov	r4, r3
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	461d      	mov	r5, r3
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	461e      	mov	r6, r3
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800c50e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		VL53LX_f_023(
 800c514:	607b      	str	r3, [r7, #4]
 800c516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c518:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c51c:	7bb8      	ldrb	r0, [r7, #14]
 800c51e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c520:	9207      	str	r2, [sp, #28]
 800c522:	9306      	str	r3, [sp, #24]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	9205      	str	r2, [sp, #20]
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	9603      	str	r6, [sp, #12]
 800c52e:	9502      	str	r5, [sp, #8]
 800c530:	9401      	str	r4, [sp, #4]
 800c532:	9100      	str	r1, [sp, #0]
 800c534:	4643      	mov	r3, r8
 800c536:	4672      	mov	r2, lr
 800c538:	4661      	mov	r1, ip
 800c53a:	f002 ff2c 	bl	800f396 <VL53LX_f_023>
 800c53e:	4603      	mov	r3, r0
 800c540:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800c544:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800c548:	f113 0f0f 	cmn.w	r3, #15
 800c54c:	d103      	bne.n	800c556 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800c54e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c554:	801a      	strh	r2, [r3, #0]


	return status;
 800c556:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3738      	adds	r7, #56	@ 0x38
 800c55e:	46bd      	mov	sp, r7
 800c560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c564 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800c564:	b490      	push	{r4, r7}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4604      	mov	r4, r0
 800c56c:	4608      	mov	r0, r1
 800c56e:	4611      	mov	r1, r2
 800c570:	461a      	mov	r2, r3
 800c572:	4623      	mov	r3, r4
 800c574:	71fb      	strb	r3, [r7, #7]
 800c576:	4603      	mov	r3, r0
 800c578:	71bb      	strb	r3, [r7, #6]
 800c57a:	460b      	mov	r3, r1
 800c57c:	717b      	strb	r3, [r7, #5]
 800c57e:	4613      	mov	r3, r2
 800c580:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800c586:	2300      	movs	r3, #0
 800c588:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	79fa      	ldrb	r2, [r7, #7]
 800c58e:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800c590:	6a3b      	ldr	r3, [r7, #32]
 800c592:	2200      	movs	r2, #0
 800c594:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	785a      	ldrb	r2, [r3, #1]
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	789a      	ldrb	r2, [r3, #2]
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	78da      	ldrb	r2, [r3, #3]
 800c5b2:	6a3b      	ldr	r3, [r7, #32]
 800c5b4:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	791a      	ldrb	r2, [r3, #4]
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	795a      	ldrb	r2, [r3, #5]
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	791a      	ldrb	r2, [r3, #4]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	8c1a      	ldrh	r2, [r3, #32]
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
 800c5ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	695b      	ldr	r3, [r3, #20]
 800c5f0:	b29a      	uxth	r2, r3
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	b29a      	uxth	r2, r3
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	461a      	mov	r2, r3
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	629a      	str	r2, [r3, #40]	@ 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	691a      	ldr	r2, [r3, #16]
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	461a      	mov	r2, r3
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	625a      	str	r2, [r3, #36]	@ 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	2213      	movs	r2, #19
 800c638:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a


	if (sigma_thres > 0 &&
 800c63c:	887b      	ldrh	r3, [r7, #2]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00a      	beq.n	800c658 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	8c1b      	ldrh	r3, [r3, #32]
 800c646:	461a      	mov	r2, r3
 800c648:	887b      	ldrh	r3, [r7, #2]
 800c64a:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d903      	bls.n	800c658 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800c650:	6a3b      	ldr	r3, [r7, #32]
 800c652:	2206      	movs	r2, #6
 800c654:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800c658:	79bb      	ldrb	r3, [r7, #6]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	021b      	lsls	r3, r3, #8
 800c65e:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	8a9b      	ldrh	r3, [r3, #20]
 800c664:	89fa      	ldrh	r2, [r7, #14]
 800c666:	429a      	cmp	r2, r3
 800c668:	d205      	bcs.n	800c676 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800c66e:	89fb      	ldrh	r3, [r7, #14]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	81fb      	strh	r3, [r7, #14]
 800c674:	e001      	b.n	800c67a <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800c67a:	797b      	ldrb	r3, [r7, #5]
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	021b      	lsls	r3, r3, #8
 800c680:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
 800c688:	89bb      	ldrh	r3, [r7, #12]
 800c68a:	4413      	add	r3, r2
 800c68c:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c694:	89fa      	ldrh	r2, [r7, #14]
 800c696:	429a      	cmp	r2, r3
 800c698:	d805      	bhi.n	800c6a6 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800c6a0:	89ba      	ldrh	r2, [r7, #12]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d203      	bcs.n	800c6ae <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	2205      	movs	r2, #5
 800c6aa:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

}
 800c6ae:	bf00      	nop
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bc90      	pop	{r4, r7}
 800c6b6:	4770      	bx	lr

0800c6b8 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800c6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ba:	b08f      	sub	sp, #60	@ 0x3c
 800c6bc:	af06      	add	r7, sp, #24
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800c6ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6d0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c6d4:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800c6d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c6d8:	f7ff f858 	bl	800b78c <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800c6dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6de:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
	memcpy(
 800c6e2:	22ac      	movs	r2, #172	@ 0xac
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f00e fdbf 	bl	801b26a <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781a      	ldrb	r2, [r3, #0]
 800c6f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6f2:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	785a      	ldrb	r2, [r3, #1]
 800c6f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6fa:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	789a      	ldrb	r2, [r3, #2]
 800c700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c702:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	f893 207b 	ldrb.w	r2, [r3, #123]	@ 0x7b
 800c70a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c70c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800c70e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c710:	2200      	movs	r2, #0
 800c712:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800c714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c716:	2204      	movs	r2, #4
 800c718:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800c71a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c71c:	2200      	movs	r2, #0
 800c71e:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800c720:	2300      	movs	r3, #0
 800c722:	77bb      	strb	r3, [r7, #30]
 800c724:	e008      	b.n	800c738 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800c726:	7fbb      	ldrb	r3, [r7, #30]
 800c728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	4413      	add	r3, r2
 800c72e:	2200      	movs	r2, #0
 800c730:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800c732:	7fbb      	ldrb	r3, [r7, #30]
 800c734:	3301      	adds	r3, #1
 800c736:	77bb      	strb	r3, [r7, #30]
 800c738:	7fbb      	ldrb	r3, [r7, #30]
 800c73a:	2b04      	cmp	r3, #4
 800c73c:	d9f3      	bls.n	800c726 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800c73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c740:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c744:	4618      	mov	r0, r3
 800c746:	f7fd ff59 	bl	800a5fc <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800c74e:	461a      	mov	r2, r3
 800c750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c752:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c756:	4619      	mov	r1, r3
 800c758:	4610      	mov	r0, r2
 800c75a:	f7fd ff8f 	bl	800a67c <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800c75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c760:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c764:	4618      	mov	r0, r3
 800c766:	f7fe fb68 	bl	800ae3a <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800c76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c76c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c770:	4618      	mov	r0, r3
 800c772:	f7fd fffd 	bl	800a770 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d009      	beq.n	800c794 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800c780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c782:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800c786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c788:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800c78c:	461a      	mov	r2, r3
 800c78e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c790:	f000 fdae 	bl	800d2f0 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800c79c:	2300      	movs	r3, #0
 800c79e:	77bb      	strb	r3, [r7, #30]
 800c7a0:	e01e      	b.n	800c7e0 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800c7a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d117      	bne.n	800c7da <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800c7aa:	7fbb      	ldrb	r3, [r7, #30]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4413      	add	r3, r2
 800c7b4:	8898      	ldrh	r0, [r3, #4]
 800c7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7b8:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800c7bc:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7c2:	4413      	add	r3, r2
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	9301      	str	r3, [sp, #4]
 800c7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	68f9      	ldr	r1, [r7, #12]
 800c7d2:	f7fe fb7d 	bl	800aed0 <VL53LX_f_001>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800c7da:	7fbb      	ldrb	r3, [r7, #30]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	77bb      	strb	r3, [r7, #30]
 800c7e0:	7fbb      	ldrb	r3, [r7, #30]
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	d9dd      	bls.n	800c7a2 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800c7e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d11a      	bne.n	800c824 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800c7f6:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 5028 	ldrb.w	r5, [r3, #40]	@ 0x28
 800c802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c804:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c808:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c80a:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800c80e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c810:	9102      	str	r1, [sp, #8]
 800c812:	9201      	str	r2, [sp, #4]
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	462b      	mov	r3, r5
 800c818:	4622      	mov	r2, r4
 800c81a:	4631      	mov	r1, r6
 800c81c:	f7ff f82f 	bl	800b87e <VL53LX_f_006>
 800c820:	4603      	mov	r3, r0
 800c822:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800c824:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800c82c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c82e:	f7ff f956 	bl	800bade <VL53LX_f_007>
 800c832:	4603      	mov	r3, r0
 800c834:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800c836:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d104      	bne.n	800c848 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800c83e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c840:	f7ff f99b 	bl	800bb7a <VL53LX_f_008>
 800c844:	4603      	mov	r3, r0
 800c846:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800c848:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d104      	bne.n	800c85a <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800c850:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c852:	f7ff fa10 	bl	800bc76 <VL53LX_f_009>
 800c856:	4603      	mov	r3, r0
 800c858:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800c85a:	2300      	movs	r3, #0
 800c85c:	77bb      	strb	r3, [r7, #30]
 800c85e:	e0a6      	b.n	800c9ae <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800c860:	7fba      	ldrb	r2, [r7, #30]
 800c862:	4613      	mov	r3, r2
 800c864:	00db      	lsls	r3, r3, #3
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c86e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c870:	4413      	add	r3, r2
 800c872:	3304      	adds	r3, #4
 800c874:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800c876:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d109      	bne.n	800c892 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800c87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c880:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800c884:	7fbb      	ldrb	r3, [r7, #30]
 800c886:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff fb4a 	bl	800bf22 <VL53LX_f_010>
 800c88e:	4603      	mov	r3, r0
 800c890:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800c892:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d110      	bne.n	800c8bc <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800c89a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c89c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a8:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800c8ac:	7fb8      	ldrb	r0, [r7, #30]
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c8b4:	f7ff fd5a 	bl	800c36c <VL53LX_f_011>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800c8bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10d      	bne.n	800c8e0 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800c8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8c6:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800c8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8cc:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 800c8d0:	7fb8      	ldrb	r0, [r7, #30]
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c8d8:	f7ff fd48 	bl	800c36c <VL53LX_f_011>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800c8e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10d      	bne.n	800c904 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800c8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ea:	f503 7152 	add.w	r1, r3, #840	@ 0x348
 800c8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f0:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800c8f4:	7fb8      	ldrb	r0, [r7, #30]
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c8fc:	f7ff fd36 	bl	800c36c <VL53LX_f_011>
 800c900:	4603      	mov	r3, r0
 800c902:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800c904:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d109      	bne.n	800c920 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800c90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c90e:	f503 717d 	add.w	r1, r3, #1012	@ 0x3f4
 800c912:	7fb8      	ldrb	r0, [r7, #30]
 800c914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c916:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c918:	f000 f8dd 	bl	800cad6 <VL53LX_f_026>
 800c91c:	4603      	mov	r3, r0
 800c91e:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800c920:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d108      	bne.n	800c93a <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	8a19      	ldrh	r1, [r3, #16]
 800c92c:	7fb8      	ldrb	r0, [r7, #30]
 800c92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c932:	f000 f95c 	bl	800cbee <VL53LX_f_027>
 800c936:	4603      	mov	r3, r0
 800c938:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800c93a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d124      	bne.n	800c98c <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	789d      	ldrb	r5, [r3, #2]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	7e1e      	ldrb	r6, [r3, #24]
 800c94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c94c:	f893 c003 	ldrb.w	ip, [r3, #3]
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f893 e006 	ldrb.w	lr, [r3, #6]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c95c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c95e:	f502 727d 	add.w	r2, r2, #1012	@ 0x3f4
 800c962:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c964:	f501 6194 	add.w	r1, r1, #1184	@ 0x4a0
 800c968:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c96a:	f200 504c 	addw	r0, r0, #1356	@ 0x54c
 800c96e:	697c      	ldr	r4, [r7, #20]
 800c970:	3420      	adds	r4, #32
 800c972:	9404      	str	r4, [sp, #16]
 800c974:	9003      	str	r0, [sp, #12]
 800c976:	9102      	str	r1, [sp, #8]
 800c978:	9201      	str	r2, [sp, #4]
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	4673      	mov	r3, lr
 800c97e:	4662      	mov	r2, ip
 800c980:	4631      	mov	r1, r6
 800c982:	4628      	mov	r0, r5
 800c984:	f7ff fd46 	bl	800c414 <VL53LX_f_014>
 800c988:	4603      	mov	r3, r0
 800c98a:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800c98c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d109      	bne.n	800c9a8 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800c994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c996:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 800c99a:	7fb8      	ldrb	r0, [r7, #30]
 800c99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c99e:	2101      	movs	r1, #1
 800c9a0:	f7ff fb12 	bl	800bfc8 <VL53LX_f_015>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800c9a8:	7fbb      	ldrb	r3, [r7, #30]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	77bb      	strb	r3, [r7, #30]
 800c9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b0:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800c9b4:	7fba      	ldrb	r2, [r7, #30]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	f4ff af52 	bcc.w	800c860 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800c9bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d107      	bne.n	800c9d4 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	785b      	ldrb	r3, [r3, #1]
 800c9c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff fa25 	bl	800be1a <VL53LX_f_016>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	77bb      	strb	r3, [r7, #30]
 800c9d8:	e071      	b.n	800cabe <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800c9da:	7fba      	ldrb	r2, [r7, #30]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	4413      	add	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800c9e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9ea:	4413      	add	r3, r2
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800c9f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9f2:	7c9a      	ldrb	r2, [r3, #18]
 800c9f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9f6:	7c5b      	ldrb	r3, [r3, #17]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d25c      	bcs.n	800cab6 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800ca04:	429a      	cmp	r2, r3
 800ca06:	dd57      	ble.n	800cab8 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800ca0c:	2bff      	cmp	r3, #255	@ 0xff
 800ca0e:	d053      	beq.n	800cab8 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800ca10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca12:	7c9b      	ldrb	r3, [r3, #18]
 800ca14:	461a      	mov	r2, r3
			prange_data =
 800ca16:	234c      	movs	r3, #76	@ 0x4c
 800ca18:	fb02 f303 	mul.w	r3, r2, r3
 800ca1c:	3310      	adds	r3, #16
 800ca1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca20:	4413      	add	r3, r2
 800ca22:	3304      	adds	r3, #4
 800ca24:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800ca26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d115      	bne.n	800ca5a <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800ca2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca30:	7c98      	ldrb	r0, [r3, #18]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 1020 	ldrb.w	r1, [r3, #32]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 4021 	ldrb.w	r4, [r3, #33]	@ 0x21
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	8b5d      	ldrh	r5, [r3, #26]
 800ca42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca44:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	9202      	str	r2, [sp, #8]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	9201      	str	r2, [sp, #4]
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	462b      	mov	r3, r5
 800ca54:	4622      	mov	r2, r4
 800ca56:	f7ff fd85 	bl	800c564 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800ca5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d115      	bne.n	800ca8e <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	f8b3 0082 	ldrh.w	r0, [r3, #130]	@ 0x82
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	@ 0x86
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	f8b3 407c 	ldrh.w	r4, [r3, #124]	@ 0x7c
 800ca7a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800ca7e:	9301      	str	r3, [sp, #4]
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	4623      	mov	r3, r4
 800ca86:	f000 fb44 	bl	800d112 <VL53LX_f_018>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800ca8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d108      	bne.n	800caa8 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	8bd8      	ldrh	r0, [r3, #30]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800caa0:	693a      	ldr	r2, [r7, #16]
 800caa2:	4619      	mov	r1, r3
 800caa4:	f000 fbda 	bl	800d25c <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800caa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caaa:	7c9b      	ldrb	r3, [r3, #18]
 800caac:	3301      	adds	r3, #1
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cab2:	749a      	strb	r2, [r3, #18]
 800cab4:	e000      	b.n	800cab8 <VL53LX_f_025+0x400>
			continue;
 800cab6:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800cab8:	7fbb      	ldrb	r3, [r7, #30]
 800caba:	3301      	adds	r3, #1
 800cabc:	77bb      	strb	r3, [r7, #30]
 800cabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cac0:	f893 317a 	ldrb.w	r3, [r3, #378]	@ 0x17a
 800cac4:	7fba      	ldrb	r2, [r7, #30]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d387      	bcc.n	800c9da <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800caca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3724      	adds	r7, #36	@ 0x24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cad6 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b08c      	sub	sp, #48	@ 0x30
 800cada:	af02      	add	r7, sp, #8
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	603b      	str	r3, [r7, #0]
 800cae2:	4603      	mov	r3, r0
 800cae4:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800cae6:	2300      	movs	r3, #0
 800cae8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800caec:	7bfa      	ldrb	r2, [r7, #15]
 800caee:	4613      	mov	r3, r2
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	4413      	add	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	4413      	add	r3, r2
 800cafe:	3304      	adds	r3, #4
 800cb00:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t  i     = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	785a      	ldrb	r2, [r3, #1]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	781a      	ldrb	r2, [r3, #0]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	789a      	ldrb	r2, [r3, #2]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb38:	e04d      	b.n	800cbd6 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	78da      	ldrb	r2, [r3, #3]
 800cb3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb42:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb46:	fb01 f202 	mul.w	r2, r1, r2
 800cb4a:	1a9b      	subs	r3, r3, r2
 800cb4c:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800cb4e:	6a3b      	ldr	r3, [r7, #32]
 800cb50:	7999      	ldrb	r1, [r3, #6]
 800cb52:	f107 0218 	add.w	r2, r7, #24
 800cb56:	7ff8      	ldrb	r0, [r7, #31]
 800cb58:	f107 0310 	add.w	r3, r7, #16
 800cb5c:	9301      	str	r3, [sp, #4]
 800cb5e:	f107 0314 	add.w	r3, r7, #20
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	4613      	mov	r3, r2
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	f000 fa7a 	bl	800d060 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800cb6c:	7ffb      	ldrb	r3, [r7, #31]
 800cb6e:	69ba      	ldr	r2, [r7, #24]
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	440b      	add	r3, r1
 800cb76:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800cb78:	7ffb      	ldrb	r3, [r7, #31]
 800cb7a:	697a      	ldr	r2, [r7, #20]
 800cb7c:	6839      	ldr	r1, [r7, #0]
 800cb7e:	3318      	adds	r3, #24
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	440b      	add	r3, r1
 800cb84:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800cb86:	7ffb      	ldrb	r3, [r7, #31]
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	3330      	adds	r3, #48	@ 0x30
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	440b      	add	r3, r1
 800cb92:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	689a      	ldr	r2, [r3, #8]
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800cba2:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800cba4:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	3348      	adds	r3, #72	@ 0x48
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	440b      	add	r3, r1
 800cbae:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800cbbe:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800cbc0:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	3360      	adds	r3, #96	@ 0x60
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	440b      	add	r3, r1
 800cbca:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	791b      	ldrb	r3, [r3, #4]
 800cbda:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d9ab      	bls.n	800cb3a <VL53LX_f_026+0x64>
	}

	return status;
 800cbe2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3728      	adds	r7, #40	@ 0x28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800cbee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf0:	b08f      	sub	sp, #60	@ 0x3c
 800cbf2:	af06      	add	r7, sp, #24
 800cbf4:	60ba      	str	r2, [r7, #8]
 800cbf6:	607b      	str	r3, [r7, #4]
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	73fb      	strb	r3, [r7, #15]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800cc00:	2300      	movs	r3, #0
 800cc02:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800cc04:	2300      	movs	r3, #0
 800cc06:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800cc08:	7bfa      	ldrb	r2, [r7, #15]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	00db      	lsls	r3, r3, #3
 800cc0e:	4413      	add	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	4413      	add	r3, r2
 800cc1a:	3304      	adds	r3, #4
 800cc1c:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800cc26:	2300      	movs	r3, #0
 800cc28:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	77fb      	strb	r3, [r7, #31]
 800cc30:	e0b9      	b.n	800cda6 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	78da      	ldrb	r2, [r3, #3]
 800cc36:	7ffb      	ldrb	r3, [r7, #31]
 800cc38:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc3c:	fb01 f202 	mul.w	r2, r1, r2
 800cc40:	1a9b      	subs	r3, r3, r2
 800cc42:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800cc44:	7ffb      	ldrb	r3, [r7, #31]
 800cc46:	3301      	adds	r3, #1
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	78d2      	ldrb	r2, [r2, #3]
 800cc4c:	fb93 f1f2 	sdiv	r1, r3, r2
 800cc50:	fb01 f202 	mul.w	r2, r1, r2
 800cc54:	1a9b      	subs	r3, r3, r2
 800cc56:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	789b      	ldrb	r3, [r3, #2]
 800cc5c:	7dfa      	ldrb	r2, [r7, #23]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	f080 809e 	bcs.w	800cda0 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800cc68:	7dba      	ldrb	r2, [r7, #22]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	f080 8098 	bcs.w	800cda0 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	3348      	adds	r3, #72	@ 0x48
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10e      	bne.n	800cc9e <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	3360      	adds	r3, #96	@ 0x60
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4413      	add	r3, r2
 800cc8a:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d106      	bne.n	800cc9e <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	4413      	add	r3, r2
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800cc9c:	e043      	b.n	800cd26 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	3348      	adds	r3, #72	@ 0x48
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	4413      	add	r3, r2
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	db0e      	blt.n	800cccc <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	3360      	adds	r3, #96	@ 0x60
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	db06      	blt.n	800cccc <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800ccca:	e02c      	b.n	800cd26 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	3348      	adds	r3, #72	@ 0x48
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	da1e      	bge.n	800cd1a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	3360      	adds	r3, #96	@ 0x60
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	db16      	blt.n	800cd1a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800ccec:	7dbb      	ldrb	r3, [r7, #22]
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	3348      	adds	r3, #72	@ 0x48
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4413      	add	r3, r2
 800ccf6:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	db0e      	blt.n	800cd1a <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800ccfc:	7dbb      	ldrb	r3, [r7, #22]
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	3360      	adds	r3, #96	@ 0x60
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	4413      	add	r3, r2
 800cd06:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	da06      	bge.n	800cd1a <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	4413      	add	r3, r2
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800cd18:	e005      	b.n	800cd26 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	4413      	add	r3, r2
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	68ba      	ldr	r2, [r7, #8]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d035      	beq.n	800cda0 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	7ffa      	ldrb	r2, [r7, #31]
 800cd38:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	685c      	ldr	r4, [r3, #4]
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	3318      	adds	r3, #24
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	685d      	ldr	r5, [r3, #4]
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	3330      	adds	r3, #48	@ 0x30
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	685e      	ldr	r6, [r3, #4]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	78d2      	ldrb	r2, [r2, #3]
 800cd64:	69b9      	ldr	r1, [r7, #24]
 800cd66:	3118      	adds	r1, #24
 800cd68:	7ff8      	ldrb	r0, [r7, #31]
 800cd6a:	9105      	str	r1, [sp, #20]
 800cd6c:	9204      	str	r2, [sp, #16]
 800cd6e:	9303      	str	r3, [sp, #12]
 800cd70:	2300      	movs	r3, #0
 800cd72:	9302      	str	r3, [sp, #8]
 800cd74:	2300      	movs	r3, #0
 800cd76:	9301      	str	r3, [sp, #4]
 800cd78:	2300      	movs	r3, #0
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	4633      	mov	r3, r6
 800cd7e:	462a      	mov	r2, r5
 800cd80:	4621      	mov	r1, r4
 800cd82:	f000 f81c 	bl	800cdbe <VL53LX_f_028>
 800cd86:	4603      	mov	r3, r0
 800cd88:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800cd8a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cd8e:	f113 0f0f 	cmn.w	r3, #15
 800cd92:	d105      	bne.n	800cda0 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	4413      	add	r3, r2
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800cda0:	7ffb      	ldrb	r3, [r7, #31]
 800cda2:	3301      	adds	r3, #1
 800cda4:	77fb      	strb	r3, [r7, #31]
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	791b      	ldrb	r3, [r3, #4]
 800cdaa:	7ffa      	ldrb	r2, [r7, #31]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	f4ff af40 	bcc.w	800cc32 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800cdb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3724      	adds	r7, #36	@ 0x24
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdbe <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800cdbe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdc2:	b0b2      	sub	sp, #200	@ 0xc8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800cdca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cdce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800cdd8:	23f1      	movs	r3, #241	@ 0xf1
 800cdda:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800cdde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cde2:	f04f 0300 	mov.w	r3, #0
 800cde6:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800cdea:	f04f 0200 	mov.w	r2, #0
 800cdee:	f04f 0300 	mov.w	r3, #0
 800cdf2:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	int64_t  half_b_minus_amb = 0;
 800cdf6:	f04f 0200 	mov.w	r2, #0
 800cdfa:	f04f 0300 	mov.w	r3, #0
 800cdfe:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800ce02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ce06:	17da      	asrs	r2, r3, #31
 800ce08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800ce10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ce14:	17da      	asrs	r2, r3, #31
 800ce16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce1a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800ce1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ce26:	4602      	mov	r2, r0
 800ce28:	ebb3 0802 	subs.w	r8, r3, r2
 800ce2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce30:	460a      	mov	r2, r1
 800ce32:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800ce36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce3a:	17da      	asrs	r2, r3, #31
 800ce3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ce40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ce44:	460b      	mov	r3, r1
 800ce46:	ebb8 0a03 	subs.w	sl, r8, r3
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	eb69 0b03 	sbc.w	fp, r9, r3
 800ce50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ce54:	17da      	asrs	r2, r3, #31
 800ce56:	673b      	str	r3, [r7, #112]	@ 0x70
 800ce58:	677a      	str	r2, [r7, #116]	@ 0x74
 800ce5a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ce5e:	460b      	mov	r3, r1
 800ce60:	ebba 0403 	subs.w	r4, sl, r3
 800ce64:	4613      	mov	r3, r2
 800ce66:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800ce6a:	f04f 0200 	mov.w	r2, #0
 800ce6e:	f04f 0300 	mov.w	r3, #0
 800ce72:	032b      	lsls	r3, r5, #12
 800ce74:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800ce78:	0322      	lsls	r2, r4, #12
 800ce7a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800ce7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ce82:	17da      	asrs	r2, r3, #31
 800ce84:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ce86:	66fa      	str	r2, [r7, #108]	@ 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800ce88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ce8c:	17da      	asrs	r2, r3, #31
 800ce8e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce90:	667a      	str	r2, [r7, #100]	@ 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800ce92:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800ce96:	4623      	mov	r3, r4
 800ce98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	1a9b      	subs	r3, r3, r2
 800cea0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cea2:	462b      	mov	r3, r5
 800cea4:	460a      	mov	r2, r1
 800cea6:	eb63 0302 	sbc.w	r3, r3, r2
 800ceaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800ceac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ceb0:	17da      	asrs	r2, r3, #31
 800ceb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800ceb4:	657a      	str	r2, [r7, #84]	@ 0x54
 800ceb6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800ceba:	4623      	mov	r3, r4
 800cebc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800cec0:	4602      	mov	r2, r0
 800cec2:	1a9b      	subs	r3, r3, r2
 800cec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cec6:	462b      	mov	r3, r5
 800cec8:	460a      	mov	r2, r1
 800ceca:	eb63 0302 	sbc.w	r3, r3, r2
 800cece:	64fb      	str	r3, [r7, #76]	@ 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800ced0:	f04f 0200 	mov.w	r2, #0
 800ced4:	f04f 0300 	mov.w	r3, #0
 800ced8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800cedc:	4629      	mov	r1, r5
 800cede:	030b      	lsls	r3, r1, #12
 800cee0:	4621      	mov	r1, r4
 800cee2:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800cee6:	4621      	mov	r1, r4
 800cee8:	030a      	lsls	r2, r1, #12
 800ceea:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (half_b_minus_amb != 0) {
 800ceee:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800cef2:	4313      	orrs	r3, r2
 800cef4:	f000 80a8 	beq.w	800d048 <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800cef8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800cefc:	f04f 0000 	mov.w	r0, #0
 800cf00:	f04f 0100 	mov.w	r1, #0
 800cf04:	0319      	lsls	r1, r3, #12
 800cf06:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800cf0a:	0310      	lsls	r0, r2, #12
 800cf0c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800cf10:	1814      	adds	r4, r2, r0
 800cf12:	633c      	str	r4, [r7, #48]	@ 0x30
 800cf14:	414b      	adcs	r3, r1
 800cf16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf18:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800cf1c:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800cf20:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800cf24:	1891      	adds	r1, r2, r2
 800cf26:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cf28:	415b      	adcs	r3, r3
 800cf2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cf30:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800cf34:	f7f3 fe8c 	bl	8000c50 <__aeabi_ldivmod>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

		mean_phase  +=  2048;
 800cf40:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800cf44:	f512 6100 	adds.w	r1, r2, #2048	@ 0x800
 800cf48:	6239      	str	r1, [r7, #32]
 800cf4a:	f143 0300 	adc.w	r3, r3, #0
 800cf4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf50:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cf54:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 800cf58:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf60:	647a      	str	r2, [r7, #68]	@ 0x44
 800cf62:	f04f 0200 	mov.w	r2, #0
 800cf66:	f04f 0300 	mov.w	r3, #0
 800cf6a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800cf6e:	4629      	mov	r1, r5
 800cf70:	030b      	lsls	r3, r1, #12
 800cf72:	4621      	mov	r1, r4
 800cf74:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800cf78:	4621      	mov	r1, r4
 800cf7a:	030a      	lsls	r2, r1, #12
 800cf7c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800cf80:	1884      	adds	r4, r0, r2
 800cf82:	61bc      	str	r4, [r7, #24]
 800cf84:	eb41 0303 	adc.w	r3, r1, r3
 800cf88:	61fb      	str	r3, [r7, #28]
 800cf8a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cf8e:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800cf92:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800cf96:	1c51      	adds	r1, r2, #1
 800cf98:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cf9a:	f143 0300 	adc.w	r3, r3, #0
 800cf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfa0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	0fdb      	lsrs	r3, r3, #31
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	613b      	str	r3, [r7, #16]
 800cfac:	617a      	str	r2, [r7, #20]
 800cfae:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800cfb2:	4623      	mov	r3, r4
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	189b      	adds	r3, r3, r2
 800cfb8:	60bb      	str	r3, [r7, #8]
 800cfba:	460b      	mov	r3, r1
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	eb42 0303 	adc.w	r3, r2, r3
 800cfc2:	60fb      	str	r3, [r7, #12]
 800cfc4:	f04f 0200 	mov.w	r2, #0
 800cfc8:	f04f 0300 	mov.w	r3, #0
 800cfcc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	084a      	lsrs	r2, r1, #1
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800cfda:	4629      	mov	r1, r5
 800cfdc:	104b      	asrs	r3, r1, #1
 800cfde:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		if (mean_phase  < 0)
 800cfe2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	da05      	bge.n	800cff6 <VL53LX_f_028+0x238>
			mean_phase = 0;
 800cfea:	f04f 0200 	mov.w	r2, #0
 800cfee:	f04f 0300 	mov.w	r3, #0
 800cff2:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800cff6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800cffa:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800cffe:	f173 0300 	sbcs.w	r3, r3, #0
 800d002:	db05      	blt.n	800d010 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800d004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d008:	f04f 0300 	mov.w	r3, #0
 800d00c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8


		mean_phase32 = (int32_t)mean_phase;
 800d010:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d014:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800d018:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800d01c:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800d01e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d022:	fb93 f1f2 	sdiv	r1, r3, r2
 800d026:	fb01 f202 	mul.w	r2, r1, r2
 800d02a:	1a9b      	subs	r3, r3, r2
 800d02c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		mean_phase = mean_phase32;
 800d030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d034:	17da      	asrs	r2, r3, #31
 800d036:	603b      	str	r3, [r7, #0]
 800d038:	607a      	str	r2, [r7, #4]
 800d03a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d03e:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8

		status = VL53LX_ERROR_NONE;
 800d042:	2300      	movs	r3, #0
 800d044:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 800d048:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d04c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d050:	601a      	str	r2, [r3, #0]

	return status;
 800d052:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
}
 800d056:	4618      	mov	r0, r3
 800d058:	37c8      	adds	r7, #200	@ 0xc8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d060 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800d060:	b480      	push	{r7}
 800d062:	b087      	sub	sp, #28
 800d064:	af00      	add	r7, sp, #0
 800d066:	60ba      	str	r2, [r7, #8]
 800d068:	607b      	str	r3, [r7, #4]
 800d06a:	4603      	mov	r3, r0
 800d06c:	73fb      	strb	r3, [r7, #15]
 800d06e:	460b      	mov	r3, r1
 800d070:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800d080:	7bfa      	ldrb	r2, [r7, #15]
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	3206      	adds	r2, #6
 800d086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800d08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d090:	2200      	movs	r2, #0
 800d092:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800d094:	2300      	movs	r3, #0
 800d096:	75fb      	strb	r3, [r7, #23]
 800d098:	e02f      	b.n	800d0fa <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800d09a:	7bfa      	ldrb	r2, [r7, #15]
 800d09c:	7dfb      	ldrb	r3, [r7, #23]
 800d09e:	4413      	add	r3, r2
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	7a92      	ldrb	r2, [r2, #10]
 800d0a4:	441a      	add	r2, r3
 800d0a6:	7bbb      	ldrb	r3, [r7, #14]
 800d0a8:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	7a92      	ldrb	r2, [r2, #10]
 800d0ae:	fb93 f1f2 	sdiv	r1, r3, r2
 800d0b2:	fb01 f202 	mul.w	r2, r1, r2
 800d0b6:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800d0b8:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800d0ba:	7dfa      	ldrb	r2, [r7, #23]
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d20a      	bcs.n	800d0d8 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	7db9      	ldrb	r1, [r7, #22]
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	3106      	adds	r1, #6
 800d0cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0d0:	441a      	add	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	e00d      	b.n	800d0f4 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800d0d8:	7dfa      	ldrb	r2, [r7, #23]
 800d0da:	7bbb      	ldrb	r3, [r7, #14]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d909      	bls.n	800d0f4 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	7db9      	ldrb	r1, [r7, #22]
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	3106      	adds	r1, #6
 800d0ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0ee:	441a      	add	r2, r3
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f2:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800d0f4:	7dfb      	ldrb	r3, [r7, #23]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	75fb      	strb	r3, [r7, #23]
 800d0fa:	7bbb      	ldrb	r3, [r7, #14]
 800d0fc:	005a      	lsls	r2, r3, #1
 800d0fe:	7dfb      	ldrb	r3, [r7, #23]
 800d100:	429a      	cmp	r2, r3
 800d102:	daca      	bge.n	800d09a <VL53LX_f_022+0x3a>
	}
}
 800d104:	bf00      	nop
 800d106:	bf00      	nop
 800d108:	371c      	adds	r7, #28
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b088      	sub	sp, #32
 800d116:	af00      	add	r7, sp, #0
 800d118:	60ba      	str	r2, [r7, #8]
 800d11a:	461a      	mov	r2, r3
 800d11c:	4603      	mov	r3, r0
 800d11e:	81fb      	strh	r3, [r7, #14]
 800d120:	460b      	mov	r3, r1
 800d122:	81bb      	strh	r3, [r7, #12]
 800d124:	4613      	mov	r3, r2
 800d126:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800d128:	2300      	movs	r3, #0
 800d12a:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800d12c:	2300      	movs	r3, #0
 800d12e:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800d130:	2300      	movs	r3, #0
 800d132:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800d138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13a:	89fa      	ldrh	r2, [r7, #14]
 800d13c:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800d13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d140:	89ba      	ldrh	r2, [r7, #12]
 800d142:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800d144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800d14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14c:	88fa      	ldrh	r2, [r7, #6]
 800d14e:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800d150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d152:	8a5b      	ldrh	r3, [r3, #18]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800d158:	23f1      	movs	r3, #241	@ 0xf1
 800d15a:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800d15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800d164:	23f1      	movs	r3, #241	@ 0xf1
 800d166:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800d168:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d16f      	bne.n	800d250 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800d170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d172:	8a5b      	ldrh	r3, [r3, #18]
 800d174:	4618      	mov	r0, r3
 800d176:	f7fd f904 	bl	800a382 <VL53LX_calc_pll_period_us>
 800d17a:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800d17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	3301      	adds	r3, #1
 800d182:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800d184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d186:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800d188:	4619      	mov	r1, r3
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d190:	6978      	ldr	r0, [r7, #20]
 800d192:	f7fd f90d 	bl	800a3b0 <VL53LX_duration_maths>
 800d196:	4602      	mov	r2, r0
 800d198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19a:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800d19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19e:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800d1a0:	0119      	lsls	r1, r3, #4
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1a8:	6978      	ldr	r0, [r7, #20]
 800d1aa:	f7fd f901 	bl	800a3b0 <VL53LX_duration_maths>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b2:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800d1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800d1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ba:	69db      	ldr	r3, [r3, #28]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4610      	mov	r0, r2
 800d1c0:	f7fd fb6e 	bl	800a8a0 <VL53LX_rate_maths>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ca:	861a      	strh	r2, [r3, #48]	@ 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800d1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800d1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d2:	6a1b      	ldr	r3, [r3, #32]
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	f7fd fb62 	bl	800a8a0 <VL53LX_rate_maths>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	461a      	mov	r2, r3
 800d1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e2:	865a      	strh	r2, [r3, #50]	@ 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800d1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ec:	6a1b      	ldr	r3, [r3, #32]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	f7fd fb55 	bl	800a8a0 <VL53LX_rate_maths>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fc:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800d202:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800d204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d206:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		count_rate_total =
 800d208:	4413      	add	r3, r2
 800d20a:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800d20c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d210:	2b01      	cmp	r3, #1
 800d212:	d905      	bls.n	800d220 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800d214:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d218:	69ba      	ldr	r2, [r7, #24]
 800d21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d21e:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800d220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d222:	8ada      	ldrh	r2, [r3, #22]
 800d224:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d228:	69b9      	ldr	r1, [r7, #24]
 800d22a:	2006      	movs	r0, #6
 800d22c:	f7fd fb7d 	bl	800a92a <VL53LX_rate_per_spad_maths>
 800d230:	4603      	mov	r3, r0
 800d232:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800d234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d236:	86da      	strh	r2, [r3, #54]	@ 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800d238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23e:	8ad9      	ldrh	r1, [r3, #22]
 800d240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d242:	69db      	ldr	r3, [r3, #28]
 800d244:	461a      	mov	r2, r3
 800d246:	f7fd f90c 	bl	800a462 <VL53LX_events_per_spad_maths>
 800d24a:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800d24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24e:	639a      	str	r2, [r3, #56]	@ 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800d250:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3720      	adds	r7, #32
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800d25c:	b590      	push	{r4, r7, lr}
 800d25e:	b085      	sub	sp, #20
 800d260:	af02      	add	r7, sp, #8
 800d262:	4603      	mov	r3, r0
 800d264:	603a      	str	r2, [r7, #0]
 800d266:	80fb      	strh	r3, [r7, #6]
 800d268:	460b      	mov	r3, r1
 800d26a:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	8a58      	ldrh	r0, [r3, #18]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	8a9c      	ldrh	r4, [r3, #20]
 800d278:	88fb      	ldrh	r3, [r7, #6]
 800d27a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d27e:	9201      	str	r2, [sp, #4]
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	2300      	movs	r3, #0
 800d284:	4622      	mov	r2, r4
 800d286:	f7fd fb85 	bl	800a994 <VL53LX_range_maths>
 800d28a:	4603      	mov	r3, r0
 800d28c:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	8a58      	ldrh	r0, [r3, #18]
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	8a9c      	ldrh	r4, [r3, #20]
 800d2a2:	88fb      	ldrh	r3, [r7, #6]
 800d2a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d2a8:	9201      	str	r2, [sp, #4]
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	4622      	mov	r2, r4
 800d2b0:	f7fd fb70 	bl	800a994 <VL53LX_range_maths>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	8a58      	ldrh	r0, [r3, #18]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	8a9c      	ldrh	r4, [r3, #20]
 800d2cc:	88fb      	ldrh	r3, [r7, #6]
 800d2ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d2d2:	9201      	str	r2, [sp, #4]
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	4622      	mov	r2, r4
 800d2da:	f7fd fb5b 	bl	800a994 <VL53LX_range_maths>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48




	LOG_FUNCTION_END(0);
}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd90      	pop	{r4, r7, pc}

0800d2f0 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800d300:	2300      	movs	r3, #0
 800d302:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800d304:	2300      	movs	r3, #0
 800d306:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800d308:	2300      	movs	r3, #0
 800d30a:	757b      	strb	r3, [r7, #21]





	memcpy(
 800d30c:	22ac      	movs	r2, #172	@ 0xac
 800d30e:	68b9      	ldr	r1, [r7, #8]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f00d ffaa 	bl	801b26a <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800d316:	2300      	movs	r3, #0
 800d318:	75fb      	strb	r3, [r7, #23]
 800d31a:	e008      	b.n	800d32e <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800d31c:	7dfa      	ldrb	r2, [r7, #23]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	3206      	adds	r2, #6
 800d322:	2100      	movs	r1, #0
 800d324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800d328:	7dfb      	ldrb	r3, [r7, #23]
 800d32a:	3301      	adds	r3, #1
 800d32c:	75fb      	strb	r3, [r7, #23]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7a5b      	ldrb	r3, [r3, #9]
 800d332:	7dfa      	ldrb	r2, [r7, #23]
 800d334:	429a      	cmp	r2, r3
 800d336:	d3f1      	bcc.n	800d31c <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800d338:	68f9      	ldr	r1, [r7, #12]
 800d33a:	68b8      	ldr	r0, [r7, #8]
 800d33c:	f000 f878 	bl	800d430 <VL53LX_f_030>
 800d340:	4603      	mov	r3, r0
 800d342:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	7a9a      	ldrb	r2, [r3, #10]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	7a9b      	ldrb	r3, [r3, #10]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d203      	bcs.n	800d358 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	7a9b      	ldrb	r3, [r3, #10]
 800d354:	75bb      	strb	r3, [r7, #22]
 800d356:	e002      	b.n	800d35e <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	7a9b      	ldrb	r3, [r3, #10]
 800d35c:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800d35e:	2300      	movs	r3, #0
 800d360:	75fb      	strb	r3, [r7, #23]
 800d362:	e05c      	b.n	800d41e <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800d364:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	db0f      	blt.n	800d38c <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800d36c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d370:	461a      	mov	r2, r3
 800d372:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d376:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	7a92      	ldrb	r2, [r2, #10]
 800d37c:	b252      	sxtb	r2, r2
 800d37e:	fb93 f1f2 	sdiv	r1, r3, r2
 800d382:	fb01 f202 	mul.w	r2, r1, r2
 800d386:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800d388:	757b      	strb	r3, [r7, #21]
 800d38a:	e013      	b.n	800d3b4 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	7a9b      	ldrb	r3, [r3, #10]
 800d390:	b25b      	sxtb	r3, r3
 800d392:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800d394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d398:	4619      	mov	r1, r3
 800d39a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d39e:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800d3a0:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	7a92      	ldrb	r2, [r2, #10]
 800d3a6:	b252      	sxtb	r2, r2
 800d3a8:	fb93 f1f2 	sdiv	r1, r3, r2
 800d3ac:	fb01 f202 	mul.w	r2, r1, r2
 800d3b0:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800d3b2:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800d3b4:	7d7b      	ldrb	r3, [r7, #21]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	3206      	adds	r2, #6
 800d3bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800d3c0:	7df9      	ldrb	r1, [r7, #23]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3106      	adds	r1, #6
 800d3c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	dd12      	ble.n	800d3f4 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800d3ce:	7d7b      	ldrb	r3, [r7, #21]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	3206      	adds	r2, #6
 800d3d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800d3da:	7df9      	ldrb	r1, [r7, #23]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3106      	adds	r1, #6
 800d3e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800d3e4:	7d79      	ldrb	r1, [r7, #21]
 800d3e6:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800d3e8:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	1d82      	adds	r2, r0, #6
 800d3ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d3f2:	e006      	b.n	800d402 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800d3f4:	7d7b      	ldrb	r3, [r7, #21]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	3206      	adds	r2, #6
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800d402:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800d404:	7d7b      	ldrb	r3, [r7, #21]
 800d406:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	3206      	adds	r2, #6
 800d40c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	1d82      	adds	r2, r0, #6
 800d414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800d418:	7dfb      	ldrb	r3, [r7, #23]
 800d41a:	3301      	adds	r3, #1
 800d41c:	75fb      	strb	r3, [r7, #23]
 800d41e:	7dfa      	ldrb	r2, [r7, #23]
 800d420:	7dbb      	ldrb	r3, [r7, #22]
 800d422:	429a      	cmp	r2, r3
 800d424:	d39e      	bcc.n	800d364 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800d426:	bf00      	nop
 800d428:	bf00      	nop
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800d442:	2300      	movs	r3, #0
 800d444:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800d446:	2300      	movs	r3, #0
 800d448:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d450:	4618      	mov	r0, r3
 800d452:	f7fd fb87 	bl	800ab64 <VL53LX_decode_vcsel_period>
 800d456:	4603      	mov	r3, r0
	period = 2048 *
 800d458:	02db      	lsls	r3, r3, #11
 800d45a:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00a      	beq.n	800d478 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		remapped_phase =
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	fb01 f202 	mul.w	r2, r1, r2
 800d474:	1a9b      	subs	r3, r3, r2
 800d476:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800d47e:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800d480:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	dd09      	ble.n	800d4a0 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d492:	2b00      	cmp	r3, #0
 800d494:	da01      	bge.n	800d49a <VL53LX_f_030+0x6a>
 800d496:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800d49a:	12db      	asrs	r3, r3, #11
 800d49c:	75fb      	strb	r3, [r7, #23]
 800d49e:	e008      	b.n	800d4b2 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	da01      	bge.n	800d4ae <VL53LX_f_030+0x7e>
 800d4aa:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800d4ae:	12db      	asrs	r3, r3, #11
 800d4b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800d4b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b08e      	sub	sp, #56	@ 0x38
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t  bin_seq_length = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t  repeat_count   = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t  lc       = 0;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t  i       = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800d4f0:	22ac      	movs	r2, #172	@ 0xac
 800d4f2:	6879      	ldr	r1, [r7, #4]
 800d4f4:	6838      	ldr	r0, [r7, #0]
 800d4f6:	f00d feb8 	bl	801b26a <memcpy>


	podata->VL53LX_p_021 = 0;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800d500:	2300      	movs	r3, #0
 800d502:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d506:	e00a      	b.n	800d51e <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800d508:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d50c:	683a      	ldr	r2, [r7, #0]
 800d50e:	4413      	add	r3, r2
 800d510:	2210      	movs	r2, #16
 800d512:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800d514:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d518:	3301      	adds	r3, #1
 800d51a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d51e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d522:	2b05      	cmp	r3, #5
 800d524:	d9f0      	bls.n	800d508 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800d526:	2300      	movs	r3, #0
 800d528:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d52c:	e00b      	b.n	800d546 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800d52e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	3206      	adds	r2, #6
 800d536:	2100      	movs	r1, #0
 800d538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800d53c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d540:	3301      	adds	r3, #1
 800d542:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	7a5b      	ldrb	r3, [r3, #9]
 800d54a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800d54e:	429a      	cmp	r2, r3
 800d550:	d3ed      	bcc.n	800d52e <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800d552:	2300      	movs	r3, #0
 800d554:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d558:	e012      	b.n	800d580 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 800d55a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d55e:	3338      	adds	r3, #56	@ 0x38
 800d560:	443b      	add	r3, r7
 800d562:	2200      	movs	r2, #0
 800d564:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800d568:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d56c:	3338      	adds	r3, #56	@ 0x38
 800d56e:	443b      	add	r3, r7
 800d570:	2200      	movs	r2, #0
 800d572:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800d576:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d57a:	3301      	adds	r3, #1
 800d57c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d580:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d584:	2b0f      	cmp	r3, #15
 800d586:	d9e8      	bls.n	800d55a <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800d588:	2300      	movs	r3, #0
 800d58a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800d58e:	2300      	movs	r3, #0
 800d590:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d594:	e068      	b.n	800d668 <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 800d596:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	4413      	add	r3, r2
 800d59e:	7b1b      	ldrb	r3, [r3, #12]
 800d5a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800d5a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d5a8:	3338      	adds	r3, #56	@ 0x38
 800d5aa:	443b      	add	r3, r7
 800d5ac:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d115      	bne.n	800d5e0 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800d5b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d5b8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d5bc:	0092      	lsls	r2, r2, #2
 800d5be:	b2d2      	uxtb	r2, r2
 800d5c0:	3338      	adds	r3, #56	@ 0x38
 800d5c2:	443b      	add	r3, r7
 800d5c4:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800d5c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d5cc:	683a      	ldr	r2, [r7, #0]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800d5d4:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800d5d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d5da:	3301      	adds	r3, #1
 800d5dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800d5e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d5e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d5e8:	443a      	add	r2, r7
 800d5ea:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800d5ee:	3201      	adds	r2, #1
 800d5f0:	b2d2      	uxtb	r2, r2
 800d5f2:	3338      	adds	r3, #56	@ 0x38
 800d5f4:	443b      	add	r3, r7
 800d5f6:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800d5fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d5fe:	3338      	adds	r3, #56	@ 0x38
 800d600:	443b      	add	r3, r7
 800d602:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800d606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		for (i = 0 ; i < 4 ; i++)
 800d60a:	2300      	movs	r3, #0
 800d60c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800d610:	e021      	b.n	800d656 <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 800d612:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800d616:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d61a:	441a      	add	r2, r3
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	3206      	adds	r2, #6
 800d620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800d624:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d628:	009a      	lsls	r2, r3, #2
 800d62a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d62e:	441a      	add	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3206      	adds	r2, #6
 800d634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800d638:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800d63c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800d640:	4402      	add	r2, r0
 800d642:	4419      	add	r1, r3
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	3206      	adds	r2, #6
 800d648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800d64c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d650:	3301      	adds	r3, #1
 800d652:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800d656:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d9d9      	bls.n	800d612 <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800d65e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d662:	3301      	adds	r3, #1
 800d664:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d668:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d66c:	2b05      	cmp	r3, #5
 800d66e:	d992      	bls.n	800d596 <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800d670:	2300      	movs	r3, #0
 800d672:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d676:	e022      	b.n	800d6be <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 800d678:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d67c:	683a      	ldr	r2, [r7, #0]
 800d67e:	4413      	add	r3, r2
 800d680:	7b1b      	ldrb	r3, [r3, #12]
 800d682:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800d686:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d68a:	2b0f      	cmp	r3, #15
 800d68c:	d80c      	bhi.n	800d6a8 <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800d68e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
			podata->bin_rep[lc] =
 800d692:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
				bin_repeat_count[bin_cfg];
 800d696:	3238      	adds	r2, #56	@ 0x38
 800d698:	443a      	add	r2, r7
 800d69a:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	460a      	mov	r2, r1
 800d6a4:	749a      	strb	r2, [r3, #18]
 800d6a6:	e005      	b.n	800d6b4 <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 800d6a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d6ac:	683a      	ldr	r2, [r7, #0]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800d6b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d6be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d6c2:	2b05      	cmp	r3, #5
 800d6c4:	d9d8      	bls.n	800d678 <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800d6c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d6d8:	e050      	b.n	800d77c <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800d6da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d6de:	3338      	adds	r3, #56	@ 0x38
 800d6e0:	443b      	add	r3, r7
 800d6e2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800d6e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if (repeat_count > 0) {
 800d6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dd41      	ble.n	800d772 <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 800d6ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d6f2:	3338      	adds	r3, #56	@ 0x38
 800d6f4:	443b      	add	r3, r7
 800d6f6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800d6fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800d6fe:	2300      	movs	r3, #0
 800d700:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800d704:	e031      	b.n	800d76a <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 800d706:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800d70a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d70e:	441a      	add	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	3206      	adds	r2, #6
 800d714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800d718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71a:	0fda      	lsrs	r2, r3, #31
 800d71c:	4413      	add	r3, r2
 800d71e:	105b      	asrs	r3, r3, #1
 800d720:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800d722:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800d726:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d72a:	441a      	add	r2, r3
 800d72c:	4401      	add	r1, r0
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	3206      	adds	r2, #6
 800d732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800d736:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800d73a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d73e:	441a      	add	r2, r3
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	3206      	adds	r2, #6
 800d744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d748:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800d74c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d750:	441a      	add	r2, r3
 800d752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d754:	fb91 f1f3 	sdiv	r1, r1, r3
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	3206      	adds	r2, #6
 800d75c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800d760:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d764:	3301      	adds	r3, #1
 800d766:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800d76a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d9c9      	bls.n	800d706 <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800d772:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d776:	3301      	adds	r3, #1
 800d778:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800d77c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d780:	2b0f      	cmp	r3, #15
 800d782:	d9aa      	bls.n	800d6da <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2200      	movs	r2, #0
 800d788:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 800d790:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	2204      	movs	r2, #4
 800d79a:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800d79c:	f997 3034 	ldrsb.w	r3, [r7, #52]	@ 0x34
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3738      	adds	r7, #56	@ 0x38
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800d7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7aa:	b0cb      	sub	sp, #300	@ 0x12c
 800d7ac:	af06      	add	r7, sp, #24
 800d7ae:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800d7b2:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800d7b6:	6020      	str	r0, [r4, #0]
 800d7b8:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800d7bc:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800d7c0:	6001      	str	r1, [r0, #0]
 800d7c2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800d7c6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800d7ca:	600a      	str	r2, [r1, #0]
 800d7cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800d7d0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800d7d4:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800d7dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800d7e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800d7ec:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800d7f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800d7f4:	f107 0318 	add.w	r3, r7, #24
 800d7f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800d800:	2300      	movs	r3, #0
 800d802:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	uint8_t  xtalk_enable                  = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	uint8_t  r                             = 0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	uint8_t  t                             = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


	int16_t  delta_mm                      = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800d824:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d828:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d82c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800d830:	6818      	ldr	r0, [r3, #0]
 800d832:	f7ff fe44 	bl	800d4be <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800d836:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d83a:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800d83c:	4619      	mov	r1, r3
 800d83e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d842:	3348      	adds	r3, #72	@ 0x48
 800d844:	461a      	mov	r2, r3
 800d846:	2000      	movs	r0, #0
 800d848:	f7fd f9dd 	bl	800ac06 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800d84c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d850:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d854:	3348      	adds	r3, #72	@ 0x48
 800d856:	4619      	mov	r1, r3
 800d858:	4610      	mov	r0, r2
 800d85a:	f7fd f996 	bl	800ab8a <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800d85e:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800d862:	2b00      	cmp	r3, #0
 800d864:	d142      	bne.n	800d8ec <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800d866:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d86a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800d874:	2b00      	cmp	r3, #0
 800d876:	d039      	beq.n	800d8ec <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 800d878:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d87c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800d884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d888:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	@ 0x30
 800d892:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d896:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	@ 0x32
 800d8a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800d8ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800d8b2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800d8b6:	6812      	ldr	r2, [r2, #0]
 800d8b8:	f892 20a8 	ldrb.w	r2, [r2, #168]	@ 0xa8
 800d8bc:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800d8c0:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800d8c4:	6809      	ldr	r1, [r1, #0]
 800d8c6:	f891 10a9 	ldrb.w	r1, [r1, #169]	@ 0xa9
 800d8ca:	f107 0014 	add.w	r0, r7, #20
 800d8ce:	9004      	str	r0, [sp, #16]
 800d8d0:	9103      	str	r1, [sp, #12]
 800d8d2:	9202      	str	r2, [sp, #8]
 800d8d4:	9301      	str	r3, [sp, #4]
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	2300      	movs	r3, #0
 800d8dc:	4632      	mov	r2, r6
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f002 f920 	bl	800fb26 <VL53LX_f_032>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800d8ec:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d115      	bne.n	800d920 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800d8f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00c      	beq.n	800d920 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 800d906:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d910:	3348      	adds	r3, #72	@ 0x48
 800d912:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800d916:	f002 fb75 	bl	8010004 <VL53LX_f_033>
 800d91a:	4603      	mov	r3, r0
 800d91c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800d920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d924:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
	presults->xmonitor.total_periods_elapsed =
 800d928:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d92c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800d930:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d934:	f8b3 207c 	ldrh.w	r2, [r3, #124]	@ 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800d938:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d93c:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800d940:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d944:	2200      	movs	r2, #0
 800d946:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800d94a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d94e:	2200      	movs	r2, #0
 800d950:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

	presults->xmonitor.range_id     = 0;
 800d954:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d958:	2200      	movs	r2, #0
 800d95a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800d95e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d962:	2200      	movs	r2, #0
 800d964:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e



	xtalk_enable = 0;
 800d968:	2300      	movs	r3, #0
 800d96a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d96e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d972:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d002      	beq.n	800d986 <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 800d980:	2301      	movs	r3, #1
 800d982:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800d986:	2300      	movs	r3, #0
 800d988:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800d98c:	e108      	b.n	800dba0 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800d98e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d992:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800d99c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28



		status =
		VL53LX_f_025(
 800d9a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d9a4:	3348      	adds	r3, #72	@ 0x48
 800d9a6:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800d9aa:	7814      	ldrb	r4, [r2, #0]
 800d9ac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800d9b0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800d9b4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800d9b8:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800d9bc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800d9c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d9c4:	9405      	str	r4, [sp, #20]
 800d9c6:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 800d9ca:	9404      	str	r4, [sp, #16]
 800d9cc:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 800d9d0:	9403      	str	r4, [sp, #12]
 800d9d2:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 800d9d6:	9402      	str	r4, [sp, #8]
 800d9d8:	f8d7 4104 	ldr.w	r4, [r7, #260]	@ 0x104
 800d9dc:	9401      	str	r4, [sp, #4]
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d9e4:	6812      	ldr	r2, [r2, #0]
 800d9e6:	6809      	ldr	r1, [r1, #0]
 800d9e8:	6800      	ldr	r0, [r0, #0]
 800d9ea:	f7fe fe65 	bl	800c6b8 <VL53LX_f_025>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800d9f4:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f040 80cb 	bne.w	800db94 <VL53LX_hist_process_data+0x3ec>
 800d9fe:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800da02:	2b00      	cmp	r3, #0
 800da04:	f040 80c6 	bne.w	800db94 <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 800da08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800da0c:	7c9b      	ldrb	r3, [r3, #18]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d110      	bne.n	800da34 <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 800da12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800da16:	3314      	adds	r3, #20
 800da18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800da1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da20:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800da22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da26:	869a      	strh	r2, [r3, #52]	@ 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800da28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da2c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800da2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da32:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800da34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800da40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800da44:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	461a      	mov	r2, r3
 800da4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da50:	fb02 f303 	mul.w	r3, r2, r3
 800da54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800da58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da5c:	011b      	lsls	r3, r3, #4
 800da5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800da62:	2300      	movs	r3, #0
 800da64:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800da68:	e08b      	b.n	800db82 <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 800da6a:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800da6e:	224c      	movs	r2, #76	@ 0x4c
 800da70:	fb02 f303 	mul.w	r3, r2, r3
 800da74:	3310      	adds	r3, #16
 800da76:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800da7a:	4413      	add	r3, r2
 800da7c:	3304      	adds	r3, #4
 800da7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800da82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da86:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 800da8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da8e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800da92:	429a      	cmp	r2, r3
 800da94:	dd0e      	ble.n	800dab4 <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 800da96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da9a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800da9e:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800daa0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800daa4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800daa8:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	b29b      	uxth	r3, r3
				delta_mm =
 800daae:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800dab2:	e00d      	b.n	800dad0 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 800dab4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dab8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800dabc:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800dabe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dac2:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 800dac6:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	b29b      	uxth	r3, r3
				delta_mm =
 800dacc:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800dad0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dad4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
			XtalkDetectMaxSigma =
 800dadc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800dae0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800daec:	fb02 f303 	mul.w	r3, r2, r3
 800daf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			XtalkDetectMaxSigma <<= 5;
 800daf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800daf8:	015b      	lsls	r3, r3, #5
 800dafa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			if (pdata->median_range_mm  >
 800dafe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800db02:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800db06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
			if (pdata->median_range_mm  >
 800db14:	429a      	cmp	r2, r3
 800db16:	dd2f      	ble.n	800db78 <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 800db18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800db1c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	@ 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800db20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800db2e:	429a      	cmp	r2, r3
 800db30:	da22      	bge.n	800db78 <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 800db32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800db36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800db38:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d91b      	bls.n	800db78 <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800db40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800db44:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800db46:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800db48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d913      	bls.n	800db78 <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 800db50:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800db54:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800db58:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800db5c:	6812      	ldr	r2, [r2, #0]
 800db5e:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800db60:	4293      	cmp	r3, r2
 800db62:	da09      	bge.n	800db78 <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 800db64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800db68:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
				memcpy(
 800db6c:	224c      	movs	r2, #76	@ 0x4c
 800db6e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 800db72:	4618      	mov	r0, r3
 800db74:	f00d fb79 	bl	801b26a <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800db78:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800db7c:	3301      	adds	r3, #1
 800db7e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800db82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800db86:	7c9b      	ldrb	r3, [r3, #18]
 800db88:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800db8c:	429a      	cmp	r2, r3
 800db8e:	f4ff af6c 	bcc.w	800da6a <VL53LX_hist_process_data+0x2c2>
 800db92:	e000      	b.n	800db96 <VL53LX_hist_process_data+0x3ee>
			continue;
 800db94:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800db96:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800db9a:	3301      	adds	r3, #1
 800db9c:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800dba0:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800dba4:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	f67f aef0 	bls.w	800d98e <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800dbae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbb2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800dbbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	LOG_FUNCTION_END(status);

	return status;
 800dbc0:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbce <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b086      	sub	sp, #24
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	60f8      	str	r0, [r7, #12]
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	607a      	str	r2, [r7, #4]
 800dbda:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800dbe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d104      	bne.n	800dbf2 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7f9 fc83 	bl	80074f4 <VL53LX_disable_firmware>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800dbf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d104      	bne.n	800dc04 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f7f9 fcaa 	bl	8007554 <VL53LX_enable_powerforce>
 800dc00:	4603      	mov	r3, r0
 800dc02:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800dc04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d105      	bne.n	800dc18 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800dc0c:	21fa      	movs	r1, #250	@ 0xfa
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f004 facc 	bl	80121ac <VL53LX_WaitUs>
 800dc14:	4603      	mov	r3, r0
 800dc16:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800dc18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d107      	bne.n	800dc30 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800dc20:	2201      	movs	r2, #1
 800dc22:	f240 7181 	movw	r1, #1921	@ 0x781
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f004 f9d2 	bl	8011fd0 <VL53LX_WrByte>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800dc30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d107      	bne.n	800dc48 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800dc38:	2205      	movs	r2, #5
 800dc3a:	f240 6183 	movw	r1, #1667	@ 0x683
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f004 f9c6 	bl	8011fd0 <VL53LX_WrByte>
 800dc44:	4603      	mov	r3, r0
 800dc46:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800dc48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d105      	bne.n	800dc5c <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800dc50:	6879      	ldr	r1, [r7, #4]
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f004 faaa 	bl	80121ac <VL53LX_WaitUs>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800dc5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d107      	bne.n	800dc74 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800dc64:	2201      	movs	r2, #1
 800dc66:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f004 f9b0 	bl	8011fd0 <VL53LX_WrByte>
 800dc70:	4603      	mov	r3, r0
 800dc72:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800dc74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d108      	bne.n	800dc8e <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800dc7c:	897b      	ldrh	r3, [r7, #10]
 800dc7e:	461a      	mov	r2, r3
 800dc80:	f240 7184 	movw	r1, #1924	@ 0x784
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f004 f9cd 	bl	8012024 <VL53LX_WrWord>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800dc8e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3718      	adds	r7, #24
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b086      	sub	sp, #24
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	60f8      	str	r0, [r7, #12]
 800dca2:	607b      	str	r3, [r7, #4]
 800dca4:	460b      	mov	r3, r1
 800dca6:	72fb      	strb	r3, [r7, #11]
 800dca8:	4613      	mov	r3, r2
 800dcaa:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800dcac:	2300      	movs	r3, #0
 800dcae:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800dcb4:	7afb      	ldrb	r3, [r7, #11]
 800dcb6:	75bb      	strb	r3, [r7, #22]
 800dcb8:	e041      	b.n	800dd3e <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800dcba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d108      	bne.n	800dcd4 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800dcc2:	7dbb      	ldrb	r3, [r7, #22]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	f240 7194 	movw	r1, #1940	@ 0x794
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f004 f980 	bl	8011fd0 <VL53LX_WrByte>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800dcd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d107      	bne.n	800dcec <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f240 7183 	movw	r1, #1923	@ 0x783
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f004 f974 	bl	8011fd0 <VL53LX_WrByte>
 800dce8:	4603      	mov	r3, r0
 800dcea:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800dcec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d105      	bne.n	800dd00 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800dcf4:	2105      	movs	r1, #5
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f004 fa58 	bl	80121ac <VL53LX_WaitUs>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800dd00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d107      	bne.n	800dd18 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f240 7183 	movw	r1, #1923	@ 0x783
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f004 f95e 	bl	8011fd0 <VL53LX_WrByte>
 800dd14:	4603      	mov	r3, r0
 800dd16:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800dd18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d108      	bne.n	800dd32 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800dd20:	2304      	movs	r3, #4
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	f44f 61f2 	mov.w	r1, #1936	@ 0x790
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f004 f91b 	bl	8011f64 <VL53LX_ReadMulti>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	3304      	adds	r3, #4
 800dd36:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800dd38:	7dbb      	ldrb	r3, [r7, #22]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	75bb      	strb	r3, [r7, #22]
 800dd3e:	7dba      	ldrb	r2, [r7, #22]
 800dd40:	7af9      	ldrb	r1, [r7, #11]
 800dd42:	7abb      	ldrb	r3, [r7, #10]
 800dd44:	440b      	add	r3, r1
 800dd46:	429a      	cmp	r2, r3
 800dd48:	dbb7      	blt.n	800dcba <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800dd4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3718      	adds	r7, #24
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b084      	sub	sp, #16
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800dd62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d107      	bne.n	800dd7a <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	f240 7183 	movw	r1, #1923	@ 0x783
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f004 f92d 	bl	8011fd0 <VL53LX_WrByte>
 800dd76:	4603      	mov	r3, r0
 800dd78:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800dd7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d107      	bne.n	800dd92 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800dd82:	2200      	movs	r2, #0
 800dd84:	f240 7181 	movw	r1, #1921	@ 0x781
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f004 f921 	bl	8011fd0 <VL53LX_WrByte>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800dd92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d104      	bne.n	800dda4 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7f9 fbec 	bl	8007578 <VL53LX_disable_powerforce>
 800dda0:	4603      	mov	r3, r0
 800dda2:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800dda4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d104      	bne.n	800ddb6 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7f9 fb8f 	bl	80074d0 <VL53LX_enable_firmware>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800ddb6:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800ddc2:	b480      	push	{r7}
 800ddc4:	b087      	sub	sp, #28
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	4603      	mov	r3, r0
 800ddca:	60b9      	str	r1, [r7, #8]
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800ddd8:	89fb      	ldrh	r3, [r7, #14]
 800ddda:	2b03      	cmp	r3, #3
 800dddc:	d802      	bhi.n	800dde4 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ddde:	f06f 0308 	mvn.w	r3, #8
 800dde2:	e017      	b.n	800de14 <VL53LX_nvm_decode_optical_centre+0x52>


	tmp  = 0x00F0;
 800dde4:	23f0      	movs	r3, #240	@ 0xf0
 800dde6:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	3302      	adds	r3, #2
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	8afb      	ldrh	r3, [r7, #22]
 800ddf2:	1a9b      	subs	r3, r3, r2
 800ddf4:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800ddf6:	8afb      	ldrh	r3, [r7, #22]
 800ddf8:	2bff      	cmp	r3, #255	@ 0xff
 800ddfa:	d901      	bls.n	800de00 <VL53LX_nvm_decode_optical_centre+0x3e>
		tmp = 0;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800de00:	8afb      	ldrh	r3, [r7, #22]
 800de02:	b2da      	uxtb	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	78da      	ldrb	r2, [r3, #3]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	705a      	strb	r2, [r3, #1]

	return status;
 800de10:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800de14:	4618      	mov	r0, r3
 800de16:	371c      	adds	r7, #28
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800de20:	b590      	push	{r4, r7, lr}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800de2e:	2300      	movs	r3, #0
 800de30:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800de32:	2300      	movs	r3, #0
 800de34:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800de3a:	89fb      	ldrh	r3, [r7, #14]
 800de3c:	2b37      	cmp	r3, #55	@ 0x37
 800de3e:	d802      	bhi.n	800de46 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800de40:	f06f 0308 	mvn.w	r3, #8
 800de44:	e03e      	b.n	800dec4 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800de46:	68b9      	ldr	r1, [r7, #8]
 800de48:	2002      	movs	r0, #2
 800de4a:	f7f9 fa42 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800de4e:	4603      	mov	r3, r0
 800de50:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	3302      	adds	r3, #2
 800de5a:	4619      	mov	r1, r3
 800de5c:	2002      	movs	r0, #2
 800de5e:	f7f9 fa38 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800de62:	4603      	mov	r3, r0
 800de64:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800de6e:	099b      	lsrs	r3, r3, #6
 800de70:	b29a      	uxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2219      	movs	r2, #25
 800de7a:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2205      	movs	r2, #5
 800de80:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2205      	movs	r2, #5
 800de86:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	3304      	adds	r3, #4
 800de8c:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800de8e:	2300      	movs	r3, #0
 800de90:	74fb      	strb	r3, [r7, #19]
 800de92:	e012      	b.n	800deba <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800de94:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800de96:	6979      	ldr	r1, [r7, #20]
 800de98:	2002      	movs	r0, #2
 800de9a:	f7f9 fa1a 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800de9e:	4603      	mov	r3, r0
 800dea0:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	1d23      	adds	r3, r4, #4
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	460a      	mov	r2, r1
 800deac:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	3302      	adds	r3, #2
 800deb2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800deb4:	7cfb      	ldrb	r3, [r7, #19]
 800deb6:	3301      	adds	r3, #1
 800deb8:	74fb      	strb	r3, [r7, #19]
 800deba:	7cfb      	ldrb	r3, [r7, #19]
 800debc:	2b18      	cmp	r3, #24
 800debe:	d9e9      	bls.n	800de94 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800dec0:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	371c      	adds	r7, #28
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd90      	pop	{r4, r7, pc}

0800decc <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800deda:	2300      	movs	r3, #0
 800dedc:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800dede:	89fb      	ldrh	r3, [r7, #14]
 800dee0:	2b07      	cmp	r3, #7
 800dee2:	d802      	bhi.n	800deea <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800dee4:	f06f 0308 	mvn.w	r3, #8
 800dee8:	e027      	b.n	800df3a <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800deea:	68b9      	ldr	r1, [r7, #8]
 800deec:	2002      	movs	r0, #2
 800deee:	f7f9 f9f0 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800def2:	4603      	mov	r3, r0
 800def4:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	3302      	adds	r3, #2
 800defe:	4619      	mov	r1, r3
 800df00:	2002      	movs	r0, #2
 800df02:	f7f9 f9e6 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800df06:	4603      	mov	r3, r0
 800df08:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	3304      	adds	r3, #4
 800df12:	4619      	mov	r1, r3
 800df14:	2002      	movs	r0, #2
 800df16:	f7f9 f9dc 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800df1a:	4603      	mov	r3, r0
 800df1c:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	3306      	adds	r3, #6
 800df26:	4619      	mov	r1, r3
 800df28:	2002      	movs	r0, #2
 800df2a:	f7f9 f9d2 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	80da      	strh	r2, [r3, #6]

	return status;
 800df36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3718      	adds	r7, #24
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b086      	sub	sp, #24
 800df46:	af00      	add	r7, sp, #0
 800df48:	4603      	mov	r3, r0
 800df4a:	60b9      	str	r1, [r7, #8]
 800df4c:	607a      	str	r2, [r7, #4]
 800df4e:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800df50:	2300      	movs	r3, #0
 800df52:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800df54:	89fb      	ldrh	r3, [r7, #14]
 800df56:	2b0f      	cmp	r3, #15
 800df58:	d802      	bhi.n	800df60 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800df5a:	f06f 0308 	mvn.w	r3, #8
 800df5e:	e04d      	b.n	800dffc <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800df60:	68b9      	ldr	r1, [r7, #8]
 800df62:	2002      	movs	r0, #2
 800df64:	f7f9 f9b5 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800df68:	4603      	mov	r3, r0
 800df6a:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	789a      	ldrb	r2, [r3, #2]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	78da      	ldrb	r2, [r3, #3]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	3304      	adds	r3, #4
 800df84:	4619      	mov	r1, r3
 800df86:	2002      	movs	r0, #2
 800df88:	f7f9 f9a3 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800df8c:	4603      	mov	r3, r0
 800df8e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	3306      	adds	r3, #6
 800df98:	4619      	mov	r1, r3
 800df9a:	2002      	movs	r0, #2
 800df9c:	f7f9 f999 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	3308      	adds	r3, #8
 800dfac:	4619      	mov	r1, r3
 800dfae:	2002      	movs	r0, #2
 800dfb0:	f7f9 f98f 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	330a      	adds	r3, #10
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	2002      	movs	r0, #2
 800dfc4:	f7f9 f985 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	330c      	adds	r3, #12
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	2002      	movs	r0, #2
 800dfd8:	f7f9 f97b 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	330e      	adds	r3, #14
 800dfe8:	4619      	mov	r1, r3
 800dfea:	2002      	movs	r0, #2
 800dfec:	f7f9 f971 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800dff0:	4603      	mov	r3, r0
 800dff2:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	81da      	strh	r2, [r3, #14]

	return status;
 800dff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b086      	sub	sp, #24
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	607b      	str	r3, [r7, #4]
 800e00e:	460b      	mov	r3, r1
 800e010:	72fb      	strb	r3, [r7, #11]
 800e012:	4613      	mov	r3, r2
 800e014:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e016:	2300      	movs	r3, #0
 800e018:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800e01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d106      	bne.n	800e030 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800e022:	2232      	movs	r2, #50	@ 0x32
 800e024:	2104      	movs	r1, #4
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f7ff fdd1 	bl	800dbce <VL53LX_nvm_enable>
 800e02c:	4603      	mov	r3, r0
 800e02e:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800e030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d107      	bne.n	800e048 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800e038:	7aba      	ldrb	r2, [r7, #10]
 800e03a:	7af9      	ldrb	r1, [r7, #11]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f7ff fe2b 	bl	800dc9a <VL53LX_nvm_read>
 800e044:	4603      	mov	r3, r0
 800e046:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800e048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d104      	bne.n	800e05a <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f7ff fe80 	bl	800dd56 <VL53LX_nvm_disable>
 800e056:	4603      	mov	r3, r0
 800e058:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800e05a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800e05e:	4618      	mov	r0, r3
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b084      	sub	sp, #16
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e070:	2300      	movs	r3, #0
 800e072:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800e074:	f107 0308 	add.w	r3, r7, #8
 800e078:	2201      	movs	r2, #1
 800e07a:	212e      	movs	r1, #46	@ 0x2e
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7ff ffc1 	bl	800e004 <VL53LX_read_nvm_raw_data>
 800e082:	4603      	mov	r3, r0
 800e084:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800e086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d108      	bne.n	800e0a0 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800e08e:	f107 0308 	add.w	r3, r7, #8
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	4619      	mov	r1, r3
 800e096:	2004      	movs	r0, #4
 800e098:	f7ff fe93 	bl	800ddc2 <VL53LX_nvm_decode_optical_centre>
 800e09c:	4603      	mov	r3, r0
 800e09e:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800e0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b092      	sub	sp, #72	@ 0x48
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800e0bc:	f107 030c 	add.w	r3, r7, #12
 800e0c0:	220e      	movs	r2, #14
 800e0c2:	2157      	movs	r1, #87	@ 0x57
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff ff9d 	bl	800e004 <VL53LX_read_nvm_raw_data>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800e0d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d109      	bne.n	800e0ec <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800e0d8:	f107 030c 	add.w	r3, r7, #12
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	4619      	mov	r1, r3
 800e0e0:	2038      	movs	r0, #56	@ 0x38
 800e0e2:	f7ff fe9d 	bl	800de20 <VL53LX_nvm_decode_cal_peak_rate_map>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800e0ec:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3748      	adds	r7, #72	@ 0x48
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e102:	2300      	movs	r3, #0
 800e104:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800e106:	f107 030c 	add.w	r3, r7, #12
 800e10a:	2202      	movs	r2, #2
 800e10c:	2165      	movs	r1, #101	@ 0x65
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff ff78 	bl	800e004 <VL53LX_read_nvm_raw_data>
 800e114:	4603      	mov	r3, r0
 800e116:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800e118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d108      	bne.n	800e132 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800e120:	f107 030c 	add.w	r3, r7, #12
 800e124:	683a      	ldr	r2, [r7, #0]
 800e126:	4619      	mov	r1, r3
 800e128:	2008      	movs	r0, #8
 800e12a:	f7ff fecf 	bl	800decc <VL53LX_nvm_decode_additional_offset_cal_data>
 800e12e:	4603      	mov	r3, r0
 800e130:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800e132:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b08a      	sub	sp, #40	@ 0x28
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	460b      	mov	r3, r1
 800e148:	607a      	str	r2, [r7, #4]
 800e14a:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e14c:	2300      	movs	r3, #0
 800e14e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800e152:	897b      	ldrh	r3, [r7, #10]
 800e154:	089b      	lsrs	r3, r3, #2
 800e156:	b29b      	uxth	r3, r3
 800e158:	b2d9      	uxtb	r1, r3
 800e15a:	f107 0314 	add.w	r3, r7, #20
 800e15e:	2204      	movs	r2, #4
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f7ff ff4f 	bl	800e004 <VL53LX_read_nvm_raw_data>
 800e166:	4603      	mov	r3, r0
 800e168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800e16c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e170:	2b00      	cmp	r3, #0
 800e172:	d109      	bne.n	800e188 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800e174:	f107 0314 	add.w	r3, r7, #20
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	4619      	mov	r1, r3
 800e17c:	2010      	movs	r0, #16
 800e17e:	f7ff fee0 	bl	800df42 <VL53LX_nvm_decode_fmt_range_results_data>
 800e182:	4603      	mov	r3, r0
 800e184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800e188:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3728      	adds	r7, #40	@ 0x28
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	460b      	mov	r3, r1
 800e19e:	607a      	str	r2, [r7, #4]
 800e1a0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800e1a6:	897b      	ldrh	r3, [r7, #10]
 800e1a8:	2b0a      	cmp	r3, #10
 800e1aa:	d802      	bhi.n	800e1b2 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e1ac:	f06f 0309 	mvn.w	r3, #9
 800e1b0:	e047      	b.n	800e242 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1ba:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e1c8:	f002 020f 	and.w	r2, r2, #15
 800e1cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e1ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e1d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e1dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e1de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e1e8:	f002 0203 	and.w	r2, r2, #3
 800e1ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e1ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e1f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e1fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e1fe:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	88d8      	ldrh	r0, [r3, #6]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	3305      	adds	r3, #5
 800e208:	461a      	mov	r2, r3
 800e20a:	2102      	movs	r1, #2
 800e20c:	f7f9 f836 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e218:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e22c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e230:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e232:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e23c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e23e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3718      	adds	r7, #24
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b086      	sub	sp, #24
 800e24e:	af00      	add	r7, sp, #0
 800e250:	4603      	mov	r3, r0
 800e252:	60b9      	str	r1, [r7, #8]
 800e254:	607a      	str	r2, [r7, #4]
 800e256:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e258:	2300      	movs	r3, #0
 800e25a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800e25c:	89fb      	ldrh	r3, [r7, #14]
 800e25e:	2b0a      	cmp	r3, #10
 800e260:	d802      	bhi.n	800e268 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e262:	f06f 0309 	mvn.w	r3, #9
 800e266:	e046      	b.n	800e2f6 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e270:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	3301      	adds	r3, #1
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	f003 030f 	and.w	r3, r3, #15
 800e280:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	3302      	adds	r3, #2
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e290:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	3303      	adds	r3, #3
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	f003 0303 	and.w	r3, r3, #3
 800e2a0:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2b0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	3305      	adds	r3, #5
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	2002      	movs	r0, #2
 800e2be:	f7f9 f808 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	79da      	ldrb	r2, [r3, #7]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	7a1a      	ldrb	r2, [r3, #8]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	3309      	adds	r3, #9
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2e4:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	7a9a      	ldrb	r2, [r3, #10]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e2f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3718      	adds	r7, #24
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b086      	sub	sp, #24
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e308:	2300      	movs	r3, #0
 800e30a:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800e30c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d108      	bne.n	800e326 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800e314:	f107 020c 	add.w	r2, r7, #12
 800e318:	230b      	movs	r3, #11
 800e31a:	2101      	movs	r1, #1
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f003 fe21 	bl	8011f64 <VL53LX_ReadMulti>
 800e322:	4603      	mov	r3, r0
 800e324:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800e326:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d108      	bne.n	800e340 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800e32e:	f107 030c 	add.w	r3, r7, #12
 800e332:	683a      	ldr	r2, [r7, #0]
 800e334:	4619      	mov	r1, r3
 800e336:	200b      	movs	r0, #11
 800e338:	f7ff ff87 	bl	800e24a <VL53LX_i2c_decode_static_nvm_managed>
 800e33c:	4603      	mov	r3, r0
 800e33e:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e340:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3718      	adds	r7, #24
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	460b      	mov	r3, r1
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e35a:	2300      	movs	r3, #0
 800e35c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800e35e:	897b      	ldrh	r3, [r7, #10]
 800e360:	2b16      	cmp	r3, #22
 800e362:	d802      	bhi.n	800e36a <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e364:	f06f 0309 	mvn.w	r3, #9
 800e368:	e076      	b.n	800e458 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e37a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e384:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e38e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800e398:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e3a2:	f002 020f 	and.w	r2, r2, #15
 800e3a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e3a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800e3ae:	68fa      	ldr	r2, [r7, #12]
 800e3b0:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800e3b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e3bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e3c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e3c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800e3cc:	f002 0203 	and.w	r2, r2, #3
 800e3d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e3d2:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	8958      	ldrh	r0, [r3, #10]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3309      	adds	r3, #9
 800e3dc:	461a      	mov	r2, r3
 800e3de:	2102      	movs	r1, #2
 800e3e0:	f7f8 ff4c 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	330b      	adds	r3, #11
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	2102      	movs	r1, #2
 800e3f2:	f7f8 ff8e 	bl	8007312 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	330d      	adds	r3, #13
 800e400:	461a      	mov	r2, r3
 800e402:	2102      	movs	r1, #2
 800e404:	f7f8 ff85 	bl	8007312 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	8a18      	ldrh	r0, [r3, #16]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	330f      	adds	r3, #15
 800e410:	461a      	mov	r2, r3
 800e412:	2102      	movs	r1, #2
 800e414:	f7f8 ff32 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800e41e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e422:	b218      	sxth	r0, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	3311      	adds	r3, #17
 800e428:	461a      	mov	r2, r3
 800e42a:	2102      	movs	r1, #2
 800e42c:	f7f8 ff71 	bl	8007312 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	3313      	adds	r3, #19
 800e43a:	461a      	mov	r2, r3
 800e43c:	2102      	movs	r1, #2
 800e43e:	f7f8 ff68 	bl	8007312 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	3315      	adds	r3, #21
 800e44c:	461a      	mov	r2, r3
 800e44e:	2102      	movs	r1, #2
 800e450:	f7f8 ff5f 	bl	8007312 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800e454:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
 800e466:	4603      	mov	r3, r0
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e46e:	2300      	movs	r3, #0
 800e470:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800e472:	89fb      	ldrh	r3, [r7, #14]
 800e474:	2b16      	cmp	r3, #22
 800e476:	d802      	bhi.n	800e47e <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e478:	f06f 0309 	mvn.w	r3, #9
 800e47c:	e079      	b.n	800e572 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	785a      	ldrb	r2, [r3, #1]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	789a      	ldrb	r2, [r3, #2]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	78da      	ldrb	r2, [r3, #3]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	791a      	ldrb	r2, [r3, #4]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	3305      	adds	r3, #5
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	f003 030f 	and.w	r3, r3, #15
 800e4b0:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	799a      	ldrb	r2, [r3, #6]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	3307      	adds	r3, #7
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e4c8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	3308      	adds	r3, #8
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	f003 0303 	and.w	r3, r3, #3
 800e4d8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	3309      	adds	r3, #9
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	2002      	movs	r0, #2
 800e4e6:	f7f8 fef4 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	330b      	adds	r3, #11
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	2002      	movs	r0, #2
 800e4fa:	f7f8 ff36 	bl	800736a <VL53LX_i2c_decode_int16_t>
 800e4fe:	4603      	mov	r3, r0
 800e500:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	330d      	adds	r3, #13
 800e50a:	4619      	mov	r1, r3
 800e50c:	2002      	movs	r0, #2
 800e50e:	f7f8 ff2c 	bl	800736a <VL53LX_i2c_decode_int16_t>
 800e512:	4603      	mov	r3, r0
 800e514:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	330f      	adds	r3, #15
 800e51e:	4619      	mov	r1, r3
 800e520:	2002      	movs	r0, #2
 800e522:	f7f8 fed6 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800e526:	4603      	mov	r3, r0
 800e528:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	3311      	adds	r3, #17
 800e532:	4619      	mov	r1, r3
 800e534:	2002      	movs	r0, #2
 800e536:	f7f8 ff18 	bl	800736a <VL53LX_i2c_decode_int16_t>
 800e53a:	4603      	mov	r3, r0
 800e53c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e540:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	3313      	adds	r3, #19
 800e54a:	4619      	mov	r1, r3
 800e54c:	2002      	movs	r0, #2
 800e54e:	f7f8 ff0c 	bl	800736a <VL53LX_i2c_decode_int16_t>
 800e552:	4603      	mov	r3, r0
 800e554:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	3315      	adds	r3, #21
 800e55e:	4619      	mov	r1, r3
 800e560:	2002      	movs	r0, #2
 800e562:	f7f8 ff02 	bl	800736a <VL53LX_i2c_decode_int16_t>
 800e566:	4603      	mov	r3, r0
 800e568:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800e56e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b08a      	sub	sp, #40	@ 0x28
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e584:	2300      	movs	r3, #0
 800e586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800e58a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d109      	bne.n	800e5a6 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800e592:	f107 020c 	add.w	r2, r7, #12
 800e596:	2317      	movs	r3, #23
 800e598:	210d      	movs	r1, #13
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f003 fce2 	bl	8011f64 <VL53LX_ReadMulti>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800e5a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d109      	bne.n	800e5c2 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800e5ae:	f107 030c 	add.w	r3, r7, #12
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	2017      	movs	r0, #23
 800e5b8:	f7ff ff52 	bl	800e460 <VL53LX_i2c_decode_customer_nvm_managed>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800e5c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d11c      	bne.n	800e604 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	8a5b      	ldrh	r3, [r3, #18]
 800e5ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
		offset = offset / 4;
 800e5d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	da00      	bge.n	800e5da <VL53LX_get_customer_nvm_managed+0x60>
 800e5d8:	3303      	adds	r3, #3
 800e5da:	109b      	asrs	r3, r3, #2
 800e5dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (offset >= 1024)
 800e5de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e5e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5e6:	db04      	blt.n	800e5f2 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800e5e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5ea:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e5fc:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e602:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e604:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3728      	adds	r7, #40	@ 0x28
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	460b      	mov	r3, r1
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e61e:	2300      	movs	r3, #0
 800e620:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800e622:	897b      	ldrh	r3, [r7, #10]
 800e624:	2b1f      	cmp	r3, #31
 800e626:	d802      	bhi.n	800e62e <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e628:	f06f 0309 	mvn.w	r3, #9
 800e62c:	e0cf      	b.n	800e7ce <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	2102      	movs	r1, #2
 800e636:	4618      	mov	r0, r3
 800e638:	f7f8 fe20 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800e644:	f002 0201 	and.w	r2, r2, #1
 800e648:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e64a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800e654:	f002 020f 	and.w	r2, r2, #15
 800e658:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e65a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800e664:	f002 020f 	and.w	r2, r2, #15
 800e668:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e66a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800e674:	f002 021f 	and.w	r2, r2, #31
 800e678:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e67a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800e684:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e688:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e68a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800e694:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e698:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e69a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800e6a4:	f002 0201 	and.w	r2, r2, #1
 800e6a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e6aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800e6b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800e6be:	f002 0201 	and.w	r2, r2, #1
 800e6c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800e6c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800e6ce:	f002 0203 	and.w	r2, r2, #3
 800e6d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e6d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800e6de:	f002 021f 	and.w	r2, r2, #31
 800e6e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800e6e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800e6ee:	f002 0203 	and.w	r2, r2, #3
 800e6f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800e6f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800e6fe:	f002 0203 	and.w	r2, r2, #3
 800e702:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800e704:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800e70e:	f002 0207 	and.w	r2, r2, #7
 800e712:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800e714:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800e71e:	f002 021f 	and.w	r2, r2, #31
 800e722:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800e724:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800e72e:	f002 0201 	and.w	r2, r2, #1
 800e732:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800e734:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800e73e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800e744:	68fa      	ldr	r2, [r7, #12]
 800e746:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800e748:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800e752:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800e75c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800e766:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800e770:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	8b18      	ldrh	r0, [r3, #24]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	3318      	adds	r3, #24
 800e77a:	461a      	mov	r2, r3
 800e77c:	2102      	movs	r1, #2
 800e77e:	f7f8 fd7d 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800e78a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800e794:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800e79e:	f002 020f 	and.w	r2, r2, #15
 800e7a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800e7a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800e7ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800e7b8:	f002 020f 	and.w	r2, r2, #15
 800e7bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800e7be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800e7c8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3718      	adds	r7, #24
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b086      	sub	sp, #24
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	60f8      	str	r0, [r7, #12]
 800e7de:	460b      	mov	r3, r1
 800e7e0:	607a      	str	r2, [r7, #4]
 800e7e2:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800e7e8:	897b      	ldrh	r3, [r7, #10]
 800e7ea:	2b15      	cmp	r3, #21
 800e7ec:	d802      	bhi.n	800e7f4 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e7ee:	f06f 0309 	mvn.w	r3, #9
 800e7f2:	e070      	b.n	800e8d6 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e804:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e80e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800e818:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e81c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e81e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800e824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e828:	b298      	uxth	r0, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	3304      	adds	r3, #4
 800e82e:	461a      	mov	r2, r3
 800e830:	2102      	movs	r1, #2
 800e832:	f7f8 fd23 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800e83e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e842:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e844:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800e84e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800e858:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800e862:	f002 0201 	and.w	r2, r2, #1
 800e866:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e868:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800e872:	f002 0207 	and.w	r2, r2, #7
 800e876:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e878:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	8998      	ldrh	r0, [r3, #12]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	330c      	adds	r3, #12
 800e882:	461a      	mov	r2, r3
 800e884:	2102      	movs	r1, #2
 800e886:	f7f8 fcf9 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	89d8      	ldrh	r0, [r3, #14]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	330e      	adds	r3, #14
 800e892:	461a      	mov	r2, r3
 800e894:	2102      	movs	r1, #2
 800e896:	f7f8 fcf1 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	8a18      	ldrh	r0, [r3, #16]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	3310      	adds	r3, #16
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	2102      	movs	r1, #2
 800e8a6:	f7f8 fce9 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800e8b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800e8b8:	68fa      	ldr	r2, [r7, #12]
 800e8ba:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800e8bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800e8c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800e8d0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e8d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3718      	adds	r7, #24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b086      	sub	sp, #24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	607a      	str	r2, [r7, #4]
 800e8ea:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800e8f0:	897b      	ldrh	r3, [r7, #10]
 800e8f2:	2b16      	cmp	r3, #22
 800e8f4:	d802      	bhi.n	800e8fc <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e8f6:	f06f 0309 	mvn.w	r3, #9
 800e8fa:	e06e      	b.n	800e9da <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	f003 030f 	and.w	r3, r3, #15
 800e904:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e912:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800e91c:	f002 020f 	and.w	r2, r2, #15
 800e920:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e922:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e92c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800e936:	f002 020f 	and.w	r2, r2, #15
 800e93a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e93c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800e946:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800e950:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e954:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e956:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800e960:	f002 020f 	and.w	r2, r2, #15
 800e964:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e966:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800e970:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800e97a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e97e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e980:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	8958      	ldrh	r0, [r3, #10]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	330a      	adds	r3, #10
 800e98a:	461a      	mov	r2, r3
 800e98c:	2102      	movs	r1, #2
 800e98e:	f7f8 fc75 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	8998      	ldrh	r0, [r3, #12]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	330c      	adds	r3, #12
 800e99a:	461a      	mov	r2, r3
 800e99c:	2102      	movs	r1, #2
 800e99e:	f7f8 fc6d 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800e9aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800e9b4:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6918      	ldr	r0, [r3, #16]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	3312      	adds	r3, #18
 800e9be:	461a      	mov	r2, r3
 800e9c0:	2104      	movs	r1, #4
 800e9c2:	f7f8 fcfb 	bl	80073bc <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800e9ce:	f002 0201 	and.w	r2, r2, #1
 800e9d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800e9d4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e9d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b086      	sub	sp, #24
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	60f8      	str	r0, [r7, #12]
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	607a      	str	r2, [r7, #4]
 800e9ee:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800e9f4:	897b      	ldrh	r3, [r7, #10]
 800e9f6:	2b11      	cmp	r3, #17
 800e9f8:	d802      	bhi.n	800ea00 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e9fa:	f06f 0309 	mvn.w	r3, #9
 800e9fe:	e071      	b.n	800eae4 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	f003 0303 	and.w	r3, r3, #3
 800ea08:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	8858      	ldrh	r0, [r3, #2]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	3301      	adds	r3, #1
 800ea16:	461a      	mov	r2, r3
 800ea18:	2102      	movs	r1, #2
 800ea1a:	f7f8 fc2f 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	8898      	ldrh	r0, [r3, #4]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	3303      	adds	r3, #3
 800ea26:	461a      	mov	r2, r3
 800ea28:	2102      	movs	r1, #2
 800ea2a:	f7f8 fc27 	bl	800727c <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ea36:	f002 0201 	and.w	r2, r2, #1
 800ea3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ea3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800ea46:	f002 0207 	and.w	r2, r2, #7
 800ea4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ea4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ea56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800ea60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ea6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ea6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ea70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ea7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ea7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ea80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ea8a:	f002 0203 	and.w	r2, r2, #3
 800ea8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ea90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800ea9a:	f002 0203 	and.w	r2, r2, #3
 800ea9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800eaa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800eaaa:	f002 020f 	and.w	r2, r2, #15
 800eaae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800eab0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800eaba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800eac4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800eace:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800ead8:	f002 0203 	and.w	r2, r2, #3
 800eadc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800eade:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800eae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3718      	adds	r7, #24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b087      	sub	sp, #28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	607a      	str	r2, [r7, #4]
 800eaf8:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eafa:	2300      	movs	r3, #0
 800eafc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800eafe:	897b      	ldrh	r3, [r7, #10]
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	d802      	bhi.n	800eb0a <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eb04:	f06f 0309 	mvn.w	r3, #9
 800eb08:	e025      	b.n	800eb56 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800eb20:	f002 0201 	and.w	r2, r2, #1
 800eb24:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800eb26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800eb30:	f002 0201 	and.w	r2, r2, #1
 800eb34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800eb36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800eb40:	f002 0203 	and.w	r2, r2, #3
 800eb44:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800eb46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800eb50:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800eb52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	371c      	adds	r7, #28
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b086      	sub	sp, #24
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	4603      	mov	r3, r0
 800eb6a:	60b9      	str	r1, [r7, #8]
 800eb6c:	607a      	str	r2, [r7, #4]
 800eb6e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eb70:	2300      	movs	r3, #0
 800eb72:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800eb74:	89fb      	ldrh	r3, [r7, #14]
 800eb76:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb78:	d802      	bhi.n	800eb80 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eb7a:	f06f 0309 	mvn.w	r3, #9
 800eb7e:	e0e2      	b.n	800ed46 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb88:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	785a      	ldrb	r2, [r3, #1]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	3302      	adds	r3, #2
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	f003 030f 	and.w	r3, r3, #15
 800eba0:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	78da      	ldrb	r2, [r3, #3]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	3304      	adds	r3, #4
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	2002      	movs	r0, #2
 800ebb6:	f7f8 fb8c 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	3306      	adds	r3, #6
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	2002      	movs	r0, #2
 800ebca:	f7f8 fb82 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	3308      	adds	r3, #8
 800ebda:	4619      	mov	r1, r3
 800ebdc:	2002      	movs	r0, #2
 800ebde:	f7f8 fb78 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	330a      	adds	r3, #10
 800ebee:	4619      	mov	r1, r3
 800ebf0:	2002      	movs	r0, #2
 800ebf2:	f7f8 fb6e 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	330c      	adds	r3, #12
 800ec02:	4619      	mov	r1, r3
 800ec04:	2002      	movs	r0, #2
 800ec06:	f7f8 fb64 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	330e      	adds	r3, #14
 800ec16:	4619      	mov	r1, r3
 800ec18:	2002      	movs	r0, #2
 800ec1a:	f7f8 fb5a 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	3310      	adds	r3, #16
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	2002      	movs	r0, #2
 800ec2e:	f7f8 fb50 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ec32:	4603      	mov	r3, r0
 800ec34:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	3312      	adds	r3, #18
 800ec3e:	4619      	mov	r1, r3
 800ec40:	2002      	movs	r0, #2
 800ec42:	f7f8 fb46 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ec46:	4603      	mov	r3, r0
 800ec48:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	3314      	adds	r3, #20
 800ec52:	4619      	mov	r1, r3
 800ec54:	2002      	movs	r0, #2
 800ec56:	f7f8 fb3c 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	3316      	adds	r3, #22
 800ec66:	4619      	mov	r1, r3
 800ec68:	2002      	movs	r0, #2
 800ec6a:	f7f8 fb32 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	3318      	adds	r3, #24
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	2002      	movs	r0, #2
 800ec7e:	f7f8 fb28 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ec82:	4603      	mov	r3, r0
 800ec84:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	331a      	adds	r3, #26
 800ec8e:	4619      	mov	r1, r3
 800ec90:	2002      	movs	r0, #2
 800ec92:	f7f8 fb1e 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ec96:	4603      	mov	r3, r0
 800ec98:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	331c      	adds	r3, #28
 800eca2:	4619      	mov	r1, r3
 800eca4:	2002      	movs	r0, #2
 800eca6:	f7f8 fb14 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	331e      	adds	r3, #30
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	2002      	movs	r0, #2
 800ecba:	f7f8 fb0a 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	3320      	adds	r3, #32
 800ecca:	4619      	mov	r1, r3
 800eccc:	2002      	movs	r0, #2
 800ecce:	f7f8 fb00 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	3322      	adds	r3, #34	@ 0x22
 800ecde:	4619      	mov	r1, r3
 800ece0:	2002      	movs	r0, #2
 800ece2:	f7f8 faf6 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ece6:	4603      	mov	r3, r0
 800ece8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	3324      	adds	r3, #36	@ 0x24
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	2002      	movs	r0, #2
 800ecf6:	f7f8 faec 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	3326      	adds	r3, #38	@ 0x26
 800ed06:	4619      	mov	r1, r3
 800ed08:	2002      	movs	r0, #2
 800ed0a:	f7f8 fae2 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	3328      	adds	r3, #40	@ 0x28
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	2002      	movs	r0, #2
 800ed1e:	f7f8 fad8 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ed22:	4603      	mov	r3, r0
 800ed24:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800ed42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3718      	adds	r7, #24
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b086      	sub	sp, #24
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	4603      	mov	r3, r0
 800ed56:	60b9      	str	r1, [r7, #8]
 800ed58:	607a      	str	r2, [r7, #4]
 800ed5a:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800ed60:	89fb      	ldrh	r3, [r7, #14]
 800ed62:	2b20      	cmp	r3, #32
 800ed64:	d802      	bhi.n	800ed6c <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed66:	f06f 0309 	mvn.w	r3, #9
 800ed6a:	e04d      	b.n	800ee08 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800ed6c:	68b9      	ldr	r1, [r7, #8]
 800ed6e:	2004      	movs	r0, #4
 800ed70:	f7f8 fb4e 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 800ed74:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	3304      	adds	r3, #4
 800ed7e:	4619      	mov	r1, r3
 800ed80:	2004      	movs	r0, #4
 800ed82:	f7f8 fb45 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 800ed86:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	3308      	adds	r3, #8
 800ed90:	4619      	mov	r1, r3
 800ed92:	2004      	movs	r0, #4
 800ed94:	f7f8 fb59 	bl	800744a <VL53LX_i2c_decode_int32_t>
 800ed98:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	330c      	adds	r3, #12
 800eda2:	4619      	mov	r1, r3
 800eda4:	2004      	movs	r0, #4
 800eda6:	f7f8 fb33 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 800edaa:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	3310      	adds	r3, #16
 800edb4:	4619      	mov	r1, r3
 800edb6:	2004      	movs	r0, #4
 800edb8:	f7f8 fb2a 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 800edbc:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	3314      	adds	r3, #20
 800edc6:	4619      	mov	r1, r3
 800edc8:	2004      	movs	r0, #4
 800edca:	f7f8 fb21 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 800edce:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	3318      	adds	r3, #24
 800edd8:	4619      	mov	r1, r3
 800edda:	2004      	movs	r0, #4
 800eddc:	f7f8 fb35 	bl	800744a <VL53LX_i2c_decode_int32_t>
 800ede0:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	331c      	adds	r3, #28
 800edea:	4619      	mov	r1, r3
 800edec:	2004      	movs	r0, #4
 800edee:	f7f8 fb0f 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 800edf2:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	f893 2020 	ldrb.w	r2, [r3, #32]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800ee04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3718      	adds	r7, #24
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b086      	sub	sp, #24
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
 800ee1c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800ee22:	89fb      	ldrh	r3, [r7, #14]
 800ee24:	2b37      	cmp	r3, #55	@ 0x37
 800ee26:	d802      	bhi.n	800ee2e <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ee28:	f06f 0309 	mvn.w	r3, #9
 800ee2c:	e15e      	b.n	800f0ec <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800ee2e:	68b9      	ldr	r1, [r7, #8]
 800ee30:	2002      	movs	r0, #2
 800ee32:	f7f8 fa4e 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ee36:	4603      	mov	r3, r0
 800ee38:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	3302      	adds	r3, #2
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee48:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	3303      	adds	r3, #3
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee58:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	3304      	adds	r3, #4
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	f003 0303 	and.w	r3, r3, #3
 800ee68:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	3305      	adds	r3, #5
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	f003 0301 	and.w	r3, r3, #1
 800ee78:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	3306      	adds	r3, #6
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee88:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	3307      	adds	r3, #7
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee98:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	3308      	adds	r3, #8
 800eea2:	4619      	mov	r1, r3
 800eea4:	2002      	movs	r0, #2
 800eea6:	f7f8 fa14 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eeb0:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	330a      	adds	r3, #10
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	f003 0303 	and.w	r3, r3, #3
 800eec0:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	330b      	adds	r3, #11
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	f003 0303 	and.w	r3, r3, #3
 800eed0:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	330c      	adds	r3, #12
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	f003 030f 	and.w	r3, r3, #15
 800eee0:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	330d      	adds	r3, #13
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	f003 0307 	and.w	r3, r3, #7
 800eef0:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	330e      	adds	r3, #14
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	f003 0301 	and.w	r3, r3, #1
 800ef00:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	330f      	adds	r3, #15
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	f003 0303 	and.w	r3, r3, #3
 800ef10:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	7c1a      	ldrb	r2, [r3, #16]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	7c5a      	ldrb	r2, [r3, #17]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	3312      	adds	r3, #18
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	2002      	movs	r0, #2
 800ef2e:	f7f8 f9d0 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ef32:	4603      	mov	r3, r0
 800ef34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef38:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	3316      	adds	r3, #22
 800ef42:	4619      	mov	r1, r3
 800ef44:	2002      	movs	r0, #2
 800ef46:	f7f8 f9c4 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	3318      	adds	r3, #24
 800ef56:	4619      	mov	r1, r3
 800ef58:	2002      	movs	r0, #2
 800ef5a:	f7f8 f9ba 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	331a      	adds	r3, #26
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	f003 0301 	and.w	r3, r3, #1
 800ef70:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	331b      	adds	r3, #27
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	f003 0307 	and.w	r3, r3, #7
 800ef80:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	7f1a      	ldrb	r2, [r3, #28]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	7f5a      	ldrb	r2, [r3, #29]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	331e      	adds	r3, #30
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efa0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	331f      	adds	r3, #31
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efb0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	3320      	adds	r3, #32
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	f003 0303 	and.w	r3, r3, #3
 800efc0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	3321      	adds	r3, #33	@ 0x21
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	f003 030f 	and.w	r3, r3, #15
 800efd0:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	3325      	adds	r3, #37	@ 0x25
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	f003 0301 	and.w	r3, r3, #1
 800f004:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	3326      	adds	r3, #38	@ 0x26
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	f003 0303 	and.w	r3, r3, #3
 800f016:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	3327      	adds	r3, #39	@ 0x27
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	f003 031f 	and.w	r3, r3, #31
 800f028:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	3328      	adds	r3, #40	@ 0x28
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	f003 031f 	and.w	r3, r3, #31
 800f03a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	3329      	adds	r3, #41	@ 0x29
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f003 031f 	and.w	r3, r3, #31
 800f04c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	332a      	adds	r3, #42	@ 0x2a
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	332b      	adds	r3, #43	@ 0x2b
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	332c      	adds	r3, #44	@ 0x2c
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	f003 0303 	and.w	r3, r3, #3
 800f082:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	332d      	adds	r3, #45	@ 0x2d
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f094:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	332e      	adds	r3, #46	@ 0x2e
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	2004      	movs	r0, #4
 800f0a4:	f7f8 f9b4 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	3332      	adds	r3, #50	@ 0x32
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	2004      	movs	r0, #4
 800f0ba:	f7f8 f9a9 	bl	8007410 <VL53LX_i2c_decode_uint32_t>
 800f0be:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	3336      	adds	r3, #54	@ 0x36
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	3337      	adds	r3, #55	@ 0x37
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 0301 	and.w	r3, r3, #1
 800f0e0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f0e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3718      	adds	r7, #24
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f102:	2300      	movs	r3, #0
 800f104:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800f106:	89fb      	ldrh	r3, [r7, #14]
 800f108:	2b30      	cmp	r3, #48	@ 0x30
 800f10a:	d802      	bhi.n	800f112 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f10c:	f06f 0309 	mvn.w	r3, #9
 800f110:	e112      	b.n	800f338 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	785a      	ldrb	r2, [r3, #1]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	789a      	ldrb	r2, [r3, #2]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	3303      	adds	r3, #3
 800f12e:	4619      	mov	r1, r3
 800f130:	2002      	movs	r0, #2
 800f132:	f7f8 f8ce 	bl	80072d2 <VL53LX_i2c_decode_uint16_t>
 800f136:	4603      	mov	r3, r0
 800f138:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	3305      	adds	r3, #5
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f148:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	3306      	adds	r3, #6
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	f003 0307 	and.w	r3, r3, #7
 800f158:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	3307      	adds	r3, #7
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	f003 0307 	and.w	r3, r3, #7
 800f168:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	3308      	adds	r3, #8
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f178:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	3309      	adds	r3, #9
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f188:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	330a      	adds	r3, #10
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	330b      	adds	r3, #11
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1a8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	330c      	adds	r3, #12
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	f003 0301 	and.w	r3, r3, #1
 800f1b8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	330d      	adds	r3, #13
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1c8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	330e      	adds	r3, #14
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1d8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	7bda      	ldrb	r2, [r3, #15]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	7c1a      	ldrb	r2, [r3, #16]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	7c5a      	ldrb	r2, [r3, #17]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	7c9a      	ldrb	r2, [r3, #18]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	7cda      	ldrb	r2, [r3, #19]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	7d1a      	ldrb	r2, [r3, #20]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	7d5a      	ldrb	r2, [r3, #21]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	7d9a      	ldrb	r2, [r3, #22]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	7dda      	ldrb	r2, [r3, #23]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	7e1a      	ldrb	r2, [r3, #24]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	7e5a      	ldrb	r2, [r3, #25]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	7e9a      	ldrb	r2, [r3, #26]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	7eda      	ldrb	r2, [r3, #27]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	7f1a      	ldrb	r2, [r3, #28]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	7f5a      	ldrb	r2, [r3, #29]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	7f9a      	ldrb	r2, [r3, #30]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	7fda      	ldrb	r2, [r3, #31]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f334:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b090      	sub	sp, #64	@ 0x40
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f34a:	2300      	movs	r3, #0
 800f34c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f350:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f354:	2b00      	cmp	r3, #0
 800f356:	d10a      	bne.n	800f36e <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 800f358:	f107 020c 	add.w	r2, r7, #12
 800f35c:	2331      	movs	r3, #49	@ 0x31
 800f35e:	f240 110f 	movw	r1, #271	@ 0x10f
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f002 fdfe 	bl	8011f64 <VL53LX_ReadMulti>
 800f368:	4603      	mov	r3, r0
 800f36a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f36e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f372:	2b00      	cmp	r3, #0
 800f374:	d109      	bne.n	800f38a <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 800f376:	f107 030c 	add.w	r3, r7, #12
 800f37a:	683a      	ldr	r2, [r7, #0]
 800f37c:	4619      	mov	r1, r3
 800f37e:	2031      	movs	r0, #49	@ 0x31
 800f380:	f7ff feb8 	bl	800f0f4 <VL53LX_i2c_decode_nvm_copy_data>
 800f384:	4603      	mov	r3, r0
 800f386:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f38a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3740      	adds	r7, #64	@ 0x40
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 800f396:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f39a:	b0d6      	sub	sp, #344	@ 0x158
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 800f3a2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800f3a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800f3b0:	23f1      	movs	r3, #241	@ 0xf1
 800f3b2:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 800f3b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f3ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	uint32_t pll_period_mm  = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint64_t tmp0        = 0;
 800f3c4:	f04f 0200 	mov.w	r2, #0
 800f3c8:	f04f 0300 	mov.w	r3, #0
 800f3cc:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	uint64_t tmp1        = 0;
 800f3d0:	f04f 0200 	mov.w	r2, #0
 800f3d4:	f04f 0300 	mov.w	r3, #0
 800f3d8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	uint64_t b_minus_amb = 0;
 800f3dc:	f04f 0200 	mov.w	r2, #0
 800f3e0:	f04f 0300 	mov.w	r3, #0
 800f3e4:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	uint64_t VL53LX_p_055   = 0;
 800f3e8:	f04f 0200 	mov.w	r2, #0
 800f3ec:	f04f 0300 	mov.w	r3, #0
 800f3f0:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	*psigma_est  = VL53LX_D_002;
 800f3f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800f3f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f3fc:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 800f3fe:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 8322 	beq.w	800fa4c <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 800f408:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fb fa28 	bl	800a862 <VL53LX_calc_pll_period_mm>
 800f412:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 800f416:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 800f41a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f41e:	429a      	cmp	r2, r3
 800f420:	d91a      	bls.n	800f458 <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800f422:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800f426:	2200      	movs	r2, #0
 800f428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f42c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
			(uint64_t)VL53LX_p_032;
 800f430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f434:	2200      	movs	r2, #0
 800f436:	4698      	mov	r8, r3
 800f438:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800f43a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800f43e:	460b      	mov	r3, r1
 800f440:	ebb3 0308 	subs.w	r3, r3, r8
 800f444:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f446:	4613      	mov	r3, r2
 800f448:	eb63 0309 	sbc.w	r3, r3, r9
 800f44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f44e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800f452:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
 800f456:	e013      	b.n	800f480 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 800f458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f45c:	2200      	movs	r2, #0
 800f45e:	469a      	mov	sl, r3
 800f460:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 800f462:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800f466:	2200      	movs	r2, #0
 800f468:	461c      	mov	r4, r3
 800f46a:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 800f46c:	ebba 0304 	subs.w	r3, sl, r4
 800f470:	633b      	str	r3, [r7, #48]	@ 0x30
 800f472:	eb6b 0305 	sbc.w	r3, fp, r5
 800f476:	637b      	str	r3, [r7, #52]	@ 0x34
 800f478:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800f47c:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 800f480:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800f484:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800f488:	429a      	cmp	r2, r3
 800f48a:	d91f      	bls.n	800f4cc <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 800f48c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f490:	2200      	movs	r2, #0
 800f492:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f496:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
			(uint64_t)VL53LX_p_001;
 800f49a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f4a4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 800f4a8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800f4ac:	4623      	mov	r3, r4
 800f4ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	1a9b      	subs	r3, r3, r2
 800f4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f4b8:	462b      	mov	r3, r5
 800f4ba:	460a      	mov	r2, r1
 800f4bc:	eb63 0302 	sbc.w	r3, r3, r2
 800f4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f4c2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800f4c6:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
 800f4ca:	e01e      	b.n	800f50a <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 800f4cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f4d6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			(uint64_t)VL53LX_p_007;
 800f4da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f4e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 800f4e8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800f4ec:	4623      	mov	r3, r4
 800f4ee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	1a9b      	subs	r3, r3, r2
 800f4f6:	623b      	str	r3, [r7, #32]
 800f4f8:	462b      	mov	r3, r5
 800f4fa:	460a      	mov	r2, r1
 800f4fc:	eb63 0302 	sbc.w	r3, r3, r2
 800f500:	627b      	str	r3, [r7, #36]	@ 0x24
 800f502:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f506:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130



		if (b_minus_amb != 0) {
 800f50a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800f50e:	4313      	orrs	r3, r2
 800f510:	f000 829c 	beq.w	800fa4c <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 800f514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f518:	2200      	movs	r2, #0
 800f51a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f51e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800f522:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800f526:	2200      	movs	r2, #0
 800f528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f52c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800f530:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800f534:	4623      	mov	r3, r4
 800f536:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800f53a:	4602      	mov	r2, r0
 800f53c:	189b      	adds	r3, r3, r2
 800f53e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f542:	460b      	mov	r3, r1
 800f544:	462a      	mov	r2, r5
 800f546:	eb42 0303 	adc.w	r3, r2, r3
 800f54a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					(uint64_t)VL53LX_p_028;
 800f54e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800f552:	2200      	movs	r2, #0
 800f554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f558:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 800f55c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800f560:	4623      	mov	r3, r4
 800f562:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800f566:	4602      	mov	r2, r0
 800f568:	189b      	adds	r3, r3, r2
 800f56a:	61bb      	str	r3, [r7, #24]
 800f56c:	460b      	mov	r3, r1
 800f56e:	462a      	mov	r2, r5
 800f570:	eb42 0303 	adc.w	r3, r2, r3
 800f574:	61fb      	str	r3, [r7, #28]
 800f576:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f57a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > VL53LX_D_003)
 800f57e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f582:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800f586:	f173 0300 	sbcs.w	r3, r3, #0
 800f58a:	d305      	bcc.n	800f598 <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 800f58c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800f590:	f04f 0300 	mov.w	r3, #0
 800f594:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 800f598:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800f59c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5a0:	fb03 f102 	mul.w	r1, r3, r2
 800f5a4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800f5a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5ac:	fb02 f303 	mul.w	r3, r2, r3
 800f5b0:	18ca      	adds	r2, r1, r3
 800f5b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5b6:	fba3 1303 	umull	r1, r3, r3, r3
 800f5ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800f5be:	460b      	mov	r3, r1
 800f5c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800f5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5c8:	18d3      	adds	r3, r2, r3
 800f5ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800f5ce:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 800f5d2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 800f5d6:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp1 = tmp1 << 8;
 800f5da:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800f5de:	f04f 0000 	mov.w	r0, #0
 800f5e2:	f04f 0100 	mov.w	r1, #0
 800f5e6:	0219      	lsls	r1, r3, #8
 800f5e8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800f5ec:	0210      	lsls	r0, r2, #8
 800f5ee:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			if (tmp1 > VL53LX_D_004)
 800f5f2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800f5f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f5fa:	d305      	bcc.n	800f608 <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 800f5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f600:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800f604:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 800f608:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800f60c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800f610:	f7f1 fb6e 	bl	8000cf0 <__aeabi_uldivmod>
 800f614:	4602      	mov	r2, r0
 800f616:	460b      	mov	r3, r1
 800f618:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 800f61c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800f620:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800f624:	f7f1 fb64 	bl	8000cf0 <__aeabi_uldivmod>
 800f628:	4602      	mov	r2, r0
 800f62a:	460b      	mov	r3, r1
 800f62c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 800f630:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800f634:	2b80      	cmp	r3, #128	@ 0x80
 800f636:	d305      	bcc.n	800f644 <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 800f638:	f04f 32ff 	mov.w	r2, #4294967295
 800f63c:	f04f 037f 	mov.w	r3, #127	@ 0x7f
 800f640:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140


			tmp0 = tmp1 * tmp0;
 800f644:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800f648:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800f64c:	fb03 f102 	mul.w	r1, r3, r2
 800f650:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800f654:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f658:	fb02 f303 	mul.w	r3, r2, r3
 800f65c:	4419      	add	r1, r3
 800f65e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800f662:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800f666:	fba2 2303 	umull	r2, r3, r2, r3
 800f66a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800f66e:	4613      	mov	r3, r2
 800f670:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800f674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f678:	18cb      	adds	r3, r1, r3
 800f67a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800f67e:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 800f682:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 800f686:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 800f68a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800f68e:	2200      	movs	r2, #0
 800f690:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f694:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f698:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800f69c:	2200      	movs	r2, #0
 800f69e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f6a2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800f6a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800f6aa:	4623      	mov	r3, r4
 800f6ac:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	189b      	adds	r3, r3, r2
 800f6b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	462a      	mov	r2, r5
 800f6bc:	eb42 0303 	adc.w	r3, r2, r3
 800f6c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 800f6c4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f6cc:	67fa      	str	r2, [r7, #124]	@ 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 800f6ce:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800f6d2:	4623      	mov	r3, r4
 800f6d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f6d8:	4602      	mov	r2, r0
 800f6da:	189b      	adds	r3, r3, r2
 800f6dc:	673b      	str	r3, [r7, #112]	@ 0x70
 800f6de:	460b      	mov	r3, r1
 800f6e0:	462a      	mov	r2, r5
 800f6e2:	eb42 0303 	adc.w	r3, r2, r3
 800f6e6:	677b      	str	r3, [r7, #116]	@ 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 800f6e8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f6f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 800f6f2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800f6f6:	4623      	mov	r3, r4
 800f6f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	189b      	adds	r3, r3, r2
 800f700:	613b      	str	r3, [r7, #16]
 800f702:	460b      	mov	r3, r1
 800f704:	462a      	mov	r2, r5
 800f706:	eb42 0303 	adc.w	r3, r2, r3
 800f70a:	617b      	str	r3, [r7, #20]
 800f70c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f710:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 800f714:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800f718:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800f71c:	f173 0300 	sbcs.w	r3, r3, #0
 800f720:	d305      	bcc.n	800f72e <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 800f722:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800f726:	f04f 0300 	mov.w	r3, #0
 800f72a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

			tmp1 = tmp1 << 8;
 800f72e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800f732:	f04f 0000 	mov.w	r0, #0
 800f736:	f04f 0100 	mov.w	r1, #0
 800f73a:	0219      	lsls	r1, r3, #8
 800f73c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800f740:	0210      	lsls	r0, r2, #8
 800f742:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140


			tmp0 = tmp1 + tmp0;
 800f746:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f74a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800f74e:	1884      	adds	r4, r0, r2
 800f750:	60bc      	str	r4, [r7, #8]
 800f752:	eb41 0303 	adc.w	r3, r1, r3
 800f756:	60fb      	str	r3, [r7, #12]
 800f758:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f75c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 800f760:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f764:	2b00      	cmp	r3, #0
 800f766:	da05      	bge.n	800f774 <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 800f768:	f04f 32ff 	mov.w	r2, #4294967295
 800f76c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f770:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 800f774:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d331      	bcc.n	800f7e0 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800f77c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800f780:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f784:	f7f1 fab4 	bl	8000cf0 <__aeabi_uldivmod>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 800f790:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f794:	2200      	movs	r2, #0
 800f796:	663b      	str	r3, [r7, #96]	@ 0x60
 800f798:	667a      	str	r2, [r7, #100]	@ 0x64
 800f79a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f79e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	fb02 f203 	mul.w	r2, r2, r3
 800f7a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	fb01 f303 	mul.w	r3, r1, r3
 800f7b2:	441a      	add	r2, r3
 800f7b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f7b8:	4621      	mov	r1, r4
 800f7ba:	fba3 1301 	umull	r1, r3, r3, r1
 800f7be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800f7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7cc:	18d3      	adds	r3, r2, r3
 800f7ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800f7d2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 800f7d6:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 800f7da:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 800f7de:	e030      	b.n	800f842 <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 800f7e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f7e8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800f7ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f7ee:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800f7f2:	4622      	mov	r2, r4
 800f7f4:	fb02 f203 	mul.w	r2, r2, r3
 800f7f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f7fc:	4629      	mov	r1, r5
 800f7fe:	fb01 f303 	mul.w	r3, r1, r3
 800f802:	441a      	add	r2, r3
 800f804:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f808:	4621      	mov	r1, r4
 800f80a:	fba3 1301 	umull	r1, r3, r3, r1
 800f80e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f812:	460b      	mov	r3, r1
 800f814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f81c:	18d3      	adds	r3, r2, r3
 800f81e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f822:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 800f826:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 800f82a:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800f82e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800f832:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f836:	f7f1 fa5b 	bl	8000cf0 <__aeabi_uldivmod>
 800f83a:	4602      	mov	r2, r0
 800f83c:	460b      	mov	r3, r1
 800f83e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 800f842:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f846:	2b00      	cmp	r3, #0
 800f848:	da05      	bge.n	800f856 <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 800f84a:	f04f 32ff 	mov.w	r2, #4294967295
 800f84e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f852:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 800f856:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d33d      	bcc.n	800f8da <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800f85e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800f862:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f866:	f7f1 fa43 	bl	8000cf0 <__aeabi_uldivmod>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 800f872:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f876:	f04f 0200 	mov.w	r2, #0
 800f87a:	f04f 0300 	mov.w	r3, #0
 800f87e:	0882      	lsrs	r2, r0, #2
 800f880:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800f884:	088b      	lsrs	r3, r1, #2
 800f886:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = tmp0 * pll_period_mm;
 800f88a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f88e:	2200      	movs	r2, #0
 800f890:	653b      	str	r3, [r7, #80]	@ 0x50
 800f892:	657a      	str	r2, [r7, #84]	@ 0x54
 800f894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f898:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800f89c:	4622      	mov	r2, r4
 800f89e:	fb02 f203 	mul.w	r2, r2, r3
 800f8a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	fb01 f303 	mul.w	r3, r1, r3
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800f8b2:	4621      	mov	r1, r4
 800f8b4:	fba2 1201 	umull	r1, r2, r2, r1
 800f8b8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800f8bc:	460a      	mov	r2, r1
 800f8be:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800f8c2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800f8c6:	4413      	add	r3, r2
 800f8c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800f8cc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 800f8d0:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 800f8d4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 800f8d8:	e03c      	b.n	800f954 <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 800f8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8de:	2200      	movs	r2, #0
 800f8e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f8e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800f8e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	fb02 f203 	mul.w	r2, r2, r3
 800f8f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f8f6:	4629      	mov	r1, r5
 800f8f8:	fb01 f303 	mul.w	r3, r1, r3
 800f8fc:	4413      	add	r3, r2
 800f8fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800f902:	4621      	mov	r1, r4
 800f904:	fba2 1201 	umull	r1, r2, r2, r1
 800f908:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800f90c:	460a      	mov	r2, r1
 800f90e:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800f912:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800f916:	4413      	add	r3, r2
 800f918:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f91c:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800f920:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 800f924:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800f928:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800f92c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f930:	f7f1 f9de 	bl	8000cf0 <__aeabi_uldivmod>
 800f934:	4602      	mov	r2, r0
 800f936:	460b      	mov	r3, r1
 800f938:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
				tmp0 = do_division_u(tmp0, 4);
 800f93c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f940:	f04f 0200 	mov.w	r2, #0
 800f944:	f04f 0300 	mov.w	r3, #0
 800f948:	0882      	lsrs	r2, r0, #2
 800f94a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800f94e:	088b      	lsrs	r3, r1, #2
 800f950:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 800f954:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f958:	2b00      	cmp	r3, #0
 800f95a:	da05      	bge.n	800f968 <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 800f95c:	f04f 32ff 	mov.w	r2, #4294967295
 800f960:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f964:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp0 = tmp0 >> 2;
 800f968:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f96c:	f04f 0200 	mov.w	r2, #0
 800f970:	f04f 0300 	mov.w	r3, #0
 800f974:	0882      	lsrs	r2, r0, #2
 800f976:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800f97a:	088b      	lsrs	r3, r1, #2
 800f97c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 800f980:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f984:	2b01      	cmp	r3, #1
 800f986:	d305      	bcc.n	800f994 <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 800f988:	f04f 32ff 	mov.w	r2, #4294967295
 800f98c:	f04f 0300 	mov.w	r3, #0
 800f990:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 800f994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f998:	2200      	movs	r2, #0
 800f99a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f99c:	647a      	str	r2, [r7, #68]	@ 0x44
 800f99e:	f04f 0200 	mov.w	r2, #0
 800f9a2:	f04f 0300 	mov.w	r3, #0
 800f9a6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800f9aa:	4629      	mov	r1, r5
 800f9ac:	01cb      	lsls	r3, r1, #7
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f9b4:	4621      	mov	r1, r4
 800f9b6:	01ca      	lsls	r2, r1, #7
 800f9b8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
			tmp1 = tmp1 * tmp1;
 800f9bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f9c0:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800f9c4:	fb03 f202 	mul.w	r2, r3, r2
 800f9c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f9cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800f9d0:	fb01 f303 	mul.w	r3, r1, r3
 800f9d4:	441a      	add	r2, r3
 800f9d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800f9da:	fba3 1303 	umull	r1, r3, r3, r3
 800f9de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9ec:	18d3      	adds	r3, r2, r3
 800f9ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f9f2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800f9f6:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
 800f9fa:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
			tmp0 = tmp0 + tmp1;
 800f9fe:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800fa02:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800fa06:	1884      	adds	r4, r0, r2
 800fa08:	603c      	str	r4, [r7, #0]
 800fa0a:	eb41 0303 	adc.w	r3, r1, r3
 800fa0e:	607b      	str	r3, [r7, #4]
 800fa10:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fa14:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 800fa18:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d305      	bcc.n	800fa2c <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 800fa20:	f04f 32ff 	mov.w	r2, #4294967295
 800fa24:	f04f 0300 	mov.w	r3, #0
 800fa28:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 800fa2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7fa fdaf 	bl	800a594 <VL53LX_isqrt>
 800fa36:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			*psigma_est = (uint16_t)sigma_int;
 800fa3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800fa44:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 800fa46:	2300      	movs	r3, #0
 800fa48:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
		}

	}

	return status;
 800fa4c:	f997 3157 	ldrsb.w	r3, [r7, #343]	@ 0x157
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 800fa56:	46bd      	mov	sp, r7
 800fa58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fa5c <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b086      	sub	sp, #24
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa66:	2300      	movs	r3, #0
 800fa68:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f893 3342 	ldrb.w	r3, [r3, #834]	@ 0x342
	gpio__mux_active_high_hv =
 800fa80:	f003 0310 	and.w	r3, r3, #16
 800fa84:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800fa86:	7bfb      	ldrb	r3, [r7, #15]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d102      	bne.n	800fa92 <VL53LX_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	75fb      	strb	r3, [r7, #23]
 800fa90:	e001      	b.n	800fa96 <VL53LX_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 800fa92:	2300      	movs	r3, #0
 800fa94:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 800fa96:	f107 030e 	add.w	r3, r7, #14
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	2131      	movs	r1, #49	@ 0x31
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f002 faf2 	bl	8012088 <VL53LX_RdByte>
 800faa4:	4603      	mov	r3, r0
 800faa6:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800faa8:	7bbb      	ldrb	r3, [r7, #14]
 800faaa:	f003 0201 	and.w	r2, r3, #1
 800faae:	7dfb      	ldrb	r3, [r7, #23]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d103      	bne.n	800fabc <VL53LX_is_new_data_ready+0x60>
		*pready = 0x01;
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	2201      	movs	r2, #1
 800fab8:	701a      	strb	r2, [r3, #0]
 800faba:	e002      	b.n	800fac2 <VL53LX_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	2200      	movs	r2, #0
 800fac0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800fac2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3718      	adds	r7, #24
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b086      	sub	sp, #24
 800fad2:	af02      	add	r7, sp, #8
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800fad8:	2300      	movs	r3, #0
 800fada:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 800fadc:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f002 fb63 	bl	80121ac <VL53LX_WaitUs>
 800fae6:	4603      	mov	r3, r0
 800fae8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 800faea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d10b      	bne.n	800fb0a <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 800faf2:	2301      	movs	r3, #1
 800faf4:	9301      	str	r3, [sp, #4]
 800faf6:	2301      	movs	r3, #1
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	2301      	movs	r3, #1
 800fafc:	22e5      	movs	r2, #229	@ 0xe5
 800fafe:	6839      	ldr	r1, [r7, #0]
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f002 fb69 	bl	80121d8 <VL53LX_WaitValueMaskEx>
 800fb06:	4603      	mov	r3, r0
 800fb08:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 800fb0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d103      	bne.n	800fb1a <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 800fb12:	2103      	movs	r1, #3
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7f6 fdf6 	bl	8006706 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800fb1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 800fb26:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb2a:	b0c0      	sub	sp, #256	@ 0x100
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 800fb32:	4618      	mov	r0, r3
 800fb34:	460b      	mov	r3, r1
 800fb36:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 800fb40:	4603      	mov	r3, r0
 800fb42:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb46:	2300      	movs	r3, #0
 800fb48:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf

	uint8_t row = 0;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	uint8_t col = 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd



	int16_t  bound_l_x = 0;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	int16_t  bound_r_x = 0;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	int16_t  bound_u_y = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	int16_t  bound_d_y = 0;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int64_t xtalk_rate_ll = 0;
 800fb70:	f04f 0200 	mov.w	r2, #0
 800fb74:	f04f 0300 	mov.w	r3, #0
 800fb78:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t xtalk_rate_ur = 0;
 800fb7c:	f04f 0200 	mov.w	r2, #0
 800fb80:	f04f 0300 	mov.w	r3, #0
 800fb84:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	int64_t xtalk_avg = 0;
 800fb88:	f04f 0200 	mov.w	r2, #0
 800fb8c:	f04f 0300 	mov.w	r3, #0
 800fb90:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	if (status == VL53LX_ERROR_NONE) {
 800fb94:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d108      	bne.n	800fbae <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 800fb9c:	f107 02dd 	add.w	r2, r7, #221	@ 0xdd
 800fba0:	f107 01de 	add.w	r1, r7, #222	@ 0xde
 800fba4:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fb f8d5 	bl	800ad58 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 800fbae:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d162      	bne.n	800fc7c <VL53LX_f_032+0x156>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 800fbb6:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800fbba:	091b      	lsrs	r3, r3, #4
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	f003 0301 	and.w	r3, r3, #1
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00d      	beq.n	800fbe2 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 800fbc6:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 800fbca:	461a      	mov	r2, r3
 800fbcc:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800fbd0:	095b      	lsrs	r3, r3, #5
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	1ad3      	subs	r3, r2, r3
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 800fbe0:	e00a      	b.n	800fbf8 <VL53LX_f_032+0xd2>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 800fbe2:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800fbec:	095b      	lsrs	r3, r3, #5
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 800fbf8:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800fc02:	095b      	lsrs	r3, r3, #5
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	4413      	add	r3, r2
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 800fc0e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800fc12:	f003 0301 	and.w	r3, r3, #1
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d011      	beq.n	800fc3e <VL53LX_f_032+0x118>
			bound_d_y = (int16_t) row -
 800fc1a:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800fc1e:	4619      	mov	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 800fc20:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800fc24:	f003 020f 	and.w	r2, r3, #15
 800fc28:	0fd3      	lsrs	r3, r2, #31
 800fc2a:	4413      	add	r3, r2
 800fc2c:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	1acb      	subs	r3, r1, r3
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	3b01      	subs	r3, #1
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 800fc3c:	e00f      	b.n	800fc5e <VL53LX_f_032+0x138>
		else
			bound_d_y = (int16_t) row -
 800fc3e:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800fc42:	4619      	mov	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 800fc44:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800fc48:	f003 020f 	and.w	r2, r3, #15
 800fc4c:	0fd3      	lsrs	r3, r2, #31
 800fc4e:	4413      	add	r3, r2
 800fc50:	105b      	asrs	r3, r3, #1
 800fc52:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	440b      	add	r3, r1
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

		bound_u_y = (int16_t) row +
 800fc5e:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800fc62:	4619      	mov	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 800fc64:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800fc68:	f003 020f 	and.w	r2, r3, #15
 800fc6c:	0fd3      	lsrs	r3, r2, #31
 800fc6e:	4413      	add	r3, r2
 800fc70:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	440b      	add	r3, r1
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 800fc7c:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d133      	bne.n	800fcec <VL53LX_f_032+0x1c6>
		bound_l_x =  (2 * bound_l_x) - 15 +
 800fc84:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 800fc8e:	4413      	add	r3, r2
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	005b      	lsls	r3, r3, #1
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	3b0f      	subs	r3, #15
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 800fc9e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800fca8:	4413      	add	r3, r2
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	3b0f      	subs	r3, #15
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 800fcb8:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 800fcbc:	b29a      	uxth	r2, r3
 800fcbe:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 800fcc2:	4413      	add	r3, r2
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	005b      	lsls	r3, r3, #1
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	3b0f      	subs	r3, #15
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 800fcd2:	f997 3120 	ldrsb.w	r3, [r7, #288]	@ 0x120
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 800fcdc:	4413      	add	r3, r2
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	005b      	lsls	r3, r3, #1
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	3b0f      	subs	r3, #15
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 800fcec:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f040 8135 	bne.w	800ff60 <VL53LX_f_032+0x43a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 800fcf6:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 800fcfa:	17da      	asrs	r2, r3, #31
 800fcfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fd00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 800fd04:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 800fd08:	17da      	asrs	r2, r3, #31
 800fd0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fd0e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 800fd12:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800fd16:	460b      	mov	r3, r1
 800fd18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fd1c:	fb02 f203 	mul.w	r2, r2, r3
 800fd20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fd24:	e9c7 0130 	strd	r0, r1, [r7, #192]	@ 0xc0
 800fd28:	4601      	mov	r1, r0
 800fd2a:	fb01 f303 	mul.w	r3, r1, r3
 800fd2e:	4413      	add	r3, r2
 800fd30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800fd34:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800fd38:	fba2 4501 	umull	r4, r5, r2, r1
 800fd3c:	442b      	add	r3, r5
 800fd3e:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 800fd40:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 800fd44:	17da      	asrs	r2, r3, #31
 800fd46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fd4a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
					((int64_t)ygradient));
 800fd4e:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 800fd52:	17da      	asrs	r2, r3, #31
 800fd54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fd58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 800fd5c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800fd60:	460b      	mov	r3, r1
 800fd62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fd66:	fb02 f203 	mul.w	r2, r2, r3
 800fd6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd6e:	e9c7 012c 	strd	r0, r1, [r7, #176]	@ 0xb0
 800fd72:	4601      	mov	r1, r0
 800fd74:	fb01 f303 	mul.w	r3, r1, r3
 800fd78:	4413      	add	r3, r2
 800fd7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fd7e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800fd82:	fba2 8901 	umull	r8, r9, r2, r1
 800fd86:	444b      	add	r3, r9
 800fd88:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 800fd8a:	eb14 0308 	adds.w	r3, r4, r8
 800fd8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd90:	eb45 0309 	adc.w	r3, r5, r9
 800fd94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fd96:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800fd9a:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 800fd9e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800fda2:	1c51      	adds	r1, r2, #1
 800fda4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800fda8:	f143 0300 	adc.w	r3, r3, #0
 800fdac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fdb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	0fdb      	lsrs	r3, r3, #31
 800fdb8:	2200      	movs	r2, #0
 800fdba:	643b      	str	r3, [r7, #64]	@ 0x40
 800fdbc:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdbe:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800fdc2:	4623      	mov	r3, r4
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	189b      	adds	r3, r3, r2
 800fdc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fdca:	460b      	mov	r3, r1
 800fdcc:	462a      	mov	r2, r5
 800fdce:	eb42 0303 	adc.w	r3, r2, r3
 800fdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdd4:	f04f 0200 	mov.w	r2, #0
 800fdd8:	f04f 0300 	mov.w	r3, #0
 800fddc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800fde0:	4621      	mov	r1, r4
 800fde2:	084a      	lsrs	r2, r1, #1
 800fde4:	4629      	mov	r1, r5
 800fde6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800fdea:	4629      	mov	r1, r5
 800fdec:	104b      	asrs	r3, r1, #1
 800fdee:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 800fdf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fdfc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fe00:	f04f 0000 	mov.w	r0, #0
 800fe04:	f04f 0100 	mov.w	r1, #0
 800fe08:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800fe0c:	462b      	mov	r3, r5
 800fe0e:	0099      	lsls	r1, r3, #2
 800fe10:	4623      	mov	r3, r4
 800fe12:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800fe16:	4623      	mov	r3, r4
 800fe18:	0098      	lsls	r0, r3, #2
 800fe1a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800fe1e:	1814      	adds	r4, r2, r0
 800fe20:	633c      	str	r4, [r7, #48]	@ 0x30
 800fe22:	414b      	adcs	r3, r1
 800fe24:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe26:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800fe2a:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 800fe2e:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 800fe32:	17da      	asrs	r2, r3, #31
 800fe34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800fe38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 800fe3c:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 800fe40:	17da      	asrs	r2, r3, #31
 800fe42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fe46:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 800fe4a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800fe4e:	462b      	mov	r3, r5
 800fe50:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800fe54:	4642      	mov	r2, r8
 800fe56:	fb02 f203 	mul.w	r2, r2, r3
 800fe5a:	464b      	mov	r3, r9
 800fe5c:	4621      	mov	r1, r4
 800fe5e:	fb01 f303 	mul.w	r3, r1, r3
 800fe62:	4413      	add	r3, r2
 800fe64:	4622      	mov	r2, r4
 800fe66:	4641      	mov	r1, r8
 800fe68:	fba2 ab01 	umull	sl, fp, r2, r1
 800fe6c:	445b      	add	r3, fp
 800fe6e:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 800fe70:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 800fe74:	17da      	asrs	r2, r3, #31
 800fe76:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fe78:	67fa      	str	r2, [r7, #124]	@ 0x7c
			((int64_t)ygradient));
 800fe7a:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 800fe7e:	17da      	asrs	r2, r3, #31
 800fe80:	673b      	str	r3, [r7, #112]	@ 0x70
 800fe82:	677a      	str	r2, [r7, #116]	@ 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 800fe84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800fe88:	462b      	mov	r3, r5
 800fe8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800fe8e:	4642      	mov	r2, r8
 800fe90:	fb02 f203 	mul.w	r2, r2, r3
 800fe94:	464b      	mov	r3, r9
 800fe96:	4621      	mov	r1, r4
 800fe98:	fb01 f303 	mul.w	r3, r1, r3
 800fe9c:	4413      	add	r3, r2
 800fe9e:	4622      	mov	r2, r4
 800fea0:	4641      	mov	r1, r8
 800fea2:	fba2 1201 	umull	r1, r2, r2, r1
 800fea6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800feaa:	460a      	mov	r2, r1
 800feac:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800feb0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800feb4:	4413      	add	r3, r2
 800feb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 800feba:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800febe:	460b      	mov	r3, r1
 800fec0:	eb1a 0303 	adds.w	r3, sl, r3
 800fec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fec6:	4613      	mov	r3, r2
 800fec8:	eb4b 0303 	adc.w	r3, fp, r3
 800fecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fece:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800fed2:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 800fed6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800feda:	1c51      	adds	r1, r2, #1
 800fedc:	66b9      	str	r1, [r7, #104]	@ 0x68
 800fede:	f143 0300 	adc.w	r3, r3, #0
 800fee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fee4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800fee8:	460b      	mov	r3, r1
 800feea:	0fdb      	lsrs	r3, r3, #31
 800feec:	2200      	movs	r2, #0
 800feee:	623b      	str	r3, [r7, #32]
 800fef0:	627a      	str	r2, [r7, #36]	@ 0x24
 800fef2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800fef6:	4623      	mov	r3, r4
 800fef8:	4602      	mov	r2, r0
 800fefa:	189b      	adds	r3, r3, r2
 800fefc:	61bb      	str	r3, [r7, #24]
 800fefe:	460b      	mov	r3, r1
 800ff00:	462a      	mov	r2, r5
 800ff02:	eb42 0303 	adc.w	r3, r2, r3
 800ff06:	61fb      	str	r3, [r7, #28]
 800ff08:	f04f 0200 	mov.w	r2, #0
 800ff0c:	f04f 0300 	mov.w	r3, #0
 800ff10:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ff14:	4621      	mov	r1, r4
 800ff16:	084a      	lsrs	r2, r1, #1
 800ff18:	4629      	mov	r1, r5
 800ff1a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800ff1e:	4629      	mov	r1, r5
 800ff20:	104b      	asrs	r3, r1, #1
 800ff22:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 800ff26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ff2e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ff30:	f04f 0200 	mov.w	r2, #0
 800ff34:	f04f 0300 	mov.w	r3, #0
 800ff38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	008b      	lsls	r3, r1, #2
 800ff40:	4621      	mov	r1, r4
 800ff42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ff46:	4621      	mov	r1, r4
 800ff48:	008a      	lsls	r2, r1, #2
 800ff4a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800ff4e:	1884      	adds	r4, r0, r2
 800ff50:	613c      	str	r4, [r7, #16]
 800ff52:	eb41 0303 	adc.w	r3, r1, r3
 800ff56:	617b      	str	r3, [r7, #20]
 800ff58:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ff5c:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 800ff60:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d132      	bne.n	800ffce <VL53LX_f_032+0x4a8>
		xtalk_avg = do_division_s(
 800ff68:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800ff6c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800ff70:	1884      	adds	r4, r0, r2
 800ff72:	65bc      	str	r4, [r7, #88]	@ 0x58
 800ff74:	eb41 0303 	adc.w	r3, r1, r3
 800ff78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ff7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ff7e:	460b      	mov	r3, r1
 800ff80:	3301      	adds	r3, #1
 800ff82:	653b      	str	r3, [r7, #80]	@ 0x50
 800ff84:	4613      	mov	r3, r2
 800ff86:	f143 0300 	adc.w	r3, r3, #0
 800ff8a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ff8c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800ff90:	460b      	mov	r3, r1
 800ff92:	0fdb      	lsrs	r3, r3, #31
 800ff94:	2200      	movs	r2, #0
 800ff96:	60bb      	str	r3, [r7, #8]
 800ff98:	60fa      	str	r2, [r7, #12]
 800ff9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ff9e:	4623      	mov	r3, r4
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	189b      	adds	r3, r3, r2
 800ffa4:	603b      	str	r3, [r7, #0]
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	462a      	mov	r2, r5
 800ffaa:	eb42 0303 	adc.w	r3, r2, r3
 800ffae:	607b      	str	r3, [r7, #4]
 800ffb0:	f04f 0200 	mov.w	r2, #0
 800ffb4:	f04f 0300 	mov.w	r3, #0
 800ffb8:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	084a      	lsrs	r2, r1, #1
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	104b      	asrs	r3, r1, #1
 800ffca:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 800ffce:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d109      	bne.n	800ffea <VL53LX_f_032+0x4c4>
		if (xtalk_avg < 0)
 800ffd6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	da05      	bge.n	800ffea <VL53LX_f_032+0x4c4>
			xtalk_avg = 0;
 800ffde:	f04f 0200 	mov.w	r2, #0
 800ffe2:	f04f 0300 	mov.w	r3, #0
 800ffe6:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 800ffea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ffee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fff2:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 800fff4:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800fffe:	46bd      	mov	sp, r7
 8010000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010004 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8010004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010008:	b09a      	sub	sp, #104	@ 0x68
 801000a:	af00      	add	r7, sp, #0
 801000c:	6478      	str	r0, [r7, #68]	@ 0x44
 801000e:	6439      	str	r1, [r7, #64]	@ 0x40
 8010010:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010012:	63bb      	str	r3, [r7, #56]	@ 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8010014:	2300      	movs	r3, #0
 8010016:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	uint64_t xtalk_events_per_spad = 0;
 801001a:	f04f 0200 	mov.w	r2, #0
 801001e:	f04f 0300 	mov.w	r3, #0
 8010022:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	uint64_t xtalk_total_events = 0;
 8010026:	f04f 0200 	mov.w	r2, #0
 801002a:	f04f 0300 	mov.w	r3, #0
 801002e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	uint64_t xtalk_temp_bin = 0;
 8010032:	f04f 0200 	mov.w	r2, #0
 8010036:	f04f 0300 	mov.w	r3, #0
 801003a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	uint8_t  i = 0;
 801003e:	2300      	movs	r3, #0
 8010040:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8010044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010046:	2200      	movs	r2, #0
 8010048:	633b      	str	r3, [r7, #48]	@ 0x30
 801004a:	637a      	str	r2, [r7, #52]	@ 0x34
 801004c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801004e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010052:	2200      	movs	r2, #0
 8010054:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010058:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801005c:	460b      	mov	r3, r1
 801005e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010060:	fb02 f203 	mul.w	r2, r2, r3
 8010064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010066:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 801006a:	4601      	mov	r1, r0
 801006c:	fb01 f303 	mul.w	r3, r1, r3
 8010070:	4413      	add	r3, r2
 8010072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010076:	fba2 4501 	umull	r4, r5, r2, r1
 801007a:	442b      	add	r3, r5
 801007c:	461d      	mov	r5, r3
 801007e:	f514 73fa 	adds.w	r3, r4, #500	@ 0x1f4
 8010082:	623b      	str	r3, [r7, #32]
 8010084:	f145 0300 	adc.w	r3, r5, #0
 8010088:	627b      	str	r3, [r7, #36]	@ 0x24
 801008a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801008e:	f04f 0300 	mov.w	r3, #0
 8010092:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010096:	f7f0 fe2b 	bl	8000cf0 <__aeabi_uldivmod>
 801009a:	4602      	mov	r2, r0
 801009c:	460b      	mov	r3, r1
 801009e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80100a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100a4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	2200      	movs	r2, #0
 80100ac:	61bb      	str	r3, [r7, #24]
 80100ae:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 80100b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100b2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80100b6:	4622      	mov	r2, r4
 80100b8:	fb02 f203 	mul.w	r2, r2, r3
 80100bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100be:	4629      	mov	r1, r5
 80100c0:	fb01 f303 	mul.w	r3, r1, r3
 80100c4:	4413      	add	r3, r2
 80100c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80100c8:	4621      	mov	r1, r4
 80100ca:	fba2 ab01 	umull	sl, fp, r2, r1
 80100ce:	445b      	add	r3, fp
 80100d0:	469b      	mov	fp, r3
 80100d2:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
 80100d6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80100da:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80100de:	f04f 0200 	mov.w	r2, #0
 80100e2:	f04f 0300 	mov.w	r3, #0
 80100e6:	0a02      	lsrs	r2, r0, #8
 80100e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80100ec:	0a0b      	lsrs	r3, r1, #8
 80100ee:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80100f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80100f6:	f512 6180 	adds.w	r1, r2, #1024	@ 0x400
 80100fa:	6139      	str	r1, [r7, #16]
 80100fc:	f143 0300 	adc.w	r3, r3, #0
 8010100:	617b      	str	r3, [r7, #20]
 8010102:	f04f 0200 	mov.w	r2, #0
 8010106:	f04f 0300 	mov.w	r3, #0
 801010a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801010e:	4621      	mov	r1, r4
 8010110:	0aca      	lsrs	r2, r1, #11
 8010112:	4629      	mov	r1, r5
 8010114:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8010118:	4629      	mov	r1, r5
 801011a:	0acb      	lsrs	r3, r1, #11
 801011c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8010120:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8010124:	2b01      	cmp	r3, #1
 8010126:	d305      	bcc.n	8010134 <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8010128:	f04f 32ff 	mov.w	r2, #4294967295
 801012c:	f04f 0300 	mov.w	r3, #0
 8010130:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010134:	2300      	movs	r3, #0
 8010136:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801013a:	e041      	b.n	80101c0 <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 801013c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010140:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010142:	3302      	adds	r3, #2
 8010144:	009b      	lsls	r3, r3, #2
 8010146:	4413      	add	r3, r2
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	2200      	movs	r2, #0
 801014c:	60bb      	str	r3, [r7, #8]
 801014e:	60fa      	str	r2, [r7, #12]
 8010150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010156:	4622      	mov	r2, r4
 8010158:	fb02 f203 	mul.w	r2, r2, r3
 801015c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801015e:	4629      	mov	r1, r5
 8010160:	fb01 f303 	mul.w	r3, r1, r3
 8010164:	4413      	add	r3, r2
 8010166:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010168:	4621      	mov	r1, r4
 801016a:	fba2 8901 	umull	r8, r9, r2, r1
 801016e:	444b      	add	r3, r9
 8010170:	4699      	mov	r9, r3
 8010172:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
 8010176:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 801017a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801017e:	f512 7100 	adds.w	r1, r2, #512	@ 0x200
 8010182:	6039      	str	r1, [r7, #0]
 8010184:	f143 0300 	adc.w	r3, r3, #0
 8010188:	607b      	str	r3, [r7, #4]
 801018a:	f04f 0200 	mov.w	r2, #0
 801018e:	f04f 0300 	mov.w	r3, #0
 8010192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010196:	4621      	mov	r1, r4
 8010198:	0a8a      	lsrs	r2, r1, #10
 801019a:	4629      	mov	r1, r5
 801019c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80101a0:	4629      	mov	r1, r5
 80101a2:	0a8b      	lsrs	r3, r1, #10
 80101a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80101a8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80101ac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80101ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b0:	3206      	adds	r2, #6
 80101b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80101b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101ba:	3301      	adds	r3, #1
 80101bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80101c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101c2:	7a9b      	ldrb	r3, [r3, #10]
 80101c4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d3b7      	bcc.n	801013c <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80101cc:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3768      	adds	r7, #104	@ 0x68
 80101d4:	46bd      	mov	sp, r7
 80101d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080101dc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80101e4:	1d39      	adds	r1, r7, #4
 80101e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80101ea:	2201      	movs	r2, #1
 80101ec:	4803      	ldr	r0, [pc, #12]	@ (80101fc <__io_putchar+0x20>)
 80101ee:	f008 fccd 	bl	8018b8c <HAL_UART_Transmit>
	return ch;
 80101f2:	687b      	ldr	r3, [r7, #4]
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	2000039c 	.word	0x2000039c

08010200 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	4a1f      	ldr	r2, [pc, #124]	@ (801028c <HAL_UART_RxCpltCallback+0x8c>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d137      	bne.n	8010282 <HAL_UART_RxCpltCallback+0x82>
  {
    if(rxData==79) // Ascii value of 'O' is 79
 8010212:	4b1f      	ldr	r3, [pc, #124]	@ (8010290 <HAL_UART_RxCpltCallback+0x90>)
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	2b4f      	cmp	r3, #79	@ 0x4f
 8010218:	d115      	bne.n	8010246 <HAL_UART_RxCpltCallback+0x46>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 801021a:	2201      	movs	r2, #1
 801021c:	2180      	movs	r1, #128	@ 0x80
 801021e:	481d      	ldr	r0, [pc, #116]	@ (8010294 <HAL_UART_RxCpltCallback+0x94>)
 8010220:	f002 fc5e 	bl	8012ae0 <HAL_GPIO_WritePin>
    	snprintf(uart_buffer, sizeof(uart_buffer), "led on");
 8010224:	4a1c      	ldr	r2, [pc, #112]	@ (8010298 <HAL_UART_RxCpltCallback+0x98>)
 8010226:	2140      	movs	r1, #64	@ 0x40
 8010228:	481c      	ldr	r0, [pc, #112]	@ (801029c <HAL_UART_RxCpltCallback+0x9c>)
 801022a:	f00a fe71 	bl	801af10 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 801022e:	481b      	ldr	r0, [pc, #108]	@ (801029c <HAL_UART_RxCpltCallback+0x9c>)
 8010230:	f7f0 f822 	bl	8000278 <strlen>
 8010234:	4603      	mov	r3, r0
 8010236:	b29a      	uxth	r2, r3
 8010238:	f04f 33ff 	mov.w	r3, #4294967295
 801023c:	4917      	ldr	r1, [pc, #92]	@ (801029c <HAL_UART_RxCpltCallback+0x9c>)
 801023e:	4818      	ldr	r0, [pc, #96]	@ (80102a0 <HAL_UART_RxCpltCallback+0xa0>)
 8010240:	f008 fca4 	bl	8018b8c <HAL_UART_Transmit>
 8010244:	e018      	b.n	8010278 <HAL_UART_RxCpltCallback+0x78>
    }
    else if (rxData==88) // Ascii value of 'X' is 88
 8010246:	4b12      	ldr	r3, [pc, #72]	@ (8010290 <HAL_UART_RxCpltCallback+0x90>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b58      	cmp	r3, #88	@ 0x58
 801024c:	d114      	bne.n	8010278 <HAL_UART_RxCpltCallback+0x78>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 801024e:	2200      	movs	r2, #0
 8010250:	2180      	movs	r1, #128	@ 0x80
 8010252:	4810      	ldr	r0, [pc, #64]	@ (8010294 <HAL_UART_RxCpltCallback+0x94>)
 8010254:	f002 fc44 	bl	8012ae0 <HAL_GPIO_WritePin>
    	snprintf(uart_buffer, sizeof(uart_buffer), "led off");
 8010258:	4a12      	ldr	r2, [pc, #72]	@ (80102a4 <HAL_UART_RxCpltCallback+0xa4>)
 801025a:	2140      	movs	r1, #64	@ 0x40
 801025c:	480f      	ldr	r0, [pc, #60]	@ (801029c <HAL_UART_RxCpltCallback+0x9c>)
 801025e:	f00a fe57 	bl	801af10 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8010262:	480e      	ldr	r0, [pc, #56]	@ (801029c <HAL_UART_RxCpltCallback+0x9c>)
 8010264:	f7f0 f808 	bl	8000278 <strlen>
 8010268:	4603      	mov	r3, r0
 801026a:	b29a      	uxth	r2, r3
 801026c:	f04f 33ff 	mov.w	r3, #4294967295
 8010270:	490a      	ldr	r1, [pc, #40]	@ (801029c <HAL_UART_RxCpltCallback+0x9c>)
 8010272:	480b      	ldr	r0, [pc, #44]	@ (80102a0 <HAL_UART_RxCpltCallback+0xa0>)
 8010274:	f008 fc8a 	bl	8018b8c <HAL_UART_Transmit>
    }
    HAL_UART_Receive_IT(&huart2,&rxData,1);
 8010278:	2201      	movs	r2, #1
 801027a:	4905      	ldr	r1, [pc, #20]	@ (8010290 <HAL_UART_RxCpltCallback+0x90>)
 801027c:	4808      	ldr	r0, [pc, #32]	@ (80102a0 <HAL_UART_RxCpltCallback+0xa0>)
 801027e:	f008 fd23 	bl	8018cc8 <HAL_UART_Receive_IT>
  }
}
 8010282:	bf00      	nop
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	40004400 	.word	0x40004400
 8010290:	20005970 	.word	0x20005970
 8010294:	42020800 	.word	0x42020800
 8010298:	0801d210 	.word	0x0801d210
 801029c:	20005930 	.word	0x20005930
 80102a0:	2000039c 	.word	0x2000039c
 80102a4:	0801d218 	.word	0x0801d218

080102a8 <ReadAccelerometer>:
	{
		IntCountRight++;
	}
}

float* ReadAccelerometer(void) {
 80102a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80102ac:	b088      	sub	sp, #32
 80102ae:	af06      	add	r7, sp, #24

	//Read 6 bytes of data (X_L, X_H, Y_L, Y_H, Z_L, Z_H)
	if (HAL_I2C_Mem_Read(&hi2c2, LIS3DH_I2C_ADDR, OUT_X_L | 0x80, I2C_MEMADD_SIZE_8BIT, accel_data_buffer, 6, HAL_MAX_DELAY) == HAL_OK) {
 80102b0:	f04f 33ff 	mov.w	r3, #4294967295
 80102b4:	9302      	str	r3, [sp, #8]
 80102b6:	2306      	movs	r3, #6
 80102b8:	9301      	str	r3, [sp, #4]
 80102ba:	4b75      	ldr	r3, [pc, #468]	@ (8010490 <ReadAccelerometer+0x1e8>)
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	2301      	movs	r3, #1
 80102c0:	22a8      	movs	r2, #168	@ 0xa8
 80102c2:	2132      	movs	r1, #50	@ 0x32
 80102c4:	4873      	ldr	r0, [pc, #460]	@ (8010494 <ReadAccelerometer+0x1ec>)
 80102c6:	f002 fea9 	bl	801301c <HAL_I2C_Mem_Read>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f040 80b3 	bne.w	8010438 <ReadAccelerometer+0x190>
		int16_t x = (int16_t)((accel_data_buffer[1] << 8) | accel_data_buffer[0]);
 80102d2:	4b6f      	ldr	r3, [pc, #444]	@ (8010490 <ReadAccelerometer+0x1e8>)
 80102d4:	785b      	ldrb	r3, [r3, #1]
 80102d6:	021b      	lsls	r3, r3, #8
 80102d8:	b21a      	sxth	r2, r3
 80102da:	4b6d      	ldr	r3, [pc, #436]	@ (8010490 <ReadAccelerometer+0x1e8>)
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	b21b      	sxth	r3, r3
 80102e0:	4313      	orrs	r3, r2
 80102e2:	80fb      	strh	r3, [r7, #6]
		int16_t y = (int16_t)((accel_data_buffer[3] << 8) | accel_data_buffer[2]);
 80102e4:	4b6a      	ldr	r3, [pc, #424]	@ (8010490 <ReadAccelerometer+0x1e8>)
 80102e6:	78db      	ldrb	r3, [r3, #3]
 80102e8:	021b      	lsls	r3, r3, #8
 80102ea:	b21a      	sxth	r2, r3
 80102ec:	4b68      	ldr	r3, [pc, #416]	@ (8010490 <ReadAccelerometer+0x1e8>)
 80102ee:	789b      	ldrb	r3, [r3, #2]
 80102f0:	b21b      	sxth	r3, r3
 80102f2:	4313      	orrs	r3, r2
 80102f4:	80bb      	strh	r3, [r7, #4]
		int16_t z = (int16_t)((accel_data_buffer[5] << 8) | accel_data_buffer[4]);
 80102f6:	4b66      	ldr	r3, [pc, #408]	@ (8010490 <ReadAccelerometer+0x1e8>)
 80102f8:	795b      	ldrb	r3, [r3, #5]
 80102fa:	021b      	lsls	r3, r3, #8
 80102fc:	b21a      	sxth	r2, r3
 80102fe:	4b64      	ldr	r3, [pc, #400]	@ (8010490 <ReadAccelerometer+0x1e8>)
 8010300:	791b      	ldrb	r3, [r3, #4]
 8010302:	b21b      	sxth	r3, r3
 8010304:	4313      	orrs	r3, r2
 8010306:	807b      	strh	r3, [r7, #2]

		//Convert raw values
		accel_values[0] = x * 2.0 * 9.81 / 32768.0;
 8010308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801030c:	4618      	mov	r0, r3
 801030e:	f7f0 f90d 	bl	800052c <__aeabi_i2d>
 8010312:	4602      	mov	r2, r0
 8010314:	460b      	mov	r3, r1
 8010316:	f7ef ffbd 	bl	8000294 <__adddf3>
 801031a:	4602      	mov	r2, r0
 801031c:	460b      	mov	r3, r1
 801031e:	4610      	mov	r0, r2
 8010320:	4619      	mov	r1, r3
 8010322:	a359      	add	r3, pc, #356	@ (adr r3, 8010488 <ReadAccelerometer+0x1e0>)
 8010324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010328:	f7f0 f96a 	bl	8000600 <__aeabi_dmul>
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	4610      	mov	r0, r2
 8010332:	4619      	mov	r1, r3
 8010334:	f04f 0200 	mov.w	r2, #0
 8010338:	4b57      	ldr	r3, [pc, #348]	@ (8010498 <ReadAccelerometer+0x1f0>)
 801033a:	f7f0 fa8b 	bl	8000854 <__aeabi_ddiv>
 801033e:	4602      	mov	r2, r0
 8010340:	460b      	mov	r3, r1
 8010342:	4610      	mov	r0, r2
 8010344:	4619      	mov	r1, r3
 8010346:	f7f0 fc33 	bl	8000bb0 <__aeabi_d2f>
 801034a:	4603      	mov	r3, r0
 801034c:	4a53      	ldr	r2, [pc, #332]	@ (801049c <ReadAccelerometer+0x1f4>)
 801034e:	6013      	str	r3, [r2, #0]
		accel_values[1] = y * 2.0 * 9.81 / 32768.0;
 8010350:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010354:	4618      	mov	r0, r3
 8010356:	f7f0 f8e9 	bl	800052c <__aeabi_i2d>
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	f7ef ff99 	bl	8000294 <__adddf3>
 8010362:	4602      	mov	r2, r0
 8010364:	460b      	mov	r3, r1
 8010366:	4610      	mov	r0, r2
 8010368:	4619      	mov	r1, r3
 801036a:	a347      	add	r3, pc, #284	@ (adr r3, 8010488 <ReadAccelerometer+0x1e0>)
 801036c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010370:	f7f0 f946 	bl	8000600 <__aeabi_dmul>
 8010374:	4602      	mov	r2, r0
 8010376:	460b      	mov	r3, r1
 8010378:	4610      	mov	r0, r2
 801037a:	4619      	mov	r1, r3
 801037c:	f04f 0200 	mov.w	r2, #0
 8010380:	4b45      	ldr	r3, [pc, #276]	@ (8010498 <ReadAccelerometer+0x1f0>)
 8010382:	f7f0 fa67 	bl	8000854 <__aeabi_ddiv>
 8010386:	4602      	mov	r2, r0
 8010388:	460b      	mov	r3, r1
 801038a:	4610      	mov	r0, r2
 801038c:	4619      	mov	r1, r3
 801038e:	f7f0 fc0f 	bl	8000bb0 <__aeabi_d2f>
 8010392:	4603      	mov	r3, r0
 8010394:	4a41      	ldr	r2, [pc, #260]	@ (801049c <ReadAccelerometer+0x1f4>)
 8010396:	6053      	str	r3, [r2, #4]
		accel_values[2] = z * 2.0 * 9.81 / 32768.0;
 8010398:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801039c:	4618      	mov	r0, r3
 801039e:	f7f0 f8c5 	bl	800052c <__aeabi_i2d>
 80103a2:	4602      	mov	r2, r0
 80103a4:	460b      	mov	r3, r1
 80103a6:	f7ef ff75 	bl	8000294 <__adddf3>
 80103aa:	4602      	mov	r2, r0
 80103ac:	460b      	mov	r3, r1
 80103ae:	4610      	mov	r0, r2
 80103b0:	4619      	mov	r1, r3
 80103b2:	a335      	add	r3, pc, #212	@ (adr r3, 8010488 <ReadAccelerometer+0x1e0>)
 80103b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b8:	f7f0 f922 	bl	8000600 <__aeabi_dmul>
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	4610      	mov	r0, r2
 80103c2:	4619      	mov	r1, r3
 80103c4:	f04f 0200 	mov.w	r2, #0
 80103c8:	4b33      	ldr	r3, [pc, #204]	@ (8010498 <ReadAccelerometer+0x1f0>)
 80103ca:	f7f0 fa43 	bl	8000854 <__aeabi_ddiv>
 80103ce:	4602      	mov	r2, r0
 80103d0:	460b      	mov	r3, r1
 80103d2:	4610      	mov	r0, r2
 80103d4:	4619      	mov	r1, r3
 80103d6:	f7f0 fbeb 	bl	8000bb0 <__aeabi_d2f>
 80103da:	4603      	mov	r3, r0
 80103dc:	4a2f      	ldr	r2, [pc, #188]	@ (801049c <ReadAccelerometer+0x1f4>)
 80103de:	6093      	str	r3, [r2, #8]

		//Format and send the data to UART
		snprintf(uart_buffer, sizeof(uart_buffer), "X: %.2f m/s^2, Y: %.2f m/s^2, Z: %.2f m/s^2\r\n", accel_values[0], accel_values[1], accel_values[2]); // @suppress("Float formatting support")
 80103e0:	4b2e      	ldr	r3, [pc, #184]	@ (801049c <ReadAccelerometer+0x1f4>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7f0 f8b3 	bl	8000550 <__aeabi_f2d>
 80103ea:	4604      	mov	r4, r0
 80103ec:	460d      	mov	r5, r1
 80103ee:	4b2b      	ldr	r3, [pc, #172]	@ (801049c <ReadAccelerometer+0x1f4>)
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7f0 f8ac 	bl	8000550 <__aeabi_f2d>
 80103f8:	4680      	mov	r8, r0
 80103fa:	4689      	mov	r9, r1
 80103fc:	4b27      	ldr	r3, [pc, #156]	@ (801049c <ReadAccelerometer+0x1f4>)
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	4618      	mov	r0, r3
 8010402:	f7f0 f8a5 	bl	8000550 <__aeabi_f2d>
 8010406:	4602      	mov	r2, r0
 8010408:	460b      	mov	r3, r1
 801040a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801040e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010412:	e9cd 4500 	strd	r4, r5, [sp]
 8010416:	4a22      	ldr	r2, [pc, #136]	@ (80104a0 <ReadAccelerometer+0x1f8>)
 8010418:	2140      	movs	r1, #64	@ 0x40
 801041a:	4822      	ldr	r0, [pc, #136]	@ (80104a4 <ReadAccelerometer+0x1fc>)
 801041c:	f00a fd78 	bl	801af10 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8010420:	4820      	ldr	r0, [pc, #128]	@ (80104a4 <ReadAccelerometer+0x1fc>)
 8010422:	f7ef ff29 	bl	8000278 <strlen>
 8010426:	4603      	mov	r3, r0
 8010428:	b29a      	uxth	r2, r3
 801042a:	f04f 33ff 	mov.w	r3, #4294967295
 801042e:	491d      	ldr	r1, [pc, #116]	@ (80104a4 <ReadAccelerometer+0x1fc>)
 8010430:	481d      	ldr	r0, [pc, #116]	@ (80104a8 <ReadAccelerometer+0x200>)
 8010432:	f008 fbab 	bl	8018b8c <HAL_UART_Transmit>
 8010436:	e01e      	b.n	8010476 <ReadAccelerometer+0x1ce>

	} else {
		accel_values[0] = accel_values[1] = accel_values[2] = 0.0; // Error3
 8010438:	4b18      	ldr	r3, [pc, #96]	@ (801049c <ReadAccelerometer+0x1f4>)
 801043a:	f04f 0200 	mov.w	r2, #0
 801043e:	609a      	str	r2, [r3, #8]
 8010440:	4b16      	ldr	r3, [pc, #88]	@ (801049c <ReadAccelerometer+0x1f4>)
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	4a15      	ldr	r2, [pc, #84]	@ (801049c <ReadAccelerometer+0x1f4>)
 8010446:	6053      	str	r3, [r2, #4]
 8010448:	4b14      	ldr	r3, [pc, #80]	@ (801049c <ReadAccelerometer+0x1f4>)
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	4a13      	ldr	r2, [pc, #76]	@ (801049c <ReadAccelerometer+0x1f4>)
 801044e:	6013      	str	r3, [r2, #0]
		strcpy(uart_buffer, "I2C Read Error\r\n");
 8010450:	4a14      	ldr	r2, [pc, #80]	@ (80104a4 <ReadAccelerometer+0x1fc>)
 8010452:	4b16      	ldr	r3, [pc, #88]	@ (80104ac <ReadAccelerometer+0x204>)
 8010454:	4614      	mov	r4, r2
 8010456:	461d      	mov	r5, r3
 8010458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801045a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801045c:	682b      	ldr	r3, [r5, #0]
 801045e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8010460:	4810      	ldr	r0, [pc, #64]	@ (80104a4 <ReadAccelerometer+0x1fc>)
 8010462:	f7ef ff09 	bl	8000278 <strlen>
 8010466:	4603      	mov	r3, r0
 8010468:	b29a      	uxth	r2, r3
 801046a:	f04f 33ff 	mov.w	r3, #4294967295
 801046e:	490d      	ldr	r1, [pc, #52]	@ (80104a4 <ReadAccelerometer+0x1fc>)
 8010470:	480f      	ldr	r0, [pc, #60]	@ (80104b0 <ReadAccelerometer+0x208>)
 8010472:	f008 fb8b 	bl	8018b8c <HAL_UART_Transmit>
	}
	return accel_values;
 8010476:	4b09      	ldr	r3, [pc, #36]	@ (801049c <ReadAccelerometer+0x1f4>)
}
 8010478:	4618      	mov	r0, r3
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010482:	bf00      	nop
 8010484:	f3af 8000 	nop.w
 8010488:	51eb851f 	.word	0x51eb851f
 801048c:	40239eb8 	.word	0x40239eb8
 8010490:	20005928 	.word	0x20005928
 8010494:	20000224 	.word	0x20000224
 8010498:	40e00000 	.word	0x40e00000
 801049c:	20005974 	.word	0x20005974
 80104a0:	0801d220 	.word	0x0801d220
 80104a4:	20005930 	.word	0x20005930
 80104a8:	2000039c 	.word	0x2000039c
 80104ac:	0801d250 	.word	0x0801d250
 80104b0:	20000308 	.word	0x20000308

080104b4 <DisplayOLED>:

void DisplayOLED(void) {
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
    static bool screenIsRed = false;
    float* accel_values = ReadAccelerometer();
 80104ba:	f7ff fef5 	bl	80102a8 <ReadAccelerometer>
 80104be:	6078      	str	r0, [r7, #4]

    if (accel_values[2] < -1.0) {
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3308      	adds	r3, #8
 80104c4:	edd3 7a00 	vldr	s15, [r3]
 80104c8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80104cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80104d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d4:	d50e      	bpl.n	80104f4 <DisplayOLED+0x40>
        if (!screenIsRed) {
 80104d6:	4b0e      	ldr	r3, [pc, #56]	@ (8010510 <DisplayOLED+0x5c>)
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	f083 0301 	eor.w	r3, r3, #1
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d011      	beq.n	8010508 <DisplayOLED+0x54>
            SSD1351_FillScreen(0xF800);  // fill red
 80104e4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80104e8:	f001 f88e 	bl	8011608 <SSD1351_FillScreen>
            screenIsRed = true;
 80104ec:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <DisplayOLED+0x5c>)
 80104ee:	2201      	movs	r2, #1
 80104f0:	701a      	strb	r2, [r3, #0]
        if (screenIsRed) {
            SSD1351_FillScreen(0x0000);  // fill black
            screenIsRed = false;
        }
    }
}
 80104f2:	e009      	b.n	8010508 <DisplayOLED+0x54>
        if (screenIsRed) {
 80104f4:	4b06      	ldr	r3, [pc, #24]	@ (8010510 <DisplayOLED+0x5c>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d005      	beq.n	8010508 <DisplayOLED+0x54>
            SSD1351_FillScreen(0x0000);  // fill black
 80104fc:	2000      	movs	r0, #0
 80104fe:	f001 f883 	bl	8011608 <SSD1351_FillScreen>
            screenIsRed = false;
 8010502:	4b03      	ldr	r3, [pc, #12]	@ (8010510 <DisplayOLED+0x5c>)
 8010504:	2200      	movs	r2, #0
 8010506:	701a      	strb	r2, [r3, #0]
}
 8010508:	bf00      	nop
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	20005980 	.word	0x20005980

08010514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010514:	b5b0      	push	{r4, r5, r7, lr}
 8010516:	b09e      	sub	sp, #120	@ 0x78
 8010518:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint8_t byteData;
	uint16_t wordData;
	VL53LX_MultiRangingData_t MultiRangingData;
	VL53LX_MultiRangingData_t *pMultiRangingData = &MultiRangingData;
 801051a:	1d3b      	adds	r3, r7, #4
 801051c:	66bb      	str	r3, [r7, #104]	@ 0x68
	uint8_t NewDataReady=0;
 801051e:	2300      	movs	r3, #0
 8010520:	70fb      	strb	r3, [r7, #3]
	int no_of_object_found=0;
 8010522:	2300      	movs	r3, #0
 8010524:	667b      	str	r3, [r7, #100]	@ 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010526:	f001 ff57 	bl	80123d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 801052a:	f000 fbd8 	bl	8010cde <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 801052e:	f000 fb8d 	bl	8010c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010532:	f000 fd3f 	bl	8010fb4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8010536:	f000 fc21 	bl	8010d7c <MX_ICACHE_Init>
  MX_I2C2_Init();
 801053a:	f000 fbe1 	bl	8010d00 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 801053e:	f000 fca1 	bl	8010e84 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8010542:	f000 fc2f 	bl	8010da4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8010546:	f000 fce9 	bl	8010f1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2,&rxData,1);
 801054a:	2201      	movs	r2, #1
 801054c:	49bd      	ldr	r1, [pc, #756]	@ (8010844 <main+0x330>)
 801054e:	48be      	ldr	r0, [pc, #760]	@ (8010848 <main+0x334>)
 8010550:	f008 fbba 	bl	8018cc8 <HAL_UART_Receive_IT>

  snprintf(uart_buffer, sizeof(uart_buffer), "BLUETOOTH LOG:\n");
 8010554:	4abd      	ldr	r2, [pc, #756]	@ (801084c <main+0x338>)
 8010556:	2140      	movs	r1, #64	@ 0x40
 8010558:	48bd      	ldr	r0, [pc, #756]	@ (8010850 <main+0x33c>)
 801055a:	f00a fcd9 	bl	801af10 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 801055e:	48bc      	ldr	r0, [pc, #752]	@ (8010850 <main+0x33c>)
 8010560:	f7ef fe8a 	bl	8000278 <strlen>
 8010564:	4603      	mov	r3, r0
 8010566:	b29a      	uxth	r2, r3
 8010568:	f04f 33ff 	mov.w	r3, #4294967295
 801056c:	49b8      	ldr	r1, [pc, #736]	@ (8010850 <main+0x33c>)
 801056e:	48b6      	ldr	r0, [pc, #728]	@ (8010848 <main+0x334>)
 8010570:	f008 fb0c 	bl	8018b8c <HAL_UART_Transmit>

  	// OLED Init
	SSD1351_Unselect();
 8010574:	f000 feb8 	bl	80112e8 <SSD1351_Unselect>
	SSD1351_Init();
 8010578:	f000 ff62 	bl	8011440 <SSD1351_Init>

	// Set LEDs to High
	HAL_GPIO_WritePin(L_RED_GPIO_Port, L_RED_Pin, 1);
 801057c:	2201      	movs	r2, #1
 801057e:	2101      	movs	r1, #1
 8010580:	48b4      	ldr	r0, [pc, #720]	@ (8010854 <main+0x340>)
 8010582:	f002 faad 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_YELLOW_GPIO_Port, L_YELLOW_Pin, 1);
 8010586:	2201      	movs	r2, #1
 8010588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801058c:	48b2      	ldr	r0, [pc, #712]	@ (8010858 <main+0x344>)
 801058e:	f002 faa7 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_RED_GPIO_Port, R_RED_Pin, 1);
 8010592:	2201      	movs	r2, #1
 8010594:	2101      	movs	r1, #1
 8010596:	48b1      	ldr	r0, [pc, #708]	@ (801085c <main+0x348>)
 8010598:	f002 faa2 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R_YELLOW_GPIO_Port, R_YELLOW_Pin, 1);
 801059c:	2201      	movs	r2, #1
 801059e:	2102      	movs	r1, #2
 80105a0:	48af      	ldr	r0, [pc, #700]	@ (8010860 <main+0x34c>)
 80105a2:	f002 fa9d 	bl	8012ae0 <HAL_GPIO_WritePin>

	// Display Logo
	SSD1351_DrawImage(0, 0, 128, 128, (const uint16_t*)test_img_128x128);
 80105a6:	4baf      	ldr	r3, [pc, #700]	@ (8010864 <main+0x350>)
 80105a8:	9300      	str	r3, [sp, #0]
 80105aa:	2380      	movs	r3, #128	@ 0x80
 80105ac:	2280      	movs	r2, #128	@ 0x80
 80105ae:	2100      	movs	r1, #0
 80105b0:	2000      	movs	r0, #0
 80105b2:	f001 f8b3 	bl	801171c <SSD1351_DrawImage>
	HAL_Delay(2500);
 80105b6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80105ba:	f001 ff5d 	bl	8012478 <HAL_Delay>
	SSD1351_FillScreen(0x0000);
 80105be:	2000      	movs	r0, #0
 80105c0:	f001 f822 	bl	8011608 <SSD1351_FillScreen>

	// Try to configure accelerometer
	uint8_t config[2] = {CTRL_REG1, 0x97};
 80105c4:	f249 7320 	movw	r3, #38688	@ 0x9720
 80105c8:	803b      	strh	r3, [r7, #0]
	if (HAL_I2C_Master_Transmit(&hi2c2, LIS3DH_I2C_ADDR, config, 2, HAL_MAX_DELAY) != HAL_OK) {
 80105ca:	463a      	mov	r2, r7
 80105cc:	f04f 33ff 	mov.w	r3, #4294967295
 80105d0:	9300      	str	r3, [sp, #0]
 80105d2:	2302      	movs	r3, #2
 80105d4:	2132      	movs	r1, #50	@ 0x32
 80105d6:	48a4      	ldr	r0, [pc, #656]	@ (8010868 <main+0x354>)
 80105d8:	f002 fb36 	bl	8012c48 <HAL_I2C_Master_Transmit>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d014      	beq.n	801060c <main+0xf8>
		strcpy(uart_buffer, "Failed to configure accelerometer\r\n");
 80105e2:	4a9b      	ldr	r2, [pc, #620]	@ (8010850 <main+0x33c>)
 80105e4:	4ba1      	ldr	r3, [pc, #644]	@ (801086c <main+0x358>)
 80105e6:	4614      	mov	r4, r2
 80105e8:	461d      	mov	r5, r3
 80105ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105f2:	682b      	ldr	r3, [r5, #0]
 80105f4:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80105f6:	4896      	ldr	r0, [pc, #600]	@ (8010850 <main+0x33c>)
 80105f8:	f7ef fe3e 	bl	8000278 <strlen>
 80105fc:	4603      	mov	r3, r0
 80105fe:	b29a      	uxth	r2, r3
 8010600:	f04f 33ff 	mov.w	r3, #4294967295
 8010604:	4992      	ldr	r1, [pc, #584]	@ (8010850 <main+0x33c>)
 8010606:	489a      	ldr	r0, [pc, #616]	@ (8010870 <main+0x35c>)
 8010608:	f008 fac0 	bl	8018b8c <HAL_UART_Transmit>
	}

	printf("VL53L4CX Initialization\n");
 801060c:	4899      	ldr	r0, [pc, #612]	@ (8010874 <main+0x360>)
 801060e:	f00a fc77 	bl	801af00 <puts>
	DevLeft->I2cHandle = &hi2c2;
 8010612:	4b99      	ldr	r3, [pc, #612]	@ (8010878 <main+0x364>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801061a:	461a      	mov	r2, r3
 801061c:	4b92      	ldr	r3, [pc, #584]	@ (8010868 <main+0x354>)
 801061e:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
	DevRight->I2cHandle = &hi2c2;
 8010622:	4b96      	ldr	r3, [pc, #600]	@ (801087c <main+0x368>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801062a:	461a      	mov	r2, r3
 801062c:	4b8e      	ldr	r3, [pc, #568]	@ (8010868 <main+0x354>)
 801062e:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c

	// ALL LOW
	HAL_GPIO_WritePin(TOF_L_XSHUT_GPIO_Port, TOF_L_XSHUT_Pin, GPIO_PIN_RESET);
 8010632:	2200      	movs	r2, #0
 8010634:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8010638:	4891      	ldr	r0, [pc, #580]	@ (8010880 <main+0x36c>)
 801063a:	f002 fa51 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 801063e:	2005      	movs	r0, #5
 8010640:	f001 ff1a 	bl	8012478 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_R_XSHUT_GPIO_Port, TOF_R_XSHUT_Pin, GPIO_PIN_RESET);
 8010644:	2200      	movs	r2, #0
 8010646:	2102      	movs	r1, #2
 8010648:	4884      	ldr	r0, [pc, #528]	@ (801085c <main+0x348>)
 801064a:	f002 fa49 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 801064e:	2005      	movs	r0, #5
 8010650:	f001 ff12 	bl	8012478 <HAL_Delay>
	// LEFT ToF HIGH
	HAL_GPIO_WritePin(TOF_L_XSHUT_GPIO_Port, TOF_L_XSHUT_Pin, GPIO_PIN_SET);
 8010654:	2201      	movs	r2, #1
 8010656:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801065a:	4889      	ldr	r0, [pc, #548]	@ (8010880 <main+0x36c>)
 801065c:	f002 fa40 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8010660:	2005      	movs	r0, #5
 8010662:	f001 ff09 	bl	8012478 <HAL_Delay>

	DevLeft->I2cHandle = &hi2c2;
 8010666:	4b84      	ldr	r3, [pc, #528]	@ (8010878 <main+0x364>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801066e:	461a      	mov	r2, r3
 8010670:	4b7d      	ldr	r3, [pc, #500]	@ (8010868 <main+0x354>)
 8010672:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
	DevLeft->I2cDevAddr = 0x52;
 8010676:	4b80      	ldr	r3, [pc, #512]	@ (8010878 <main+0x364>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801067e:	2252      	movs	r2, #82	@ 0x52
 8010680:	f883 2a50 	strb.w	r2, [r3, #2640]	@ 0xa50
	status = VL53LX_SetDeviceAddress(DevLeft, 0X52);
 8010684:	4b7c      	ldr	r3, [pc, #496]	@ (8010878 <main+0x364>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2152      	movs	r1, #82	@ 0x52
 801068a:	4618      	mov	r0, r3
 801068c:	f7f0 fcbc 	bl	8001008 <VL53LX_SetDeviceAddress>
 8010690:	4603      	mov	r3, r0
 8010692:	461a      	mov	r2, r3
 8010694:	4b7b      	ldr	r3, [pc, #492]	@ (8010884 <main+0x370>)
 8010696:	601a      	str	r2, [r3, #0]

	//ALL LOW
	HAL_GPIO_WritePin(TOF_L_XSHUT_GPIO_Port, TOF_L_XSHUT_Pin, GPIO_PIN_RESET);
 8010698:	2200      	movs	r2, #0
 801069a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801069e:	4878      	ldr	r0, [pc, #480]	@ (8010880 <main+0x36c>)
 80106a0:	f002 fa1e 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80106a4:	2005      	movs	r0, #5
 80106a6:	f001 fee7 	bl	8012478 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_R_XSHUT_GPIO_Port, TOF_R_XSHUT_Pin, GPIO_PIN_RESET);
 80106aa:	2200      	movs	r2, #0
 80106ac:	2102      	movs	r1, #2
 80106ae:	486b      	ldr	r0, [pc, #428]	@ (801085c <main+0x348>)
 80106b0:	f002 fa16 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80106b4:	2005      	movs	r0, #5
 80106b6:	f001 fedf 	bl	8012478 <HAL_Delay>

	// RIGHT ToF HIGH
	HAL_GPIO_WritePin(TOF_R_XSHUT_GPIO_Port, TOF_R_XSHUT_Pin, GPIO_PIN_SET);
 80106ba:	2201      	movs	r2, #1
 80106bc:	2102      	movs	r1, #2
 80106be:	4867      	ldr	r0, [pc, #412]	@ (801085c <main+0x348>)
 80106c0:	f002 fa0e 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80106c4:	2005      	movs	r0, #5
 80106c6:	f001 fed7 	bl	8012478 <HAL_Delay>

	DevRight->I2cHandle = &hi2c2;
 80106ca:	4b6c      	ldr	r3, [pc, #432]	@ (801087c <main+0x368>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80106d2:	461a      	mov	r2, r3
 80106d4:	4b64      	ldr	r3, [pc, #400]	@ (8010868 <main+0x354>)
 80106d6:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
	DevRight->I2cDevAddr = 0x53;
 80106da:	4b68      	ldr	r3, [pc, #416]	@ (801087c <main+0x368>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80106e2:	2253      	movs	r2, #83	@ 0x53
 80106e4:	f883 2a50 	strb.w	r2, [r3, #2640]	@ 0xa50
	status = VL53LX_SetDeviceAddress(DevRight, 0X53);
 80106e8:	4b64      	ldr	r3, [pc, #400]	@ (801087c <main+0x368>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2153      	movs	r1, #83	@ 0x53
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7f0 fc8a 	bl	8001008 <VL53LX_SetDeviceAddress>
 80106f4:	4603      	mov	r3, r0
 80106f6:	461a      	mov	r2, r3
 80106f8:	4b62      	ldr	r3, [pc, #392]	@ (8010884 <main+0x370>)
 80106fa:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(TOF_L_XSHUT_GPIO_Port, TOF_L_XSHUT_Pin, GPIO_PIN_SET);
 80106fc:	2201      	movs	r2, #1
 80106fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8010702:	485f      	ldr	r0, [pc, #380]	@ (8010880 <main+0x36c>)
 8010704:	f002 f9ec 	bl	8012ae0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8010708:	2005      	movs	r0, #5
 801070a:	f001 feb5 	bl	8012478 <HAL_Delay>

	// device ID must be 0XEBAA, those lines can be used to check if the I2C basic functions have been implemented correctly
	VL53LX_RdByte(DevLeft, 0x010F, &byteData);
 801070e:	4b5a      	ldr	r3, [pc, #360]	@ (8010878 <main+0x364>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8010716:	f240 110f 	movw	r1, #271	@ 0x10f
 801071a:	4618      	mov	r0, r3
 801071c:	f001 fcb4 	bl	8012088 <VL53LX_RdByte>
	printf("VL53L4CX Model_ID: %02X\n\r", byteData);
 8010720:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8010724:	4619      	mov	r1, r3
 8010726:	4858      	ldr	r0, [pc, #352]	@ (8010888 <main+0x374>)
 8010728:	f00a fb82 	bl	801ae30 <iprintf>
	VL53LX_RdByte(DevLeft, 0x0110, &byteData);
 801072c:	4b52      	ldr	r3, [pc, #328]	@ (8010878 <main+0x364>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8010734:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8010738:	4618      	mov	r0, r3
 801073a:	f001 fca5 	bl	8012088 <VL53LX_RdByte>
	printf("VL53L4CX Module_Type: %02X\n\r", byteData);
 801073e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8010742:	4619      	mov	r1, r3
 8010744:	4851      	ldr	r0, [pc, #324]	@ (801088c <main+0x378>)
 8010746:	f00a fb73 	bl	801ae30 <iprintf>
	VL53LX_RdWord(DevLeft, 0x010F, &wordData);
 801074a:	4b4b      	ldr	r3, [pc, #300]	@ (8010878 <main+0x364>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8010752:	f240 110f 	movw	r1, #271	@ 0x10f
 8010756:	4618      	mov	r0, r3
 8010758:	f001 fcca 	bl	80120f0 <VL53LX_RdWord>
	printf("VL53L4CX: %02X\n\r", wordData);
 801075c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8010760:	4619      	mov	r1, r3
 8010762:	484b      	ldr	r0, [pc, #300]	@ (8010890 <main+0x37c>)
 8010764:	f00a fb64 	bl	801ae30 <iprintf>
	printf("VL53L4CX Address: %02X\n\r", DevLeft->I2cDevAddr);
 8010768:	4b43      	ldr	r3, [pc, #268]	@ (8010878 <main+0x364>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010770:	f893 3a50 	ldrb.w	r3, [r3, #2640]	@ 0xa50
 8010774:	4619      	mov	r1, r3
 8010776:	4847      	ldr	r0, [pc, #284]	@ (8010894 <main+0x380>)
 8010778:	f00a fb5a 	bl	801ae30 <iprintf>

	// device ID must be 0XEBAA, those lines can be used to check if the I2C basic functions have been implemented correctly
	VL53LX_RdByte(DevRight, 0x010F, &byteData);
 801077c:	4b3f      	ldr	r3, [pc, #252]	@ (801087c <main+0x368>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8010784:	f240 110f 	movw	r1, #271	@ 0x10f
 8010788:	4618      	mov	r0, r3
 801078a:	f001 fc7d 	bl	8012088 <VL53LX_RdByte>
	printf("VL53L4CX Model_ID: %02X\n\r", byteData);
 801078e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8010792:	4619      	mov	r1, r3
 8010794:	483c      	ldr	r0, [pc, #240]	@ (8010888 <main+0x374>)
 8010796:	f00a fb4b 	bl	801ae30 <iprintf>
	VL53LX_RdByte(DevRight, 0x0110, &byteData);
 801079a:	4b38      	ldr	r3, [pc, #224]	@ (801087c <main+0x368>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80107a2:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80107a6:	4618      	mov	r0, r3
 80107a8:	f001 fc6e 	bl	8012088 <VL53LX_RdByte>
	printf("VL53L4CX Module_Type: %02X\n\r", byteData);
 80107ac:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80107b0:	4619      	mov	r1, r3
 80107b2:	4836      	ldr	r0, [pc, #216]	@ (801088c <main+0x378>)
 80107b4:	f00a fb3c 	bl	801ae30 <iprintf>
	VL53LX_RdWord(DevRight, 0x010F, &wordData);
 80107b8:	4b30      	ldr	r3, [pc, #192]	@ (801087c <main+0x368>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80107c0:	f240 110f 	movw	r1, #271	@ 0x10f
 80107c4:	4618      	mov	r0, r3
 80107c6:	f001 fc93 	bl	80120f0 <VL53LX_RdWord>
	printf("VL53L4CX: %02X\n\r", wordData);
 80107ca:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80107ce:	4619      	mov	r1, r3
 80107d0:	482f      	ldr	r0, [pc, #188]	@ (8010890 <main+0x37c>)
 80107d2:	f00a fb2d 	bl	801ae30 <iprintf>
	printf("VL53L4CX Address: %02X\n\r", DevRight->I2cDevAddr);
 80107d6:	4b29      	ldr	r3, [pc, #164]	@ (801087c <main+0x368>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80107de:	f893 3a50 	ldrb.w	r3, [r3, #2640]	@ 0xa50
 80107e2:	4619      	mov	r1, r3
 80107e4:	482b      	ldr	r0, [pc, #172]	@ (8010894 <main+0x380>)
 80107e6:	f00a fb23 	bl	801ae30 <iprintf>

	printf("Ranging loop starts\n");
 80107ea:	482b      	ldr	r0, [pc, #172]	@ (8010898 <main+0x384>)
 80107ec:	f00a fb88 	bl	801af00 <puts>
	status = VL53LX_WaitDeviceBooted(DevLeft);
 80107f0:	4b21      	ldr	r3, [pc, #132]	@ (8010878 <main+0x364>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7f0 fc88 	bl	800110a <VL53LX_WaitDeviceBooted>
 80107fa:	4603      	mov	r3, r0
 80107fc:	461a      	mov	r2, r3
 80107fe:	4b21      	ldr	r3, [pc, #132]	@ (8010884 <main+0x370>)
 8010800:	601a      	str	r2, [r3, #0]
	if(status){
 8010802:	4b20      	ldr	r3, [pc, #128]	@ (8010884 <main+0x370>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d007      	beq.n	801081a <main+0x306>
		printf("VL53LX_WaitDeviceBooted DevLeft failed: error = %d \n", status);
 801080a:	4b1e      	ldr	r3, [pc, #120]	@ (8010884 <main+0x370>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	4619      	mov	r1, r3
 8010810:	4822      	ldr	r0, [pc, #136]	@ (801089c <main+0x388>)
 8010812:	f00a fb0d 	bl	801ae30 <iprintf>
		while(1);
 8010816:	bf00      	nop
 8010818:	e7fd      	b.n	8010816 <main+0x302>
	}
	status = VL53LX_WaitDeviceBooted(DevRight);
 801081a:	4b18      	ldr	r3, [pc, #96]	@ (801087c <main+0x368>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	4618      	mov	r0, r3
 8010820:	f7f0 fc73 	bl	800110a <VL53LX_WaitDeviceBooted>
 8010824:	4603      	mov	r3, r0
 8010826:	461a      	mov	r2, r3
 8010828:	4b16      	ldr	r3, [pc, #88]	@ (8010884 <main+0x370>)
 801082a:	601a      	str	r2, [r3, #0]
	if(status){
 801082c:	4b15      	ldr	r3, [pc, #84]	@ (8010884 <main+0x370>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d037      	beq.n	80108a4 <main+0x390>
		printf("VL53LX_WaitDeviceBooted DevRight failed: error = %d \n", status);
 8010834:	4b13      	ldr	r3, [pc, #76]	@ (8010884 <main+0x370>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4619      	mov	r1, r3
 801083a:	4819      	ldr	r0, [pc, #100]	@ (80108a0 <main+0x38c>)
 801083c:	f00a faf8 	bl	801ae30 <iprintf>
		while(1);
 8010840:	bf00      	nop
 8010842:	e7fd      	b.n	8010840 <main+0x32c>
 8010844:	20005970 	.word	0x20005970
 8010848:	2000039c 	.word	0x2000039c
 801084c:	0801d264 	.word	0x0801d264
 8010850:	20005930 	.word	0x20005930
 8010854:	42021000 	.word	0x42021000
 8010858:	42020000 	.word	0x42020000
 801085c:	42021800 	.word	0x42021800
 8010860:	42020c00 	.word	0x42020c00
 8010864:	0801d4a4 	.word	0x0801d4a4
 8010868:	20000224 	.word	0x20000224
 801086c:	0801d274 	.word	0x0801d274
 8010870:	20000308 	.word	0x20000308
 8010874:	0801d298 	.word	0x0801d298
 8010878:	2000002c 	.word	0x2000002c
 801087c:	20000030 	.word	0x20000030
 8010880:	42020400 	.word	0x42020400
 8010884:	20000430 	.word	0x20000430
 8010888:	0801d2b0 	.word	0x0801d2b0
 801088c:	0801d2cc 	.word	0x0801d2cc
 8010890:	0801d2ec 	.word	0x0801d2ec
 8010894:	0801d300 	.word	0x0801d300
 8010898:	0801d31c 	.word	0x0801d31c
 801089c:	0801d330 	.word	0x0801d330
 80108a0:	0801d368 	.word	0x0801d368
	}
	status = VL53LX_DataInit(DevLeft);
 80108a4:	4b96      	ldr	r3, [pc, #600]	@ (8010b00 <main+0x5ec>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7f0 fbd3 	bl	8001054 <VL53LX_DataInit>
 80108ae:	4603      	mov	r3, r0
 80108b0:	461a      	mov	r2, r3
 80108b2:	4b94      	ldr	r3, [pc, #592]	@ (8010b04 <main+0x5f0>)
 80108b4:	601a      	str	r2, [r3, #0]
	if(status){
 80108b6:	4b93      	ldr	r3, [pc, #588]	@ (8010b04 <main+0x5f0>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d007      	beq.n	80108ce <main+0x3ba>
		printf("VL53LX_DataInit DevLeft failed: error = %d \n", status);
 80108be:	4b91      	ldr	r3, [pc, #580]	@ (8010b04 <main+0x5f0>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4619      	mov	r1, r3
 80108c4:	4890      	ldr	r0, [pc, #576]	@ (8010b08 <main+0x5f4>)
 80108c6:	f00a fab3 	bl	801ae30 <iprintf>
		while(1);
 80108ca:	bf00      	nop
 80108cc:	e7fd      	b.n	80108ca <main+0x3b6>
	}
	status = VL53LX_DataInit(DevRight);
 80108ce:	4b8f      	ldr	r3, [pc, #572]	@ (8010b0c <main+0x5f8>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7f0 fbbe 	bl	8001054 <VL53LX_DataInit>
 80108d8:	4603      	mov	r3, r0
 80108da:	461a      	mov	r2, r3
 80108dc:	4b89      	ldr	r3, [pc, #548]	@ (8010b04 <main+0x5f0>)
 80108de:	601a      	str	r2, [r3, #0]
	if(status){
 80108e0:	4b88      	ldr	r3, [pc, #544]	@ (8010b04 <main+0x5f0>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d007      	beq.n	80108f8 <main+0x3e4>
		printf("VL53LX_DataInit DevRight failed: error = %d \n", status);
 80108e8:	4b86      	ldr	r3, [pc, #536]	@ (8010b04 <main+0x5f0>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4619      	mov	r1, r3
 80108ee:	4888      	ldr	r0, [pc, #544]	@ (8010b10 <main+0x5fc>)
 80108f0:	f00a fa9e 	bl	801ae30 <iprintf>
		while(1);
 80108f4:	bf00      	nop
 80108f6:	e7fd      	b.n	80108f4 <main+0x3e0>
	}
	status = VL53LX_StartMeasurement(DevLeft);
 80108f8:	4b81      	ldr	r3, [pc, #516]	@ (8010b00 <main+0x5ec>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7f0 fd35 	bl	800136c <VL53LX_StartMeasurement>
 8010902:	4603      	mov	r3, r0
 8010904:	461a      	mov	r2, r3
 8010906:	4b7f      	ldr	r3, [pc, #508]	@ (8010b04 <main+0x5f0>)
 8010908:	601a      	str	r2, [r3, #0]
	if(status){
 801090a:	4b7e      	ldr	r3, [pc, #504]	@ (8010b04 <main+0x5f0>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d007      	beq.n	8010922 <main+0x40e>
		printf("VL53LX_StartMeasurement DevLeft failed: error = %d \n", status);
 8010912:	4b7c      	ldr	r3, [pc, #496]	@ (8010b04 <main+0x5f0>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4619      	mov	r1, r3
 8010918:	487e      	ldr	r0, [pc, #504]	@ (8010b14 <main+0x600>)
 801091a:	f00a fa89 	bl	801ae30 <iprintf>
		while(1);
 801091e:	bf00      	nop
 8010920:	e7fd      	b.n	801091e <main+0x40a>
	}
	status = VL53LX_StartMeasurement(DevRight);
 8010922:	4b7a      	ldr	r3, [pc, #488]	@ (8010b0c <main+0x5f8>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4618      	mov	r0, r3
 8010928:	f7f0 fd20 	bl	800136c <VL53LX_StartMeasurement>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	4b74      	ldr	r3, [pc, #464]	@ (8010b04 <main+0x5f0>)
 8010932:	601a      	str	r2, [r3, #0]
	if(status){
 8010934:	4b73      	ldr	r3, [pc, #460]	@ (8010b04 <main+0x5f0>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d007      	beq.n	801094c <main+0x438>
		printf("VL53LX_StartMeasurement DevRight failed: error = %d \n", status);
 801093c:	4b71      	ldr	r3, [pc, #452]	@ (8010b04 <main+0x5f0>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4619      	mov	r1, r3
 8010942:	4875      	ldr	r0, [pc, #468]	@ (8010b18 <main+0x604>)
 8010944:	f00a fa74 	bl	801ae30 <iprintf>
		while(1);
 8010948:	bf00      	nop
 801094a:	e7fd      	b.n	8010948 <main+0x434>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DisplayOLED();
 801094c:	f7ff fdb2 	bl	80104b4 <DisplayOLED>
	  if(!is_interrupt){ // polling mode
			status = VL53LX_GetMeasurementDataReady(DevLeft, &NewDataReady);
 8010950:	4b6b      	ldr	r3, [pc, #428]	@ (8010b00 <main+0x5ec>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	1cfa      	adds	r2, r7, #3
 8010956:	4611      	mov	r1, r2
 8010958:	4618      	mov	r0, r3
 801095a:	f7f0 fd6a 	bl	8001432 <VL53LX_GetMeasurementDataReady>
 801095e:	4603      	mov	r3, r0
 8010960:	461a      	mov	r2, r3
 8010962:	4b68      	ldr	r3, [pc, #416]	@ (8010b04 <main+0x5f0>)
 8010964:	601a      	str	r2, [r3, #0]
			HAL_Delay(5);
 8010966:	2005      	movs	r0, #5
 8010968:	f001 fd86 	bl	8012478 <HAL_Delay>
			if((!status)&&(NewDataReady!=0)){
 801096c:	4b65      	ldr	r3, [pc, #404]	@ (8010b04 <main+0x5f0>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	f040 809d 	bne.w	8010ab0 <main+0x59c>
 8010976:	78fb      	ldrb	r3, [r7, #3]
 8010978:	2b00      	cmp	r3, #0
 801097a:	f000 8099 	beq.w	8010ab0 <main+0x59c>
				status = VL53LX_GetMultiRangingData(DevLeft, pMultiRangingData);
 801097e:	4b60      	ldr	r3, [pc, #384]	@ (8010b00 <main+0x5ec>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010984:	4618      	mov	r0, r3
 8010986:	f7f1 f931 	bl	8001bec <VL53LX_GetMultiRangingData>
 801098a:	4603      	mov	r3, r0
 801098c:	461a      	mov	r2, r3
 801098e:	4b5d      	ldr	r3, [pc, #372]	@ (8010b04 <main+0x5f0>)
 8010990:	601a      	str	r2, [r3, #0]
				no_of_object_found=pMultiRangingData->NumberOfObjectsFound;
 8010992:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010994:	795b      	ldrb	r3, [r3, #5]
 8010996:	667b      	str	r3, [r7, #100]	@ 0x64
				for(j=0;j<=no_of_object_found;j++){
 8010998:	2300      	movs	r3, #0
 801099a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801099c:	e077      	b.n	8010a8e <main+0x57a>
					if (pMultiRangingData->RangeData[j].RangeMilliMeter > 30 && pMultiRangingData->RangeData[j].RangeMilliMeter < 5900) {
 801099e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80109a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80109a2:	4613      	mov	r3, r2
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	4413      	add	r3, r2
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	440b      	add	r3, r1
 80109ac:	3318      	adds	r3, #24
 80109ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109b2:	2b1e      	cmp	r3, #30
 80109b4:	dd68      	ble.n	8010a88 <main+0x574>
 80109b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80109b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80109ba:	4613      	mov	r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	4413      	add	r3, r2
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	440b      	add	r3, r1
 80109c4:	3318      	adds	r3, #24
 80109c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109ca:	f241 720b 	movw	r2, #5899	@ 0x170b
 80109ce:	4293      	cmp	r3, r2
 80109d0:	dc5a      	bgt.n	8010a88 <main+0x574>
						printf("LEFT %d = %5dmm\n", j + 1, pMultiRangingData->RangeData[j].RangeMilliMeter);// @suppress("Float formatting support")
 80109d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109d4:	1c58      	adds	r0, r3, #1
 80109d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80109d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80109da:	4613      	mov	r3, r2
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	4413      	add	r3, r2
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	440b      	add	r3, r1
 80109e4:	3318      	adds	r3, #24
 80109e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109ea:	461a      	mov	r2, r3
 80109ec:	4601      	mov	r1, r0
 80109ee:	484b      	ldr	r0, [pc, #300]	@ (8010b1c <main+0x608>)
 80109f0:	f00a fa1e 	bl	801ae30 <iprintf>
						if (pMultiRangingData->RangeData[j].RangeMilliMeter < 2000) {
 80109f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80109f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80109f8:	4613      	mov	r3, r2
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	4413      	add	r3, r2
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	440b      	add	r3, r1
 8010a02:	3318      	adds	r3, #24
 8010a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a08:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010a0c:	da0b      	bge.n	8010a26 <main+0x512>
							HAL_GPIO_WritePin(L_RED_GPIO_Port, L_RED_Pin, 0);
 8010a0e:	2200      	movs	r2, #0
 8010a10:	2101      	movs	r1, #1
 8010a12:	4843      	ldr	r0, [pc, #268]	@ (8010b20 <main+0x60c>)
 8010a14:	f002 f864 	bl	8012ae0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(L_YELLOW_GPIO_Port, L_YELLOW_Pin, 1);
 8010a18:	2201      	movs	r2, #1
 8010a1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a1e:	4841      	ldr	r0, [pc, #260]	@ (8010b24 <main+0x610>)
 8010a20:	f002 f85e 	bl	8012ae0 <HAL_GPIO_WritePin>
 8010a24:	e030      	b.n	8010a88 <main+0x574>
						} else if (pMultiRangingData->RangeData[j].RangeMilliMeter >= 2000 && pMultiRangingData->RangeData[j].RangeMilliMeter < 4000) {
 8010a26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010a28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4413      	add	r3, r2
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	440b      	add	r3, r1
 8010a34:	3318      	adds	r3, #24
 8010a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a3a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010a3e:	db18      	blt.n	8010a72 <main+0x55e>
 8010a40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010a42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010a44:	4613      	mov	r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	4413      	add	r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	440b      	add	r3, r1
 8010a4e:	3318      	adds	r3, #24
 8010a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a54:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8010a58:	da0b      	bge.n	8010a72 <main+0x55e>
							HAL_GPIO_WritePin(L_RED_GPIO_Port, L_RED_Pin, 1);
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	2101      	movs	r1, #1
 8010a5e:	4830      	ldr	r0, [pc, #192]	@ (8010b20 <main+0x60c>)
 8010a60:	f002 f83e 	bl	8012ae0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(L_YELLOW_GPIO_Port, L_YELLOW_Pin, 0);
 8010a64:	2200      	movs	r2, #0
 8010a66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a6a:	482e      	ldr	r0, [pc, #184]	@ (8010b24 <main+0x610>)
 8010a6c:	f002 f838 	bl	8012ae0 <HAL_GPIO_WritePin>
 8010a70:	e00a      	b.n	8010a88 <main+0x574>
						} else {
							HAL_GPIO_WritePin(L_RED_GPIO_Port, L_RED_Pin, 1);
 8010a72:	2201      	movs	r2, #1
 8010a74:	2101      	movs	r1, #1
 8010a76:	482a      	ldr	r0, [pc, #168]	@ (8010b20 <main+0x60c>)
 8010a78:	f002 f832 	bl	8012ae0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(L_YELLOW_GPIO_Port, L_YELLOW_Pin, 1);
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a82:	4828      	ldr	r0, [pc, #160]	@ (8010b24 <main+0x610>)
 8010a84:	f002 f82c 	bl	8012ae0 <HAL_GPIO_WritePin>
				for(j=0;j<=no_of_object_found;j++){
 8010a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010a8e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010a92:	429a      	cmp	r2, r3
 8010a94:	dd83      	ble.n	801099e <main+0x48a>
						}
//						snprintf(uart_buffer, sizeof(uart_buffer), "LEFT %d = %5dmm\n", j + 1, pMultiRangingData->RangeData[j].RangeMilliMeter);
//						HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
					}
				}
				if (status==0){
 8010a96:	4b1b      	ldr	r3, [pc, #108]	@ (8010b04 <main+0x5f0>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d108      	bne.n	8010ab0 <main+0x59c>
					status = VL53LX_ClearInterruptAndStartMeasurement(DevLeft);
 8010a9e:	4b18      	ldr	r3, [pc, #96]	@ (8010b00 <main+0x5ec>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7f0 fcaf 	bl	8001406 <VL53LX_ClearInterruptAndStartMeasurement>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	461a      	mov	r2, r3
 8010aac:	4b15      	ldr	r3, [pc, #84]	@ (8010b04 <main+0x5f0>)
 8010aae:	601a      	str	r2, [r3, #0]
				}
			}
			status = VL53LX_GetMeasurementDataReady(DevRight, &NewDataReady);
 8010ab0:	4b16      	ldr	r3, [pc, #88]	@ (8010b0c <main+0x5f8>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	1cfa      	adds	r2, r7, #3
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7f0 fcba 	bl	8001432 <VL53LX_GetMeasurementDataReady>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	4b10      	ldr	r3, [pc, #64]	@ (8010b04 <main+0x5f0>)
 8010ac4:	601a      	str	r2, [r3, #0]
			HAL_Delay(5);
 8010ac6:	2005      	movs	r0, #5
 8010ac8:	f001 fcd6 	bl	8012478 <HAL_Delay>
			if((!status)&&(NewDataReady!=0)){
 8010acc:	4b0d      	ldr	r3, [pc, #52]	@ (8010b04 <main+0x5f0>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f47f af3b 	bne.w	801094c <main+0x438>
 8010ad6:	78fb      	ldrb	r3, [r7, #3]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f43f af37 	beq.w	801094c <main+0x438>
				status = VL53LX_GetMultiRangingData(DevRight, pMultiRangingData);
 8010ade:	4b0b      	ldr	r3, [pc, #44]	@ (8010b0c <main+0x5f8>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7f1 f881 	bl	8001bec <VL53LX_GetMultiRangingData>
 8010aea:	4603      	mov	r3, r0
 8010aec:	461a      	mov	r2, r3
 8010aee:	4b05      	ldr	r3, [pc, #20]	@ (8010b04 <main+0x5f0>)
 8010af0:	601a      	str	r2, [r3, #0]
				no_of_object_found=pMultiRangingData->NumberOfObjectsFound;
 8010af2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010af4:	795b      	ldrb	r3, [r3, #5]
 8010af6:	667b      	str	r3, [r7, #100]	@ 0x64
				for(j=0;j<=no_of_object_found;j++){
 8010af8:	2300      	movs	r3, #0
 8010afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010afc:	e089      	b.n	8010c12 <main+0x6fe>
 8010afe:	bf00      	nop
 8010b00:	2000002c 	.word	0x2000002c
 8010b04:	20000430 	.word	0x20000430
 8010b08:	0801d3a0 	.word	0x0801d3a0
 8010b0c:	20000030 	.word	0x20000030
 8010b10:	0801d3d0 	.word	0x0801d3d0
 8010b14:	0801d400 	.word	0x0801d400
 8010b18:	0801d438 	.word	0x0801d438
 8010b1c:	0801d470 	.word	0x0801d470
 8010b20:	42021000 	.word	0x42021000
 8010b24:	42020000 	.word	0x42020000
					if (pMultiRangingData->RangeData[j].RangeMilliMeter > 30 && pMultiRangingData->RangeData[j].RangeMilliMeter < 5900) {
 8010b28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010b2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4413      	add	r3, r2
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	440b      	add	r3, r1
 8010b36:	3318      	adds	r3, #24
 8010b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b3c:	2b1e      	cmp	r3, #30
 8010b3e:	dd65      	ble.n	8010c0c <main+0x6f8>
 8010b40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010b42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010b44:	4613      	mov	r3, r2
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	4413      	add	r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	440b      	add	r3, r1
 8010b4e:	3318      	adds	r3, #24
 8010b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b54:	f241 720b 	movw	r2, #5899	@ 0x170b
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	dc57      	bgt.n	8010c0c <main+0x6f8>
						printf("RIGHT %d = %5dmm\n", j + 1, pMultiRangingData->RangeData[j].RangeMilliMeter);// @suppress("Float formatting support")
 8010b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b5e:	1c58      	adds	r0, r3, #1
 8010b60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010b62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010b64:	4613      	mov	r3, r2
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	440b      	add	r3, r1
 8010b6e:	3318      	adds	r3, #24
 8010b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b74:	461a      	mov	r2, r3
 8010b76:	4601      	mov	r1, r0
 8010b78:	482f      	ldr	r0, [pc, #188]	@ (8010c38 <main+0x724>)
 8010b7a:	f00a f959 	bl	801ae30 <iprintf>
						if (pMultiRangingData->RangeData[j].RangeMilliMeter < 2000) {
 8010b7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010b80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010b82:	4613      	mov	r3, r2
 8010b84:	009b      	lsls	r3, r3, #2
 8010b86:	4413      	add	r3, r2
 8010b88:	009b      	lsls	r3, r3, #2
 8010b8a:	440b      	add	r3, r1
 8010b8c:	3318      	adds	r3, #24
 8010b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b92:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010b96:	da0a      	bge.n	8010bae <main+0x69a>
							HAL_GPIO_WritePin(R_RED_GPIO_Port, R_RED_Pin, 0);
 8010b98:	2200      	movs	r2, #0
 8010b9a:	2101      	movs	r1, #1
 8010b9c:	4827      	ldr	r0, [pc, #156]	@ (8010c3c <main+0x728>)
 8010b9e:	f001 ff9f 	bl	8012ae0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(R_YELLOW_GPIO_Port, R_YELLOW_Pin, 1);
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	2102      	movs	r1, #2
 8010ba6:	4826      	ldr	r0, [pc, #152]	@ (8010c40 <main+0x72c>)
 8010ba8:	f001 ff9a 	bl	8012ae0 <HAL_GPIO_WritePin>
 8010bac:	e02e      	b.n	8010c0c <main+0x6f8>
						} else if (pMultiRangingData->RangeData[j].RangeMilliMeter >= 2000 && pMultiRangingData->RangeData[j].RangeMilliMeter < 4000) {
 8010bae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010bb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	4413      	add	r3, r2
 8010bb8:	009b      	lsls	r3, r3, #2
 8010bba:	440b      	add	r3, r1
 8010bbc:	3318      	adds	r3, #24
 8010bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bc2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010bc6:	db17      	blt.n	8010bf8 <main+0x6e4>
 8010bc8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010bca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010bcc:	4613      	mov	r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4413      	add	r3, r2
 8010bd2:	009b      	lsls	r3, r3, #2
 8010bd4:	440b      	add	r3, r1
 8010bd6:	3318      	adds	r3, #24
 8010bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bdc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8010be0:	da0a      	bge.n	8010bf8 <main+0x6e4>
							HAL_GPIO_WritePin(R_RED_GPIO_Port, R_RED_Pin, 1);
 8010be2:	2201      	movs	r2, #1
 8010be4:	2101      	movs	r1, #1
 8010be6:	4815      	ldr	r0, [pc, #84]	@ (8010c3c <main+0x728>)
 8010be8:	f001 ff7a 	bl	8012ae0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(R_YELLOW_GPIO_Port, R_YELLOW_Pin, 0);
 8010bec:	2200      	movs	r2, #0
 8010bee:	2102      	movs	r1, #2
 8010bf0:	4813      	ldr	r0, [pc, #76]	@ (8010c40 <main+0x72c>)
 8010bf2:	f001 ff75 	bl	8012ae0 <HAL_GPIO_WritePin>
 8010bf6:	e009      	b.n	8010c0c <main+0x6f8>
						} else {
							HAL_GPIO_WritePin(R_RED_GPIO_Port, R_RED_Pin, 1);
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	2101      	movs	r1, #1
 8010bfc:	480f      	ldr	r0, [pc, #60]	@ (8010c3c <main+0x728>)
 8010bfe:	f001 ff6f 	bl	8012ae0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(R_YELLOW_GPIO_Port, R_YELLOW_Pin, 1);
 8010c02:	2201      	movs	r2, #1
 8010c04:	2102      	movs	r1, #2
 8010c06:	480e      	ldr	r0, [pc, #56]	@ (8010c40 <main+0x72c>)
 8010c08:	f001 ff6a 	bl	8012ae0 <HAL_GPIO_WritePin>
				for(j=0;j<=no_of_object_found;j++){
 8010c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c0e:	3301      	adds	r3, #1
 8010c10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010c12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c16:	429a      	cmp	r2, r3
 8010c18:	dd86      	ble.n	8010b28 <main+0x614>
						}
//						snprintf(uart_buffer, sizeof(uart_buffer), "RIGHT %d = %5dmm\n", j + 1, pMultiRangingData->RangeData[j].RangeMilliMeter);
//						HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
					}
				}
				if (status==0){
 8010c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8010c44 <main+0x730>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f47f ae94 	bne.w	801094c <main+0x438>
					status = VL53LX_ClearInterruptAndStartMeasurement(DevRight);
 8010c24:	4b08      	ldr	r3, [pc, #32]	@ (8010c48 <main+0x734>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7f0 fbec 	bl	8001406 <VL53LX_ClearInterruptAndStartMeasurement>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	461a      	mov	r2, r3
 8010c32:	4b04      	ldr	r3, [pc, #16]	@ (8010c44 <main+0x730>)
 8010c34:	601a      	str	r2, [r3, #0]
	  DisplayOLED();
 8010c36:	e689      	b.n	801094c <main+0x438>
 8010c38:	0801d484 	.word	0x0801d484
 8010c3c:	42021800 	.word	0x42021800
 8010c40:	42020c00 	.word	0x42020c00
 8010c44:	20000430 	.word	0x20000430
 8010c48:	20000030 	.word	0x20000030

08010c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b09e      	sub	sp, #120	@ 0x78
 8010c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010c52:	f107 0318 	add.w	r3, r7, #24
 8010c56:	2260      	movs	r2, #96	@ 0x60
 8010c58:	2100      	movs	r1, #0
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f00a fa64 	bl	801b128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010c60:	463b      	mov	r3, r7
 8010c62:	2200      	movs	r2, #0
 8010c64:	601a      	str	r2, [r3, #0]
 8010c66:	605a      	str	r2, [r3, #4]
 8010c68:	609a      	str	r2, [r3, #8]
 8010c6a:	60da      	str	r2, [r3, #12]
 8010c6c:	611a      	str	r2, [r3, #16]
 8010c6e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8010c70:	2000      	movs	r0, #0
 8010c72:	f002 feaf 	bl	80139d4 <HAL_PWREx_ControlVoltageScaling>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d001      	beq.n	8010c80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8010c7c:	f000 fb22 	bl	80112c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8010c80:	2310      	movs	r3, #16
 8010c82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8010c84:	2301      	movs	r3, #1
 8010c86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8010c88:	2310      	movs	r3, #16
 8010c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8010c8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8010c92:	2300      	movs	r3, #0
 8010c94:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010c96:	f107 0318 	add.w	r3, r7, #24
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f002 ff96 	bl	8013bcc <HAL_RCC_OscConfig>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d001      	beq.n	8010caa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8010ca6:	f000 fb0d 	bl	80112c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010caa:	231f      	movs	r3, #31
 8010cac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8010cc2:	463b      	mov	r3, r7
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f003 fe5c 	bl	8014984 <HAL_RCC_ClockConfig>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d001      	beq.n	8010cd6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8010cd2:	f000 faf7 	bl	80112c4 <Error_Handler>
  }
}
 8010cd6:	bf00      	nop
 8010cd8:	3778      	adds	r7, #120	@ 0x78
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8010ce2:	f002 ff53 	bl	8013b8c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8010ce6:	f002 ff61 	bl	8013bac <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8010cea:	2002      	movs	r0, #2
 8010cec:	f002 fefe 	bl	8013aec <HAL_PWREx_ConfigSupply>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d001      	beq.n	8010cfa <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8010cf6:	f000 fae5 	bl	80112c4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8010cfa:	bf00      	nop
 8010cfc:	bd80      	pop	{r7, pc}
	...

08010d00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8010d04:	4b1b      	ldr	r3, [pc, #108]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d06:	4a1c      	ldr	r2, [pc, #112]	@ (8010d78 <MX_I2C2_Init+0x78>)
 8010d08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8010d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d0c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8010d10:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8010d12:	4b18      	ldr	r3, [pc, #96]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d14:	2200      	movs	r2, #0
 8010d16:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010d18:	4b16      	ldr	r3, [pc, #88]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010d1e:	4b15      	ldr	r3, [pc, #84]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d20:	2200      	movs	r2, #0
 8010d22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8010d24:	4b13      	ldr	r3, [pc, #76]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d26:	2200      	movs	r2, #0
 8010d28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010d2a:	4b12      	ldr	r3, [pc, #72]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010d30:	4b10      	ldr	r3, [pc, #64]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010d36:	4b0f      	ldr	r3, [pc, #60]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8010d3c:	480d      	ldr	r0, [pc, #52]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d3e:	f001 fee7 	bl	8012b10 <HAL_I2C_Init>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d001      	beq.n	8010d4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8010d48:	f000 fabc 	bl	80112c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	4809      	ldr	r0, [pc, #36]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d50:	f002 fd78 	bl	8013844 <HAL_I2CEx_ConfigAnalogFilter>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8010d5a:	f000 fab3 	bl	80112c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8010d5e:	2100      	movs	r1, #0
 8010d60:	4804      	ldr	r0, [pc, #16]	@ (8010d74 <MX_I2C2_Init+0x74>)
 8010d62:	f002 fdba 	bl	80138da <HAL_I2CEx_ConfigDigitalFilter>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d001      	beq.n	8010d70 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8010d6c:	f000 faaa 	bl	80112c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8010d70:	bf00      	nop
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	20000224 	.word	0x20000224
 8010d78:	40005800 	.word	0x40005800

08010d7c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8010d80:	2000      	movs	r0, #0
 8010d82:	f002 fdf7 	bl	8013974 <HAL_ICACHE_ConfigAssociativityMode>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d001      	beq.n	8010d90 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8010d8c:	f000 fa9a 	bl	80112c4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8010d90:	f002 fe10 	bl	80139b4 <HAL_ICACHE_Enable>
 8010d94:	4603      	mov	r3, r0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d001      	beq.n	8010d9e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8010d9a:	f000 fa93 	bl	80112c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8010d9e:	bf00      	nop
 8010da0:	bd80      	pop	{r7, pc}
	...

08010da4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8010daa:	1d3b      	adds	r3, r7, #4
 8010dac:	2200      	movs	r2, #0
 8010dae:	601a      	str	r2, [r3, #0]
 8010db0:	605a      	str	r2, [r3, #4]
 8010db2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8010db4:	4b31      	ldr	r3, [pc, #196]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010db6:	4a32      	ldr	r2, [pc, #200]	@ (8010e80 <MX_SPI1_Init+0xdc>)
 8010db8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8010dba:	4b30      	ldr	r3, [pc, #192]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010dbc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8010dc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8010dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8010dc8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010dca:	4b2c      	ldr	r3, [pc, #176]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010dcc:	2207      	movs	r2, #7
 8010dce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010dd6:	4b29      	ldr	r3, [pc, #164]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8010ddc:	4b27      	ldr	r3, [pc, #156]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010dde:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8010de2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010de4:	4b25      	ldr	r3, [pc, #148]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010de6:	2200      	movs	r2, #0
 8010de8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010dea:	4b24      	ldr	r3, [pc, #144]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010dec:	2200      	movs	r2, #0
 8010dee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8010df0:	4b22      	ldr	r3, [pc, #136]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010df2:	2200      	movs	r2, #0
 8010df4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010df6:	4b21      	ldr	r3, [pc, #132]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010df8:	2200      	movs	r2, #0
 8010dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8010dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010dfe:	2207      	movs	r2, #7
 8010e00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010e02:	4b1e      	ldr	r3, [pc, #120]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8010e08:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8010e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8010e10:	4b1a      	ldr	r3, [pc, #104]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e12:	2200      	movs	r2, #0
 8010e14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8010e16:	4b19      	ldr	r3, [pc, #100]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e18:	2200      	movs	r2, #0
 8010e1a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8010e1c:	4b17      	ldr	r3, [pc, #92]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e1e:	2200      	movs	r2, #0
 8010e20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8010e22:	4b16      	ldr	r3, [pc, #88]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e24:	2200      	movs	r2, #0
 8010e26:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8010e28:	4b14      	ldr	r3, [pc, #80]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8010e2e:	4b13      	ldr	r3, [pc, #76]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e30:	2200      	movs	r2, #0
 8010e32:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8010e34:	4b11      	ldr	r3, [pc, #68]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8010e3a:	4b10      	ldr	r3, [pc, #64]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8010e40:	480e      	ldr	r0, [pc, #56]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e42:	f006 fe3f 	bl	8017ac4 <HAL_SPI_Init>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d001      	beq.n	8010e50 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8010e4c:	f000 fa3a 	bl	80112c4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8010e50:	2300      	movs	r3, #0
 8010e52:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8010e54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8010e58:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8010e5e:	1d3b      	adds	r3, r7, #4
 8010e60:	4619      	mov	r1, r3
 8010e62:	4806      	ldr	r0, [pc, #24]	@ (8010e7c <MX_SPI1_Init+0xd8>)
 8010e64:	f007 fa41 	bl	80182ea <HAL_SPIEx_SetConfigAutonomousMode>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d001      	beq.n	8010e72 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8010e6e:	f000 fa29 	bl	80112c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8010e72:	bf00      	nop
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	20000278 	.word	0x20000278
 8010e80:	40013000 	.word	0x40013000

08010e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010e88:	4b22      	ldr	r3, [pc, #136]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010e8a:	4a23      	ldr	r2, [pc, #140]	@ (8010f18 <MX_USART1_UART_Init+0x94>)
 8010e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8010e8e:	4b21      	ldr	r3, [pc, #132]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8010e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010e96:	4b1f      	ldr	r3, [pc, #124]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010e98:	2200      	movs	r2, #0
 8010e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010eaa:	220c      	movs	r2, #12
 8010eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010eae:	4b19      	ldr	r3, [pc, #100]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010eb4:	4b17      	ldr	r3, [pc, #92]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010eba:	4b16      	ldr	r3, [pc, #88]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8010ec0:	4b14      	ldr	r3, [pc, #80]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010ec6:	4b13      	ldr	r3, [pc, #76]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010ecc:	4811      	ldr	r0, [pc, #68]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010ece:	f007 fe0d 	bl	8018aec <HAL_UART_Init>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8010ed8:	f000 f9f4 	bl	80112c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010edc:	2100      	movs	r1, #0
 8010ede:	480d      	ldr	r0, [pc, #52]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010ee0:	f009 f9bf 	bl	801a262 <HAL_UARTEx_SetTxFifoThreshold>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8010eea:	f000 f9eb 	bl	80112c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010eee:	2100      	movs	r1, #0
 8010ef0:	4808      	ldr	r0, [pc, #32]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010ef2:	f009 f9f4 	bl	801a2de <HAL_UARTEx_SetRxFifoThreshold>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d001      	beq.n	8010f00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8010efc:	f000 f9e2 	bl	80112c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8010f00:	4804      	ldr	r0, [pc, #16]	@ (8010f14 <MX_USART1_UART_Init+0x90>)
 8010f02:	f009 f975 	bl	801a1f0 <HAL_UARTEx_DisableFifoMode>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d001      	beq.n	8010f10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8010f0c:	f000 f9da 	bl	80112c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8010f10:	bf00      	nop
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	20000308 	.word	0x20000308
 8010f18:	40013800 	.word	0x40013800

08010f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8010f20:	4b22      	ldr	r3, [pc, #136]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f22:	4a23      	ldr	r2, [pc, #140]	@ (8010fb0 <MX_USART2_UART_Init+0x94>)
 8010f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8010f26:	4b21      	ldr	r3, [pc, #132]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8010f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f30:	2200      	movs	r2, #0
 8010f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010f34:	4b1d      	ldr	r3, [pc, #116]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010f40:	4b1a      	ldr	r3, [pc, #104]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f42:	220c      	movs	r2, #12
 8010f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010f46:	4b19      	ldr	r3, [pc, #100]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f48:	2200      	movs	r2, #0
 8010f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010f4c:	4b17      	ldr	r3, [pc, #92]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f4e:	2200      	movs	r2, #0
 8010f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010f52:	4b16      	ldr	r3, [pc, #88]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f54:	2200      	movs	r2, #0
 8010f56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8010f58:	4b14      	ldr	r3, [pc, #80]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010f5e:	4b13      	ldr	r3, [pc, #76]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8010f64:	4811      	ldr	r0, [pc, #68]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f66:	f007 fdc1 	bl	8018aec <HAL_UART_Init>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d001      	beq.n	8010f74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8010f70:	f000 f9a8 	bl	80112c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010f74:	2100      	movs	r1, #0
 8010f76:	480d      	ldr	r0, [pc, #52]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f78:	f009 f973 	bl	801a262 <HAL_UARTEx_SetTxFifoThreshold>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d001      	beq.n	8010f86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8010f82:	f000 f99f 	bl	80112c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010f86:	2100      	movs	r1, #0
 8010f88:	4808      	ldr	r0, [pc, #32]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f8a:	f009 f9a8 	bl	801a2de <HAL_UARTEx_SetRxFifoThreshold>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d001      	beq.n	8010f98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8010f94:	f000 f996 	bl	80112c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8010f98:	4804      	ldr	r0, [pc, #16]	@ (8010fac <MX_USART2_UART_Init+0x90>)
 8010f9a:	f009 f929 	bl	801a1f0 <HAL_UARTEx_DisableFifoMode>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8010fa4:	f000 f98e 	bl	80112c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8010fa8:	bf00      	nop
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	2000039c 	.word	0x2000039c
 8010fb0:	40004400 	.word	0x40004400

08010fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b08e      	sub	sp, #56	@ 0x38
 8010fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	605a      	str	r2, [r3, #4]
 8010fc4:	609a      	str	r2, [r3, #8]
 8010fc6:	60da      	str	r2, [r3, #12]
 8010fc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010fca:	4bab      	ldr	r3, [pc, #684]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8010fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010fd0:	4aa9      	ldr	r2, [pc, #676]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8010fd2:	f043 0304 	orr.w	r3, r3, #4
 8010fd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010fda:	4ba7      	ldr	r3, [pc, #668]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8010fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010fe0:	f003 0304 	and.w	r3, r3, #4
 8010fe4:	623b      	str	r3, [r7, #32]
 8010fe6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8010fe8:	4ba3      	ldr	r3, [pc, #652]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8010fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010fee:	4aa2      	ldr	r2, [pc, #648]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8010ff0:	f043 0320 	orr.w	r3, r3, #32
 8010ff4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8010ff8:	4b9f      	ldr	r3, [pc, #636]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8010ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ffe:	f003 0320 	and.w	r3, r3, #32
 8011002:	61fb      	str	r3, [r7, #28]
 8011004:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011006:	4b9c      	ldr	r3, [pc, #624]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801100c:	4a9a      	ldr	r2, [pc, #616]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 801100e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011012:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8011016:	4b98      	ldr	r3, [pc, #608]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801101c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011020:	61bb      	str	r3, [r7, #24]
 8011022:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011024:	4b94      	ldr	r3, [pc, #592]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011026:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801102a:	4a93      	ldr	r2, [pc, #588]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 801102c:	f043 0301 	orr.w	r3, r3, #1
 8011030:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8011034:	4b90      	ldr	r3, [pc, #576]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011036:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801103a:	f003 0301 	and.w	r3, r3, #1
 801103e:	617b      	str	r3, [r7, #20]
 8011040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8011042:	4b8d      	ldr	r3, [pc, #564]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011048:	4a8b      	ldr	r2, [pc, #556]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 801104a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801104e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8011052:	4b89      	ldr	r3, [pc, #548]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801105c:	613b      	str	r3, [r7, #16]
 801105e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011060:	4b85      	ldr	r3, [pc, #532]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011066:	4a84      	ldr	r2, [pc, #528]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011068:	f043 0310 	orr.w	r3, r3, #16
 801106c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8011070:	4b81      	ldr	r3, [pc, #516]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011076:	f003 0310 	and.w	r3, r3, #16
 801107a:	60fb      	str	r3, [r7, #12]
 801107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801107e:	4b7e      	ldr	r3, [pc, #504]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011084:	4a7c      	ldr	r2, [pc, #496]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011086:	f043 0302 	orr.w	r3, r3, #2
 801108a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801108e:	4b7a      	ldr	r3, [pc, #488]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 8011090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011094:	f003 0302 	and.w	r3, r3, #2
 8011098:	60bb      	str	r3, [r7, #8]
 801109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801109c:	4b76      	ldr	r3, [pc, #472]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 801109e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80110a2:	4a75      	ldr	r2, [pc, #468]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 80110a4:	f043 0308 	orr.w	r3, r3, #8
 80110a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80110ac:	4b72      	ldr	r3, [pc, #456]	@ (8011278 <MX_GPIO_Init+0x2c4>)
 80110ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80110b2:	f003 0308 	and.w	r3, r3, #8
 80110b6:	607b      	str	r3, [r7, #4]
 80110b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80110ba:	2200      	movs	r2, #0
 80110bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80110c0:	486e      	ldr	r0, [pc, #440]	@ (801127c <MX_GPIO_Init+0x2c8>)
 80110c2:	f001 fd0d 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, R_RED_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80110c6:	2200      	movs	r2, #0
 80110c8:	2105      	movs	r1, #5
 80110ca:	486d      	ldr	r0, [pc, #436]	@ (8011280 <MX_GPIO_Init+0x2cc>)
 80110cc:	f001 fd08 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_R_XSHUT_GPIO_Port, TOF_R_XSHUT_Pin, GPIO_PIN_SET);
 80110d0:	2201      	movs	r2, #1
 80110d2:	2102      	movs	r1, #2
 80110d4:	486a      	ldr	r0, [pc, #424]	@ (8011280 <MX_GPIO_Init+0x2cc>)
 80110d6:	f001 fd03 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RESET_Pin|CS_Pin|L_RED_Pin, GPIO_PIN_RESET);
 80110da:	2200      	movs	r2, #0
 80110dc:	f640 2101 	movw	r1, #2561	@ 0xa01
 80110e0:	4868      	ldr	r0, [pc, #416]	@ (8011284 <MX_GPIO_Init+0x2d0>)
 80110e2:	f001 fcfd 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_L_XSHUT_GPIO_Port, TOF_L_XSHUT_Pin, GPIO_PIN_SET);
 80110e6:	2201      	movs	r2, #1
 80110e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80110ec:	4866      	ldr	r0, [pc, #408]	@ (8011288 <MX_GPIO_Init+0x2d4>)
 80110ee:	f001 fcf7 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80110f2:	2200      	movs	r2, #0
 80110f4:	2180      	movs	r1, #128	@ 0x80
 80110f6:	4865      	ldr	r0, [pc, #404]	@ (801128c <MX_GPIO_Init+0x2d8>)
 80110f8:	f001 fcf2 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_YELLOW_GPIO_Port, L_YELLOW_Pin, GPIO_PIN_RESET);
 80110fc:	2200      	movs	r2, #0
 80110fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011102:	4863      	ldr	r0, [pc, #396]	@ (8011290 <MX_GPIO_Init+0x2dc>)
 8011104:	f001 fcec 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_YELLOW_GPIO_Port, R_YELLOW_Pin, GPIO_PIN_RESET);
 8011108:	2200      	movs	r2, #0
 801110a:	2102      	movs	r1, #2
 801110c:	4861      	ldr	r0, [pc, #388]	@ (8011294 <MX_GPIO_Init+0x2e0>)
 801110e:	f001 fce7 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8011112:	2200      	movs	r2, #0
 8011114:	2180      	movs	r1, #128	@ 0x80
 8011116:	485c      	ldr	r0, [pc, #368]	@ (8011288 <MX_GPIO_Init+0x2d4>)
 8011118:	f001 fce2 	bl	8012ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 801111c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011122:	4b5d      	ldr	r3, [pc, #372]	@ (8011298 <MX_GPIO_Init+0x2e4>)
 8011124:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011126:	2300      	movs	r3, #0
 8011128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 801112a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801112e:	4619      	mov	r1, r3
 8011130:	4856      	ldr	r0, [pc, #344]	@ (801128c <MX_GPIO_Init+0x2d8>)
 8011132:	f001 fafd 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_R_INT_Pin */
  GPIO_InitStruct.Pin = TOF_R_INT_Pin;
 8011136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801113a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801113c:	4b57      	ldr	r3, [pc, #348]	@ (801129c <MX_GPIO_Init+0x2e8>)
 801113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011140:	2300      	movs	r3, #0
 8011142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TOF_R_INT_GPIO_Port, &GPIO_InitStruct);
 8011144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011148:	4619      	mov	r1, r3
 801114a:	484c      	ldr	r0, [pc, #304]	@ (801127c <MX_GPIO_Init+0x2c8>)
 801114c:	f001 faf0 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8011150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011154:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011156:	2301      	movs	r3, #1
 8011158:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801115a:	2300      	movs	r3, #0
 801115c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801115e:	2300      	movs	r3, #0
 8011160:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8011162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011166:	4619      	mov	r1, r3
 8011168:	4844      	ldr	r0, [pc, #272]	@ (801127c <MX_GPIO_Init+0x2c8>)
 801116a:	f001 fae1 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_RED_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = R_RED_Pin|LED_RED_Pin;
 801116e:	2305      	movs	r3, #5
 8011170:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011172:	2301      	movs	r3, #1
 8011174:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011176:	2300      	movs	r3, #0
 8011178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801117a:	2300      	movs	r3, #0
 801117c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801117e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011182:	4619      	mov	r1, r3
 8011184:	483e      	ldr	r0, [pc, #248]	@ (8011280 <MX_GPIO_Init+0x2cc>)
 8011186:	f001 fad3 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_R_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF_R_XSHUT_Pin;
 801118a:	2302      	movs	r3, #2
 801118c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801118e:	2301      	movs	r3, #1
 8011190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011192:	2301      	movs	r3, #1
 8011194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011196:	2300      	movs	r3, #0
 8011198:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOF_R_XSHUT_GPIO_Port, &GPIO_InitStruct);
 801119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801119e:	4619      	mov	r1, r3
 80111a0:	4837      	ldr	r0, [pc, #220]	@ (8011280 <MX_GPIO_Init+0x2cc>)
 80111a2:	f001 fac5 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin CS_Pin L_RED_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|CS_Pin|L_RED_Pin;
 80111a6:	f640 2301 	movw	r3, #2561	@ 0xa01
 80111aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80111ac:	2301      	movs	r3, #1
 80111ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111b0:	2300      	movs	r3, #0
 80111b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111b4:	2300      	movs	r3, #0
 80111b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80111b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80111bc:	4619      	mov	r1, r3
 80111be:	4831      	ldr	r0, [pc, #196]	@ (8011284 <MX_GPIO_Init+0x2d0>)
 80111c0:	f001 fab6 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_L_INT_Pin */
  GPIO_InitStruct.Pin = TOF_L_INT_Pin;
 80111c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80111ca:	4b34      	ldr	r3, [pc, #208]	@ (801129c <MX_GPIO_Init+0x2e8>)
 80111cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111ce:	2300      	movs	r3, #0
 80111d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TOF_L_INT_GPIO_Port, &GPIO_InitStruct);
 80111d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80111d6:	4619      	mov	r1, r3
 80111d8:	482b      	ldr	r0, [pc, #172]	@ (8011288 <MX_GPIO_Init+0x2d4>)
 80111da:	f001 faa9 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_L_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF_L_XSHUT_Pin;
 80111de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80111e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80111e4:	2301      	movs	r3, #1
 80111e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80111e8:	2301      	movs	r3, #1
 80111ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111ec:	2300      	movs	r3, #0
 80111ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOF_L_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80111f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80111f4:	4619      	mov	r1, r3
 80111f6:	4824      	ldr	r0, [pc, #144]	@ (8011288 <MX_GPIO_Init+0x2d4>)
 80111f8:	f001 fa9a 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80111fc:	2380      	movs	r3, #128	@ 0x80
 80111fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011200:	2301      	movs	r3, #1
 8011202:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011204:	2300      	movs	r3, #0
 8011206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011208:	2300      	movs	r3, #0
 801120a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 801120c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011210:	4619      	mov	r1, r3
 8011212:	481e      	ldr	r0, [pc, #120]	@ (801128c <MX_GPIO_Init+0x2d8>)
 8011214:	f001 fa8c 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_YELLOW_Pin */
  GPIO_InitStruct.Pin = L_YELLOW_Pin;
 8011218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801121c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801121e:	2301      	movs	r3, #1
 8011220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011222:	2300      	movs	r3, #0
 8011224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011226:	2300      	movs	r3, #0
 8011228:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(L_YELLOW_GPIO_Port, &GPIO_InitStruct);
 801122a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801122e:	4619      	mov	r1, r3
 8011230:	4817      	ldr	r0, [pc, #92]	@ (8011290 <MX_GPIO_Init+0x2dc>)
 8011232:	f001 fa7d 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_YELLOW_Pin */
  GPIO_InitStruct.Pin = R_YELLOW_Pin;
 8011236:	2302      	movs	r3, #2
 8011238:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801123a:	2301      	movs	r3, #1
 801123c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801123e:	2300      	movs	r3, #0
 8011240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011242:	2300      	movs	r3, #0
 8011244:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(R_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8011246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801124a:	4619      	mov	r1, r3
 801124c:	4811      	ldr	r0, [pc, #68]	@ (8011294 <MX_GPIO_Init+0x2e0>)
 801124e:	f001 fa6f 	bl	8012730 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8011252:	2380      	movs	r3, #128	@ 0x80
 8011254:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011256:	2301      	movs	r3, #1
 8011258:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801125a:	2300      	movs	r3, #0
 801125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801125e:	2300      	movs	r3, #0
 8011260:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8011262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011266:	4619      	mov	r1, r3
 8011268:	4807      	ldr	r0, [pc, #28]	@ (8011288 <MX_GPIO_Init+0x2d4>)
 801126a:	f001 fa61 	bl	8012730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 801126e:	bf00      	nop
 8011270:	3738      	adds	r7, #56	@ 0x38
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	46020c00 	.word	0x46020c00
 801127c:	42021400 	.word	0x42021400
 8011280:	42021800 	.word	0x42021800
 8011284:	42021000 	.word	0x42021000
 8011288:	42020400 	.word	0x42020400
 801128c:	42020800 	.word	0x42020800
 8011290:	42020000 	.word	0x42020000
 8011294:	42020c00 	.word	0x42020c00
 8011298:	10110000 	.word	0x10110000
 801129c:	10210000 	.word	0x10210000

080112a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a04      	ldr	r2, [pc, #16]	@ (80112c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d101      	bne.n	80112b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80112b2:	f001 f8c1 	bl	8012438 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80112b6:	bf00      	nop
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	40014800 	.word	0x40014800

080112c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80112c4:	b480      	push	{r7}
 80112c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80112c8:	b672      	cpsid	i
}
 80112ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80112cc:	bf00      	nop
 80112ce:	e7fd      	b.n	80112cc <Error_Handler+0x8>

080112d0 <SSD1351_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32u5xx_hal.h"
#include "ssd1351.h"

static void SSD1351_Select() {
 80112d0:	b580      	push	{r7, lr}
 80112d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_CS_GPIO_Port, SSD1351_CS_Pin, GPIO_PIN_RESET);
 80112d4:	2200      	movs	r2, #0
 80112d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80112da:	4802      	ldr	r0, [pc, #8]	@ (80112e4 <SSD1351_Select+0x14>)
 80112dc:	f001 fc00 	bl	8012ae0 <HAL_GPIO_WritePin>
}
 80112e0:	bf00      	nop
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	42021000 	.word	0x42021000

080112e8 <SSD1351_Unselect>:

void SSD1351_Unselect() {
 80112e8:	b580      	push	{r7, lr}
 80112ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_CS_GPIO_Port, SSD1351_CS_Pin, GPIO_PIN_SET);
 80112ec:	2201      	movs	r2, #1
 80112ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80112f2:	4802      	ldr	r0, [pc, #8]	@ (80112fc <SSD1351_Unselect+0x14>)
 80112f4:	f001 fbf4 	bl	8012ae0 <HAL_GPIO_WritePin>
}
 80112f8:	bf00      	nop
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	42021000 	.word	0x42021000

08011300 <SSD1351_Reset>:

static void SSD1351_Reset() {
 8011300:	b580      	push	{r7, lr}
 8011302:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_SET);
 8011304:	2201      	movs	r2, #1
 8011306:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801130a:	480e      	ldr	r0, [pc, #56]	@ (8011344 <SSD1351_Reset+0x44>)
 801130c:	f001 fbe8 	bl	8012ae0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8011310:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011314:	f001 f8b0 	bl	8012478 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_RESET);
 8011318:	2200      	movs	r2, #0
 801131a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801131e:	4809      	ldr	r0, [pc, #36]	@ (8011344 <SSD1351_Reset+0x44>)
 8011320:	f001 fbde 	bl	8012ae0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8011324:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011328:	f001 f8a6 	bl	8012478 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_SET);
 801132c:	2201      	movs	r2, #1
 801132e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011332:	4804      	ldr	r0, [pc, #16]	@ (8011344 <SSD1351_Reset+0x44>)
 8011334:	f001 fbd4 	bl	8012ae0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8011338:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801133c:	f001 f89c 	bl	8012478 <HAL_Delay>
}
 8011340:	bf00      	nop
 8011342:	bd80      	pop	{r7, pc}
 8011344:	42021000 	.word	0x42021000

08011348 <SSD1351_WriteCommand>:

static void SSD1351_WriteCommand(uint8_t cmd) {
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
 801134e:	4603      	mov	r3, r0
 8011350:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_RESET);
 8011352:	2200      	movs	r2, #0
 8011354:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011358:	4806      	ldr	r0, [pc, #24]	@ (8011374 <SSD1351_WriteCommand+0x2c>)
 801135a:	f001 fbc1 	bl	8012ae0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1351_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 801135e:	1df9      	adds	r1, r7, #7
 8011360:	f04f 33ff 	mov.w	r3, #4294967295
 8011364:	2201      	movs	r2, #1
 8011366:	4804      	ldr	r0, [pc, #16]	@ (8011378 <SSD1351_WriteCommand+0x30>)
 8011368:	f006 fcc2 	bl	8017cf0 <HAL_SPI_Transmit>
}
 801136c:	bf00      	nop
 801136e:	3708      	adds	r7, #8
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}
 8011374:	42021400 	.word	0x42021400
 8011378:	20000278 	.word	0x20000278

0801137c <SSD1351_WriteData>:

static void SSD1351_WriteData(uint8_t* buff, size_t buff_size) {
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_SET);
 8011386:	2201      	movs	r2, #1
 8011388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801138c:	4810      	ldr	r0, [pc, #64]	@ (80113d0 <SSD1351_WriteData+0x54>)
 801138e:	f001 fba7 	bl	8012ae0 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8011392:	e015      	b.n	80113c0 <SSD1351_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801139a:	bf28      	it	cs
 801139c:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80113a0:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&SSD1351_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80113a2:	89fa      	ldrh	r2, [r7, #14]
 80113a4:	f04f 33ff 	mov.w	r3, #4294967295
 80113a8:	6879      	ldr	r1, [r7, #4]
 80113aa:	480a      	ldr	r0, [pc, #40]	@ (80113d4 <SSD1351_WriteData+0x58>)
 80113ac:	f006 fca0 	bl	8017cf0 <HAL_SPI_Transmit>
        buff += chunk_size;
 80113b0:	89fb      	ldrh	r3, [r7, #14]
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	4413      	add	r3, r2
 80113b6:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80113b8:	89fb      	ldrh	r3, [r7, #14]
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	1ad3      	subs	r3, r2, r3
 80113be:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d1e6      	bne.n	8011394 <SSD1351_WriteData+0x18>
    }
}
 80113c6:	bf00      	nop
 80113c8:	bf00      	nop
 80113ca:	3710      	adds	r7, #16
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	42021400 	.word	0x42021400
 80113d4:	20000278 	.word	0x20000278

080113d8 <SSD1351_SetAddressWindow>:

static void SSD1351_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80113d8:	b590      	push	{r4, r7, lr}
 80113da:	b085      	sub	sp, #20
 80113dc:	af00      	add	r7, sp, #0
 80113de:	4604      	mov	r4, r0
 80113e0:	4608      	mov	r0, r1
 80113e2:	4611      	mov	r1, r2
 80113e4:	461a      	mov	r2, r3
 80113e6:	4623      	mov	r3, r4
 80113e8:	80fb      	strh	r3, [r7, #6]
 80113ea:	4603      	mov	r3, r0
 80113ec:	80bb      	strh	r3, [r7, #4]
 80113ee:	460b      	mov	r3, r1
 80113f0:	807b      	strh	r3, [r7, #2]
 80113f2:	4613      	mov	r3, r2
 80113f4:	803b      	strh	r3, [r7, #0]
    // column address set
    SSD1351_WriteCommand(0x15); // SETCOLUMN
 80113f6:	2015      	movs	r0, #21
 80113f8:	f7ff ffa6 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { x0 & 0xFF, x1 & 0xFF };
 80113fc:	88fb      	ldrh	r3, [r7, #6]
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	733b      	strb	r3, [r7, #12]
 8011402:	887b      	ldrh	r3, [r7, #2]
 8011404:	b2db      	uxtb	r3, r3
 8011406:	737b      	strb	r3, [r7, #13]
        SSD1351_WriteData(data, sizeof(data));
 8011408:	f107 030c 	add.w	r3, r7, #12
 801140c:	2102      	movs	r1, #2
 801140e:	4618      	mov	r0, r3
 8011410:	f7ff ffb4 	bl	801137c <SSD1351_WriteData>
    }

    // row address set
    SSD1351_WriteCommand(0x75); // SETROW
 8011414:	2075      	movs	r0, #117	@ 0x75
 8011416:	f7ff ff97 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { y0 & 0xFF, y1 & 0xFF };
 801141a:	88bb      	ldrh	r3, [r7, #4]
 801141c:	b2db      	uxtb	r3, r3
 801141e:	723b      	strb	r3, [r7, #8]
 8011420:	883b      	ldrh	r3, [r7, #0]
 8011422:	b2db      	uxtb	r3, r3
 8011424:	727b      	strb	r3, [r7, #9]
        SSD1351_WriteData(data, sizeof(data));
 8011426:	f107 0308 	add.w	r3, r7, #8
 801142a:	2102      	movs	r1, #2
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff ffa5 	bl	801137c <SSD1351_WriteData>
    }

    // write to RAM
    SSD1351_WriteCommand(0x5C); // WRITERAM
 8011432:	205c      	movs	r0, #92	@ 0x5c
 8011434:	f7ff ff88 	bl	8011348 <SSD1351_WriteCommand>
}
 8011438:	bf00      	nop
 801143a:	3714      	adds	r7, #20
 801143c:	46bd      	mov	sp, r7
 801143e:	bd90      	pop	{r4, r7, pc}

08011440 <SSD1351_Init>:

void SSD1351_Init() {
 8011440:	b580      	push	{r7, lr}
 8011442:	b090      	sub	sp, #64	@ 0x40
 8011444:	af00      	add	r7, sp, #0
    SSD1351_Select();
 8011446:	f7ff ff43 	bl	80112d0 <SSD1351_Select>
    SSD1351_Reset();
 801144a:	f7ff ff59 	bl	8011300 <SSD1351_Reset>

    // command list is based on https://github.com/adafruit/Adafruit-SSD1351-library

    SSD1351_WriteCommand(0xFD); // COMMANDLOCK
 801144e:	20fd      	movs	r0, #253	@ 0xfd
 8011450:	f7ff ff7a 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x12 };
 8011454:	2312      	movs	r3, #18
 8011456:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        SSD1351_WriteData(data, sizeof(data));
 801145a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801145e:	2101      	movs	r1, #1
 8011460:	4618      	mov	r0, r3
 8011462:	f7ff ff8b 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xFD); // COMMANDLOCK
 8011466:	20fd      	movs	r0, #253	@ 0xfd
 8011468:	f7ff ff6e 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xB1 };
 801146c:	23b1      	movs	r3, #177	@ 0xb1
 801146e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        SSD1351_WriteData(data, sizeof(data));
 8011472:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011476:	2101      	movs	r1, #1
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff ff7f 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAE); // DISPLAYOFF
 801147e:	20ae      	movs	r0, #174	@ 0xae
 8011480:	f7ff ff62 	bl	8011348 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xB3); // CLOCKDIV
 8011484:	20b3      	movs	r0, #179	@ 0xb3
 8011486:	f7ff ff5f 	bl	8011348 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xF1); // 7:4 = Oscillator Frequency, 3:0 = CLK Div Ratio (A[3:0]+1 = 1..16)
 801148a:	20f1      	movs	r0, #241	@ 0xf1
 801148c:	f7ff ff5c 	bl	8011348 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xCA); // MUXRATIO
 8011490:	20ca      	movs	r0, #202	@ 0xca
 8011492:	f7ff ff59 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x7F }; // 127
 8011496:	237f      	movs	r3, #127	@ 0x7f
 8011498:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        SSD1351_WriteData(data, sizeof(data));
 801149c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80114a0:	2101      	movs	r1, #1
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff ff6a 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA0); // SETREMAP
 80114a8:	20a0      	movs	r0, #160	@ 0xa0
 80114aa:	f7ff ff4d 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x74 };
 80114ae:	2374      	movs	r3, #116	@ 0x74
 80114b0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        SSD1351_WriteData(data, sizeof(data));
 80114b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80114b8:	2101      	movs	r1, #1
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7ff ff5e 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0x15); // SETCOLUMN
 80114c0:	2015      	movs	r0, #21
 80114c2:	f7ff ff41 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x7F };
 80114c6:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 80114ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        SSD1351_WriteData(data, sizeof(data));
 80114cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80114d0:	2102      	movs	r1, #2
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7ff ff52 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0x75); // SETROW
 80114d8:	2075      	movs	r0, #117	@ 0x75
 80114da:	f7ff ff35 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x7F };
 80114de:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 80114e2:	853b      	strh	r3, [r7, #40]	@ 0x28
        SSD1351_WriteData(data, sizeof(data));
 80114e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80114e8:	2102      	movs	r1, #2
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7ff ff46 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA1); // STARTLINE
 80114f0:	20a1      	movs	r0, #161	@ 0xa1
 80114f2:	f7ff ff29 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 }; // 96 if display height == 96
 80114f6:	2300      	movs	r3, #0
 80114f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        SSD1351_WriteData(data, sizeof(data));
 80114fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011500:	2101      	movs	r1, #1
 8011502:	4618      	mov	r0, r3
 8011504:	f7ff ff3a 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA2); // DISPLAYOFFSET
 8011508:	20a2      	movs	r0, #162	@ 0xa2
 801150a:	f7ff ff1d 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 801150e:	2300      	movs	r3, #0
 8011510:	f887 3020 	strb.w	r3, [r7, #32]
        SSD1351_WriteData(data, sizeof(data));
 8011514:	f107 0320 	add.w	r3, r7, #32
 8011518:	2101      	movs	r1, #1
 801151a:	4618      	mov	r0, r3
 801151c:	f7ff ff2e 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB5); // SETGPIO
 8011520:	20b5      	movs	r0, #181	@ 0xb5
 8011522:	f7ff ff11 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8011526:	2300      	movs	r3, #0
 8011528:	773b      	strb	r3, [r7, #28]
        SSD1351_WriteData(data, sizeof(data));
 801152a:	f107 031c 	add.w	r3, r7, #28
 801152e:	2101      	movs	r1, #1
 8011530:	4618      	mov	r0, r3
 8011532:	f7ff ff23 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAB); // FUNCTIONSELECT
 8011536:	20ab      	movs	r0, #171	@ 0xab
 8011538:	f7ff ff06 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 801153c:	2301      	movs	r3, #1
 801153e:	763b      	strb	r3, [r7, #24]
        SSD1351_WriteData(data, sizeof(data));
 8011540:	f107 0318 	add.w	r3, r7, #24
 8011544:	2101      	movs	r1, #1
 8011546:	4618      	mov	r0, r3
 8011548:	f7ff ff18 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB1); // PRECHARGE
 801154c:	20b1      	movs	r0, #177	@ 0xb1
 801154e:	f7ff fefb 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x32 };
 8011552:	2332      	movs	r3, #50	@ 0x32
 8011554:	753b      	strb	r3, [r7, #20]
        SSD1351_WriteData(data, sizeof(data));
 8011556:	f107 0314 	add.w	r3, r7, #20
 801155a:	2101      	movs	r1, #1
 801155c:	4618      	mov	r0, r3
 801155e:	f7ff ff0d 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xBE); // VCOMH
 8011562:	20be      	movs	r0, #190	@ 0xbe
 8011564:	f7ff fef0 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x05 };
 8011568:	2305      	movs	r3, #5
 801156a:	743b      	strb	r3, [r7, #16]
        SSD1351_WriteData(data, sizeof(data));
 801156c:	f107 0310 	add.w	r3, r7, #16
 8011570:	2101      	movs	r1, #1
 8011572:	4618      	mov	r0, r3
 8011574:	f7ff ff02 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA6); // NORMALDISPLAY (don't invert)
 8011578:	20a6      	movs	r0, #166	@ 0xa6
 801157a:	f7ff fee5 	bl	8011348 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xC1); // CONTRASTABC
 801157e:	20c1      	movs	r0, #193	@ 0xc1
 8011580:	f7ff fee2 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xC8, 0x80, 0xC8 };
 8011584:	4a1e      	ldr	r2, [pc, #120]	@ (8011600 <SSD1351_Init+0x1c0>)
 8011586:	f107 030c 	add.w	r3, r7, #12
 801158a:	6812      	ldr	r2, [r2, #0]
 801158c:	4611      	mov	r1, r2
 801158e:	8019      	strh	r1, [r3, #0]
 8011590:	3302      	adds	r3, #2
 8011592:	0c12      	lsrs	r2, r2, #16
 8011594:	701a      	strb	r2, [r3, #0]
        SSD1351_WriteData(data, sizeof(data));
 8011596:	f107 030c 	add.w	r3, r7, #12
 801159a:	2103      	movs	r1, #3
 801159c:	4618      	mov	r0, r3
 801159e:	f7ff feed 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xC7); // CONTRASTMASTER
 80115a2:	20c7      	movs	r0, #199	@ 0xc7
 80115a4:	f7ff fed0 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x0F };
 80115a8:	230f      	movs	r3, #15
 80115aa:	723b      	strb	r3, [r7, #8]
        SSD1351_WriteData(data, sizeof(data));
 80115ac:	f107 0308 	add.w	r3, r7, #8
 80115b0:	2101      	movs	r1, #1
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff fee2 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB4); // SETVSL
 80115b8:	20b4      	movs	r0, #180	@ 0xb4
 80115ba:	f7ff fec5 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xA0, 0xB5, 0x55 };
 80115be:	4a11      	ldr	r2, [pc, #68]	@ (8011604 <SSD1351_Init+0x1c4>)
 80115c0:	1d3b      	adds	r3, r7, #4
 80115c2:	6812      	ldr	r2, [r2, #0]
 80115c4:	4611      	mov	r1, r2
 80115c6:	8019      	strh	r1, [r3, #0]
 80115c8:	3302      	adds	r3, #2
 80115ca:	0c12      	lsrs	r2, r2, #16
 80115cc:	701a      	strb	r2, [r3, #0]
        SSD1351_WriteData(data, sizeof(data));
 80115ce:	1d3b      	adds	r3, r7, #4
 80115d0:	2103      	movs	r1, #3
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff fed2 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB6); // PRECHARGE2
 80115d8:	20b6      	movs	r0, #182	@ 0xb6
 80115da:	f7ff feb5 	bl	8011348 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80115de:	2301      	movs	r3, #1
 80115e0:	703b      	strb	r3, [r7, #0]
        SSD1351_WriteData(data, sizeof(data));
 80115e2:	463b      	mov	r3, r7
 80115e4:	2101      	movs	r1, #1
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff fec8 	bl	801137c <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAF); // DISPLAYON
 80115ec:	20af      	movs	r0, #175	@ 0xaf
 80115ee:	f7ff feab 	bl	8011348 <SSD1351_WriteCommand>

    SSD1351_Unselect();
 80115f2:	f7ff fe79 	bl	80112e8 <SSD1351_Unselect>
}
 80115f6:	bf00      	nop
 80115f8:	3740      	adds	r7, #64	@ 0x40
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	0801d498 	.word	0x0801d498
 8011604:	0801d49c 	.word	0x0801d49c

08011608 <SSD1351_FillScreen>:
    }

    SSD1351_Unselect();
}

void SSD1351_FillScreen(uint16_t color) {
 8011608:	b580      	push	{r7, lr}
 801160a:	b0ca      	sub	sp, #296	@ 0x128
 801160c:	af00      	add	r7, sp, #0
 801160e:	4602      	mov	r2, r0
 8011610:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011614:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8011618:	801a      	strh	r2, [r3, #0]
    SSD1351_Select();
 801161a:	f7ff fe59 	bl	80112d0 <SSD1351_Select>

    // Set the address window to the entire screen
    SSD1351_SetAddressWindow(0, 0, SSD1351_WIDTH - 1, SSD1351_HEIGHT - 1);
 801161e:	237f      	movs	r3, #127	@ 0x7f
 8011620:	227f      	movs	r2, #127	@ 0x7f
 8011622:	2100      	movs	r1, #0
 8011624:	2000      	movs	r0, #0
 8011626:	f7ff fed7 	bl	80113d8 <SSD1351_SetAddressWindow>

    // Calculate total bytes to transmit (2 bytes per pixel)
    const uint32_t total_bytes = SSD1351_WIDTH * SSD1351_HEIGHT * 2;
 801162a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801162e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    // Set the Data/Command pin to Data mode
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_SET);
 8011632:	2201      	movs	r2, #1
 8011634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011638:	4836      	ldr	r0, [pc, #216]	@ (8011714 <SSD1351_FillScreen+0x10c>)
 801163a:	f001 fa51 	bl	8012ae0 <HAL_GPIO_WritePin>
    // Define a buffer size (must be a multiple of 4 for 32-bit filling)
    #define BUFFER_SIZE 256
    uint8_t buffer[BUFFER_SIZE];

    // Swap the bytes so that the high byte is transmitted first.
    const uint16_t swapped_color = ((color & 0xFF) << 8) | (color >> 8);
 801163e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011642:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	021b      	lsls	r3, r3, #8
 801164a:	b21a      	sxth	r2, r3
 801164c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011650:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8011654:	881b      	ldrh	r3, [r3, #0]
 8011656:	0a1b      	lsrs	r3, r3, #8
 8011658:	b29b      	uxth	r3, r3
 801165a:	b21b      	sxth	r3, r3
 801165c:	4313      	orrs	r3, r2
 801165e:	b21b      	sxth	r3, r3
 8011660:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    // Create a 32-bit word that packs two copies of the swapped color:
    const uint32_t color32 = ((uint32_t)swapped_color << 16) | swapped_color;
 8011664:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8011668:	4613      	mov	r3, r2
 801166a:	041b      	lsls	r3, r3, #16
 801166c:	4413      	add	r3, r2
 801166e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    // Fill the buffer using 32-bit writes (fewer iterations than byte writes)
    uint32_t *p32 = (uint32_t *)buffer;
 8011672:	f107 0308 	add.w	r3, r7, #8
 8011676:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    for (uint32_t i = 0; i < BUFFER_SIZE / 4; i++) {
 801167a:	2300      	movs	r3, #0
 801167c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8011680:	e00d      	b.n	801169e <SSD1351_FillScreen+0x96>
        p32[i] = color32;
 8011682:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801168c:	4413      	add	r3, r2
 801168e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011692:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < BUFFER_SIZE / 4; i++) {
 8011694:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8011698:	3301      	adds	r3, #1
 801169a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801169e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80116a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80116a4:	d9ed      	bls.n	8011682 <SSD1351_FillScreen+0x7a>
    }

    // Calculate full buffer transmissions and leftover bytes.
    const uint32_t full_chunks = total_bytes / BUFFER_SIZE;
 80116a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116aa:	0a1b      	lsrs	r3, r3, #8
 80116ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    const uint32_t leftover = total_bytes % BUFFER_SIZE;
 80116b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

    // Transmit full buffer chunks
    for (uint32_t i = 0; i < full_chunks; i++) {
 80116ba:	2300      	movs	r3, #0
 80116bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80116c0:	e00d      	b.n	80116de <SSD1351_FillScreen+0xd6>
        HAL_SPI_Transmit(&SSD1351_SPI_PORT, buffer, BUFFER_SIZE, HAL_MAX_DELAY);
 80116c2:	f107 0108 	add.w	r1, r7, #8
 80116c6:	f04f 33ff 	mov.w	r3, #4294967295
 80116ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80116ce:	4812      	ldr	r0, [pc, #72]	@ (8011718 <SSD1351_FillScreen+0x110>)
 80116d0:	f006 fb0e 	bl	8017cf0 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < full_chunks; i++) {
 80116d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80116d8:	3301      	adds	r3, #1
 80116da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80116de:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80116e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d3eb      	bcc.n	80116c2 <SSD1351_FillScreen+0xba>
    }
    // Transmit any remaining bytes
    if (leftover) {
 80116ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d009      	beq.n	8011706 <SSD1351_FillScreen+0xfe>
        HAL_SPI_Transmit(&SSD1351_SPI_PORT, buffer, leftover, HAL_MAX_DELAY);
 80116f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80116f6:	b29a      	uxth	r2, r3
 80116f8:	f107 0108 	add.w	r1, r7, #8
 80116fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011700:	4805      	ldr	r0, [pc, #20]	@ (8011718 <SSD1351_FillScreen+0x110>)
 8011702:	f006 faf5 	bl	8017cf0 <HAL_SPI_Transmit>
    }

    SSD1351_Unselect();
 8011706:	f7ff fdef 	bl	80112e8 <SSD1351_Unselect>
}
 801170a:	bf00      	nop
 801170c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	42021400 	.word	0x42021400
 8011718:	20000278 	.word	0x20000278

0801171c <SSD1351_DrawImage>:



void SSD1351_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 801171c:	b590      	push	{r4, r7, lr}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	4604      	mov	r4, r0
 8011724:	4608      	mov	r0, r1
 8011726:	4611      	mov	r1, r2
 8011728:	461a      	mov	r2, r3
 801172a:	4623      	mov	r3, r4
 801172c:	80fb      	strh	r3, [r7, #6]
 801172e:	4603      	mov	r3, r0
 8011730:	80bb      	strh	r3, [r7, #4]
 8011732:	460b      	mov	r3, r1
 8011734:	807b      	strh	r3, [r7, #2]
 8011736:	4613      	mov	r3, r2
 8011738:	803b      	strh	r3, [r7, #0]
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 801173a:	88fb      	ldrh	r3, [r7, #6]
 801173c:	2b7f      	cmp	r3, #127	@ 0x7f
 801173e:	d82b      	bhi.n	8011798 <SSD1351_DrawImage+0x7c>
 8011740:	88bb      	ldrh	r3, [r7, #4]
 8011742:	2b7f      	cmp	r3, #127	@ 0x7f
 8011744:	d828      	bhi.n	8011798 <SSD1351_DrawImage+0x7c>
    if((x + w - 1) >= SSD1351_WIDTH) return;
 8011746:	88fa      	ldrh	r2, [r7, #6]
 8011748:	887b      	ldrh	r3, [r7, #2]
 801174a:	4413      	add	r3, r2
 801174c:	2b80      	cmp	r3, #128	@ 0x80
 801174e:	dc25      	bgt.n	801179c <SSD1351_DrawImage+0x80>
    if((y + h - 1) >= SSD1351_HEIGHT) return;
 8011750:	88ba      	ldrh	r2, [r7, #4]
 8011752:	883b      	ldrh	r3, [r7, #0]
 8011754:	4413      	add	r3, r2
 8011756:	2b80      	cmp	r3, #128	@ 0x80
 8011758:	dc22      	bgt.n	80117a0 <SSD1351_DrawImage+0x84>

    SSD1351_Select();
 801175a:	f7ff fdb9 	bl	80112d0 <SSD1351_Select>
    SSD1351_SetAddressWindow(x, y, x+w-1, y+h-1);
 801175e:	88fa      	ldrh	r2, [r7, #6]
 8011760:	887b      	ldrh	r3, [r7, #2]
 8011762:	4413      	add	r3, r2
 8011764:	b29b      	uxth	r3, r3
 8011766:	3b01      	subs	r3, #1
 8011768:	b29c      	uxth	r4, r3
 801176a:	88ba      	ldrh	r2, [r7, #4]
 801176c:	883b      	ldrh	r3, [r7, #0]
 801176e:	4413      	add	r3, r2
 8011770:	b29b      	uxth	r3, r3
 8011772:	3b01      	subs	r3, #1
 8011774:	b29b      	uxth	r3, r3
 8011776:	88b9      	ldrh	r1, [r7, #4]
 8011778:	88f8      	ldrh	r0, [r7, #6]
 801177a:	4622      	mov	r2, r4
 801177c:	f7ff fe2c 	bl	80113d8 <SSD1351_SetAddressWindow>
    SSD1351_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8011780:	887b      	ldrh	r3, [r7, #2]
 8011782:	883a      	ldrh	r2, [r7, #0]
 8011784:	fb02 f303 	mul.w	r3, r2, r3
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	4619      	mov	r1, r3
 801178c:	69b8      	ldr	r0, [r7, #24]
 801178e:	f7ff fdf5 	bl	801137c <SSD1351_WriteData>
    SSD1351_Unselect();
 8011792:	f7ff fda9 	bl	80112e8 <SSD1351_Unselect>
 8011796:	e004      	b.n	80117a2 <SSD1351_DrawImage+0x86>
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8011798:	bf00      	nop
 801179a:	e002      	b.n	80117a2 <SSD1351_DrawImage+0x86>
    if((x + w - 1) >= SSD1351_WIDTH) return;
 801179c:	bf00      	nop
 801179e:	e000      	b.n	80117a2 <SSD1351_DrawImage+0x86>
    if((y + h - 1) >= SSD1351_HEIGHT) return;
 80117a0:	bf00      	nop
}
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd90      	pop	{r4, r7, pc}

080117a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b082      	sub	sp, #8
 80117ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80117ae:	4b0c      	ldr	r3, [pc, #48]	@ (80117e0 <HAL_MspInit+0x38>)
 80117b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80117b4:	4a0a      	ldr	r2, [pc, #40]	@ (80117e0 <HAL_MspInit+0x38>)
 80117b6:	f043 0304 	orr.w	r3, r3, #4
 80117ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80117be:	4b08      	ldr	r3, [pc, #32]	@ (80117e0 <HAL_MspInit+0x38>)
 80117c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80117c4:	f003 0304 	and.w	r3, r3, #4
 80117c8:	607b      	str	r3, [r7, #4]
 80117ca:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80117cc:	f002 f9de 	bl	8013b8c <HAL_PWREx_EnableVddIO2>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80117d0:	2004      	movs	r0, #4
 80117d2:	f000 ff22 	bl	801261a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80117d6:	bf00      	nop
 80117d8:	3708      	adds	r7, #8
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	46020c00 	.word	0x46020c00

080117e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b0ba      	sub	sp, #232	@ 0xe8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80117f0:	2200      	movs	r2, #0
 80117f2:	601a      	str	r2, [r3, #0]
 80117f4:	605a      	str	r2, [r3, #4]
 80117f6:	609a      	str	r2, [r3, #8]
 80117f8:	60da      	str	r2, [r3, #12]
 80117fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80117fc:	f107 0310 	add.w	r3, r7, #16
 8011800:	22c0      	movs	r2, #192	@ 0xc0
 8011802:	2100      	movs	r1, #0
 8011804:	4618      	mov	r0, r3
 8011806:	f009 fc8f 	bl	801b128 <memset>
  if(hi2c->Instance==I2C2)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	4a26      	ldr	r2, [pc, #152]	@ (80118a8 <HAL_I2C_MspInit+0xc4>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d144      	bne.n	801189e <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8011814:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8011818:	f04f 0300 	mov.w	r3, #0
 801181c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8011820:	2300      	movs	r3, #0
 8011822:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011824:	f107 0310 	add.w	r3, r7, #16
 8011828:	4618      	mov	r0, r3
 801182a:	f003 fcb3 	bl	8015194 <HAL_RCCEx_PeriphCLKConfig>
 801182e:	4603      	mov	r3, r0
 8011830:	2b00      	cmp	r3, #0
 8011832:	d001      	beq.n	8011838 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8011834:	f7ff fd46 	bl	80112c4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8011838:	4b1c      	ldr	r3, [pc, #112]	@ (80118ac <HAL_I2C_MspInit+0xc8>)
 801183a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801183e:	4a1b      	ldr	r2, [pc, #108]	@ (80118ac <HAL_I2C_MspInit+0xc8>)
 8011840:	f043 0320 	orr.w	r3, r3, #32
 8011844:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8011848:	4b18      	ldr	r3, [pc, #96]	@ (80118ac <HAL_I2C_MspInit+0xc8>)
 801184a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801184e:	f003 0320 	and.w	r3, r3, #32
 8011852:	60fb      	str	r3, [r7, #12]
 8011854:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011856:	2303      	movs	r3, #3
 8011858:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801185c:	2312      	movs	r3, #18
 801185e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011862:	2300      	movs	r3, #0
 8011864:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011868:	2300      	movs	r3, #0
 801186a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801186e:	2304      	movs	r3, #4
 8011870:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011874:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011878:	4619      	mov	r1, r3
 801187a:	480d      	ldr	r0, [pc, #52]	@ (80118b0 <HAL_I2C_MspInit+0xcc>)
 801187c:	f000 ff58 	bl	8012730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8011880:	4b0a      	ldr	r3, [pc, #40]	@ (80118ac <HAL_I2C_MspInit+0xc8>)
 8011882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011886:	4a09      	ldr	r2, [pc, #36]	@ (80118ac <HAL_I2C_MspInit+0xc8>)
 8011888:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801188c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8011890:	4b06      	ldr	r3, [pc, #24]	@ (80118ac <HAL_I2C_MspInit+0xc8>)
 8011892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801189a:	60bb      	str	r3, [r7, #8]
 801189c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 801189e:	bf00      	nop
 80118a0:	37e8      	adds	r7, #232	@ 0xe8
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	40005800 	.word	0x40005800
 80118ac:	46020c00 	.word	0x46020c00
 80118b0:	42021400 	.word	0x42021400

080118b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b0ba      	sub	sp, #232	@ 0xe8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80118bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80118c0:	2200      	movs	r2, #0
 80118c2:	601a      	str	r2, [r3, #0]
 80118c4:	605a      	str	r2, [r3, #4]
 80118c6:	609a      	str	r2, [r3, #8]
 80118c8:	60da      	str	r2, [r3, #12]
 80118ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80118cc:	f107 0310 	add.w	r3, r7, #16
 80118d0:	22c0      	movs	r2, #192	@ 0xc0
 80118d2:	2100      	movs	r1, #0
 80118d4:	4618      	mov	r0, r3
 80118d6:	f009 fc27 	bl	801b128 <memset>
  if(hspi->Instance==SPI1)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	4a27      	ldr	r2, [pc, #156]	@ (801197c <HAL_SPI_MspInit+0xc8>)
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d146      	bne.n	8011972 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80118e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80118e8:	f04f 0300 	mov.w	r3, #0
 80118ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80118f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80118f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80118f8:	f107 0310 	add.w	r3, r7, #16
 80118fc:	4618      	mov	r0, r3
 80118fe:	f003 fc49 	bl	8015194 <HAL_RCCEx_PeriphCLKConfig>
 8011902:	4603      	mov	r3, r0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d001      	beq.n	801190c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8011908:	f7ff fcdc 	bl	80112c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801190c:	4b1c      	ldr	r3, [pc, #112]	@ (8011980 <HAL_SPI_MspInit+0xcc>)
 801190e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011912:	4a1b      	ldr	r2, [pc, #108]	@ (8011980 <HAL_SPI_MspInit+0xcc>)
 8011914:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011918:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 801191c:	4b18      	ldr	r3, [pc, #96]	@ (8011980 <HAL_SPI_MspInit+0xcc>)
 801191e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011922:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011926:	60fb      	str	r3, [r7, #12]
 8011928:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801192a:	4b15      	ldr	r3, [pc, #84]	@ (8011980 <HAL_SPI_MspInit+0xcc>)
 801192c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011930:	4a13      	ldr	r2, [pc, #76]	@ (8011980 <HAL_SPI_MspInit+0xcc>)
 8011932:	f043 0301 	orr.w	r3, r3, #1
 8011936:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801193a:	4b11      	ldr	r3, [pc, #68]	@ (8011980 <HAL_SPI_MspInit+0xcc>)
 801193c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011940:	f003 0301 	and.w	r3, r3, #1
 8011944:	60bb      	str	r3, [r7, #8]
 8011946:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8011948:	23a0      	movs	r3, #160	@ 0xa0
 801194a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801194e:	2302      	movs	r3, #2
 8011950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011954:	2300      	movs	r3, #0
 8011956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801195a:	2300      	movs	r3, #0
 801195c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011960:	2305      	movs	r3, #5
 8011962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011966:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801196a:	4619      	mov	r1, r3
 801196c:	4805      	ldr	r0, [pc, #20]	@ (8011984 <HAL_SPI_MspInit+0xd0>)
 801196e:	f000 fedf 	bl	8012730 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8011972:	bf00      	nop
 8011974:	37e8      	adds	r7, #232	@ 0xe8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	40013000 	.word	0x40013000
 8011980:	46020c00 	.word	0x46020c00
 8011984:	42020000 	.word	0x42020000

08011988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b0bc      	sub	sp, #240	@ 0xf0
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011990:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8011994:	2200      	movs	r2, #0
 8011996:	601a      	str	r2, [r3, #0]
 8011998:	605a      	str	r2, [r3, #4]
 801199a:	609a      	str	r2, [r3, #8]
 801199c:	60da      	str	r2, [r3, #12]
 801199e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80119a0:	f107 0318 	add.w	r3, r7, #24
 80119a4:	22c0      	movs	r2, #192	@ 0xc0
 80119a6:	2100      	movs	r1, #0
 80119a8:	4618      	mov	r0, r3
 80119aa:	f009 fbbd 	bl	801b128 <memset>
  if(huart->Instance==USART1)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	4a4c      	ldr	r2, [pc, #304]	@ (8011ae4 <HAL_UART_MspInit+0x15c>)
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d146      	bne.n	8011a46 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80119b8:	f04f 0201 	mov.w	r2, #1
 80119bc:	f04f 0300 	mov.w	r3, #0
 80119c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80119c4:	2300      	movs	r3, #0
 80119c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80119c8:	f107 0318 	add.w	r3, r7, #24
 80119cc:	4618      	mov	r0, r3
 80119ce:	f003 fbe1 	bl	8015194 <HAL_RCCEx_PeriphCLKConfig>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d001      	beq.n	80119dc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80119d8:	f7ff fc74 	bl	80112c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80119dc:	4b42      	ldr	r3, [pc, #264]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 80119de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80119e2:	4a41      	ldr	r2, [pc, #260]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 80119e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80119e8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80119ec:	4b3e      	ldr	r3, [pc, #248]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 80119ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80119f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80119f6:	617b      	str	r3, [r7, #20]
 80119f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80119fa:	4b3b      	ldr	r3, [pc, #236]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 80119fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011a00:	4a39      	ldr	r2, [pc, #228]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 8011a02:	f043 0301 	orr.w	r3, r3, #1
 8011a06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8011a0a:	4b37      	ldr	r3, [pc, #220]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 8011a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011a10:	f003 0301 	and.w	r3, r3, #1
 8011a14:	613b      	str	r3, [r7, #16]
 8011a16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011a18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8011a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a20:	2302      	movs	r3, #2
 8011a22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a26:	2300      	movs	r3, #0
 8011a28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011a32:	2307      	movs	r3, #7
 8011a34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	482b      	ldr	r0, [pc, #172]	@ (8011aec <HAL_UART_MspInit+0x164>)
 8011a40:	f000 fe76 	bl	8012730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8011a44:	e049      	b.n	8011ada <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4a29      	ldr	r2, [pc, #164]	@ (8011af0 <HAL_UART_MspInit+0x168>)
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	d144      	bne.n	8011ada <HAL_UART_MspInit+0x152>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8011a50:	f04f 0202 	mov.w	r2, #2
 8011a54:	f04f 0300 	mov.w	r3, #0
 8011a58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011a60:	f107 0318 	add.w	r3, r7, #24
 8011a64:	4618      	mov	r0, r3
 8011a66:	f003 fb95 	bl	8015194 <HAL_RCCEx_PeriphCLKConfig>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d001      	beq.n	8011a74 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8011a70:	f7ff fc28 	bl	80112c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8011a74:	4b1c      	ldr	r3, [pc, #112]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 8011a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 8011a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011a80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8011a84:	4b18      	ldr	r3, [pc, #96]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 8011a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011a8e:	60fb      	str	r3, [r7, #12]
 8011a90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a92:	4b15      	ldr	r3, [pc, #84]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 8011a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011a98:	4a13      	ldr	r2, [pc, #76]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 8011a9a:	f043 0301 	orr.w	r3, r3, #1
 8011a9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8011aa2:	4b11      	ldr	r3, [pc, #68]	@ (8011ae8 <HAL_UART_MspInit+0x160>)
 8011aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011aa8:	f003 0301 	and.w	r3, r3, #1
 8011aac:	60bb      	str	r3, [r7, #8]
 8011aae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8011ab0:	230c      	movs	r3, #12
 8011ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ab6:	2302      	movs	r3, #2
 8011ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011abc:	2300      	movs	r3, #0
 8011abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011ac8:	2307      	movs	r3, #7
 8011aca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ace:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	4805      	ldr	r0, [pc, #20]	@ (8011aec <HAL_UART_MspInit+0x164>)
 8011ad6:	f000 fe2b 	bl	8012730 <HAL_GPIO_Init>
}
 8011ada:	bf00      	nop
 8011adc:	37f0      	adds	r7, #240	@ 0xf0
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	40013800 	.word	0x40013800
 8011ae8:	46020c00 	.word	0x46020c00
 8011aec:	42020000 	.word	0x42020000
 8011af0:	40004400 	.word	0x40004400

08011af4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b08e      	sub	sp, #56	@ 0x38
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8011afc:	2300      	movs	r3, #0
 8011afe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8011b00:	2300      	movs	r3, #0
 8011b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8011b04:	4b2e      	ldr	r3, [pc, #184]	@ (8011bc0 <HAL_InitTick+0xcc>)
 8011b06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8011bc0 <HAL_InitTick+0xcc>)
 8011b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011b10:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8011b14:	4b2a      	ldr	r3, [pc, #168]	@ (8011bc0 <HAL_InitTick+0xcc>)
 8011b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011b1e:	60fb      	str	r3, [r7, #12]
 8011b20:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011b22:	f107 0210 	add.w	r2, r7, #16
 8011b26:	f107 0314 	add.w	r3, r7, #20
 8011b2a:	4611      	mov	r1, r2
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f003 fa73 	bl	8015018 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8011b32:	f003 fa49 	bl	8014fc8 <HAL_RCC_GetPCLK2Freq>
 8011b36:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8011b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b3a:	4a22      	ldr	r2, [pc, #136]	@ (8011bc4 <HAL_InitTick+0xd0>)
 8011b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8011b40:	0c9b      	lsrs	r3, r3, #18
 8011b42:	3b01      	subs	r3, #1
 8011b44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8011b46:	4b20      	ldr	r3, [pc, #128]	@ (8011bc8 <HAL_InitTick+0xd4>)
 8011b48:	4a20      	ldr	r2, [pc, #128]	@ (8011bcc <HAL_InitTick+0xd8>)
 8011b4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8011b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8011bc8 <HAL_InitTick+0xd4>)
 8011b4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8011b52:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8011b54:	4a1c      	ldr	r2, [pc, #112]	@ (8011bc8 <HAL_InitTick+0xd4>)
 8011b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b58:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8011b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8011bc8 <HAL_InitTick+0xd4>)
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011b60:	4b19      	ldr	r3, [pc, #100]	@ (8011bc8 <HAL_InitTick+0xd4>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8011b66:	4818      	ldr	r0, [pc, #96]	@ (8011bc8 <HAL_InitTick+0xd4>)
 8011b68:	f006 fc00 	bl	801836c <HAL_TIM_Base_Init>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8011b72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d118      	bne.n	8011bac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8011b7a:	4813      	ldr	r0, [pc, #76]	@ (8011bc8 <HAL_InitTick+0xd4>)
 8011b7c:	f006 fc58 	bl	8018430 <HAL_TIM_Base_Start_IT>
 8011b80:	4603      	mov	r3, r0
 8011b82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8011b86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d10e      	bne.n	8011bac <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2b0f      	cmp	r3, #15
 8011b92:	d808      	bhi.n	8011ba6 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8011b94:	2200      	movs	r2, #0
 8011b96:	6879      	ldr	r1, [r7, #4]
 8011b98:	2047      	movs	r0, #71	@ 0x47
 8011b9a:	f000 fd49 	bl	8012630 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8011bd0 <HAL_InitTick+0xdc>)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6013      	str	r3, [r2, #0]
 8011ba4:	e002      	b.n	8011bac <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8011bac:	2047      	movs	r0, #71	@ 0x47
 8011bae:	f000 fd59 	bl	8012664 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8011bb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3738      	adds	r7, #56	@ 0x38
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	46020c00 	.word	0x46020c00
 8011bc4:	431bde83 	.word	0x431bde83
 8011bc8:	20005984 	.word	0x20005984
 8011bcc:	40014800 	.word	0x40014800
 8011bd0:	20000038 	.word	0x20000038

08011bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8011bd8:	bf00      	nop
 8011bda:	e7fd      	b.n	8011bd8 <NMI_Handler+0x4>

08011bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011be0:	bf00      	nop
 8011be2:	e7fd      	b.n	8011be0 <HardFault_Handler+0x4>

08011be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011be4:	b480      	push	{r7}
 8011be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011be8:	bf00      	nop
 8011bea:	e7fd      	b.n	8011be8 <MemManage_Handler+0x4>

08011bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011bec:	b480      	push	{r7}
 8011bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011bf0:	bf00      	nop
 8011bf2:	e7fd      	b.n	8011bf0 <BusFault_Handler+0x4>

08011bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011bf8:	bf00      	nop
 8011bfa:	e7fd      	b.n	8011bf8 <UsageFault_Handler+0x4>

08011bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011c00:	bf00      	nop
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr

08011c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011c0a:	b480      	push	{r7}
 8011c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011c0e:	bf00      	nop
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr

08011c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011c1c:	bf00      	nop
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr

08011c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011c26:	b480      	push	{r7}
 8011c28:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011c2a:	bf00      	nop
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8011c38:	4802      	ldr	r0, [pc, #8]	@ (8011c44 <TIM17_IRQHandler+0x10>)
 8011c3a:	f006 fc99 	bl	8018570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8011c3e:	bf00      	nop
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	20005984 	.word	0x20005984

08011c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	af00      	add	r7, sp, #0
  return 1;
 8011c4c:	2301      	movs	r3, #1
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <_kill>:

int _kill(int pid, int sig)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8011c62:	f009 fac7 	bl	801b1f4 <__errno>
 8011c66:	4603      	mov	r3, r0
 8011c68:	2216      	movs	r2, #22
 8011c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8011c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <_exit>:

void _exit (int status)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8011c80:	f04f 31ff 	mov.w	r1, #4294967295
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f7ff ffe7 	bl	8011c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8011c8a:	bf00      	nop
 8011c8c:	e7fd      	b.n	8011c8a <_exit+0x12>

08011c8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011c8e:	b580      	push	{r7, lr}
 8011c90:	b086      	sub	sp, #24
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	60f8      	str	r0, [r7, #12]
 8011c96:	60b9      	str	r1, [r7, #8]
 8011c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	617b      	str	r3, [r7, #20]
 8011c9e:	e00a      	b.n	8011cb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8011ca0:	f3af 8000 	nop.w
 8011ca4:	4601      	mov	r1, r0
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	1c5a      	adds	r2, r3, #1
 8011caa:	60ba      	str	r2, [r7, #8]
 8011cac:	b2ca      	uxtb	r2, r1
 8011cae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	617b      	str	r3, [r7, #20]
 8011cb6:	697a      	ldr	r2, [r7, #20]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	dbf0      	blt.n	8011ca0 <_read+0x12>
  }

  return len;
 8011cbe:	687b      	ldr	r3, [r7, #4]
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3718      	adds	r7, #24
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}

08011cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b086      	sub	sp, #24
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	60f8      	str	r0, [r7, #12]
 8011cd0:	60b9      	str	r1, [r7, #8]
 8011cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	617b      	str	r3, [r7, #20]
 8011cd8:	e009      	b.n	8011cee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	1c5a      	adds	r2, r3, #1
 8011cde:	60ba      	str	r2, [r7, #8]
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fe fa7a 	bl	80101dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	3301      	adds	r3, #1
 8011cec:	617b      	str	r3, [r7, #20]
 8011cee:	697a      	ldr	r2, [r7, #20]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	dbf1      	blt.n	8011cda <_write+0x12>
  }
  return len;
 8011cf6:	687b      	ldr	r3, [r7, #4]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3718      	adds	r7, #24
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <_close>:

int _close(int file)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8011d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8011d28:	605a      	str	r2, [r3, #4]
  return 0;
 8011d2a:	2300      	movs	r3, #0
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <_isatty>:

int _isatty(int file)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8011d40:	2301      	movs	r3, #1
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	370c      	adds	r7, #12
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011d4e:	b480      	push	{r7}
 8011d50:	b085      	sub	sp, #20
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	60f8      	str	r0, [r7, #12]
 8011d56:	60b9      	str	r1, [r7, #8]
 8011d58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8011d5a:	2300      	movs	r3, #0
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3714      	adds	r7, #20
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b086      	sub	sp, #24
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011d70:	4a14      	ldr	r2, [pc, #80]	@ (8011dc4 <_sbrk+0x5c>)
 8011d72:	4b15      	ldr	r3, [pc, #84]	@ (8011dc8 <_sbrk+0x60>)
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011d7c:	4b13      	ldr	r3, [pc, #76]	@ (8011dcc <_sbrk+0x64>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d102      	bne.n	8011d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011d84:	4b11      	ldr	r3, [pc, #68]	@ (8011dcc <_sbrk+0x64>)
 8011d86:	4a12      	ldr	r2, [pc, #72]	@ (8011dd0 <_sbrk+0x68>)
 8011d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011d8a:	4b10      	ldr	r3, [pc, #64]	@ (8011dcc <_sbrk+0x64>)
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	4413      	add	r3, r2
 8011d92:	693a      	ldr	r2, [r7, #16]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d207      	bcs.n	8011da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011d98:	f009 fa2c 	bl	801b1f4 <__errno>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	220c      	movs	r2, #12
 8011da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011da2:	f04f 33ff 	mov.w	r3, #4294967295
 8011da6:	e009      	b.n	8011dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011da8:	4b08      	ldr	r3, [pc, #32]	@ (8011dcc <_sbrk+0x64>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8011dae:	4b07      	ldr	r3, [pc, #28]	@ (8011dcc <_sbrk+0x64>)
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	4413      	add	r3, r2
 8011db6:	4a05      	ldr	r2, [pc, #20]	@ (8011dcc <_sbrk+0x64>)
 8011db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8011dba:	68fb      	ldr	r3, [r7, #12]
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3718      	adds	r7, #24
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	200c0000 	.word	0x200c0000
 8011dc8:	00000400 	.word	0x00000400
 8011dcc:	200059d0 	.word	0x200059d0
 8011dd0:	20005c30 	.word	0x20005c30

08011dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8011dd8:	4b18      	ldr	r3, [pc, #96]	@ (8011e3c <SystemInit+0x68>)
 8011dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011dde:	4a17      	ldr	r2, [pc, #92]	@ (8011e3c <SystemInit+0x68>)
 8011de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8011de8:	4b15      	ldr	r3, [pc, #84]	@ (8011e40 <SystemInit+0x6c>)
 8011dea:	2201      	movs	r2, #1
 8011dec:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8011dee:	4b14      	ldr	r3, [pc, #80]	@ (8011e40 <SystemInit+0x6c>)
 8011df0:	2200      	movs	r2, #0
 8011df2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8011df4:	4b12      	ldr	r3, [pc, #72]	@ (8011e40 <SystemInit+0x6c>)
 8011df6:	2200      	movs	r2, #0
 8011df8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8011dfa:	4b11      	ldr	r3, [pc, #68]	@ (8011e40 <SystemInit+0x6c>)
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8011e00:	4b0f      	ldr	r3, [pc, #60]	@ (8011e40 <SystemInit+0x6c>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	4a0e      	ldr	r2, [pc, #56]	@ (8011e40 <SystemInit+0x6c>)
 8011e06:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8011e0a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8011e0e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8011e10:	4b0b      	ldr	r3, [pc, #44]	@ (8011e40 <SystemInit+0x6c>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8011e16:	4b0a      	ldr	r3, [pc, #40]	@ (8011e40 <SystemInit+0x6c>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a09      	ldr	r2, [pc, #36]	@ (8011e40 <SystemInit+0x6c>)
 8011e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011e20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8011e22:	4b07      	ldr	r3, [pc, #28]	@ (8011e40 <SystemInit+0x6c>)
 8011e24:	2200      	movs	r2, #0
 8011e26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011e28:	4b04      	ldr	r3, [pc, #16]	@ (8011e3c <SystemInit+0x68>)
 8011e2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8011e2e:	609a      	str	r2, [r3, #8]
  #endif
}
 8011e30:	bf00      	nop
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr
 8011e3a:	bf00      	nop
 8011e3c:	e000ed00 	.word	0xe000ed00
 8011e40:	46020c00 	.word	0x46020c00

08011e44 <_I2CWrite>:
#   define VL53LX_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b088      	sub	sp, #32
 8011e48:	af02      	add	r7, sp, #8
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	330a      	adds	r3, #10
 8011e54:	617b      	str	r3, [r7, #20]
//    int i;
    i2cwriteCount+=count;
 8011e56:	4b10      	ldr	r3, [pc, #64]	@ (8011e98 <_I2CWrite+0x54>)
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8011e98 <_I2CWrite+0x54>)
 8011e60:	6013      	str	r3, [r2, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e68:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	@ 0xa4c
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e72:	f893 3a50 	ldrb.w	r3, [r3, #2640]	@ 0xa50
 8011e76:	4619      	mov	r1, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	9300      	str	r3, [sp, #0]
 8011e80:	4613      	mov	r3, r2
 8011e82:	68ba      	ldr	r2, [r7, #8]
 8011e84:	f000 fee0 	bl	8012c48 <HAL_I2C_Master_Transmit>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	613b      	str	r3, [r7, #16]

    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8011e8c:	693b      	ldr	r3, [r7, #16]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3718      	adds	r7, #24
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	bf00      	nop
 8011e98:	200059d8 	.word	0x200059d8

08011e9c <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b088      	sub	sp, #32
 8011ea0:	af02      	add	r7, sp, #8
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	330a      	adds	r3, #10
 8011eac:	617b      	str	r3, [r7, #20]

    i2creadCount+=count;
 8011eae:	4b11      	ldr	r3, [pc, #68]	@ (8011ef4 <_I2CRead+0x58>)
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8011ef4 <_I2CRead+0x58>)
 8011eb8:	6013      	str	r3, [r2, #0]
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ec0:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	@ 0xa4c
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011eca:	f893 3a50 	ldrb.w	r3, [r3, #2640]	@ 0xa50
 8011ece:	f043 0301 	orr.w	r3, r3, #1
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	4613      	mov	r3, r2
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	f000 ffa5 	bl	8012e30 <HAL_I2C_Master_Receive>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8011eea:	693b      	ldr	r3, [r7, #16]
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3718      	adds	r7, #24
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	200059d4 	.word	0x200059d4

08011ef8 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b086      	sub	sp, #24
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	607a      	str	r2, [r7, #4]
 8011f02:	603b      	str	r3, [r7, #0]
 8011f04:	460b      	mov	r3, r1
 8011f06:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	2bff      	cmp	r3, #255	@ 0xff
 8011f10:	d902      	bls.n	8011f18 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 8011f12:	f06f 0303 	mvn.w	r3, #3
 8011f16:	e01d      	b.n	8011f54 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8011f18:	897b      	ldrh	r3, [r7, #10]
 8011f1a:	0a1b      	lsrs	r3, r3, #8
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	b2da      	uxtb	r2, r3
 8011f20:	4b0e      	ldr	r3, [pc, #56]	@ (8011f5c <VL53LX_WriteMulti+0x64>)
 8011f22:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011f24:	897b      	ldrh	r3, [r7, #10]
 8011f26:	b2da      	uxtb	r2, r3
 8011f28:	4b0c      	ldr	r3, [pc, #48]	@ (8011f5c <VL53LX_WriteMulti+0x64>)
 8011f2a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8011f2c:	683a      	ldr	r2, [r7, #0]
 8011f2e:	6879      	ldr	r1, [r7, #4]
 8011f30:	480b      	ldr	r0, [pc, #44]	@ (8011f60 <VL53LX_WriteMulti+0x68>)
 8011f32:	f009 f99a 	bl	801b26a <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	3302      	adds	r3, #2
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	4907      	ldr	r1, [pc, #28]	@ (8011f5c <VL53LX_WriteMulti+0x64>)
 8011f3e:	68f8      	ldr	r0, [r7, #12]
 8011f40:	f7ff ff80 	bl	8011e44 <_I2CWrite>
 8011f44:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d001      	beq.n	8011f50 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011f4c:	23f3      	movs	r3, #243	@ 0xf3
 8011f4e:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8011f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3718      	adds	r7, #24
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	200059dc 	.word	0x200059dc
 8011f60:	200059de 	.word	0x200059de

08011f64 <VL53LX_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	607a      	str	r2, [r7, #4]
 8011f6e:	603b      	str	r3, [r7, #0]
 8011f70:	460b      	mov	r3, r1
 8011f72:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011f74:	2300      	movs	r3, #0
 8011f76:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011f78:	897b      	ldrh	r3, [r7, #10]
 8011f7a:	0a1b      	lsrs	r3, r3, #8
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	b2da      	uxtb	r2, r3
 8011f80:	4b12      	ldr	r3, [pc, #72]	@ (8011fcc <VL53LX_ReadMulti+0x68>)
 8011f82:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011f84:	897b      	ldrh	r3, [r7, #10]
 8011f86:	b2da      	uxtb	r2, r3
 8011f88:	4b10      	ldr	r3, [pc, #64]	@ (8011fcc <VL53LX_ReadMulti+0x68>)
 8011f8a:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011f8c:	2202      	movs	r2, #2
 8011f8e:	490f      	ldr	r1, [pc, #60]	@ (8011fcc <VL53LX_ReadMulti+0x68>)
 8011f90:	68f8      	ldr	r0, [r7, #12]
 8011f92:	f7ff ff57 	bl	8011e44 <_I2CWrite>
 8011f96:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d002      	beq.n	8011fa4 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011f9e:	23f3      	movs	r3, #243	@ 0xf3
 8011fa0:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011fa2:	e00c      	b.n	8011fbe <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8011fa4:	683a      	ldr	r2, [r7, #0]
 8011fa6:	6879      	ldr	r1, [r7, #4]
 8011fa8:	68f8      	ldr	r0, [r7, #12]
 8011faa:	f7ff ff77 	bl	8011e9c <_I2CRead>
 8011fae:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d002      	beq.n	8011fbc <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011fb6:	23f3      	movs	r3, #243	@ 0xf3
 8011fb8:	75fb      	strb	r3, [r7, #23]
 8011fba:	e000      	b.n	8011fbe <VL53LX_ReadMulti+0x5a>
    }
done:
 8011fbc:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3718      	adds	r7, #24
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	200059dc 	.word	0x200059dc

08011fd0 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	460b      	mov	r3, r1
 8011fda:	807b      	strh	r3, [r7, #2]
 8011fdc:	4613      	mov	r3, r2
 8011fde:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011fe4:	887b      	ldrh	r3, [r7, #2]
 8011fe6:	0a1b      	lsrs	r3, r3, #8
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	b2da      	uxtb	r2, r3
 8011fec:	4b0c      	ldr	r3, [pc, #48]	@ (8012020 <VL53LX_WrByte+0x50>)
 8011fee:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011ff0:	887b      	ldrh	r3, [r7, #2]
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8012020 <VL53LX_WrByte+0x50>)
 8011ff6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8011ff8:	4a09      	ldr	r2, [pc, #36]	@ (8012020 <VL53LX_WrByte+0x50>)
 8011ffa:	787b      	ldrb	r3, [r7, #1]
 8011ffc:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8011ffe:	2203      	movs	r2, #3
 8012000:	4907      	ldr	r1, [pc, #28]	@ (8012020 <VL53LX_WrByte+0x50>)
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f7ff ff1e 	bl	8011e44 <_I2CWrite>
 8012008:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d001      	beq.n	8012014 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012010:	23f3      	movs	r3, #243	@ 0xf3
 8012012:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8012014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012018:	4618      	mov	r0, r3
 801201a:	3710      	adds	r7, #16
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	200059dc 	.word	0x200059dc

08012024 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8012024:	b580      	push	{r7, lr}
 8012026:	b084      	sub	sp, #16
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	460b      	mov	r3, r1
 801202e:	807b      	strh	r3, [r7, #2]
 8012030:	4613      	mov	r3, r2
 8012032:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8012034:	2300      	movs	r3, #0
 8012036:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8012038:	887b      	ldrh	r3, [r7, #2]
 801203a:	0a1b      	lsrs	r3, r3, #8
 801203c:	b29b      	uxth	r3, r3
 801203e:	b2da      	uxtb	r2, r3
 8012040:	4b10      	ldr	r3, [pc, #64]	@ (8012084 <VL53LX_WrWord+0x60>)
 8012042:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8012044:	887b      	ldrh	r3, [r7, #2]
 8012046:	b2da      	uxtb	r2, r3
 8012048:	4b0e      	ldr	r3, [pc, #56]	@ (8012084 <VL53LX_WrWord+0x60>)
 801204a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 801204c:	883b      	ldrh	r3, [r7, #0]
 801204e:	0a1b      	lsrs	r3, r3, #8
 8012050:	b29b      	uxth	r3, r3
 8012052:	b2da      	uxtb	r2, r3
 8012054:	4b0b      	ldr	r3, [pc, #44]	@ (8012084 <VL53LX_WrWord+0x60>)
 8012056:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8012058:	883b      	ldrh	r3, [r7, #0]
 801205a:	b2da      	uxtb	r2, r3
 801205c:	4b09      	ldr	r3, [pc, #36]	@ (8012084 <VL53LX_WrWord+0x60>)
 801205e:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8012060:	2204      	movs	r2, #4
 8012062:	4908      	ldr	r1, [pc, #32]	@ (8012084 <VL53LX_WrWord+0x60>)
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f7ff feed 	bl	8011e44 <_I2CWrite>
 801206a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d001      	beq.n	8012076 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012072:	23f3      	movs	r3, #243	@ 0xf3
 8012074:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8012076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801207a:	4618      	mov	r0, r3
 801207c:	3710      	adds	r7, #16
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	200059dc 	.word	0x200059dc

08012088 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8012088:	b580      	push	{r7, lr}
 801208a:	b086      	sub	sp, #24
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	460b      	mov	r3, r1
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8012096:	2300      	movs	r3, #0
 8012098:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 801209a:	897b      	ldrh	r3, [r7, #10]
 801209c:	0a1b      	lsrs	r3, r3, #8
 801209e:	b29b      	uxth	r3, r3
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	4b12      	ldr	r3, [pc, #72]	@ (80120ec <VL53LX_RdByte+0x64>)
 80120a4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80120a6:	897b      	ldrh	r3, [r7, #10]
 80120a8:	b2da      	uxtb	r2, r3
 80120aa:	4b10      	ldr	r3, [pc, #64]	@ (80120ec <VL53LX_RdByte+0x64>)
 80120ac:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80120ae:	2202      	movs	r2, #2
 80120b0:	490e      	ldr	r1, [pc, #56]	@ (80120ec <VL53LX_RdByte+0x64>)
 80120b2:	68f8      	ldr	r0, [r7, #12]
 80120b4:	f7ff fec6 	bl	8011e44 <_I2CWrite>
 80120b8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d002      	beq.n	80120c6 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80120c0:	23f3      	movs	r3, #243	@ 0xf3
 80120c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80120c4:	e00c      	b.n	80120e0 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 80120c6:	2201      	movs	r2, #1
 80120c8:	6879      	ldr	r1, [r7, #4]
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f7ff fee6 	bl	8011e9c <_I2CRead>
 80120d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d002      	beq.n	80120de <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80120d8:	23f3      	movs	r3, #243	@ 0xf3
 80120da:	75fb      	strb	r3, [r7, #23]
 80120dc:	e000      	b.n	80120e0 <VL53LX_RdByte+0x58>
    }
done:
 80120de:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 80120e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3718      	adds	r7, #24
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	200059dc 	.word	0x200059dc

080120f0 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b086      	sub	sp, #24
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	460b      	mov	r3, r1
 80120fa:	607a      	str	r2, [r7, #4]
 80120fc:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80120fe:	2300      	movs	r3, #0
 8012100:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8012102:	897b      	ldrh	r3, [r7, #10]
 8012104:	0a1b      	lsrs	r3, r3, #8
 8012106:	b29b      	uxth	r3, r3
 8012108:	b2da      	uxtb	r2, r3
 801210a:	4b17      	ldr	r3, [pc, #92]	@ (8012168 <VL53LX_RdWord+0x78>)
 801210c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801210e:	897b      	ldrh	r3, [r7, #10]
 8012110:	b2da      	uxtb	r2, r3
 8012112:	4b15      	ldr	r3, [pc, #84]	@ (8012168 <VL53LX_RdWord+0x78>)
 8012114:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8012116:	2202      	movs	r2, #2
 8012118:	4913      	ldr	r1, [pc, #76]	@ (8012168 <VL53LX_RdWord+0x78>)
 801211a:	68f8      	ldr	r0, [r7, #12]
 801211c:	f7ff fe92 	bl	8011e44 <_I2CWrite>
 8012120:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d002      	beq.n	801212e <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012128:	23f3      	movs	r3, #243	@ 0xf3
 801212a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801212c:	e015      	b.n	801215a <VL53LX_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801212e:	2202      	movs	r2, #2
 8012130:	490d      	ldr	r1, [pc, #52]	@ (8012168 <VL53LX_RdWord+0x78>)
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f7ff feb2 	bl	8011e9c <_I2CRead>
 8012138:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d002      	beq.n	8012146 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8012140:	23f3      	movs	r3, #243	@ 0xf3
 8012142:	75fb      	strb	r3, [r7, #23]
        goto done;
 8012144:	e009      	b.n	801215a <VL53LX_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8012146:	4b08      	ldr	r3, [pc, #32]	@ (8012168 <VL53LX_RdWord+0x78>)
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	021b      	lsls	r3, r3, #8
 801214c:	b29b      	uxth	r3, r3
 801214e:	4a06      	ldr	r2, [pc, #24]	@ (8012168 <VL53LX_RdWord+0x78>)
 8012150:	7852      	ldrb	r2, [r2, #1]
 8012152:	4413      	add	r3, r2
 8012154:	b29a      	uxth	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 801215a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3718      	adds	r7, #24
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	200059dc 	.word	0x200059dc

0801216c <VL53LX_GetTickCount>:
}

VL53LX_Error VL53LX_GetTickCount(
	VL53LX_DEV Dev,
	uint32_t *ptick_count_ms)
{
 801216c:	b480      	push	{r7}
 801216e:	b085      	sub	sp, #20
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8012176:	2300      	movs	r3, #0
 8012178:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	2200      	movs	r2, #0
 801217e:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8012180:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012184:	4618      	mov	r0, r3
 8012186:	3714      	adds	r7, #20
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <VL53LX_WaitMs>:
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}


VL53LX_Error VL53LX_WaitMs(VL53LX_Dev_t *pdev, int32_t wait_ms){
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	4618      	mov	r0, r3
 801219e:	f000 f96b 	bl	8012478 <HAL_Delay>
    return VL53LX_ERROR_NONE;
 80121a2:	2300      	movs	r3, #0
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3708      	adds	r7, #8
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_Dev_t *pdev, int32_t wait_us){
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	4a06      	ldr	r2, [pc, #24]	@ (80121d4 <VL53LX_WaitUs+0x28>)
 80121ba:	fb82 1203 	smull	r1, r2, r2, r3
 80121be:	1192      	asrs	r2, r2, #6
 80121c0:	17db      	asrs	r3, r3, #31
 80121c2:	1ad3      	subs	r3, r2, r3
 80121c4:	4618      	mov	r0, r3
 80121c6:	f000 f957 	bl	8012478 <HAL_Delay>
    return VL53LX_ERROR_NONE;
 80121ca:	2300      	movs	r3, #0
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3708      	adds	r7, #8
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	10624dd3 	.word	0x10624dd3

080121d8 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80121d8:	b590      	push	{r4, r7, lr}
 80121da:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 80121de:	af00      	add	r7, sp, #0
 80121e0:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 80121e4:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 80121e8:	6020      	str	r0, [r4, #0]
 80121ea:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 80121ee:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 80121f2:	6001      	str	r1, [r0, #0]
 80121f4:	4619      	mov	r1, r3
 80121f6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80121fa:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 80121fe:	801a      	strh	r2, [r3, #0]
 8012200:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012204:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 8012208:	460a      	mov	r2, r1
 801220a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 801220c:	2300      	movs	r3, #0
 801220e:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 8012212:	2300      	movs	r3, #0
 8012214:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 8012218:	2300      	movs	r3, #0
 801221a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 801221e:	2300      	movs	r3, #0
 8012220:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 8012224:	2300      	movs	r3, #0
 8012226:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 801222a:	2300      	movs	r3, #0
 801222c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8012230:	f107 0310 	add.w	r3, r7, #16
 8012234:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012238:	4940      	ldr	r1, [pc, #256]	@ (801233c <VL53LX_WaitValueMaskEx+0x164>)
 801223a:	4618      	mov	r0, r3
 801223c:	f008 ff7c 	bl	801b138 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(pdev, &start_time_ms);
 8012240:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8012244:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012248:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801224c:	4611      	mov	r1, r2
 801224e:	6818      	ldr	r0, [r3, #0]
 8012250:	f7ff ff8c 	bl	801216c <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8012254:	e04e      	b.n	80122f4 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8012256:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 801225a:	2b00      	cmp	r3, #0
 801225c:	d110      	bne.n	8012280 <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 801225e:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8012262:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012266:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 801226a:	8819      	ldrh	r1, [r3, #0]
 801226c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012270:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012274:	6818      	ldr	r0, [r3, #0]
 8012276:	f7ff ff07 	bl	8012088 <VL53LX_RdByte>
 801227a:	4603      	mov	r3, r0
 801227c:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8012280:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8012284:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8012288:	4013      	ands	r3, r2
 801228a:	b2db      	uxtb	r3, r3
 801228c:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8012290:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8012294:	7812      	ldrb	r2, [r2, #0]
 8012296:	429a      	cmp	r2, r3
 8012298:	d102      	bne.n	80122a0 <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 801229a:	2301      	movs	r3, #1
 801229c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 80122a0:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d114      	bne.n	80122d2 <VL53LX_WaitValueMaskEx+0xfa>
 80122a8:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d110      	bne.n	80122d2 <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 80122b0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d00c      	beq.n	80122d2 <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 80122b8:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80122bc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80122c0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80122c4:	4611      	mov	r1, r2
 80122c6:	6818      	ldr	r0, [r3, #0]
 80122c8:	f7ff ff62 	bl	8012190 <VL53LX_WaitMs>
 80122cc:	4603      	mov	r3, r0
 80122ce:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(pdev, &current_time_ms);
 80122d2:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 80122d6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80122da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80122de:	4611      	mov	r1, r2
 80122e0:	6818      	ldr	r0, [r3, #0]
 80122e2:	f7ff ff43 	bl	801216c <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 80122e6:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80122ea:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80122ee:	1ad3      	subs	r3, r2, r3
 80122f0:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 80122f4:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d10c      	bne.n	8012316 <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 80122fc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8012300:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8012304:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	429a      	cmp	r2, r3
 801230c:	d203      	bcs.n	8012316 <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 801230e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8012312:	2b00      	cmp	r3, #0
 8012314:	d09f      	beq.n	8012256 <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 8012316:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801231a:	2b00      	cmp	r3, #0
 801231c:	d106      	bne.n	801232c <VL53LX_WaitValueMaskEx+0x154>
 801231e:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8012322:	2b00      	cmp	r3, #0
 8012324:	d102      	bne.n	801232c <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 8012326:	23f9      	movs	r3, #249	@ 0xf9
 8012328:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 801232c:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 8012330:	4618      	mov	r0, r3
 8012332:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8012336:	46bd      	mov	sp, r7
 8012338:	bd90      	pop	{r4, r7, pc}
 801233a:	bf00      	nop
 801233c:	0801d4a0 	.word	0x0801d4a0

08012340 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b08c      	sub	sp, #48	@ 0x30
 8012344:	af06      	add	r7, sp, #24
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
 801234c:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 801234e:	2300      	movs	r3, #0
 8012350:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8012352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012354:	9304      	str	r3, [sp, #16]
 8012356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012358:	9303      	str	r3, [sp, #12]
 801235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801235c:	9302      	str	r3, [sp, #8]
 801235e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012360:	9301      	str	r3, [sp, #4]
 8012362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012364:	9300      	str	r3, [sp, #0]
 8012366:	6a3b      	ldr	r3, [r7, #32]
 8012368:	683a      	ldr	r2, [r7, #0]
 801236a:	6879      	ldr	r1, [r7, #4]
 801236c:	68b8      	ldr	r0, [r7, #8]
 801236e:	f7fb fa1b 	bl	800d7a8 <VL53LX_hist_process_data>
 8012372:	4603      	mov	r3, r0
 8012374:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8012376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801237a:	4618      	mov	r0, r3
 801237c:	3718      	adds	r7, #24
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
	...

08012384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8012384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80123bc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8012388:	f7ff fd24 	bl	8011dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801238c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801238e:	e003      	b.n	8012398 <LoopCopyDataInit>

08012390 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8012390:	4b0b      	ldr	r3, [pc, #44]	@ (80123c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8012392:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8012394:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8012396:	3104      	adds	r1, #4

08012398 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8012398:	480a      	ldr	r0, [pc, #40]	@ (80123c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 801239a:	4b0b      	ldr	r3, [pc, #44]	@ (80123c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 801239c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801239e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80123a0:	d3f6      	bcc.n	8012390 <CopyDataInit>
	ldr	r2, =_sbss
 80123a2:	4a0a      	ldr	r2, [pc, #40]	@ (80123cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80123a4:	e002      	b.n	80123ac <LoopFillZerobss>

080123a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80123a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80123a8:	f842 3b04 	str.w	r3, [r2], #4

080123ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80123ac:	4b08      	ldr	r3, [pc, #32]	@ (80123d0 <LoopForever+0x16>)
	cmp	r2, r3
 80123ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80123b0:	d3f9      	bcc.n	80123a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80123b2:	f008 ff25 	bl	801b200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80123b6:	f7fe f8ad 	bl	8010514 <main>

080123ba <LoopForever>:

LoopForever:
    b LoopForever
 80123ba:	e7fe      	b.n	80123ba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80123bc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80123c0:	08025928 	.word	0x08025928
	ldr	r0, =_sdata
 80123c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80123c8:	20000208 	.word	0x20000208
	ldr	r2, =_sbss
 80123cc:	20000208 	.word	0x20000208
	ldr	r3, = _ebss
 80123d0:	20005c2c 	.word	0x20005c2c

080123d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80123d4:	e7fe      	b.n	80123d4 <ADC1_IRQHandler>
	...

080123d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80123dc:	4b12      	ldr	r3, [pc, #72]	@ (8012428 <HAL_Init+0x50>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	4a11      	ldr	r2, [pc, #68]	@ (8012428 <HAL_Init+0x50>)
 80123e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80123e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80123e8:	2003      	movs	r0, #3
 80123ea:	f000 f916 	bl	801261a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80123ee:	f002 fcbb 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 80123f2:	4602      	mov	r2, r0
 80123f4:	4b0d      	ldr	r3, [pc, #52]	@ (801242c <HAL_Init+0x54>)
 80123f6:	6a1b      	ldr	r3, [r3, #32]
 80123f8:	f003 030f 	and.w	r3, r3, #15
 80123fc:	490c      	ldr	r1, [pc, #48]	@ (8012430 <HAL_Init+0x58>)
 80123fe:	5ccb      	ldrb	r3, [r1, r3]
 8012400:	fa22 f303 	lsr.w	r3, r2, r3
 8012404:	4a0b      	ldr	r2, [pc, #44]	@ (8012434 <HAL_Init+0x5c>)
 8012406:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8012408:	2004      	movs	r0, #4
 801240a:	f000 f939 	bl	8012680 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801240e:	2007      	movs	r0, #7
 8012410:	f7ff fb70 	bl	8011af4 <HAL_InitTick>
 8012414:	4603      	mov	r3, r0
 8012416:	2b00      	cmp	r3, #0
 8012418:	d001      	beq.n	801241e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 801241a:	2301      	movs	r3, #1
 801241c:	e002      	b.n	8012424 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801241e:	f7ff f9c3 	bl	80117a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012422:	2300      	movs	r3, #0
}
 8012424:	4618      	mov	r0, r3
 8012426:	bd80      	pop	{r7, pc}
 8012428:	40022000 	.word	0x40022000
 801242c:	46020c00 	.word	0x46020c00
 8012430:	080254a4 	.word	0x080254a4
 8012434:	20000034 	.word	0x20000034

08012438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012438:	b480      	push	{r7}
 801243a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801243c:	4b06      	ldr	r3, [pc, #24]	@ (8012458 <HAL_IncTick+0x20>)
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	461a      	mov	r2, r3
 8012442:	4b06      	ldr	r3, [pc, #24]	@ (801245c <HAL_IncTick+0x24>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4413      	add	r3, r2
 8012448:	4a04      	ldr	r2, [pc, #16]	@ (801245c <HAL_IncTick+0x24>)
 801244a:	6013      	str	r3, [r2, #0]
}
 801244c:	bf00      	nop
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
 8012456:	bf00      	nop
 8012458:	2000003c 	.word	0x2000003c
 801245c:	20005adc 	.word	0x20005adc

08012460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012460:	b480      	push	{r7}
 8012462:	af00      	add	r7, sp, #0
  return uwTick;
 8012464:	4b03      	ldr	r3, [pc, #12]	@ (8012474 <HAL_GetTick+0x14>)
 8012466:	681b      	ldr	r3, [r3, #0]
}
 8012468:	4618      	mov	r0, r3
 801246a:	46bd      	mov	sp, r7
 801246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012470:	4770      	bx	lr
 8012472:	bf00      	nop
 8012474:	20005adc 	.word	0x20005adc

08012478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012480:	f7ff ffee 	bl	8012460 <HAL_GetTick>
 8012484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012490:	d005      	beq.n	801249e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012492:	4b0a      	ldr	r3, [pc, #40]	@ (80124bc <HAL_Delay+0x44>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	461a      	mov	r2, r3
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	4413      	add	r3, r2
 801249c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801249e:	bf00      	nop
 80124a0:	f7ff ffde 	bl	8012460 <HAL_GetTick>
 80124a4:	4602      	mov	r2, r0
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	1ad3      	subs	r3, r2, r3
 80124aa:	68fa      	ldr	r2, [r7, #12]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d8f7      	bhi.n	80124a0 <HAL_Delay+0x28>
  {
  }
}
 80124b0:	bf00      	nop
 80124b2:	bf00      	nop
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	2000003c 	.word	0x2000003c

080124c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80124c0:	b480      	push	{r7}
 80124c2:	b085      	sub	sp, #20
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f003 0307 	and.w	r3, r3, #7
 80124ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80124d0:	4b0c      	ldr	r3, [pc, #48]	@ (8012504 <__NVIC_SetPriorityGrouping+0x44>)
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80124d6:	68ba      	ldr	r2, [r7, #8]
 80124d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80124dc:	4013      	ands	r3, r2
 80124de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80124e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80124ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80124f2:	4a04      	ldr	r2, [pc, #16]	@ (8012504 <__NVIC_SetPriorityGrouping+0x44>)
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	60d3      	str	r3, [r2, #12]
}
 80124f8:	bf00      	nop
 80124fa:	3714      	adds	r7, #20
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr
 8012504:	e000ed00 	.word	0xe000ed00

08012508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012508:	b480      	push	{r7}
 801250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801250c:	4b04      	ldr	r3, [pc, #16]	@ (8012520 <__NVIC_GetPriorityGrouping+0x18>)
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	0a1b      	lsrs	r3, r3, #8
 8012512:	f003 0307 	and.w	r3, r3, #7
}
 8012516:	4618      	mov	r0, r3
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr
 8012520:	e000ed00 	.word	0xe000ed00

08012524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	4603      	mov	r3, r0
 801252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012532:	2b00      	cmp	r3, #0
 8012534:	db0b      	blt.n	801254e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012536:	79fb      	ldrb	r3, [r7, #7]
 8012538:	f003 021f 	and.w	r2, r3, #31
 801253c:	4907      	ldr	r1, [pc, #28]	@ (801255c <__NVIC_EnableIRQ+0x38>)
 801253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012542:	095b      	lsrs	r3, r3, #5
 8012544:	2001      	movs	r0, #1
 8012546:	fa00 f202 	lsl.w	r2, r0, r2
 801254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801254e:	bf00      	nop
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	e000e100 	.word	0xe000e100

08012560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012560:	b480      	push	{r7}
 8012562:	b083      	sub	sp, #12
 8012564:	af00      	add	r7, sp, #0
 8012566:	4603      	mov	r3, r0
 8012568:	6039      	str	r1, [r7, #0]
 801256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012570:	2b00      	cmp	r3, #0
 8012572:	db0a      	blt.n	801258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	b2da      	uxtb	r2, r3
 8012578:	490c      	ldr	r1, [pc, #48]	@ (80125ac <__NVIC_SetPriority+0x4c>)
 801257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801257e:	0112      	lsls	r2, r2, #4
 8012580:	b2d2      	uxtb	r2, r2
 8012582:	440b      	add	r3, r1
 8012584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012588:	e00a      	b.n	80125a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	b2da      	uxtb	r2, r3
 801258e:	4908      	ldr	r1, [pc, #32]	@ (80125b0 <__NVIC_SetPriority+0x50>)
 8012590:	79fb      	ldrb	r3, [r7, #7]
 8012592:	f003 030f 	and.w	r3, r3, #15
 8012596:	3b04      	subs	r3, #4
 8012598:	0112      	lsls	r2, r2, #4
 801259a:	b2d2      	uxtb	r2, r2
 801259c:	440b      	add	r3, r1
 801259e:	761a      	strb	r2, [r3, #24]
}
 80125a0:	bf00      	nop
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	e000e100 	.word	0xe000e100
 80125b0:	e000ed00 	.word	0xe000ed00

080125b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80125b4:	b480      	push	{r7}
 80125b6:	b089      	sub	sp, #36	@ 0x24
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f003 0307 	and.w	r3, r3, #7
 80125c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	f1c3 0307 	rsb	r3, r3, #7
 80125ce:	2b04      	cmp	r3, #4
 80125d0:	bf28      	it	cs
 80125d2:	2304      	movcs	r3, #4
 80125d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	3304      	adds	r3, #4
 80125da:	2b06      	cmp	r3, #6
 80125dc:	d902      	bls.n	80125e4 <NVIC_EncodePriority+0x30>
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	3b03      	subs	r3, #3
 80125e2:	e000      	b.n	80125e6 <NVIC_EncodePriority+0x32>
 80125e4:	2300      	movs	r3, #0
 80125e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80125e8:	f04f 32ff 	mov.w	r2, #4294967295
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	fa02 f303 	lsl.w	r3, r2, r3
 80125f2:	43da      	mvns	r2, r3
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	401a      	ands	r2, r3
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80125fc:	f04f 31ff 	mov.w	r1, #4294967295
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	fa01 f303 	lsl.w	r3, r1, r3
 8012606:	43d9      	mvns	r1, r3
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801260c:	4313      	orrs	r3, r2
         );
}
 801260e:	4618      	mov	r0, r3
 8012610:	3724      	adds	r7, #36	@ 0x24
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr

0801261a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801261a:	b580      	push	{r7, lr}
 801261c:	b082      	sub	sp, #8
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f7ff ff4c 	bl	80124c0 <__NVIC_SetPriorityGrouping>
}
 8012628:	bf00      	nop
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b086      	sub	sp, #24
 8012634:	af00      	add	r7, sp, #0
 8012636:	4603      	mov	r3, r0
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	607a      	str	r2, [r7, #4]
 801263c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801263e:	f7ff ff63 	bl	8012508 <__NVIC_GetPriorityGrouping>
 8012642:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012644:	687a      	ldr	r2, [r7, #4]
 8012646:	68b9      	ldr	r1, [r7, #8]
 8012648:	6978      	ldr	r0, [r7, #20]
 801264a:	f7ff ffb3 	bl	80125b4 <NVIC_EncodePriority>
 801264e:	4602      	mov	r2, r0
 8012650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012654:	4611      	mov	r1, r2
 8012656:	4618      	mov	r0, r3
 8012658:	f7ff ff82 	bl	8012560 <__NVIC_SetPriority>
}
 801265c:	bf00      	nop
 801265e:	3718      	adds	r7, #24
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	4603      	mov	r3, r0
 801266c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012672:	4618      	mov	r0, r3
 8012674:	f7ff ff56 	bl	8012524 <__NVIC_EnableIRQ>
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2b04      	cmp	r3, #4
 801268c:	d844      	bhi.n	8012718 <HAL_SYSTICK_CLKSourceConfig+0x98>
 801268e:	a201      	add	r2, pc, #4	@ (adr r2, 8012694 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8012690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012694:	080126b7 	.word	0x080126b7
 8012698:	080126d5 	.word	0x080126d5
 801269c:	080126f7 	.word	0x080126f7
 80126a0:	08012719 	.word	0x08012719
 80126a4:	080126a9 	.word	0x080126a9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80126a8:	4b1f      	ldr	r3, [pc, #124]	@ (8012728 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4a1e      	ldr	r2, [pc, #120]	@ (8012728 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80126ae:	f043 0304 	orr.w	r3, r3, #4
 80126b2:	6013      	str	r3, [r2, #0]
      break;
 80126b4:	e031      	b.n	801271a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80126b6:	4b1c      	ldr	r3, [pc, #112]	@ (8012728 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	4a1b      	ldr	r2, [pc, #108]	@ (8012728 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80126bc:	f023 0304 	bic.w	r3, r3, #4
 80126c0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80126c2:	4b1a      	ldr	r3, [pc, #104]	@ (801272c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80126c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80126c8:	4a18      	ldr	r2, [pc, #96]	@ (801272c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80126ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80126ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80126d2:	e022      	b.n	801271a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80126d4:	4b14      	ldr	r3, [pc, #80]	@ (8012728 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4a13      	ldr	r2, [pc, #76]	@ (8012728 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80126da:	f023 0304 	bic.w	r3, r3, #4
 80126de:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80126e0:	4b12      	ldr	r3, [pc, #72]	@ (801272c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80126e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80126e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80126ea:	4a10      	ldr	r2, [pc, #64]	@ (801272c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80126ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80126f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80126f4:	e011      	b.n	801271a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80126f6:	4b0c      	ldr	r3, [pc, #48]	@ (8012728 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	4a0b      	ldr	r2, [pc, #44]	@ (8012728 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80126fc:	f023 0304 	bic.w	r3, r3, #4
 8012700:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8012702:	4b0a      	ldr	r3, [pc, #40]	@ (801272c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8012704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012708:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 801270c:	4a07      	ldr	r2, [pc, #28]	@ (801272c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 801270e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8012716:	e000      	b.n	801271a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8012718:	bf00      	nop
  }
}
 801271a:	bf00      	nop
 801271c:	370c      	adds	r7, #12
 801271e:	46bd      	mov	sp, r7
 8012720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop
 8012728:	e000e010 	.word	0xe000e010
 801272c:	46020c00 	.word	0x46020c00

08012730 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8012730:	b480      	push	{r7}
 8012732:	b089      	sub	sp, #36	@ 0x24
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 801273a:	2300      	movs	r3, #0
 801273c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8012742:	e1ba      	b.n	8012aba <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	681a      	ldr	r2, [r3, #0]
 8012748:	2101      	movs	r1, #1
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	fa01 f303 	lsl.w	r3, r1, r3
 8012750:	4013      	ands	r3, r2
 8012752:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2b00      	cmp	r3, #0
 801275c:	f000 81aa 	beq.w	8012ab4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	4a55      	ldr	r2, [pc, #340]	@ (80128b8 <HAL_GPIO_Init+0x188>)
 8012764:	4293      	cmp	r3, r2
 8012766:	d15d      	bne.n	8012824 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 801276e:	2201      	movs	r2, #1
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	fa02 f303 	lsl.w	r3, r2, r3
 8012776:	43db      	mvns	r3, r3
 8012778:	69fa      	ldr	r2, [r7, #28]
 801277a:	4013      	ands	r3, r2
 801277c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	f003 0201 	and.w	r2, r3, #1
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	fa02 f303 	lsl.w	r3, r2, r3
 801278c:	69fa      	ldr	r2, [r7, #28]
 801278e:	4313      	orrs	r3, r2
 8012790:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	69fa      	ldr	r2, [r7, #28]
 8012796:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8012798:	4a48      	ldr	r2, [pc, #288]	@ (80128bc <HAL_GPIO_Init+0x18c>)
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80127a0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80127a2:	4a46      	ldr	r2, [pc, #280]	@ (80128bc <HAL_GPIO_Init+0x18c>)
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	00db      	lsls	r3, r3, #3
 80127a8:	4413      	add	r3, r2
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	08da      	lsrs	r2, r3, #3
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	3208      	adds	r2, #8
 80127b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	f003 0307 	and.w	r3, r3, #7
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	220f      	movs	r2, #15
 80127c6:	fa02 f303 	lsl.w	r3, r2, r3
 80127ca:	43db      	mvns	r3, r3
 80127cc:	69fa      	ldr	r2, [r7, #28]
 80127ce:	4013      	ands	r3, r2
 80127d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	f003 0307 	and.w	r3, r3, #7
 80127d8:	009b      	lsls	r3, r3, #2
 80127da:	220b      	movs	r2, #11
 80127dc:	fa02 f303 	lsl.w	r3, r2, r3
 80127e0:	69fa      	ldr	r2, [r7, #28]
 80127e2:	4313      	orrs	r3, r2
 80127e4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80127e6:	69bb      	ldr	r3, [r7, #24]
 80127e8:	08da      	lsrs	r2, r3, #3
 80127ea:	693b      	ldr	r3, [r7, #16]
 80127ec:	3208      	adds	r2, #8
 80127ee:	69f9      	ldr	r1, [r7, #28]
 80127f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80127fa:	69bb      	ldr	r3, [r7, #24]
 80127fc:	005b      	lsls	r3, r3, #1
 80127fe:	2203      	movs	r2, #3
 8012800:	fa02 f303 	lsl.w	r3, r2, r3
 8012804:	43db      	mvns	r3, r3
 8012806:	69fa      	ldr	r2, [r7, #28]
 8012808:	4013      	ands	r3, r2
 801280a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	005b      	lsls	r3, r3, #1
 8012810:	2202      	movs	r2, #2
 8012812:	fa02 f303 	lsl.w	r3, r2, r3
 8012816:	69fa      	ldr	r2, [r7, #28]
 8012818:	4313      	orrs	r3, r2
 801281a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	69fa      	ldr	r2, [r7, #28]
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	e067      	b.n	80128f4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	2b02      	cmp	r3, #2
 801282a:	d003      	beq.n	8012834 <HAL_GPIO_Init+0x104>
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	2b12      	cmp	r3, #18
 8012832:	d145      	bne.n	80128c0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	08da      	lsrs	r2, r3, #3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	3208      	adds	r2, #8
 801283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012840:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	f003 0307 	and.w	r3, r3, #7
 8012848:	009b      	lsls	r3, r3, #2
 801284a:	220f      	movs	r2, #15
 801284c:	fa02 f303 	lsl.w	r3, r2, r3
 8012850:	43db      	mvns	r3, r3
 8012852:	69fa      	ldr	r2, [r7, #28]
 8012854:	4013      	ands	r3, r2
 8012856:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	f003 020f 	and.w	r2, r3, #15
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	f003 0307 	and.w	r3, r3, #7
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	fa02 f303 	lsl.w	r3, r2, r3
 801286c:	69fa      	ldr	r2, [r7, #28]
 801286e:	4313      	orrs	r3, r2
 8012870:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	08da      	lsrs	r2, r3, #3
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	3208      	adds	r2, #8
 801287a:	69f9      	ldr	r1, [r7, #28]
 801287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	005b      	lsls	r3, r3, #1
 801288a:	2203      	movs	r2, #3
 801288c:	fa02 f303 	lsl.w	r3, r2, r3
 8012890:	43db      	mvns	r3, r3
 8012892:	69fa      	ldr	r2, [r7, #28]
 8012894:	4013      	ands	r3, r2
 8012896:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	f003 0203 	and.w	r2, r3, #3
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	005b      	lsls	r3, r3, #1
 80128a4:	fa02 f303 	lsl.w	r3, r2, r3
 80128a8:	69fa      	ldr	r2, [r7, #28]
 80128aa:	4313      	orrs	r3, r2
 80128ac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	69fa      	ldr	r2, [r7, #28]
 80128b2:	601a      	str	r2, [r3, #0]
 80128b4:	e01e      	b.n	80128f4 <HAL_GPIO_Init+0x1c4>
 80128b6:	bf00      	nop
 80128b8:	46020000 	.word	0x46020000
 80128bc:	080254fc 	.word	0x080254fc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	005b      	lsls	r3, r3, #1
 80128ca:	2203      	movs	r2, #3
 80128cc:	fa02 f303 	lsl.w	r3, r2, r3
 80128d0:	43db      	mvns	r3, r3
 80128d2:	69fa      	ldr	r2, [r7, #28]
 80128d4:	4013      	ands	r3, r2
 80128d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	f003 0203 	and.w	r2, r3, #3
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	fa02 f303 	lsl.w	r3, r2, r3
 80128e8:	69fa      	ldr	r2, [r7, #28]
 80128ea:	4313      	orrs	r3, r2
 80128ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	69fa      	ldr	r2, [r7, #28]
 80128f2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d00b      	beq.n	8012914 <HAL_GPIO_Init+0x1e4>
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	2b02      	cmp	r3, #2
 8012902:	d007      	beq.n	8012914 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012908:	2b11      	cmp	r3, #17
 801290a:	d003      	beq.n	8012914 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	2b12      	cmp	r3, #18
 8012912:	d130      	bne.n	8012976 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	689b      	ldr	r3, [r3, #8]
 8012918:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	005b      	lsls	r3, r3, #1
 801291e:	2203      	movs	r2, #3
 8012920:	fa02 f303 	lsl.w	r3, r2, r3
 8012924:	43db      	mvns	r3, r3
 8012926:	69fa      	ldr	r2, [r7, #28]
 8012928:	4013      	ands	r3, r2
 801292a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	68da      	ldr	r2, [r3, #12]
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	005b      	lsls	r3, r3, #1
 8012934:	fa02 f303 	lsl.w	r3, r2, r3
 8012938:	69fa      	ldr	r2, [r7, #28]
 801293a:	4313      	orrs	r3, r2
 801293c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	69fa      	ldr	r2, [r7, #28]
 8012942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8012944:	693b      	ldr	r3, [r7, #16]
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 801294a:	2201      	movs	r2, #1
 801294c:	69bb      	ldr	r3, [r7, #24]
 801294e:	fa02 f303 	lsl.w	r3, r2, r3
 8012952:	43db      	mvns	r3, r3
 8012954:	69fa      	ldr	r2, [r7, #28]
 8012956:	4013      	ands	r3, r2
 8012958:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	091b      	lsrs	r3, r3, #4
 8012960:	f003 0201 	and.w	r2, r3, #1
 8012964:	69bb      	ldr	r3, [r7, #24]
 8012966:	fa02 f303 	lsl.w	r3, r2, r3
 801296a:	69fa      	ldr	r2, [r7, #28]
 801296c:	4313      	orrs	r3, r2
 801296e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	69fa      	ldr	r2, [r7, #28]
 8012974:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	2b03      	cmp	r3, #3
 801297c:	d017      	beq.n	80129ae <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	68db      	ldr	r3, [r3, #12]
 8012982:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8012984:	69bb      	ldr	r3, [r7, #24]
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	2203      	movs	r2, #3
 801298a:	fa02 f303 	lsl.w	r3, r2, r3
 801298e:	43db      	mvns	r3, r3
 8012990:	69fa      	ldr	r2, [r7, #28]
 8012992:	4013      	ands	r3, r2
 8012994:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	689a      	ldr	r2, [r3, #8]
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	005b      	lsls	r3, r3, #1
 801299e:	fa02 f303 	lsl.w	r3, r2, r3
 80129a2:	69fa      	ldr	r2, [r7, #28]
 80129a4:	4313      	orrs	r3, r2
 80129a6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	69fa      	ldr	r2, [r7, #28]
 80129ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d07c      	beq.n	8012ab4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80129ba:	4a47      	ldr	r2, [pc, #284]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	089b      	lsrs	r3, r3, #2
 80129c0:	3318      	adds	r3, #24
 80129c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	f003 0303 	and.w	r3, r3, #3
 80129ce:	00db      	lsls	r3, r3, #3
 80129d0:	220f      	movs	r2, #15
 80129d2:	fa02 f303 	lsl.w	r3, r2, r3
 80129d6:	43db      	mvns	r3, r3
 80129d8:	69fa      	ldr	r2, [r7, #28]
 80129da:	4013      	ands	r3, r2
 80129dc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	0a9a      	lsrs	r2, r3, #10
 80129e2:	4b3e      	ldr	r3, [pc, #248]	@ (8012adc <HAL_GPIO_Init+0x3ac>)
 80129e4:	4013      	ands	r3, r2
 80129e6:	697a      	ldr	r2, [r7, #20]
 80129e8:	f002 0203 	and.w	r2, r2, #3
 80129ec:	00d2      	lsls	r2, r2, #3
 80129ee:	4093      	lsls	r3, r2
 80129f0:	69fa      	ldr	r2, [r7, #28]
 80129f2:	4313      	orrs	r3, r2
 80129f4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80129f6:	4938      	ldr	r1, [pc, #224]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	089b      	lsrs	r3, r3, #2
 80129fc:	3318      	adds	r3, #24
 80129fe:	69fa      	ldr	r2, [r7, #28]
 8012a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8012a04:	4b34      	ldr	r3, [pc, #208]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	43db      	mvns	r3, r3
 8012a0e:	69fa      	ldr	r2, [r7, #28]
 8012a10:	4013      	ands	r3, r2
 8012a12:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d003      	beq.n	8012a28 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8012a20:	69fa      	ldr	r2, [r7, #28]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	4313      	orrs	r3, r2
 8012a26:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8012a28:	4a2b      	ldr	r2, [pc, #172]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8012a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	43db      	mvns	r3, r3
 8012a38:	69fa      	ldr	r2, [r7, #28]
 8012a3a:	4013      	ands	r3, r2
 8012a3c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d003      	beq.n	8012a52 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8012a4a:	69fa      	ldr	r2, [r7, #28]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	4313      	orrs	r3, r2
 8012a50:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8012a52:	4a21      	ldr	r2, [pc, #132]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8012a58:	4b1f      	ldr	r3, [pc, #124]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 8012a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012a5e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	43db      	mvns	r3, r3
 8012a64:	69fa      	ldr	r2, [r7, #28]
 8012a66:	4013      	ands	r3, r2
 8012a68:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d003      	beq.n	8012a7e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8012a76:	69fa      	ldr	r2, [r7, #28]
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	4313      	orrs	r3, r2
 8012a7c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8012a7e:	4a16      	ldr	r2, [pc, #88]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8012a86:	4b14      	ldr	r3, [pc, #80]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 8012a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012a8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	43db      	mvns	r3, r3
 8012a92:	69fa      	ldr	r2, [r7, #28]
 8012a94:	4013      	ands	r3, r2
 8012a96:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d003      	beq.n	8012aac <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8012aa4:	69fa      	ldr	r2, [r7, #28]
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8012aac:	4a0a      	ldr	r2, [pc, #40]	@ (8012ad8 <HAL_GPIO_Init+0x3a8>)
 8012aae:	69fb      	ldr	r3, [r7, #28]
 8012ab0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	f47f ae3d 	bne.w	8012744 <HAL_GPIO_Init+0x14>
  }
}
 8012aca:	bf00      	nop
 8012acc:	bf00      	nop
 8012ace:	3724      	adds	r7, #36	@ 0x24
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr
 8012ad8:	46022000 	.word	0x46022000
 8012adc:	002f7f7f 	.word	0x002f7f7f

08012ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	460b      	mov	r3, r1
 8012aea:	807b      	strh	r3, [r7, #2]
 8012aec:	4613      	mov	r3, r2
 8012aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012af0:	787b      	ldrb	r3, [r7, #1]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d003      	beq.n	8012afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012af6:	887a      	ldrh	r2, [r7, #2]
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8012afc:	e002      	b.n	8012b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8012afe:	887a      	ldrh	r2, [r7, #2]
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012b04:	bf00      	nop
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d101      	bne.n	8012b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	e08d      	b.n	8012c3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d106      	bne.n	8012b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2200      	movs	r2, #0
 8012b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f7fe fe54 	bl	80117e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2224      	movs	r2, #36	@ 0x24
 8012b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	681a      	ldr	r2, [r3, #0]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f022 0201 	bic.w	r2, r2, #1
 8012b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	685a      	ldr	r2, [r3, #4]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8012b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	689a      	ldr	r2, [r3, #8]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	d107      	bne.n	8012b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	689a      	ldr	r2, [r3, #8]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012b86:	609a      	str	r2, [r3, #8]
 8012b88:	e006      	b.n	8012b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	689a      	ldr	r2, [r3, #8]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8012b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	68db      	ldr	r3, [r3, #12]
 8012b9c:	2b02      	cmp	r3, #2
 8012b9e:	d108      	bne.n	8012bb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	685a      	ldr	r2, [r3, #4]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012bae:	605a      	str	r2, [r3, #4]
 8012bb0:	e007      	b.n	8012bc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	685a      	ldr	r2, [r3, #4]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	687a      	ldr	r2, [r7, #4]
 8012bca:	6812      	ldr	r2, [r2, #0]
 8012bcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012bd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	68da      	ldr	r2, [r3, #12]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	691a      	ldr	r2, [r3, #16]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	695b      	ldr	r3, [r3, #20]
 8012bee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	699b      	ldr	r3, [r3, #24]
 8012bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	430a      	orrs	r2, r1
 8012bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	69d9      	ldr	r1, [r3, #28]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a1a      	ldr	r2, [r3, #32]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	430a      	orrs	r2, r1
 8012c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f042 0201 	orr.w	r2, r2, #1
 8012c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2200      	movs	r2, #0
 8012c24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2220      	movs	r2, #32
 8012c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2200      	movs	r2, #0
 8012c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8012c3c:	2300      	movs	r3, #0
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3708      	adds	r7, #8
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
	...

08012c48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b088      	sub	sp, #32
 8012c4c:	af02      	add	r7, sp, #8
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	607a      	str	r2, [r7, #4]
 8012c52:	461a      	mov	r2, r3
 8012c54:	460b      	mov	r3, r1
 8012c56:	817b      	strh	r3, [r7, #10]
 8012c58:	4613      	mov	r3, r2
 8012c5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	2b20      	cmp	r3, #32
 8012c66:	f040 80da 	bne.w	8012e1e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d101      	bne.n	8012c78 <HAL_I2C_Master_Transmit+0x30>
 8012c74:	2302      	movs	r3, #2
 8012c76:	e0d3      	b.n	8012e20 <HAL_I2C_Master_Transmit+0x1d8>
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012c80:	f7ff fbee 	bl	8012460 <HAL_GetTick>
 8012c84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	2319      	movs	r3, #25
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f000 fb54 	bl	8013340 <I2C_WaitOnFlagUntilTimeout>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d001      	beq.n	8012ca2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	e0be      	b.n	8012e20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2221      	movs	r2, #33	@ 0x21
 8012ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	2210      	movs	r2, #16
 8012cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	893a      	ldrh	r2, [r7, #8]
 8012cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	2bff      	cmp	r3, #255	@ 0xff
 8012cd2:	d90e      	bls.n	8012cf2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	22ff      	movs	r2, #255	@ 0xff
 8012cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012cde:	b2da      	uxtb	r2, r3
 8012ce0:	8979      	ldrh	r1, [r7, #10]
 8012ce2:	4b51      	ldr	r3, [pc, #324]	@ (8012e28 <HAL_I2C_Master_Transmit+0x1e0>)
 8012ce4:	9300      	str	r3, [sp, #0]
 8012ce6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012cea:	68f8      	ldr	r0, [r7, #12]
 8012cec:	f000 fd78 	bl	80137e0 <I2C_TransferConfig>
 8012cf0:	e06c      	b.n	8012dcc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	8979      	ldrh	r1, [r7, #10]
 8012d04:	4b48      	ldr	r3, [pc, #288]	@ (8012e28 <HAL_I2C_Master_Transmit+0x1e0>)
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012d0c:	68f8      	ldr	r0, [r7, #12]
 8012d0e:	f000 fd67 	bl	80137e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8012d12:	e05b      	b.n	8012dcc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012d14:	697a      	ldr	r2, [r7, #20]
 8012d16:	6a39      	ldr	r1, [r7, #32]
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	f000 fb6a 	bl	80133f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d001      	beq.n	8012d28 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8012d24:	2301      	movs	r3, #1
 8012d26:	e07b      	b.n	8012e20 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d2c:	781a      	ldrb	r2, [r3, #0]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d38:	1c5a      	adds	r2, r3, #1
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	3b01      	subs	r3, #1
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d50:	3b01      	subs	r3, #1
 8012d52:	b29a      	uxth	r2, r3
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d034      	beq.n	8012dcc <HAL_I2C_Master_Transmit+0x184>
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d130      	bne.n	8012dcc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	9300      	str	r3, [sp, #0]
 8012d6e:	6a3b      	ldr	r3, [r7, #32]
 8012d70:	2200      	movs	r2, #0
 8012d72:	2180      	movs	r1, #128	@ 0x80
 8012d74:	68f8      	ldr	r0, [r7, #12]
 8012d76:	f000 fae3 	bl	8013340 <I2C_WaitOnFlagUntilTimeout>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d001      	beq.n	8012d84 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8012d80:	2301      	movs	r3, #1
 8012d82:	e04d      	b.n	8012e20 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	2bff      	cmp	r3, #255	@ 0xff
 8012d8c:	d90e      	bls.n	8012dac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	22ff      	movs	r2, #255	@ 0xff
 8012d92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d98:	b2da      	uxtb	r2, r3
 8012d9a:	8979      	ldrh	r1, [r7, #10]
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	9300      	str	r3, [sp, #0]
 8012da0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012da4:	68f8      	ldr	r0, [r7, #12]
 8012da6:	f000 fd1b 	bl	80137e0 <I2C_TransferConfig>
 8012daa:	e00f      	b.n	8012dcc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dba:	b2da      	uxtb	r2, r3
 8012dbc:	8979      	ldrh	r1, [r7, #10]
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012dc6:	68f8      	ldr	r0, [r7, #12]
 8012dc8:	f000 fd0a 	bl	80137e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d19e      	bne.n	8012d14 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012dd6:	697a      	ldr	r2, [r7, #20]
 8012dd8:	6a39      	ldr	r1, [r7, #32]
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f000 fb50 	bl	8013480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d001      	beq.n	8012dea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8012de6:	2301      	movs	r3, #1
 8012de8:	e01a      	b.n	8012e20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	2220      	movs	r2, #32
 8012df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	6859      	ldr	r1, [r3, #4]
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	681a      	ldr	r2, [r3, #0]
 8012dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8012e2c <HAL_I2C_Master_Transmit+0x1e4>)
 8012dfe:	400b      	ands	r3, r1
 8012e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2220      	movs	r2, #32
 8012e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	2200      	movs	r2, #0
 8012e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	e000      	b.n	8012e20 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8012e1e:	2302      	movs	r3, #2
  }
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3718      	adds	r7, #24
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	80002000 	.word	0x80002000
 8012e2c:	fe00e800 	.word	0xfe00e800

08012e30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b088      	sub	sp, #32
 8012e34:	af02      	add	r7, sp, #8
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	607a      	str	r2, [r7, #4]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	817b      	strh	r3, [r7, #10]
 8012e40:	4613      	mov	r3, r2
 8012e42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	2b20      	cmp	r3, #32
 8012e4e:	f040 80db 	bne.w	8013008 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d101      	bne.n	8012e60 <HAL_I2C_Master_Receive+0x30>
 8012e5c:	2302      	movs	r3, #2
 8012e5e:	e0d4      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	2201      	movs	r2, #1
 8012e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012e68:	f7ff fafa 	bl	8012460 <HAL_GetTick>
 8012e6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	2319      	movs	r3, #25
 8012e74:	2201      	movs	r2, #1
 8012e76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f000 fa60 	bl	8013340 <I2C_WaitOnFlagUntilTimeout>
 8012e80:	4603      	mov	r3, r0
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d001      	beq.n	8012e8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8012e86:	2301      	movs	r3, #1
 8012e88:	e0bf      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2222      	movs	r2, #34	@ 0x22
 8012e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2210      	movs	r2, #16
 8012e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	893a      	ldrh	r2, [r7, #8]
 8012eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	2bff      	cmp	r3, #255	@ 0xff
 8012eba:	d90e      	bls.n	8012eda <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	22ff      	movs	r2, #255	@ 0xff
 8012ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ec6:	b2da      	uxtb	r2, r3
 8012ec8:	8979      	ldrh	r1, [r7, #10]
 8012eca:	4b52      	ldr	r3, [pc, #328]	@ (8013014 <HAL_I2C_Master_Receive+0x1e4>)
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012ed2:	68f8      	ldr	r0, [r7, #12]
 8012ed4:	f000 fc84 	bl	80137e0 <I2C_TransferConfig>
 8012ed8:	e06d      	b.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	8979      	ldrh	r1, [r7, #10]
 8012eec:	4b49      	ldr	r3, [pc, #292]	@ (8013014 <HAL_I2C_Master_Receive+0x1e4>)
 8012eee:	9300      	str	r3, [sp, #0]
 8012ef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012ef4:	68f8      	ldr	r0, [r7, #12]
 8012ef6:	f000 fc73 	bl	80137e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8012efa:	e05c      	b.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012efc:	697a      	ldr	r2, [r7, #20]
 8012efe:	6a39      	ldr	r1, [r7, #32]
 8012f00:	68f8      	ldr	r0, [r7, #12]
 8012f02:	f000 fb01 	bl	8013508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e07c      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f1a:	b2d2      	uxtb	r2, r2
 8012f1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f22:	1c5a      	adds	r2, r3, #1
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	b29a      	uxth	r2, r3
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d034      	beq.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d130      	bne.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	6a3b      	ldr	r3, [r7, #32]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	2180      	movs	r1, #128	@ 0x80
 8012f5e:	68f8      	ldr	r0, [r7, #12]
 8012f60:	f000 f9ee 	bl	8013340 <I2C_WaitOnFlagUntilTimeout>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d001      	beq.n	8012f6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	e04d      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	2bff      	cmp	r3, #255	@ 0xff
 8012f76:	d90e      	bls.n	8012f96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	22ff      	movs	r2, #255	@ 0xff
 8012f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f82:	b2da      	uxtb	r2, r3
 8012f84:	8979      	ldrh	r1, [r7, #10]
 8012f86:	2300      	movs	r3, #0
 8012f88:	9300      	str	r3, [sp, #0]
 8012f8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012f8e:	68f8      	ldr	r0, [r7, #12]
 8012f90:	f000 fc26 	bl	80137e0 <I2C_TransferConfig>
 8012f94:	e00f      	b.n	8012fb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f9a:	b29a      	uxth	r2, r3
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012fa4:	b2da      	uxtb	r2, r3
 8012fa6:	8979      	ldrh	r1, [r7, #10]
 8012fa8:	2300      	movs	r3, #0
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012fb0:	68f8      	ldr	r0, [r7, #12]
 8012fb2:	f000 fc15 	bl	80137e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d19d      	bne.n	8012efc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012fc0:	697a      	ldr	r2, [r7, #20]
 8012fc2:	6a39      	ldr	r1, [r7, #32]
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f000 fa5b 	bl	8013480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d001      	beq.n	8012fd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	e01a      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2220      	movs	r2, #32
 8012fda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	6859      	ldr	r1, [r3, #4]
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8013018 <HAL_I2C_Master_Receive+0x1e8>)
 8012fe8:	400b      	ands	r3, r1
 8012fea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	2220      	movs	r2, #32
 8012ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2200      	movs	r2, #0
 8013000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013004:	2300      	movs	r3, #0
 8013006:	e000      	b.n	801300a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8013008:	2302      	movs	r3, #2
  }
}
 801300a:	4618      	mov	r0, r3
 801300c:	3718      	adds	r7, #24
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	80002400 	.word	0x80002400
 8013018:	fe00e800 	.word	0xfe00e800

0801301c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b088      	sub	sp, #32
 8013020:	af02      	add	r7, sp, #8
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	4608      	mov	r0, r1
 8013026:	4611      	mov	r1, r2
 8013028:	461a      	mov	r2, r3
 801302a:	4603      	mov	r3, r0
 801302c:	817b      	strh	r3, [r7, #10]
 801302e:	460b      	mov	r3, r1
 8013030:	813b      	strh	r3, [r7, #8]
 8013032:	4613      	mov	r3, r2
 8013034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801303c:	b2db      	uxtb	r3, r3
 801303e:	2b20      	cmp	r3, #32
 8013040:	f040 80fd 	bne.w	801323e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8013044:	6a3b      	ldr	r3, [r7, #32]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d002      	beq.n	8013050 <HAL_I2C_Mem_Read+0x34>
 801304a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801304c:	2b00      	cmp	r3, #0
 801304e:	d105      	bne.n	801305c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013056:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8013058:	2301      	movs	r3, #1
 801305a:	e0f1      	b.n	8013240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013062:	2b01      	cmp	r3, #1
 8013064:	d101      	bne.n	801306a <HAL_I2C_Mem_Read+0x4e>
 8013066:	2302      	movs	r3, #2
 8013068:	e0ea      	b.n	8013240 <HAL_I2C_Mem_Read+0x224>
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	2201      	movs	r2, #1
 801306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013072:	f7ff f9f5 	bl	8012460 <HAL_GetTick>
 8013076:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	9300      	str	r3, [sp, #0]
 801307c:	2319      	movs	r3, #25
 801307e:	2201      	movs	r2, #1
 8013080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f000 f95b 	bl	8013340 <I2C_WaitOnFlagUntilTimeout>
 801308a:	4603      	mov	r3, r0
 801308c:	2b00      	cmp	r3, #0
 801308e:	d001      	beq.n	8013094 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8013090:	2301      	movs	r3, #1
 8013092:	e0d5      	b.n	8013240 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2222      	movs	r2, #34	@ 0x22
 8013098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2240      	movs	r2, #64	@ 0x40
 80130a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2200      	movs	r2, #0
 80130a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	6a3a      	ldr	r2, [r7, #32]
 80130ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80130b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80130bc:	88f8      	ldrh	r0, [r7, #6]
 80130be:	893a      	ldrh	r2, [r7, #8]
 80130c0:	8979      	ldrh	r1, [r7, #10]
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	9301      	str	r3, [sp, #4]
 80130c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130c8:	9300      	str	r3, [sp, #0]
 80130ca:	4603      	mov	r3, r0
 80130cc:	68f8      	ldr	r0, [r7, #12]
 80130ce:	f000 f8bf 	bl	8013250 <I2C_RequestMemoryRead>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d005      	beq.n	80130e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2200      	movs	r2, #0
 80130dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80130e0:	2301      	movs	r3, #1
 80130e2:	e0ad      	b.n	8013240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	2bff      	cmp	r3, #255	@ 0xff
 80130ec:	d90e      	bls.n	801310c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	22ff      	movs	r2, #255	@ 0xff
 80130f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130f8:	b2da      	uxtb	r2, r3
 80130fa:	8979      	ldrh	r1, [r7, #10]
 80130fc:	4b52      	ldr	r3, [pc, #328]	@ (8013248 <HAL_I2C_Mem_Read+0x22c>)
 80130fe:	9300      	str	r3, [sp, #0]
 8013100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	f000 fb6b 	bl	80137e0 <I2C_TransferConfig>
 801310a:	e00f      	b.n	801312c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013110:	b29a      	uxth	r2, r3
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801311a:	b2da      	uxtb	r2, r3
 801311c:	8979      	ldrh	r1, [r7, #10]
 801311e:	4b4a      	ldr	r3, [pc, #296]	@ (8013248 <HAL_I2C_Mem_Read+0x22c>)
 8013120:	9300      	str	r3, [sp, #0]
 8013122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8013126:	68f8      	ldr	r0, [r7, #12]
 8013128:	f000 fb5a 	bl	80137e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	9300      	str	r3, [sp, #0]
 8013130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013132:	2200      	movs	r2, #0
 8013134:	2104      	movs	r1, #4
 8013136:	68f8      	ldr	r0, [r7, #12]
 8013138:	f000 f902 	bl	8013340 <I2C_WaitOnFlagUntilTimeout>
 801313c:	4603      	mov	r3, r0
 801313e:	2b00      	cmp	r3, #0
 8013140:	d001      	beq.n	8013146 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8013142:	2301      	movs	r3, #1
 8013144:	e07c      	b.n	8013240 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013150:	b2d2      	uxtb	r2, r2
 8013152:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013158:	1c5a      	adds	r2, r3, #1
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013162:	3b01      	subs	r3, #1
 8013164:	b29a      	uxth	r2, r3
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801316e:	b29b      	uxth	r3, r3
 8013170:	3b01      	subs	r3, #1
 8013172:	b29a      	uxth	r2, r3
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801317c:	b29b      	uxth	r3, r3
 801317e:	2b00      	cmp	r3, #0
 8013180:	d034      	beq.n	80131ec <HAL_I2C_Mem_Read+0x1d0>
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013186:	2b00      	cmp	r3, #0
 8013188:	d130      	bne.n	80131ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	9300      	str	r3, [sp, #0]
 801318e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013190:	2200      	movs	r2, #0
 8013192:	2180      	movs	r1, #128	@ 0x80
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f000 f8d3 	bl	8013340 <I2C_WaitOnFlagUntilTimeout>
 801319a:	4603      	mov	r3, r0
 801319c:	2b00      	cmp	r3, #0
 801319e:	d001      	beq.n	80131a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80131a0:	2301      	movs	r3, #1
 80131a2:	e04d      	b.n	8013240 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	2bff      	cmp	r3, #255	@ 0xff
 80131ac:	d90e      	bls.n	80131cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	22ff      	movs	r2, #255	@ 0xff
 80131b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80131b8:	b2da      	uxtb	r2, r3
 80131ba:	8979      	ldrh	r1, [r7, #10]
 80131bc:	2300      	movs	r3, #0
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80131c4:	68f8      	ldr	r0, [r7, #12]
 80131c6:	f000 fb0b 	bl	80137e0 <I2C_TransferConfig>
 80131ca:	e00f      	b.n	80131ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131d0:	b29a      	uxth	r2, r3
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80131da:	b2da      	uxtb	r2, r3
 80131dc:	8979      	ldrh	r1, [r7, #10]
 80131de:	2300      	movs	r3, #0
 80131e0:	9300      	str	r3, [sp, #0]
 80131e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f000 fafa 	bl	80137e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131f0:	b29b      	uxth	r3, r3
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d19a      	bne.n	801312c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80131f6:	697a      	ldr	r2, [r7, #20]
 80131f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80131fa:	68f8      	ldr	r0, [r7, #12]
 80131fc:	f000 f940 	bl	8013480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d001      	beq.n	801320a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8013206:	2301      	movs	r3, #1
 8013208:	e01a      	b.n	8013240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	2220      	movs	r2, #32
 8013210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	6859      	ldr	r1, [r3, #4]
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	4b0b      	ldr	r3, [pc, #44]	@ (801324c <HAL_I2C_Mem_Read+0x230>)
 801321e:	400b      	ands	r3, r1
 8013220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2220      	movs	r2, #32
 8013226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2200      	movs	r2, #0
 801322e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	2200      	movs	r2, #0
 8013236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801323a:	2300      	movs	r3, #0
 801323c:	e000      	b.n	8013240 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801323e:	2302      	movs	r3, #2
  }
}
 8013240:	4618      	mov	r0, r3
 8013242:	3718      	adds	r7, #24
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	80002400 	.word	0x80002400
 801324c:	fe00e800 	.word	0xfe00e800

08013250 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b086      	sub	sp, #24
 8013254:	af02      	add	r7, sp, #8
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	4608      	mov	r0, r1
 801325a:	4611      	mov	r1, r2
 801325c:	461a      	mov	r2, r3
 801325e:	4603      	mov	r3, r0
 8013260:	817b      	strh	r3, [r7, #10]
 8013262:	460b      	mov	r3, r1
 8013264:	813b      	strh	r3, [r7, #8]
 8013266:	4613      	mov	r3, r2
 8013268:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801326a:	88fb      	ldrh	r3, [r7, #6]
 801326c:	b2da      	uxtb	r2, r3
 801326e:	8979      	ldrh	r1, [r7, #10]
 8013270:	4b20      	ldr	r3, [pc, #128]	@ (80132f4 <I2C_RequestMemoryRead+0xa4>)
 8013272:	9300      	str	r3, [sp, #0]
 8013274:	2300      	movs	r3, #0
 8013276:	68f8      	ldr	r0, [r7, #12]
 8013278:	f000 fab2 	bl	80137e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801327c:	69fa      	ldr	r2, [r7, #28]
 801327e:	69b9      	ldr	r1, [r7, #24]
 8013280:	68f8      	ldr	r0, [r7, #12]
 8013282:	f000 f8b6 	bl	80133f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	d001      	beq.n	8013290 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801328c:	2301      	movs	r3, #1
 801328e:	e02c      	b.n	80132ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013290:	88fb      	ldrh	r3, [r7, #6]
 8013292:	2b01      	cmp	r3, #1
 8013294:	d105      	bne.n	80132a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8013296:	893b      	ldrh	r3, [r7, #8]
 8013298:	b2da      	uxtb	r2, r3
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	629a      	str	r2, [r3, #40]	@ 0x28
 80132a0:	e015      	b.n	80132ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80132a2:	893b      	ldrh	r3, [r7, #8]
 80132a4:	0a1b      	lsrs	r3, r3, #8
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	b2da      	uxtb	r2, r3
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80132b0:	69fa      	ldr	r2, [r7, #28]
 80132b2:	69b9      	ldr	r1, [r7, #24]
 80132b4:	68f8      	ldr	r0, [r7, #12]
 80132b6:	f000 f89c 	bl	80133f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80132ba:	4603      	mov	r3, r0
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d001      	beq.n	80132c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80132c0:	2301      	movs	r3, #1
 80132c2:	e012      	b.n	80132ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80132c4:	893b      	ldrh	r3, [r7, #8]
 80132c6:	b2da      	uxtb	r2, r3
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	9300      	str	r3, [sp, #0]
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	2200      	movs	r2, #0
 80132d6:	2140      	movs	r1, #64	@ 0x40
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f000 f831 	bl	8013340 <I2C_WaitOnFlagUntilTimeout>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d001      	beq.n	80132e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80132e4:	2301      	movs	r3, #1
 80132e6:	e000      	b.n	80132ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80132e8:	2300      	movs	r3, #0
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3710      	adds	r7, #16
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	80002000 	.word	0x80002000

080132f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80132f8:	b480      	push	{r7}
 80132fa:	b083      	sub	sp, #12
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	699b      	ldr	r3, [r3, #24]
 8013306:	f003 0302 	and.w	r3, r3, #2
 801330a:	2b02      	cmp	r3, #2
 801330c:	d103      	bne.n	8013316 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	2200      	movs	r2, #0
 8013314:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	699b      	ldr	r3, [r3, #24]
 801331c:	f003 0301 	and.w	r3, r3, #1
 8013320:	2b01      	cmp	r3, #1
 8013322:	d007      	beq.n	8013334 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	699a      	ldr	r2, [r3, #24]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f042 0201 	orr.w	r2, r2, #1
 8013332:	619a      	str	r2, [r3, #24]
  }
}
 8013334:	bf00      	nop
 8013336:	370c      	adds	r7, #12
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr

08013340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	603b      	str	r3, [r7, #0]
 801334c:	4613      	mov	r3, r2
 801334e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013350:	e03b      	b.n	80133ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8013352:	69ba      	ldr	r2, [r7, #24]
 8013354:	6839      	ldr	r1, [r7, #0]
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	f000 f962 	bl	8013620 <I2C_IsErrorOccurred>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d001      	beq.n	8013366 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8013362:	2301      	movs	r3, #1
 8013364:	e041      	b.n	80133ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801336c:	d02d      	beq.n	80133ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801336e:	f7ff f877 	bl	8012460 <HAL_GetTick>
 8013372:	4602      	mov	r2, r0
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	1ad3      	subs	r3, r2, r3
 8013378:	683a      	ldr	r2, [r7, #0]
 801337a:	429a      	cmp	r2, r3
 801337c:	d302      	bcc.n	8013384 <I2C_WaitOnFlagUntilTimeout+0x44>
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d122      	bne.n	80133ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	699a      	ldr	r2, [r3, #24]
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	4013      	ands	r3, r2
 801338e:	68ba      	ldr	r2, [r7, #8]
 8013390:	429a      	cmp	r2, r3
 8013392:	bf0c      	ite	eq
 8013394:	2301      	moveq	r3, #1
 8013396:	2300      	movne	r3, #0
 8013398:	b2db      	uxtb	r3, r3
 801339a:	461a      	mov	r2, r3
 801339c:	79fb      	ldrb	r3, [r7, #7]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d113      	bne.n	80133ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133a6:	f043 0220 	orr.w	r2, r3, #32
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2220      	movs	r2, #32
 80133b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2200      	movs	r2, #0
 80133ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2200      	movs	r2, #0
 80133c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80133c6:	2301      	movs	r3, #1
 80133c8:	e00f      	b.n	80133ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	699a      	ldr	r2, [r3, #24]
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	4013      	ands	r3, r2
 80133d4:	68ba      	ldr	r2, [r7, #8]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	bf0c      	ite	eq
 80133da:	2301      	moveq	r3, #1
 80133dc:	2300      	movne	r3, #0
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	461a      	mov	r2, r3
 80133e2:	79fb      	ldrb	r3, [r7, #7]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d0b4      	beq.n	8013352 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80133e8:	2300      	movs	r3, #0
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}

080133f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80133f2:	b580      	push	{r7, lr}
 80133f4:	b084      	sub	sp, #16
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	60f8      	str	r0, [r7, #12]
 80133fa:	60b9      	str	r1, [r7, #8]
 80133fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80133fe:	e033      	b.n	8013468 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	68b9      	ldr	r1, [r7, #8]
 8013404:	68f8      	ldr	r0, [r7, #12]
 8013406:	f000 f90b 	bl	8013620 <I2C_IsErrorOccurred>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d001      	beq.n	8013414 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8013410:	2301      	movs	r3, #1
 8013412:	e031      	b.n	8013478 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341a:	d025      	beq.n	8013468 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801341c:	f7ff f820 	bl	8012460 <HAL_GetTick>
 8013420:	4602      	mov	r2, r0
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	1ad3      	subs	r3, r2, r3
 8013426:	68ba      	ldr	r2, [r7, #8]
 8013428:	429a      	cmp	r2, r3
 801342a:	d302      	bcc.n	8013432 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d11a      	bne.n	8013468 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	699b      	ldr	r3, [r3, #24]
 8013438:	f003 0302 	and.w	r3, r3, #2
 801343c:	2b02      	cmp	r3, #2
 801343e:	d013      	beq.n	8013468 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013444:	f043 0220 	orr.w	r2, r3, #32
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2220      	movs	r2, #32
 8013450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2200      	movs	r2, #0
 8013458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2200      	movs	r2, #0
 8013460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8013464:	2301      	movs	r3, #1
 8013466:	e007      	b.n	8013478 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	699b      	ldr	r3, [r3, #24]
 801346e:	f003 0302 	and.w	r3, r3, #2
 8013472:	2b02      	cmp	r3, #2
 8013474:	d1c4      	bne.n	8013400 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8013476:	2300      	movs	r3, #0
}
 8013478:	4618      	mov	r0, r3
 801347a:	3710      	adds	r7, #16
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801348c:	e02f      	b.n	80134ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	68b9      	ldr	r1, [r7, #8]
 8013492:	68f8      	ldr	r0, [r7, #12]
 8013494:	f000 f8c4 	bl	8013620 <I2C_IsErrorOccurred>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d001      	beq.n	80134a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801349e:	2301      	movs	r3, #1
 80134a0:	e02d      	b.n	80134fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80134a2:	f7fe ffdd 	bl	8012460 <HAL_GetTick>
 80134a6:	4602      	mov	r2, r0
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	1ad3      	subs	r3, r2, r3
 80134ac:	68ba      	ldr	r2, [r7, #8]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d302      	bcc.n	80134b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d11a      	bne.n	80134ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	699b      	ldr	r3, [r3, #24]
 80134be:	f003 0320 	and.w	r3, r3, #32
 80134c2:	2b20      	cmp	r3, #32
 80134c4:	d013      	beq.n	80134ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134ca:	f043 0220 	orr.w	r2, r3, #32
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2220      	movs	r2, #32
 80134d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2200      	movs	r2, #0
 80134de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2200      	movs	r2, #0
 80134e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80134ea:	2301      	movs	r3, #1
 80134ec:	e007      	b.n	80134fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	699b      	ldr	r3, [r3, #24]
 80134f4:	f003 0320 	and.w	r3, r3, #32
 80134f8:	2b20      	cmp	r3, #32
 80134fa:	d1c8      	bne.n	801348e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80134fc:	2300      	movs	r3, #0
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3710      	adds	r7, #16
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
	...

08013508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b086      	sub	sp, #24
 801350c:	af00      	add	r7, sp, #0
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013514:	2300      	movs	r3, #0
 8013516:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8013518:	e071      	b.n	80135fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	68b9      	ldr	r1, [r7, #8]
 801351e:	68f8      	ldr	r0, [r7, #12]
 8013520:	f000 f87e 	bl	8013620 <I2C_IsErrorOccurred>
 8013524:	4603      	mov	r3, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	d001      	beq.n	801352e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 801352a:	2301      	movs	r3, #1
 801352c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	699b      	ldr	r3, [r3, #24]
 8013534:	f003 0320 	and.w	r3, r3, #32
 8013538:	2b20      	cmp	r3, #32
 801353a:	d13b      	bne.n	80135b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 801353c:	7dfb      	ldrb	r3, [r7, #23]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d138      	bne.n	80135b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	699b      	ldr	r3, [r3, #24]
 8013548:	f003 0304 	and.w	r3, r3, #4
 801354c:	2b04      	cmp	r3, #4
 801354e:	d105      	bne.n	801355c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013554:	2b00      	cmp	r3, #0
 8013556:	d001      	beq.n	801355c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8013558:	2300      	movs	r3, #0
 801355a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	699b      	ldr	r3, [r3, #24]
 8013562:	f003 0310 	and.w	r3, r3, #16
 8013566:	2b10      	cmp	r3, #16
 8013568:	d121      	bne.n	80135ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2210      	movs	r2, #16
 8013570:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	2204      	movs	r2, #4
 8013576:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2220      	movs	r2, #32
 801357e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	6859      	ldr	r1, [r3, #4]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	4b24      	ldr	r3, [pc, #144]	@ (801361c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 801358c:	400b      	ands	r3, r1
 801358e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2220      	movs	r2, #32
 8013594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	2200      	movs	r2, #0
 801359c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	2200      	movs	r2, #0
 80135a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80135a8:	2301      	movs	r3, #1
 80135aa:	75fb      	strb	r3, [r7, #23]
 80135ac:	e002      	b.n	80135b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2200      	movs	r2, #0
 80135b2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80135b4:	f7fe ff54 	bl	8012460 <HAL_GetTick>
 80135b8:	4602      	mov	r2, r0
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	1ad3      	subs	r3, r2, r3
 80135be:	68ba      	ldr	r2, [r7, #8]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d302      	bcc.n	80135ca <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d119      	bne.n	80135fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80135ca:	7dfb      	ldrb	r3, [r7, #23]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d116      	bne.n	80135fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	699b      	ldr	r3, [r3, #24]
 80135d6:	f003 0304 	and.w	r3, r3, #4
 80135da:	2b04      	cmp	r3, #4
 80135dc:	d00f      	beq.n	80135fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135e2:	f043 0220 	orr.w	r2, r3, #32
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	2220      	movs	r2, #32
 80135ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2200      	movs	r2, #0
 80135f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80135fa:	2301      	movs	r3, #1
 80135fc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	699b      	ldr	r3, [r3, #24]
 8013604:	f003 0304 	and.w	r3, r3, #4
 8013608:	2b04      	cmp	r3, #4
 801360a:	d002      	beq.n	8013612 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 801360c:	7dfb      	ldrb	r3, [r7, #23]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d083      	beq.n	801351a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8013612:	7dfb      	ldrb	r3, [r7, #23]
}
 8013614:	4618      	mov	r0, r3
 8013616:	3718      	adds	r7, #24
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	fe00e800 	.word	0xfe00e800

08013620 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b08a      	sub	sp, #40	@ 0x28
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801362c:	2300      	movs	r3, #0
 801362e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	699b      	ldr	r3, [r3, #24]
 8013638:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801363a:	2300      	movs	r3, #0
 801363c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	f003 0310 	and.w	r3, r3, #16
 8013648:	2b00      	cmp	r3, #0
 801364a:	d068      	beq.n	801371e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2210      	movs	r2, #16
 8013652:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8013654:	e049      	b.n	80136ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801365c:	d045      	beq.n	80136ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801365e:	f7fe feff 	bl	8012460 <HAL_GetTick>
 8013662:	4602      	mov	r2, r0
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	1ad3      	subs	r3, r2, r3
 8013668:	68ba      	ldr	r2, [r7, #8]
 801366a:	429a      	cmp	r2, r3
 801366c:	d302      	bcc.n	8013674 <I2C_IsErrorOccurred+0x54>
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d13a      	bne.n	80136ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801367e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013686:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	699b      	ldr	r3, [r3, #24]
 801368e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013696:	d121      	bne.n	80136dc <I2C_IsErrorOccurred+0xbc>
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801369e:	d01d      	beq.n	80136dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80136a0:	7cfb      	ldrb	r3, [r7, #19]
 80136a2:	2b20      	cmp	r3, #32
 80136a4:	d01a      	beq.n	80136dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	685a      	ldr	r2, [r3, #4]
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80136b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80136b6:	f7fe fed3 	bl	8012460 <HAL_GetTick>
 80136ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80136bc:	e00e      	b.n	80136dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80136be:	f7fe fecf 	bl	8012460 <HAL_GetTick>
 80136c2:	4602      	mov	r2, r0
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	1ad3      	subs	r3, r2, r3
 80136c8:	2b19      	cmp	r3, #25
 80136ca:	d907      	bls.n	80136dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80136cc:	6a3b      	ldr	r3, [r7, #32]
 80136ce:	f043 0320 	orr.w	r3, r3, #32
 80136d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80136d4:	2301      	movs	r3, #1
 80136d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80136da:	e006      	b.n	80136ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	699b      	ldr	r3, [r3, #24]
 80136e2:	f003 0320 	and.w	r3, r3, #32
 80136e6:	2b20      	cmp	r3, #32
 80136e8:	d1e9      	bne.n	80136be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	699b      	ldr	r3, [r3, #24]
 80136f0:	f003 0320 	and.w	r3, r3, #32
 80136f4:	2b20      	cmp	r3, #32
 80136f6:	d003      	beq.n	8013700 <I2C_IsErrorOccurred+0xe0>
 80136f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d0aa      	beq.n	8013656 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8013700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013704:	2b00      	cmp	r3, #0
 8013706:	d103      	bne.n	8013710 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2220      	movs	r2, #32
 801370e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8013710:	6a3b      	ldr	r3, [r7, #32]
 8013712:	f043 0304 	orr.w	r3, r3, #4
 8013716:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8013718:	2301      	movs	r3, #1
 801371a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	699b      	ldr	r3, [r3, #24]
 8013724:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801372c:	2b00      	cmp	r3, #0
 801372e:	d00b      	beq.n	8013748 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8013730:	6a3b      	ldr	r3, [r7, #32]
 8013732:	f043 0301 	orr.w	r3, r3, #1
 8013736:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013740:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8013742:	2301      	movs	r3, #1
 8013744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801374e:	2b00      	cmp	r3, #0
 8013750:	d00b      	beq.n	801376a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8013752:	6a3b      	ldr	r3, [r7, #32]
 8013754:	f043 0308 	orr.w	r3, r3, #8
 8013758:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013762:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8013764:	2301      	movs	r3, #1
 8013766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013770:	2b00      	cmp	r3, #0
 8013772:	d00b      	beq.n	801378c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8013774:	6a3b      	ldr	r3, [r7, #32]
 8013776:	f043 0302 	orr.w	r3, r3, #2
 801377a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8013786:	2301      	movs	r3, #1
 8013788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 801378c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013790:	2b00      	cmp	r3, #0
 8013792:	d01c      	beq.n	80137ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013794:	68f8      	ldr	r0, [r7, #12]
 8013796:	f7ff fdaf 	bl	80132f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	6859      	ldr	r1, [r3, #4]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	4b0d      	ldr	r3, [pc, #52]	@ (80137dc <I2C_IsErrorOccurred+0x1bc>)
 80137a6:	400b      	ands	r3, r1
 80137a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80137ae:	6a3b      	ldr	r3, [r7, #32]
 80137b0:	431a      	orrs	r2, r3
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2220      	movs	r2, #32
 80137ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	2200      	movs	r2, #0
 80137c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2200      	movs	r2, #0
 80137ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80137ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3728      	adds	r7, #40	@ 0x28
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop
 80137dc:	fe00e800 	.word	0xfe00e800

080137e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80137e0:	b480      	push	{r7}
 80137e2:	b087      	sub	sp, #28
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	60f8      	str	r0, [r7, #12]
 80137e8:	607b      	str	r3, [r7, #4]
 80137ea:	460b      	mov	r3, r1
 80137ec:	817b      	strh	r3, [r7, #10]
 80137ee:	4613      	mov	r3, r2
 80137f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80137f2:	897b      	ldrh	r3, [r7, #10]
 80137f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80137f8:	7a7b      	ldrb	r3, [r7, #9]
 80137fa:	041b      	lsls	r3, r3, #16
 80137fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013800:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013806:	6a3b      	ldr	r3, [r7, #32]
 8013808:	4313      	orrs	r3, r2
 801380a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801380e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	685a      	ldr	r2, [r3, #4]
 8013816:	6a3b      	ldr	r3, [r7, #32]
 8013818:	0d5b      	lsrs	r3, r3, #21
 801381a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 801381e:	4b08      	ldr	r3, [pc, #32]	@ (8013840 <I2C_TransferConfig+0x60>)
 8013820:	430b      	orrs	r3, r1
 8013822:	43db      	mvns	r3, r3
 8013824:	ea02 0103 	and.w	r1, r2, r3
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	697a      	ldr	r2, [r7, #20]
 801382e:	430a      	orrs	r2, r1
 8013830:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8013832:	bf00      	nop
 8013834:	371c      	adds	r7, #28
 8013836:	46bd      	mov	sp, r7
 8013838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop
 8013840:	03ff63ff 	.word	0x03ff63ff

08013844 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8013844:	b480      	push	{r7}
 8013846:	b083      	sub	sp, #12
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013854:	b2db      	uxtb	r3, r3
 8013856:	2b20      	cmp	r3, #32
 8013858:	d138      	bne.n	80138cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013860:	2b01      	cmp	r3, #1
 8013862:	d101      	bne.n	8013868 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8013864:	2302      	movs	r3, #2
 8013866:	e032      	b.n	80138ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2201      	movs	r2, #1
 801386c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2224      	movs	r2, #36	@ 0x24
 8013874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	f022 0201 	bic.w	r2, r2, #1
 8013886:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	681a      	ldr	r2, [r3, #0]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8013896:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	6819      	ldr	r1, [r3, #0]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	430a      	orrs	r2, r1
 80138a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f042 0201 	orr.w	r2, r2, #1
 80138b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2220      	movs	r2, #32
 80138bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2200      	movs	r2, #0
 80138c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80138c8:	2300      	movs	r3, #0
 80138ca:	e000      	b.n	80138ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80138cc:	2302      	movs	r3, #2
  }
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	370c      	adds	r7, #12
 80138d2:	46bd      	mov	sp, r7
 80138d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d8:	4770      	bx	lr

080138da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80138da:	b480      	push	{r7}
 80138dc:	b085      	sub	sp, #20
 80138de:	af00      	add	r7, sp, #0
 80138e0:	6078      	str	r0, [r7, #4]
 80138e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80138ea:	b2db      	uxtb	r3, r3
 80138ec:	2b20      	cmp	r3, #32
 80138ee:	d139      	bne.n	8013964 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d101      	bne.n	80138fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80138fa:	2302      	movs	r3, #2
 80138fc:	e033      	b.n	8013966 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2201      	movs	r2, #1
 8013902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2224      	movs	r2, #36	@ 0x24
 801390a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f022 0201 	bic.w	r2, r2, #1
 801391c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801392c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	021b      	lsls	r3, r3, #8
 8013932:	68fa      	ldr	r2, [r7, #12]
 8013934:	4313      	orrs	r3, r2
 8013936:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	68fa      	ldr	r2, [r7, #12]
 801393e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	681a      	ldr	r2, [r3, #0]
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	f042 0201 	orr.w	r2, r2, #1
 801394e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2220      	movs	r2, #32
 8013954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2200      	movs	r2, #0
 801395c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8013960:	2300      	movs	r3, #0
 8013962:	e000      	b.n	8013966 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8013964:	2302      	movs	r3, #2
  }
}
 8013966:	4618      	mov	r0, r3
 8013968:	3714      	adds	r7, #20
 801396a:	46bd      	mov	sp, r7
 801396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013970:	4770      	bx	lr
	...

08013974 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8013974:	b480      	push	{r7}
 8013976:	b085      	sub	sp, #20
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801397c:	2300      	movs	r3, #0
 801397e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8013980:	4b0b      	ldr	r3, [pc, #44]	@ (80139b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	f003 0301 	and.w	r3, r3, #1
 8013988:	2b00      	cmp	r3, #0
 801398a:	d002      	beq.n	8013992 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 801398c:	2301      	movs	r3, #1
 801398e:	73fb      	strb	r3, [r7, #15]
 8013990:	e007      	b.n	80139a2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8013992:	4b07      	ldr	r3, [pc, #28]	@ (80139b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f023 0204 	bic.w	r2, r3, #4
 801399a:	4905      	ldr	r1, [pc, #20]	@ (80139b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4313      	orrs	r3, r2
 80139a0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80139a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3714      	adds	r7, #20
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr
 80139b0:	40030400 	.word	0x40030400

080139b4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80139b4:	b480      	push	{r7}
 80139b6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80139b8:	4b05      	ldr	r3, [pc, #20]	@ (80139d0 <HAL_ICACHE_Enable+0x1c>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	4a04      	ldr	r2, [pc, #16]	@ (80139d0 <HAL_ICACHE_Enable+0x1c>)
 80139be:	f043 0301 	orr.w	r3, r3, #1
 80139c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80139c4:	2300      	movs	r3, #0
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr
 80139d0:	40030400 	.word	0x40030400

080139d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b085      	sub	sp, #20
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80139dc:	4b39      	ldr	r3, [pc, #228]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80139de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80139e4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80139e6:	68ba      	ldr	r2, [r7, #8]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d10b      	bne.n	8013a06 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139f4:	d905      	bls.n	8013a02 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80139f6:	4b33      	ldr	r3, [pc, #204]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	4a32      	ldr	r2, [pc, #200]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80139fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013a00:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8013a02:	2300      	movs	r3, #0
 8013a04:	e057      	b.n	8013ab6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a0c:	d90a      	bls.n	8013a24 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8013a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8013a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013a20:	60d3      	str	r3, [r2, #12]
 8013a22:	e007      	b.n	8013a34 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8013a24:	4b27      	ldr	r3, [pc, #156]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8013a2c:	4925      	ldr	r1, [pc, #148]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	4313      	orrs	r3, r2
 8013a32:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8013a34:	4b24      	ldr	r3, [pc, #144]	@ (8013ac8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4a24      	ldr	r2, [pc, #144]	@ (8013acc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8013a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8013a3e:	099b      	lsrs	r3, r3, #6
 8013a40:	2232      	movs	r2, #50	@ 0x32
 8013a42:	fb02 f303 	mul.w	r3, r2, r3
 8013a46:	4a21      	ldr	r2, [pc, #132]	@ (8013acc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8013a48:	fba2 2303 	umull	r2, r3, r2, r3
 8013a4c:	099b      	lsrs	r3, r3, #6
 8013a4e:	3301      	adds	r3, #1
 8013a50:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8013a52:	e002      	b.n	8013a5a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	3b01      	subs	r3, #1
 8013a58:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8013a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8013a5c:	68db      	ldr	r3, [r3, #12]
 8013a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d102      	bne.n	8013a6c <HAL_PWREx_ControlVoltageScaling+0x98>
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d1f3      	bne.n	8013a54 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d01b      	beq.n	8013aaa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8013a72:	4b15      	ldr	r3, [pc, #84]	@ (8013ac8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	4a15      	ldr	r2, [pc, #84]	@ (8013acc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8013a78:	fba2 2303 	umull	r2, r3, r2, r3
 8013a7c:	099b      	lsrs	r3, r3, #6
 8013a7e:	2232      	movs	r2, #50	@ 0x32
 8013a80:	fb02 f303 	mul.w	r3, r2, r3
 8013a84:	4a11      	ldr	r2, [pc, #68]	@ (8013acc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8013a86:	fba2 2303 	umull	r2, r3, r2, r3
 8013a8a:	099b      	lsrs	r3, r3, #6
 8013a8c:	3301      	adds	r3, #1
 8013a8e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8013a90:	e002      	b.n	8013a98 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	3b01      	subs	r3, #1
 8013a96:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8013a98:	4b0a      	ldr	r3, [pc, #40]	@ (8013ac4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8013a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d102      	bne.n	8013aaa <HAL_PWREx_ControlVoltageScaling+0xd6>
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d1f3      	bne.n	8013a92 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d101      	bne.n	8013ab4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8013ab0:	2303      	movs	r3, #3
 8013ab2:	e000      	b.n	8013ab6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8013ab4:	2300      	movs	r3, #0
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3714      	adds	r7, #20
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop
 8013ac4:	46020800 	.word	0x46020800
 8013ac8:	20000034 	.word	0x20000034
 8013acc:	10624dd3 	.word	0x10624dd3

08013ad0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8013ad4:	4b04      	ldr	r3, [pc, #16]	@ (8013ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8013ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop
 8013ae8:	46020800 	.word	0x46020800

08013aec <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8013aec:	b480      	push	{r7}
 8013aee:	b085      	sub	sp, #20
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8013af4:	4b22      	ldr	r3, [pc, #136]	@ (8013b80 <HAL_PWREx_ConfigSupply+0x94>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	4a22      	ldr	r2, [pc, #136]	@ (8013b84 <HAL_PWREx_ConfigSupply+0x98>)
 8013afa:	fba2 2303 	umull	r2, r3, r2, r3
 8013afe:	099b      	lsrs	r3, r3, #6
 8013b00:	2232      	movs	r2, #50	@ 0x32
 8013b02:	fb02 f303 	mul.w	r3, r2, r3
 8013b06:	4a1f      	ldr	r2, [pc, #124]	@ (8013b84 <HAL_PWREx_ConfigSupply+0x98>)
 8013b08:	fba2 2303 	umull	r2, r3, r2, r3
 8013b0c:	099b      	lsrs	r3, r3, #6
 8013b0e:	3301      	adds	r3, #1
 8013b10:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d113      	bne.n	8013b40 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8013b18:	4b1b      	ldr	r3, [pc, #108]	@ (8013b88 <HAL_PWREx_ConfigSupply+0x9c>)
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8013b88 <HAL_PWREx_ConfigSupply+0x9c>)
 8013b1e:	f023 0302 	bic.w	r3, r3, #2
 8013b22:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8013b24:	e002      	b.n	8013b2c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8013b2c:	4b16      	ldr	r3, [pc, #88]	@ (8013b88 <HAL_PWREx_ConfigSupply+0x9c>)
 8013b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b30:	f003 0302 	and.w	r3, r3, #2
 8013b34:	2b02      	cmp	r3, #2
 8013b36:	d116      	bne.n	8013b66 <HAL_PWREx_ConfigSupply+0x7a>
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d1f3      	bne.n	8013b26 <HAL_PWREx_ConfigSupply+0x3a>
 8013b3e:	e012      	b.n	8013b66 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8013b40:	4b11      	ldr	r3, [pc, #68]	@ (8013b88 <HAL_PWREx_ConfigSupply+0x9c>)
 8013b42:	689b      	ldr	r3, [r3, #8]
 8013b44:	4a10      	ldr	r2, [pc, #64]	@ (8013b88 <HAL_PWREx_ConfigSupply+0x9c>)
 8013b46:	f043 0302 	orr.w	r3, r3, #2
 8013b4a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8013b4c:	e002      	b.n	8013b54 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	3b01      	subs	r3, #1
 8013b52:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8013b54:	4b0c      	ldr	r3, [pc, #48]	@ (8013b88 <HAL_PWREx_ConfigSupply+0x9c>)
 8013b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b58:	f003 0302 	and.w	r3, r3, #2
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d102      	bne.n	8013b66 <HAL_PWREx_ConfigSupply+0x7a>
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d1f3      	bne.n	8013b4e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d101      	bne.n	8013b70 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8013b6c:	2303      	movs	r3, #3
 8013b6e:	e000      	b.n	8013b72 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8013b70:	2300      	movs	r3, #0
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3714      	adds	r7, #20
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr
 8013b7e:	bf00      	nop
 8013b80:	20000034 	.word	0x20000034
 8013b84:	10624dd3 	.word	0x10624dd3
 8013b88:	46020800 	.word	0x46020800

08013b8c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8013b90:	4b05      	ldr	r3, [pc, #20]	@ (8013ba8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8013b92:	691b      	ldr	r3, [r3, #16]
 8013b94:	4a04      	ldr	r2, [pc, #16]	@ (8013ba8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8013b96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013b9a:	6113      	str	r3, [r2, #16]
}
 8013b9c:	bf00      	nop
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba4:	4770      	bx	lr
 8013ba6:	bf00      	nop
 8013ba8:	46020800 	.word	0x46020800

08013bac <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8013bac:	b480      	push	{r7}
 8013bae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8013bb0:	4b05      	ldr	r3, [pc, #20]	@ (8013bc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8013bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb4:	4a04      	ldr	r2, [pc, #16]	@ (8013bc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8013bb6:	f043 0301 	orr.w	r3, r3, #1
 8013bba:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8013bbc:	bf00      	nop
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr
 8013bc6:	bf00      	nop
 8013bc8:	46020800 	.word	0x46020800

08013bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b08e      	sub	sp, #56	@ 0x38
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d102      	bne.n	8013be6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8013be0:	2301      	movs	r3, #1
 8013be2:	f000 bec8 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013be6:	4b99      	ldr	r3, [pc, #612]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013be8:	69db      	ldr	r3, [r3, #28]
 8013bea:	f003 030c 	and.w	r3, r3, #12
 8013bee:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013bf0:	4b96      	ldr	r3, [pc, #600]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bf4:	f003 0303 	and.w	r3, r3, #3
 8013bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	f003 0310 	and.w	r3, r3, #16
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	f000 816c 	beq.w	8013ee0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8013c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d007      	beq.n	8013c1e <HAL_RCC_OscConfig+0x52>
 8013c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c10:	2b0c      	cmp	r3, #12
 8013c12:	f040 80de 	bne.w	8013dd2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8013c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	f040 80da 	bne.w	8013dd2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	69db      	ldr	r3, [r3, #28]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d102      	bne.n	8013c2c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8013c26:	2301      	movs	r3, #1
 8013c28:	f000 bea5 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c30:	4b86      	ldr	r3, [pc, #536]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013c32:	689b      	ldr	r3, [r3, #8]
 8013c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d004      	beq.n	8013c46 <HAL_RCC_OscConfig+0x7a>
 8013c3c:	4b83      	ldr	r3, [pc, #524]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013c3e:	689b      	ldr	r3, [r3, #8]
 8013c40:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8013c44:	e005      	b.n	8013c52 <HAL_RCC_OscConfig+0x86>
 8013c46:	4b81      	ldr	r3, [pc, #516]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8013c4c:	041b      	lsls	r3, r3, #16
 8013c4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8013c52:	4293      	cmp	r3, r2
 8013c54:	d255      	bcs.n	8013d02 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8013c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d10a      	bne.n	8013c72 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c60:	4618      	mov	r0, r3
 8013c62:	f001 fa11 	bl	8015088 <RCC_SetFlashLatencyFromMSIRange>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d002      	beq.n	8013c72 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	f000 be82 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8013c72:	4b76      	ldr	r3, [pc, #472]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013c74:	689b      	ldr	r3, [r3, #8]
 8013c76:	4a75      	ldr	r2, [pc, #468]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013c78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013c7c:	6093      	str	r3, [r2, #8]
 8013c7e:	4b73      	ldr	r3, [pc, #460]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c8a:	4970      	ldr	r1, [pc, #448]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013c8c:	4313      	orrs	r3, r2
 8013c8e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c94:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8013c98:	d309      	bcc.n	8013cae <HAL_RCC_OscConfig+0xe2>
 8013c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013c9c:	68db      	ldr	r3, [r3, #12]
 8013c9e:	f023 021f 	bic.w	r2, r3, #31
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6a1b      	ldr	r3, [r3, #32]
 8013ca6:	4969      	ldr	r1, [pc, #420]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013ca8:	4313      	orrs	r3, r2
 8013caa:	60cb      	str	r3, [r1, #12]
 8013cac:	e07e      	b.n	8013dac <HAL_RCC_OscConfig+0x1e0>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	da0a      	bge.n	8013ccc <HAL_RCC_OscConfig+0x100>
 8013cb6:	4b65      	ldr	r3, [pc, #404]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013cb8:	68db      	ldr	r3, [r3, #12]
 8013cba:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	6a1b      	ldr	r3, [r3, #32]
 8013cc2:	015b      	lsls	r3, r3, #5
 8013cc4:	4961      	ldr	r1, [pc, #388]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	60cb      	str	r3, [r1, #12]
 8013cca:	e06f      	b.n	8013dac <HAL_RCC_OscConfig+0x1e0>
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013cd4:	d30a      	bcc.n	8013cec <HAL_RCC_OscConfig+0x120>
 8013cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013cd8:	68db      	ldr	r3, [r3, #12]
 8013cda:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6a1b      	ldr	r3, [r3, #32]
 8013ce2:	029b      	lsls	r3, r3, #10
 8013ce4:	4959      	ldr	r1, [pc, #356]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013ce6:	4313      	orrs	r3, r2
 8013ce8:	60cb      	str	r3, [r1, #12]
 8013cea:	e05f      	b.n	8013dac <HAL_RCC_OscConfig+0x1e0>
 8013cec:	4b57      	ldr	r3, [pc, #348]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013cee:	68db      	ldr	r3, [r3, #12]
 8013cf0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6a1b      	ldr	r3, [r3, #32]
 8013cf8:	03db      	lsls	r3, r3, #15
 8013cfa:	4954      	ldr	r1, [pc, #336]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013cfc:	4313      	orrs	r3, r2
 8013cfe:	60cb      	str	r3, [r1, #12]
 8013d00:	e054      	b.n	8013dac <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8013d02:	4b52      	ldr	r3, [pc, #328]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d04:	689b      	ldr	r3, [r3, #8]
 8013d06:	4a51      	ldr	r2, [pc, #324]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013d0c:	6093      	str	r3, [r2, #8]
 8013d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d10:	689b      	ldr	r3, [r3, #8]
 8013d12:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d1a:	494c      	ldr	r1, [pc, #304]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d24:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8013d28:	d309      	bcc.n	8013d3e <HAL_RCC_OscConfig+0x172>
 8013d2a:	4b48      	ldr	r3, [pc, #288]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	f023 021f 	bic.w	r2, r3, #31
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6a1b      	ldr	r3, [r3, #32]
 8013d36:	4945      	ldr	r1, [pc, #276]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d38:	4313      	orrs	r3, r2
 8013d3a:	60cb      	str	r3, [r1, #12]
 8013d3c:	e028      	b.n	8013d90 <HAL_RCC_OscConfig+0x1c4>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	da0a      	bge.n	8013d5c <HAL_RCC_OscConfig+0x190>
 8013d46:	4b41      	ldr	r3, [pc, #260]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d48:	68db      	ldr	r3, [r3, #12]
 8013d4a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6a1b      	ldr	r3, [r3, #32]
 8013d52:	015b      	lsls	r3, r3, #5
 8013d54:	493d      	ldr	r1, [pc, #244]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d56:	4313      	orrs	r3, r2
 8013d58:	60cb      	str	r3, [r1, #12]
 8013d5a:	e019      	b.n	8013d90 <HAL_RCC_OscConfig+0x1c4>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d64:	d30a      	bcc.n	8013d7c <HAL_RCC_OscConfig+0x1b0>
 8013d66:	4b39      	ldr	r3, [pc, #228]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d68:	68db      	ldr	r3, [r3, #12]
 8013d6a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6a1b      	ldr	r3, [r3, #32]
 8013d72:	029b      	lsls	r3, r3, #10
 8013d74:	4935      	ldr	r1, [pc, #212]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d76:	4313      	orrs	r3, r2
 8013d78:	60cb      	str	r3, [r1, #12]
 8013d7a:	e009      	b.n	8013d90 <HAL_RCC_OscConfig+0x1c4>
 8013d7c:	4b33      	ldr	r3, [pc, #204]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6a1b      	ldr	r3, [r3, #32]
 8013d88:	03db      	lsls	r3, r3, #15
 8013d8a:	4930      	ldr	r1, [pc, #192]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013d8c:	4313      	orrs	r3, r2
 8013d8e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8013d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d10a      	bne.n	8013dac <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f001 f974 	bl	8015088 <RCC_SetFlashLatencyFromMSIRange>
 8013da0:	4603      	mov	r3, r0
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d002      	beq.n	8013dac <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8013da6:	2301      	movs	r3, #1
 8013da8:	f000 bde5 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8013dac:	f001 f8de 	bl	8014f6c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8013db0:	4b27      	ldr	r3, [pc, #156]	@ (8013e50 <HAL_RCC_OscConfig+0x284>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fd fe9d 	bl	8011af4 <HAL_InitTick>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8013dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	f000 808a 	beq.w	8013ede <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8013dca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013dce:	f000 bdd2 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	69db      	ldr	r3, [r3, #28]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d066      	beq.n	8013ea8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8013dda:	4b1c      	ldr	r3, [pc, #112]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	4a1b      	ldr	r2, [pc, #108]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013de0:	f043 0301 	orr.w	r3, r3, #1
 8013de4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8013de6:	f7fe fb3b 	bl	8012460 <HAL_GetTick>
 8013dea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8013dec:	e009      	b.n	8013e02 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013dee:	f7fe fb37 	bl	8012460 <HAL_GetTick>
 8013df2:	4602      	mov	r2, r0
 8013df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013df6:	1ad3      	subs	r3, r2, r3
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	d902      	bls.n	8013e02 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8013dfc:	2303      	movs	r3, #3
 8013dfe:	f000 bdba 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8013e02:	4b12      	ldr	r3, [pc, #72]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	f003 0304 	and.w	r3, r3, #4
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d0ef      	beq.n	8013dee <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8013e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013e10:	689b      	ldr	r3, [r3, #8]
 8013e12:	4a0e      	ldr	r2, [pc, #56]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013e14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013e18:	6093      	str	r3, [r2, #8]
 8013e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013e1c:	689b      	ldr	r3, [r3, #8]
 8013e1e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e26:	4909      	ldr	r1, [pc, #36]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e30:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8013e34:	d30e      	bcc.n	8013e54 <HAL_RCC_OscConfig+0x288>
 8013e36:	4b05      	ldr	r3, [pc, #20]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013e38:	68db      	ldr	r3, [r3, #12]
 8013e3a:	f023 021f 	bic.w	r2, r3, #31
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6a1b      	ldr	r3, [r3, #32]
 8013e42:	4902      	ldr	r1, [pc, #8]	@ (8013e4c <HAL_RCC_OscConfig+0x280>)
 8013e44:	4313      	orrs	r3, r2
 8013e46:	60cb      	str	r3, [r1, #12]
 8013e48:	e04a      	b.n	8013ee0 <HAL_RCC_OscConfig+0x314>
 8013e4a:	bf00      	nop
 8013e4c:	46020c00 	.word	0x46020c00
 8013e50:	20000038 	.word	0x20000038
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	da0a      	bge.n	8013e72 <HAL_RCC_OscConfig+0x2a6>
 8013e5c:	4b98      	ldr	r3, [pc, #608]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6a1b      	ldr	r3, [r3, #32]
 8013e68:	015b      	lsls	r3, r3, #5
 8013e6a:	4995      	ldr	r1, [pc, #596]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013e6c:	4313      	orrs	r3, r2
 8013e6e:	60cb      	str	r3, [r1, #12]
 8013e70:	e036      	b.n	8013ee0 <HAL_RCC_OscConfig+0x314>
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013e7a:	d30a      	bcc.n	8013e92 <HAL_RCC_OscConfig+0x2c6>
 8013e7c:	4b90      	ldr	r3, [pc, #576]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013e7e:	68db      	ldr	r3, [r3, #12]
 8013e80:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6a1b      	ldr	r3, [r3, #32]
 8013e88:	029b      	lsls	r3, r3, #10
 8013e8a:	498d      	ldr	r1, [pc, #564]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013e8c:	4313      	orrs	r3, r2
 8013e8e:	60cb      	str	r3, [r1, #12]
 8013e90:	e026      	b.n	8013ee0 <HAL_RCC_OscConfig+0x314>
 8013e92:	4b8b      	ldr	r3, [pc, #556]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013e94:	68db      	ldr	r3, [r3, #12]
 8013e96:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6a1b      	ldr	r3, [r3, #32]
 8013e9e:	03db      	lsls	r3, r3, #15
 8013ea0:	4987      	ldr	r1, [pc, #540]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013ea2:	4313      	orrs	r3, r2
 8013ea4:	60cb      	str	r3, [r1, #12]
 8013ea6:	e01b      	b.n	8013ee0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8013ea8:	4b85      	ldr	r3, [pc, #532]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	4a84      	ldr	r2, [pc, #528]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013eae:	f023 0301 	bic.w	r3, r3, #1
 8013eb2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8013eb4:	f7fe fad4 	bl	8012460 <HAL_GetTick>
 8013eb8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8013eba:	e009      	b.n	8013ed0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013ebc:	f7fe fad0 	bl	8012460 <HAL_GetTick>
 8013ec0:	4602      	mov	r2, r0
 8013ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ec4:	1ad3      	subs	r3, r2, r3
 8013ec6:	2b02      	cmp	r3, #2
 8013ec8:	d902      	bls.n	8013ed0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8013eca:	2303      	movs	r3, #3
 8013ecc:	f000 bd53 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8013ed0:	4b7b      	ldr	r3, [pc, #492]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	f003 0304 	and.w	r3, r3, #4
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d1ef      	bne.n	8013ebc <HAL_RCC_OscConfig+0x2f0>
 8013edc:	e000      	b.n	8013ee0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8013ede:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f003 0301 	and.w	r3, r3, #1
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 808b 	beq.w	8014004 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8013eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef0:	2b08      	cmp	r3, #8
 8013ef2:	d005      	beq.n	8013f00 <HAL_RCC_OscConfig+0x334>
 8013ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef6:	2b0c      	cmp	r3, #12
 8013ef8:	d109      	bne.n	8013f0e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8013efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013efc:	2b03      	cmp	r3, #3
 8013efe:	d106      	bne.n	8013f0e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d17d      	bne.n	8014004 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8013f08:	2301      	movs	r3, #1
 8013f0a:	f000 bd34 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f16:	d106      	bne.n	8013f26 <HAL_RCC_OscConfig+0x35a>
 8013f18:	4b69      	ldr	r3, [pc, #420]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	4a68      	ldr	r2, [pc, #416]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013f22:	6013      	str	r3, [r2, #0]
 8013f24:	e041      	b.n	8013faa <HAL_RCC_OscConfig+0x3de>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013f2e:	d112      	bne.n	8013f56 <HAL_RCC_OscConfig+0x38a>
 8013f30:	4b63      	ldr	r3, [pc, #396]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4a62      	ldr	r2, [pc, #392]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013f3a:	6013      	str	r3, [r2, #0]
 8013f3c:	4b60      	ldr	r3, [pc, #384]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	4a5f      	ldr	r2, [pc, #380]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013f46:	6013      	str	r3, [r2, #0]
 8013f48:	4b5d      	ldr	r3, [pc, #372]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013f52:	6013      	str	r3, [r2, #0]
 8013f54:	e029      	b.n	8013faa <HAL_RCC_OscConfig+0x3de>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8013f5e:	d112      	bne.n	8013f86 <HAL_RCC_OscConfig+0x3ba>
 8013f60:	4b57      	ldr	r3, [pc, #348]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	4a56      	ldr	r2, [pc, #344]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013f6a:	6013      	str	r3, [r2, #0]
 8013f6c:	4b54      	ldr	r3, [pc, #336]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4a53      	ldr	r2, [pc, #332]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013f76:	6013      	str	r3, [r2, #0]
 8013f78:	4b51      	ldr	r3, [pc, #324]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	4a50      	ldr	r2, [pc, #320]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013f82:	6013      	str	r3, [r2, #0]
 8013f84:	e011      	b.n	8013faa <HAL_RCC_OscConfig+0x3de>
 8013f86:	4b4e      	ldr	r3, [pc, #312]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	4a4d      	ldr	r2, [pc, #308]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013f90:	6013      	str	r3, [r2, #0]
 8013f92:	4b4b      	ldr	r3, [pc, #300]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	4a4a      	ldr	r2, [pc, #296]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013f98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013f9c:	6013      	str	r3, [r2, #0]
 8013f9e:	4b48      	ldr	r3, [pc, #288]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4a47      	ldr	r2, [pc, #284]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013fa4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013fa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d014      	beq.n	8013fdc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8013fb2:	f7fe fa55 	bl	8012460 <HAL_GetTick>
 8013fb6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013fb8:	e009      	b.n	8013fce <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013fba:	f7fe fa51 	bl	8012460 <HAL_GetTick>
 8013fbe:	4602      	mov	r2, r0
 8013fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fc2:	1ad3      	subs	r3, r2, r3
 8013fc4:	2b64      	cmp	r3, #100	@ 0x64
 8013fc6:	d902      	bls.n	8013fce <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8013fc8:	2303      	movs	r3, #3
 8013fca:	f000 bcd4 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013fce:	4b3c      	ldr	r3, [pc, #240]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d0ef      	beq.n	8013fba <HAL_RCC_OscConfig+0x3ee>
 8013fda:	e013      	b.n	8014004 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8013fdc:	f7fe fa40 	bl	8012460 <HAL_GetTick>
 8013fe0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013fe2:	e009      	b.n	8013ff8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013fe4:	f7fe fa3c 	bl	8012460 <HAL_GetTick>
 8013fe8:	4602      	mov	r2, r0
 8013fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	2b64      	cmp	r3, #100	@ 0x64
 8013ff0:	d902      	bls.n	8013ff8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8013ff2:	2303      	movs	r3, #3
 8013ff4:	f000 bcbf 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013ff8:	4b31      	ldr	r3, [pc, #196]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1ef      	bne.n	8013fe4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	f003 0302 	and.w	r3, r3, #2
 801400c:	2b00      	cmp	r3, #0
 801400e:	d05f      	beq.n	80140d0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8014010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014012:	2b04      	cmp	r3, #4
 8014014:	d005      	beq.n	8014022 <HAL_RCC_OscConfig+0x456>
 8014016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014018:	2b0c      	cmp	r3, #12
 801401a:	d114      	bne.n	8014046 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801401e:	2b02      	cmp	r3, #2
 8014020:	d111      	bne.n	8014046 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	68db      	ldr	r3, [r3, #12]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d102      	bne.n	8014030 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 801402a:	2301      	movs	r3, #1
 801402c:	f000 bca3 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8014030:	4b23      	ldr	r3, [pc, #140]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8014032:	691b      	ldr	r3, [r3, #16]
 8014034:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	691b      	ldr	r3, [r3, #16]
 801403c:	041b      	lsls	r3, r3, #16
 801403e:	4920      	ldr	r1, [pc, #128]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8014040:	4313      	orrs	r3, r2
 8014042:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8014044:	e044      	b.n	80140d0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	68db      	ldr	r3, [r3, #12]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d024      	beq.n	8014098 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 801404e:	4b1c      	ldr	r3, [pc, #112]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	4a1b      	ldr	r2, [pc, #108]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8014054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014058:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801405a:	f7fe fa01 	bl	8012460 <HAL_GetTick>
 801405e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014060:	e009      	b.n	8014076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014062:	f7fe f9fd 	bl	8012460 <HAL_GetTick>
 8014066:	4602      	mov	r2, r0
 8014068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801406a:	1ad3      	subs	r3, r2, r3
 801406c:	2b02      	cmp	r3, #2
 801406e:	d902      	bls.n	8014076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8014070:	2303      	movs	r3, #3
 8014072:	f000 bc80 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014076:	4b12      	ldr	r3, [pc, #72]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801407e:	2b00      	cmp	r3, #0
 8014080:	d0ef      	beq.n	8014062 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8014082:	4b0f      	ldr	r3, [pc, #60]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8014084:	691b      	ldr	r3, [r3, #16]
 8014086:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	691b      	ldr	r3, [r3, #16]
 801408e:	041b      	lsls	r3, r3, #16
 8014090:	490b      	ldr	r1, [pc, #44]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 8014092:	4313      	orrs	r3, r2
 8014094:	610b      	str	r3, [r1, #16]
 8014096:	e01b      	b.n	80140d0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8014098:	4b09      	ldr	r3, [pc, #36]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	4a08      	ldr	r2, [pc, #32]	@ (80140c0 <HAL_RCC_OscConfig+0x4f4>)
 801409e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80140a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80140a4:	f7fe f9dc 	bl	8012460 <HAL_GetTick>
 80140a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80140aa:	e00b      	b.n	80140c4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80140ac:	f7fe f9d8 	bl	8012460 <HAL_GetTick>
 80140b0:	4602      	mov	r2, r0
 80140b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140b4:	1ad3      	subs	r3, r2, r3
 80140b6:	2b02      	cmp	r3, #2
 80140b8:	d904      	bls.n	80140c4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80140ba:	2303      	movs	r3, #3
 80140bc:	f000 bc5b 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
 80140c0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80140c4:	4baf      	ldr	r3, [pc, #700]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d1ed      	bne.n	80140ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f003 0308 	and.w	r3, r3, #8
 80140d8:	2b00      	cmp	r3, #0
 80140da:	f000 80c8 	beq.w	801426e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80140de:	2300      	movs	r3, #0
 80140e0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80140e4:	4ba7      	ldr	r3, [pc, #668]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80140e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80140ea:	f003 0304 	and.w	r3, r3, #4
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d111      	bne.n	8014116 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80140f2:	4ba4      	ldr	r3, [pc, #656]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80140f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80140f8:	4aa2      	ldr	r2, [pc, #648]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80140fa:	f043 0304 	orr.w	r3, r3, #4
 80140fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8014102:	4ba0      	ldr	r3, [pc, #640]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014108:	f003 0304 	and.w	r3, r3, #4
 801410c:	617b      	str	r3, [r7, #20]
 801410e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8014110:	2301      	movs	r3, #1
 8014112:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8014116:	4b9c      	ldr	r3, [pc, #624]	@ (8014388 <HAL_RCC_OscConfig+0x7bc>)
 8014118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801411a:	f003 0301 	and.w	r3, r3, #1
 801411e:	2b00      	cmp	r3, #0
 8014120:	d119      	bne.n	8014156 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8014122:	4b99      	ldr	r3, [pc, #612]	@ (8014388 <HAL_RCC_OscConfig+0x7bc>)
 8014124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014126:	4a98      	ldr	r2, [pc, #608]	@ (8014388 <HAL_RCC_OscConfig+0x7bc>)
 8014128:	f043 0301 	orr.w	r3, r3, #1
 801412c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801412e:	f7fe f997 	bl	8012460 <HAL_GetTick>
 8014132:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8014134:	e009      	b.n	801414a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014136:	f7fe f993 	bl	8012460 <HAL_GetTick>
 801413a:	4602      	mov	r2, r0
 801413c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801413e:	1ad3      	subs	r3, r2, r3
 8014140:	2b02      	cmp	r3, #2
 8014142:	d902      	bls.n	801414a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8014144:	2303      	movs	r3, #3
 8014146:	f000 bc16 	b.w	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801414a:	4b8f      	ldr	r3, [pc, #572]	@ (8014388 <HAL_RCC_OscConfig+0x7bc>)
 801414c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801414e:	f003 0301 	and.w	r3, r3, #1
 8014152:	2b00      	cmp	r3, #0
 8014154:	d0ef      	beq.n	8014136 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	695b      	ldr	r3, [r3, #20]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d05f      	beq.n	801421e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 801415e:	4b89      	ldr	r3, [pc, #548]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014164:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	699a      	ldr	r2, [r3, #24]
 801416a:	6a3b      	ldr	r3, [r7, #32]
 801416c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014170:	429a      	cmp	r2, r3
 8014172:	d037      	beq.n	80141e4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8014174:	6a3b      	ldr	r3, [r7, #32]
 8014176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801417a:	2b00      	cmp	r3, #0
 801417c:	d006      	beq.n	801418c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 801417e:	6a3b      	ldr	r3, [r7, #32]
 8014180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8014184:	2b00      	cmp	r3, #0
 8014186:	d101      	bne.n	801418c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8014188:	2301      	movs	r3, #1
 801418a:	e3f4      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 801418c:	6a3b      	ldr	r3, [r7, #32]
 801418e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014192:	2b00      	cmp	r3, #0
 8014194:	d01b      	beq.n	80141ce <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8014196:	4b7b      	ldr	r3, [pc, #492]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801419c:	4a79      	ldr	r2, [pc, #484]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 801419e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80141a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80141a6:	f7fe f95b 	bl	8012460 <HAL_GetTick>
 80141aa:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80141ac:	e008      	b.n	80141c0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80141ae:	f7fe f957 	bl	8012460 <HAL_GetTick>
 80141b2:	4602      	mov	r2, r0
 80141b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141b6:	1ad3      	subs	r3, r2, r3
 80141b8:	2b05      	cmp	r3, #5
 80141ba:	d901      	bls.n	80141c0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80141bc:	2303      	movs	r3, #3
 80141be:	e3da      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80141c0:	4b70      	ldr	r3, [pc, #448]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80141c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80141c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d1ef      	bne.n	80141ae <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80141ce:	4b6d      	ldr	r3, [pc, #436]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80141d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80141d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	699b      	ldr	r3, [r3, #24]
 80141dc:	4969      	ldr	r1, [pc, #420]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80141de:	4313      	orrs	r3, r2
 80141e0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80141e4:	4b67      	ldr	r3, [pc, #412]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80141e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80141ea:	4a66      	ldr	r2, [pc, #408]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80141ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80141f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80141f4:	f7fe f934 	bl	8012460 <HAL_GetTick>
 80141f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80141fa:	e008      	b.n	801420e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80141fc:	f7fe f930 	bl	8012460 <HAL_GetTick>
 8014200:	4602      	mov	r2, r0
 8014202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014204:	1ad3      	subs	r3, r2, r3
 8014206:	2b05      	cmp	r3, #5
 8014208:	d901      	bls.n	801420e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 801420a:	2303      	movs	r3, #3
 801420c:	e3b3      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 801420e:	4b5d      	ldr	r3, [pc, #372]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014218:	2b00      	cmp	r3, #0
 801421a:	d0ef      	beq.n	80141fc <HAL_RCC_OscConfig+0x630>
 801421c:	e01b      	b.n	8014256 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 801421e:	4b59      	ldr	r3, [pc, #356]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014224:	4a57      	ldr	r2, [pc, #348]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014226:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 801422a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 801422e:	f7fe f917 	bl	8012460 <HAL_GetTick>
 8014232:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8014234:	e008      	b.n	8014248 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014236:	f7fe f913 	bl	8012460 <HAL_GetTick>
 801423a:	4602      	mov	r2, r0
 801423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	2b05      	cmp	r3, #5
 8014242:	d901      	bls.n	8014248 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8014244:	2303      	movs	r3, #3
 8014246:	e396      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8014248:	4b4e      	ldr	r3, [pc, #312]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 801424a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801424e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014252:	2b00      	cmp	r3, #0
 8014254:	d1ef      	bne.n	8014236 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8014256:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801425a:	2b01      	cmp	r3, #1
 801425c:	d107      	bne.n	801426e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801425e:	4b49      	ldr	r3, [pc, #292]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014264:	4a47      	ldr	r2, [pc, #284]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014266:	f023 0304 	bic.w	r3, r3, #4
 801426a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	f003 0304 	and.w	r3, r3, #4
 8014276:	2b00      	cmp	r3, #0
 8014278:	f000 8111 	beq.w	801449e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 801427c:	2300      	movs	r3, #0
 801427e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014282:	4b40      	ldr	r3, [pc, #256]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014288:	f003 0304 	and.w	r3, r3, #4
 801428c:	2b00      	cmp	r3, #0
 801428e:	d111      	bne.n	80142b4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014290:	4b3c      	ldr	r3, [pc, #240]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014296:	4a3b      	ldr	r2, [pc, #236]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014298:	f043 0304 	orr.w	r3, r3, #4
 801429c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80142a0:	4b38      	ldr	r3, [pc, #224]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 80142a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80142a6:	f003 0304 	and.w	r3, r3, #4
 80142aa:	613b      	str	r3, [r7, #16]
 80142ac:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80142ae:	2301      	movs	r3, #1
 80142b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80142b4:	4b34      	ldr	r3, [pc, #208]	@ (8014388 <HAL_RCC_OscConfig+0x7bc>)
 80142b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142b8:	f003 0301 	and.w	r3, r3, #1
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d118      	bne.n	80142f2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80142c0:	4b31      	ldr	r3, [pc, #196]	@ (8014388 <HAL_RCC_OscConfig+0x7bc>)
 80142c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142c4:	4a30      	ldr	r2, [pc, #192]	@ (8014388 <HAL_RCC_OscConfig+0x7bc>)
 80142c6:	f043 0301 	orr.w	r3, r3, #1
 80142ca:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80142cc:	f7fe f8c8 	bl	8012460 <HAL_GetTick>
 80142d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80142d2:	e008      	b.n	80142e6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80142d4:	f7fe f8c4 	bl	8012460 <HAL_GetTick>
 80142d8:	4602      	mov	r2, r0
 80142da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142dc:	1ad3      	subs	r3, r2, r3
 80142de:	2b02      	cmp	r3, #2
 80142e0:	d901      	bls.n	80142e6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80142e2:	2303      	movs	r3, #3
 80142e4:	e347      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80142e6:	4b28      	ldr	r3, [pc, #160]	@ (8014388 <HAL_RCC_OscConfig+0x7bc>)
 80142e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142ea:	f003 0301 	and.w	r3, r3, #1
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d0f0      	beq.n	80142d4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	689b      	ldr	r3, [r3, #8]
 80142f6:	f003 0301 	and.w	r3, r3, #1
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d01f      	beq.n	801433e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	689b      	ldr	r3, [r3, #8]
 8014302:	f003 0304 	and.w	r3, r3, #4
 8014306:	2b00      	cmp	r3, #0
 8014308:	d010      	beq.n	801432c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801430a:	4b1e      	ldr	r3, [pc, #120]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 801430c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014310:	4a1c      	ldr	r2, [pc, #112]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014312:	f043 0304 	orr.w	r3, r3, #4
 8014316:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801431a:	4b1a      	ldr	r3, [pc, #104]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 801431c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014320:	4a18      	ldr	r2, [pc, #96]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014322:	f043 0301 	orr.w	r3, r3, #1
 8014326:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801432a:	e018      	b.n	801435e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801432c:	4b15      	ldr	r3, [pc, #84]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 801432e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014332:	4a14      	ldr	r2, [pc, #80]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014334:	f043 0301 	orr.w	r3, r3, #1
 8014338:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801433c:	e00f      	b.n	801435e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801433e:	4b11      	ldr	r3, [pc, #68]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014344:	4a0f      	ldr	r2, [pc, #60]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014346:	f023 0301 	bic.w	r3, r3, #1
 801434a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801434e:	4b0d      	ldr	r3, [pc, #52]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014354:	4a0b      	ldr	r2, [pc, #44]	@ (8014384 <HAL_RCC_OscConfig+0x7b8>)
 8014356:	f023 0304 	bic.w	r3, r3, #4
 801435a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	689b      	ldr	r3, [r3, #8]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d057      	beq.n	8014416 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8014366:	f7fe f87b 	bl	8012460 <HAL_GetTick>
 801436a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801436c:	e00e      	b.n	801438c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801436e:	f7fe f877 	bl	8012460 <HAL_GetTick>
 8014372:	4602      	mov	r2, r0
 8014374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014376:	1ad3      	subs	r3, r2, r3
 8014378:	f241 3288 	movw	r2, #5000	@ 0x1388
 801437c:	4293      	cmp	r3, r2
 801437e:	d905      	bls.n	801438c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8014380:	2303      	movs	r3, #3
 8014382:	e2f8      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
 8014384:	46020c00 	.word	0x46020c00
 8014388:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801438c:	4b9c      	ldr	r3, [pc, #624]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 801438e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014392:	f003 0302 	and.w	r3, r3, #2
 8014396:	2b00      	cmp	r3, #0
 8014398:	d0e9      	beq.n	801436e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	689b      	ldr	r3, [r3, #8]
 801439e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d01b      	beq.n	80143de <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80143a6:	4b96      	ldr	r3, [pc, #600]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80143a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80143ac:	4a94      	ldr	r2, [pc, #592]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80143ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80143b6:	e00a      	b.n	80143ce <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80143b8:	f7fe f852 	bl	8012460 <HAL_GetTick>
 80143bc:	4602      	mov	r2, r0
 80143be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143c0:	1ad3      	subs	r3, r2, r3
 80143c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80143c6:	4293      	cmp	r3, r2
 80143c8:	d901      	bls.n	80143ce <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80143ca:	2303      	movs	r3, #3
 80143cc:	e2d3      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80143ce:	4b8c      	ldr	r3, [pc, #560]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80143d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80143d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d0ed      	beq.n	80143b8 <HAL_RCC_OscConfig+0x7ec>
 80143dc:	e053      	b.n	8014486 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80143de:	4b88      	ldr	r3, [pc, #544]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80143e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80143e4:	4a86      	ldr	r2, [pc, #536]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80143e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80143ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80143ee:	e00a      	b.n	8014406 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80143f0:	f7fe f836 	bl	8012460 <HAL_GetTick>
 80143f4:	4602      	mov	r2, r0
 80143f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f8:	1ad3      	subs	r3, r2, r3
 80143fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80143fe:	4293      	cmp	r3, r2
 8014400:	d901      	bls.n	8014406 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8014402:	2303      	movs	r3, #3
 8014404:	e2b7      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8014406:	4b7e      	ldr	r3, [pc, #504]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801440c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014410:	2b00      	cmp	r3, #0
 8014412:	d1ed      	bne.n	80143f0 <HAL_RCC_OscConfig+0x824>
 8014414:	e037      	b.n	8014486 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8014416:	f7fe f823 	bl	8012460 <HAL_GetTick>
 801441a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801441c:	e00a      	b.n	8014434 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801441e:	f7fe f81f 	bl	8012460 <HAL_GetTick>
 8014422:	4602      	mov	r2, r0
 8014424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	f241 3288 	movw	r2, #5000	@ 0x1388
 801442c:	4293      	cmp	r3, r2
 801442e:	d901      	bls.n	8014434 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8014430:	2303      	movs	r3, #3
 8014432:	e2a0      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014434:	4b72      	ldr	r3, [pc, #456]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801443a:	f003 0302 	and.w	r3, r3, #2
 801443e:	2b00      	cmp	r3, #0
 8014440:	d1ed      	bne.n	801441e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8014442:	4b6f      	ldr	r3, [pc, #444]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801444c:	2b00      	cmp	r3, #0
 801444e:	d01a      	beq.n	8014486 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8014450:	4b6b      	ldr	r3, [pc, #428]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8014456:	4a6a      	ldr	r2, [pc, #424]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801445c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8014460:	e00a      	b.n	8014478 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014462:	f7fd fffd 	bl	8012460 <HAL_GetTick>
 8014466:	4602      	mov	r2, r0
 8014468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014470:	4293      	cmp	r3, r2
 8014472:	d901      	bls.n	8014478 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8014474:	2303      	movs	r3, #3
 8014476:	e27e      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8014478:	4b61      	ldr	r3, [pc, #388]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 801447a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801447e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014482:	2b00      	cmp	r3, #0
 8014484:	d1ed      	bne.n	8014462 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8014486:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801448a:	2b01      	cmp	r3, #1
 801448c:	d107      	bne.n	801449e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801448e:	4b5c      	ldr	r3, [pc, #368]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014494:	4a5a      	ldr	r2, [pc, #360]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014496:	f023 0304 	bic.w	r3, r3, #4
 801449a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	f003 0320 	and.w	r3, r3, #32
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d036      	beq.n	8014518 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d019      	beq.n	80144e6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80144b2:	4b53      	ldr	r3, [pc, #332]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	4a52      	ldr	r2, [pc, #328]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80144b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80144bc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80144be:	f7fd ffcf 	bl	8012460 <HAL_GetTick>
 80144c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80144c4:	e008      	b.n	80144d8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80144c6:	f7fd ffcb 	bl	8012460 <HAL_GetTick>
 80144ca:	4602      	mov	r2, r0
 80144cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ce:	1ad3      	subs	r3, r2, r3
 80144d0:	2b02      	cmp	r3, #2
 80144d2:	d901      	bls.n	80144d8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80144d4:	2303      	movs	r3, #3
 80144d6:	e24e      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80144d8:	4b49      	ldr	r3, [pc, #292]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d0f0      	beq.n	80144c6 <HAL_RCC_OscConfig+0x8fa>
 80144e4:	e018      	b.n	8014518 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80144e6:	4b46      	ldr	r3, [pc, #280]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a45      	ldr	r2, [pc, #276]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80144ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80144f0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80144f2:	f7fd ffb5 	bl	8012460 <HAL_GetTick>
 80144f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80144f8:	e008      	b.n	801450c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80144fa:	f7fd ffb1 	bl	8012460 <HAL_GetTick>
 80144fe:	4602      	mov	r2, r0
 8014500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014502:	1ad3      	subs	r3, r2, r3
 8014504:	2b02      	cmp	r3, #2
 8014506:	d901      	bls.n	801450c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8014508:	2303      	movs	r3, #3
 801450a:	e234      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 801450c:	4b3c      	ldr	r3, [pc, #240]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014514:	2b00      	cmp	r3, #0
 8014516:	d1f0      	bne.n	80144fa <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014520:	2b00      	cmp	r3, #0
 8014522:	d036      	beq.n	8014592 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014528:	2b00      	cmp	r3, #0
 801452a:	d019      	beq.n	8014560 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 801452c:	4b34      	ldr	r3, [pc, #208]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	4a33      	ldr	r2, [pc, #204]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014532:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8014536:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8014538:	f7fd ff92 	bl	8012460 <HAL_GetTick>
 801453c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 801453e:	e008      	b.n	8014552 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8014540:	f7fd ff8e 	bl	8012460 <HAL_GetTick>
 8014544:	4602      	mov	r2, r0
 8014546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014548:	1ad3      	subs	r3, r2, r3
 801454a:	2b02      	cmp	r3, #2
 801454c:	d901      	bls.n	8014552 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 801454e:	2303      	movs	r3, #3
 8014550:	e211      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8014552:	4b2b      	ldr	r3, [pc, #172]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801455a:	2b00      	cmp	r3, #0
 801455c:	d0f0      	beq.n	8014540 <HAL_RCC_OscConfig+0x974>
 801455e:	e018      	b.n	8014592 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8014560:	4b27      	ldr	r3, [pc, #156]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	4a26      	ldr	r2, [pc, #152]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801456a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801456c:	f7fd ff78 	bl	8012460 <HAL_GetTick>
 8014570:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8014572:	e008      	b.n	8014586 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8014574:	f7fd ff74 	bl	8012460 <HAL_GetTick>
 8014578:	4602      	mov	r2, r0
 801457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	2b02      	cmp	r3, #2
 8014580:	d901      	bls.n	8014586 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8014582:	2303      	movs	r3, #3
 8014584:	e1f7      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8014586:	4b1e      	ldr	r3, [pc, #120]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801458e:	2b00      	cmp	r3, #0
 8014590:	d1f0      	bne.n	8014574 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801459a:	2b00      	cmp	r3, #0
 801459c:	d07f      	beq.n	801469e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d062      	beq.n	801466c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80145a6:	4b16      	ldr	r3, [pc, #88]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80145a8:	689b      	ldr	r3, [r3, #8]
 80145aa:	4a15      	ldr	r2, [pc, #84]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80145ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80145b0:	6093      	str	r3, [r2, #8]
 80145b2:	4b13      	ldr	r3, [pc, #76]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80145b4:	689b      	ldr	r3, [r3, #8]
 80145b6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145be:	4910      	ldr	r1, [pc, #64]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80145c0:	4313      	orrs	r3, r2
 80145c2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80145cc:	d309      	bcc.n	80145e2 <HAL_RCC_OscConfig+0xa16>
 80145ce:	4b0c      	ldr	r3, [pc, #48]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80145d0:	68db      	ldr	r3, [r3, #12]
 80145d2:	f023 021f 	bic.w	r2, r3, #31
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6a1b      	ldr	r3, [r3, #32]
 80145da:	4909      	ldr	r1, [pc, #36]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80145dc:	4313      	orrs	r3, r2
 80145de:	60cb      	str	r3, [r1, #12]
 80145e0:	e02a      	b.n	8014638 <HAL_RCC_OscConfig+0xa6c>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	da0c      	bge.n	8014604 <HAL_RCC_OscConfig+0xa38>
 80145ea:	4b05      	ldr	r3, [pc, #20]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80145ec:	68db      	ldr	r3, [r3, #12]
 80145ee:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6a1b      	ldr	r3, [r3, #32]
 80145f6:	015b      	lsls	r3, r3, #5
 80145f8:	4901      	ldr	r1, [pc, #4]	@ (8014600 <HAL_RCC_OscConfig+0xa34>)
 80145fa:	4313      	orrs	r3, r2
 80145fc:	60cb      	str	r3, [r1, #12]
 80145fe:	e01b      	b.n	8014638 <HAL_RCC_OscConfig+0xa6c>
 8014600:	46020c00 	.word	0x46020c00
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801460c:	d30a      	bcc.n	8014624 <HAL_RCC_OscConfig+0xa58>
 801460e:	4ba1      	ldr	r3, [pc, #644]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014610:	68db      	ldr	r3, [r3, #12]
 8014612:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6a1b      	ldr	r3, [r3, #32]
 801461a:	029b      	lsls	r3, r3, #10
 801461c:	499d      	ldr	r1, [pc, #628]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 801461e:	4313      	orrs	r3, r2
 8014620:	60cb      	str	r3, [r1, #12]
 8014622:	e009      	b.n	8014638 <HAL_RCC_OscConfig+0xa6c>
 8014624:	4b9b      	ldr	r3, [pc, #620]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6a1b      	ldr	r3, [r3, #32]
 8014630:	03db      	lsls	r3, r3, #15
 8014632:	4998      	ldr	r1, [pc, #608]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014634:	4313      	orrs	r3, r2
 8014636:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8014638:	4b96      	ldr	r3, [pc, #600]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	4a95      	ldr	r2, [pc, #596]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 801463e:	f043 0310 	orr.w	r3, r3, #16
 8014642:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8014644:	f7fd ff0c 	bl	8012460 <HAL_GetTick>
 8014648:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 801464a:	e008      	b.n	801465e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 801464c:	f7fd ff08 	bl	8012460 <HAL_GetTick>
 8014650:	4602      	mov	r2, r0
 8014652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014654:	1ad3      	subs	r3, r2, r3
 8014656:	2b02      	cmp	r3, #2
 8014658:	d901      	bls.n	801465e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 801465a:	2303      	movs	r3, #3
 801465c:	e18b      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 801465e:	4b8d      	ldr	r3, [pc, #564]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	f003 0320 	and.w	r3, r3, #32
 8014666:	2b00      	cmp	r3, #0
 8014668:	d0f0      	beq.n	801464c <HAL_RCC_OscConfig+0xa80>
 801466a:	e018      	b.n	801469e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 801466c:	4b89      	ldr	r3, [pc, #548]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	4a88      	ldr	r2, [pc, #544]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014672:	f023 0310 	bic.w	r3, r3, #16
 8014676:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8014678:	f7fd fef2 	bl	8012460 <HAL_GetTick>
 801467c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 801467e:	e008      	b.n	8014692 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8014680:	f7fd feee 	bl	8012460 <HAL_GetTick>
 8014684:	4602      	mov	r2, r0
 8014686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014688:	1ad3      	subs	r3, r2, r3
 801468a:	2b02      	cmp	r3, #2
 801468c:	d901      	bls.n	8014692 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 801468e:	2303      	movs	r3, #3
 8014690:	e171      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8014692:	4b80      	ldr	r3, [pc, #512]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	f003 0320 	and.w	r3, r3, #32
 801469a:	2b00      	cmp	r3, #0
 801469c:	d1f0      	bne.n	8014680 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	f000 8166 	beq.w	8014974 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80146a8:	2300      	movs	r3, #0
 80146aa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80146ae:	4b79      	ldr	r3, [pc, #484]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80146b0:	69db      	ldr	r3, [r3, #28]
 80146b2:	f003 030c 	and.w	r3, r3, #12
 80146b6:	2b0c      	cmp	r3, #12
 80146b8:	f000 80f2 	beq.w	80148a0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	f040 80c5 	bne.w	8014850 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80146c6:	4b73      	ldr	r3, [pc, #460]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4a72      	ldr	r2, [pc, #456]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80146cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80146d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80146d2:	f7fd fec5 	bl	8012460 <HAL_GetTick>
 80146d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80146d8:	e008      	b.n	80146ec <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80146da:	f7fd fec1 	bl	8012460 <HAL_GetTick>
 80146de:	4602      	mov	r2, r0
 80146e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146e2:	1ad3      	subs	r3, r2, r3
 80146e4:	2b02      	cmp	r3, #2
 80146e6:	d901      	bls.n	80146ec <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80146e8:	2303      	movs	r3, #3
 80146ea:	e144      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80146ec:	4b69      	ldr	r3, [pc, #420]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d1f0      	bne.n	80146da <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80146f8:	4b66      	ldr	r3, [pc, #408]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80146fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80146fe:	f003 0304 	and.w	r3, r3, #4
 8014702:	2b00      	cmp	r3, #0
 8014704:	d111      	bne.n	801472a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8014706:	4b63      	ldr	r3, [pc, #396]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801470c:	4a61      	ldr	r2, [pc, #388]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 801470e:	f043 0304 	orr.w	r3, r3, #4
 8014712:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8014716:	4b5f      	ldr	r3, [pc, #380]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801471c:	f003 0304 	and.w	r3, r3, #4
 8014720:	60fb      	str	r3, [r7, #12]
 8014722:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8014724:	2301      	movs	r3, #1
 8014726:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 801472a:	4b5b      	ldr	r3, [pc, #364]	@ (8014898 <HAL_RCC_OscConfig+0xccc>)
 801472c:	68db      	ldr	r3, [r3, #12]
 801472e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014732:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014736:	d102      	bne.n	801473e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8014738:	2301      	movs	r3, #1
 801473a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 801473e:	4b56      	ldr	r3, [pc, #344]	@ (8014898 <HAL_RCC_OscConfig+0xccc>)
 8014740:	68db      	ldr	r3, [r3, #12]
 8014742:	4a55      	ldr	r2, [pc, #340]	@ (8014898 <HAL_RCC_OscConfig+0xccc>)
 8014744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8014748:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 801474a:	4b52      	ldr	r3, [pc, #328]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 801474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801474e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014752:	f023 0303 	bic.w	r3, r3, #3
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801475e:	3a01      	subs	r2, #1
 8014760:	0212      	lsls	r2, r2, #8
 8014762:	4311      	orrs	r1, r2
 8014764:	687a      	ldr	r2, [r7, #4]
 8014766:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8014768:	430a      	orrs	r2, r1
 801476a:	494a      	ldr	r1, [pc, #296]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 801476c:	4313      	orrs	r3, r2
 801476e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014770:	4b48      	ldr	r3, [pc, #288]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014774:	4b49      	ldr	r3, [pc, #292]	@ (801489c <HAL_RCC_OscConfig+0xcd0>)
 8014776:	4013      	ands	r3, r2
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801477c:	3a01      	subs	r2, #1
 801477e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8014786:	3a01      	subs	r2, #1
 8014788:	0252      	lsls	r2, r2, #9
 801478a:	b292      	uxth	r2, r2
 801478c:	4311      	orrs	r1, r2
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8014792:	3a01      	subs	r2, #1
 8014794:	0412      	lsls	r2, r2, #16
 8014796:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 801479a:	4311      	orrs	r1, r2
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80147a0:	3a01      	subs	r2, #1
 80147a2:	0612      	lsls	r2, r2, #24
 80147a4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80147a8:	430a      	orrs	r2, r1
 80147aa:	493a      	ldr	r1, [pc, #232]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80147ac:	4313      	orrs	r3, r2
 80147ae:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80147b0:	4b38      	ldr	r3, [pc, #224]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80147b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147b4:	4a37      	ldr	r2, [pc, #220]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80147b6:	f023 0310 	bic.w	r3, r3, #16
 80147ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80147c0:	4a34      	ldr	r2, [pc, #208]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80147c6:	4b33      	ldr	r3, [pc, #204]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80147c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147ca:	4a32      	ldr	r2, [pc, #200]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80147cc:	f043 0310 	orr.w	r3, r3, #16
 80147d0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80147d2:	4b30      	ldr	r3, [pc, #192]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80147d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147d6:	f023 020c 	bic.w	r2, r3, #12
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80147de:	492d      	ldr	r1, [pc, #180]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 80147e0:	4313      	orrs	r3, r2
 80147e2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80147e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d105      	bne.n	80147f8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80147ec:	4b2a      	ldr	r3, [pc, #168]	@ (8014898 <HAL_RCC_OscConfig+0xccc>)
 80147ee:	68db      	ldr	r3, [r3, #12]
 80147f0:	4a29      	ldr	r2, [pc, #164]	@ (8014898 <HAL_RCC_OscConfig+0xccc>)
 80147f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80147f6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80147f8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d107      	bne.n	8014810 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8014800:	4b24      	ldr	r3, [pc, #144]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014806:	4a23      	ldr	r2, [pc, #140]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014808:	f023 0304 	bic.w	r3, r3, #4
 801480c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8014810:	4b20      	ldr	r3, [pc, #128]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4a1f      	ldr	r2, [pc, #124]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801481a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801481c:	f7fd fe20 	bl	8012460 <HAL_GetTick>
 8014820:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8014822:	e008      	b.n	8014836 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014824:	f7fd fe1c 	bl	8012460 <HAL_GetTick>
 8014828:	4602      	mov	r2, r0
 801482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801482c:	1ad3      	subs	r3, r2, r3
 801482e:	2b02      	cmp	r3, #2
 8014830:	d901      	bls.n	8014836 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8014832:	2303      	movs	r3, #3
 8014834:	e09f      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8014836:	4b17      	ldr	r3, [pc, #92]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801483e:	2b00      	cmp	r3, #0
 8014840:	d0f0      	beq.n	8014824 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8014842:	4b14      	ldr	r3, [pc, #80]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014846:	4a13      	ldr	r2, [pc, #76]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801484c:	6293      	str	r3, [r2, #40]	@ 0x28
 801484e:	e091      	b.n	8014974 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8014850:	4b10      	ldr	r3, [pc, #64]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	4a0f      	ldr	r2, [pc, #60]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801485a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801485c:	f7fd fe00 	bl	8012460 <HAL_GetTick>
 8014860:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8014862:	e008      	b.n	8014876 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014864:	f7fd fdfc 	bl	8012460 <HAL_GetTick>
 8014868:	4602      	mov	r2, r0
 801486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801486c:	1ad3      	subs	r3, r2, r3
 801486e:	2b02      	cmp	r3, #2
 8014870:	d901      	bls.n	8014876 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8014872:	2303      	movs	r3, #3
 8014874:	e07f      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8014876:	4b07      	ldr	r3, [pc, #28]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801487e:	2b00      	cmp	r3, #0
 8014880:	d1f0      	bne.n	8014864 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8014882:	4b04      	ldr	r3, [pc, #16]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014886:	4a03      	ldr	r2, [pc, #12]	@ (8014894 <HAL_RCC_OscConfig+0xcc8>)
 8014888:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 801488c:	f023 0303 	bic.w	r3, r3, #3
 8014890:	6293      	str	r3, [r2, #40]	@ 0x28
 8014892:	e06f      	b.n	8014974 <HAL_RCC_OscConfig+0xda8>
 8014894:	46020c00 	.word	0x46020c00
 8014898:	46020800 	.word	0x46020800
 801489c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80148a0:	4b37      	ldr	r3, [pc, #220]	@ (8014980 <HAL_RCC_OscConfig+0xdb4>)
 80148a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148a4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80148a6:	4b36      	ldr	r3, [pc, #216]	@ (8014980 <HAL_RCC_OscConfig+0xdb4>)
 80148a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148aa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148b0:	2b01      	cmp	r3, #1
 80148b2:	d039      	beq.n	8014928 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	f003 0203 	and.w	r2, r3, #3
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80148be:	429a      	cmp	r2, r3
 80148c0:	d132      	bne.n	8014928 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80148c2:	69fb      	ldr	r3, [r7, #28]
 80148c4:	0a1b      	lsrs	r3, r3, #8
 80148c6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148ce:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d129      	bne.n	8014928 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80148d4:	69fb      	ldr	r3, [r7, #28]
 80148d6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80148de:	429a      	cmp	r2, r3
 80148e0:	d122      	bne.n	8014928 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80148e2:	69bb      	ldr	r3, [r7, #24]
 80148e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80148ec:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d11a      	bne.n	8014928 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	0a5b      	lsrs	r3, r3, #9
 80148f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014900:	429a      	cmp	r2, r3
 8014902:	d111      	bne.n	8014928 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8014904:	69bb      	ldr	r3, [r7, #24]
 8014906:	0c1b      	lsrs	r3, r3, #16
 8014908:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014910:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014912:	429a      	cmp	r2, r3
 8014914:	d108      	bne.n	8014928 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	0e1b      	lsrs	r3, r3, #24
 801491a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014922:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014924:	429a      	cmp	r2, r3
 8014926:	d001      	beq.n	801492c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8014928:	2301      	movs	r3, #1
 801492a:	e024      	b.n	8014976 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 801492c:	4b14      	ldr	r3, [pc, #80]	@ (8014980 <HAL_RCC_OscConfig+0xdb4>)
 801492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014930:	08db      	lsrs	r3, r3, #3
 8014932:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 801493a:	429a      	cmp	r2, r3
 801493c:	d01a      	beq.n	8014974 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 801493e:	4b10      	ldr	r3, [pc, #64]	@ (8014980 <HAL_RCC_OscConfig+0xdb4>)
 8014940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014942:	4a0f      	ldr	r2, [pc, #60]	@ (8014980 <HAL_RCC_OscConfig+0xdb4>)
 8014944:	f023 0310 	bic.w	r3, r3, #16
 8014948:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801494a:	f7fd fd89 	bl	8012460 <HAL_GetTick>
 801494e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8014950:	bf00      	nop
 8014952:	f7fd fd85 	bl	8012460 <HAL_GetTick>
 8014956:	4602      	mov	r2, r0
 8014958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801495a:	4293      	cmp	r3, r2
 801495c:	d0f9      	beq.n	8014952 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014962:	4a07      	ldr	r2, [pc, #28]	@ (8014980 <HAL_RCC_OscConfig+0xdb4>)
 8014964:	00db      	lsls	r3, r3, #3
 8014966:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8014968:	4b05      	ldr	r3, [pc, #20]	@ (8014980 <HAL_RCC_OscConfig+0xdb4>)
 801496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801496c:	4a04      	ldr	r2, [pc, #16]	@ (8014980 <HAL_RCC_OscConfig+0xdb4>)
 801496e:	f043 0310 	orr.w	r3, r3, #16
 8014972:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8014974:	2300      	movs	r3, #0
}
 8014976:	4618      	mov	r0, r3
 8014978:	3738      	adds	r7, #56	@ 0x38
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	46020c00 	.word	0x46020c00

08014984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b086      	sub	sp, #24
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d101      	bne.n	8014998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014994:	2301      	movs	r3, #1
 8014996:	e1d9      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014998:	4b9b      	ldr	r3, [pc, #620]	@ (8014c08 <HAL_RCC_ClockConfig+0x284>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f003 030f 	and.w	r3, r3, #15
 80149a0:	683a      	ldr	r2, [r7, #0]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d910      	bls.n	80149c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80149a6:	4b98      	ldr	r3, [pc, #608]	@ (8014c08 <HAL_RCC_ClockConfig+0x284>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f023 020f 	bic.w	r2, r3, #15
 80149ae:	4996      	ldr	r1, [pc, #600]	@ (8014c08 <HAL_RCC_ClockConfig+0x284>)
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	4313      	orrs	r3, r2
 80149b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80149b6:	4b94      	ldr	r3, [pc, #592]	@ (8014c08 <HAL_RCC_ClockConfig+0x284>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	f003 030f 	and.w	r3, r3, #15
 80149be:	683a      	ldr	r2, [r7, #0]
 80149c0:	429a      	cmp	r2, r3
 80149c2:	d001      	beq.n	80149c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80149c4:	2301      	movs	r3, #1
 80149c6:	e1c1      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	f003 0310 	and.w	r3, r3, #16
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d010      	beq.n	80149f6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	695a      	ldr	r2, [r3, #20]
 80149d8:	4b8c      	ldr	r3, [pc, #560]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 80149da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80149e0:	429a      	cmp	r2, r3
 80149e2:	d908      	bls.n	80149f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80149e4:	4b89      	ldr	r3, [pc, #548]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 80149e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	695b      	ldr	r3, [r3, #20]
 80149f0:	4986      	ldr	r1, [pc, #536]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 80149f2:	4313      	orrs	r3, r2
 80149f4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	f003 0308 	and.w	r3, r3, #8
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d012      	beq.n	8014a28 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	691a      	ldr	r2, [r3, #16]
 8014a06:	4b81      	ldr	r3, [pc, #516]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a08:	6a1b      	ldr	r3, [r3, #32]
 8014a0a:	091b      	lsrs	r3, r3, #4
 8014a0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d909      	bls.n	8014a28 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8014a14:	4b7d      	ldr	r3, [pc, #500]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a16:	6a1b      	ldr	r3, [r3, #32]
 8014a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	691b      	ldr	r3, [r3, #16]
 8014a20:	011b      	lsls	r3, r3, #4
 8014a22:	497a      	ldr	r1, [pc, #488]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a24:	4313      	orrs	r3, r2
 8014a26:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	f003 0304 	and.w	r3, r3, #4
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d010      	beq.n	8014a56 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	68da      	ldr	r2, [r3, #12]
 8014a38:	4b74      	ldr	r3, [pc, #464]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a3a:	6a1b      	ldr	r3, [r3, #32]
 8014a3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d908      	bls.n	8014a56 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8014a44:	4b71      	ldr	r3, [pc, #452]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a46:	6a1b      	ldr	r3, [r3, #32]
 8014a48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	496e      	ldr	r1, [pc, #440]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a52:	4313      	orrs	r3, r2
 8014a54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	f003 0302 	and.w	r3, r3, #2
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d010      	beq.n	8014a84 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	689a      	ldr	r2, [r3, #8]
 8014a66:	4b69      	ldr	r3, [pc, #420]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a68:	6a1b      	ldr	r3, [r3, #32]
 8014a6a:	f003 030f 	and.w	r3, r3, #15
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	d908      	bls.n	8014a84 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8014a72:	4b66      	ldr	r3, [pc, #408]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a74:	6a1b      	ldr	r3, [r3, #32]
 8014a76:	f023 020f 	bic.w	r2, r3, #15
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	689b      	ldr	r3, [r3, #8]
 8014a7e:	4963      	ldr	r1, [pc, #396]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014a80:	4313      	orrs	r3, r2
 8014a82:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	f003 0301 	and.w	r3, r3, #1
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	f000 80d2 	beq.w	8014c36 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8014a92:	2300      	movs	r3, #0
 8014a94:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	685b      	ldr	r3, [r3, #4]
 8014a9a:	2b03      	cmp	r3, #3
 8014a9c:	d143      	bne.n	8014b26 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014aa4:	f003 0304 	and.w	r3, r3, #4
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d110      	bne.n	8014ace <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8014aac:	4b57      	ldr	r3, [pc, #348]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014ab2:	4a56      	ldr	r2, [pc, #344]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014ab4:	f043 0304 	orr.w	r3, r3, #4
 8014ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8014abc:	4b53      	ldr	r3, [pc, #332]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014ac2:	f003 0304 	and.w	r3, r3, #4
 8014ac6:	60bb      	str	r3, [r7, #8]
 8014ac8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8014aca:	2301      	movs	r3, #1
 8014acc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8014ace:	f7fd fcc7 	bl	8012460 <HAL_GetTick>
 8014ad2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8014ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8014c10 <HAL_RCC_ClockConfig+0x28c>)
 8014ad6:	68db      	ldr	r3, [r3, #12]
 8014ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00f      	beq.n	8014b00 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8014ae0:	e008      	b.n	8014af4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8014ae2:	f7fd fcbd 	bl	8012460 <HAL_GetTick>
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	693b      	ldr	r3, [r7, #16]
 8014aea:	1ad3      	subs	r3, r2, r3
 8014aec:	2b02      	cmp	r3, #2
 8014aee:	d901      	bls.n	8014af4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8014af0:	2303      	movs	r3, #3
 8014af2:	e12b      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8014af4:	4b46      	ldr	r3, [pc, #280]	@ (8014c10 <HAL_RCC_ClockConfig+0x28c>)
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d0f0      	beq.n	8014ae2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8014b00:	7dfb      	ldrb	r3, [r7, #23]
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d107      	bne.n	8014b16 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8014b06:	4b41      	ldr	r3, [pc, #260]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014b0e:	f023 0304 	bic.w	r3, r3, #4
 8014b12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8014b16:	4b3d      	ldr	r3, [pc, #244]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d121      	bne.n	8014b66 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8014b22:	2301      	movs	r3, #1
 8014b24:	e112      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d107      	bne.n	8014b3e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014b2e:	4b37      	ldr	r3, [pc, #220]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d115      	bne.n	8014b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	e106      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d107      	bne.n	8014b56 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8014b46:	4b31      	ldr	r3, [pc, #196]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	f003 0304 	and.w	r3, r3, #4
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d109      	bne.n	8014b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8014b52:	2301      	movs	r3, #1
 8014b54:	e0fa      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014b56:	4b2d      	ldr	r3, [pc, #180]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d101      	bne.n	8014b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8014b62:	2301      	movs	r3, #1
 8014b64:	e0f2      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8014b66:	4b29      	ldr	r3, [pc, #164]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014b68:	69db      	ldr	r3, [r3, #28]
 8014b6a:	f023 0203 	bic.w	r2, r3, #3
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	685b      	ldr	r3, [r3, #4]
 8014b72:	4926      	ldr	r1, [pc, #152]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014b74:	4313      	orrs	r3, r2
 8014b76:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8014b78:	f7fd fc72 	bl	8012460 <HAL_GetTick>
 8014b7c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	2b03      	cmp	r3, #3
 8014b84:	d112      	bne.n	8014bac <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014b86:	e00a      	b.n	8014b9e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014b88:	f7fd fc6a 	bl	8012460 <HAL_GetTick>
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	693b      	ldr	r3, [r7, #16]
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014b96:	4293      	cmp	r3, r2
 8014b98:	d901      	bls.n	8014b9e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8014b9a:	2303      	movs	r3, #3
 8014b9c:	e0d6      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014ba0:	69db      	ldr	r3, [r3, #28]
 8014ba2:	f003 030c 	and.w	r3, r3, #12
 8014ba6:	2b0c      	cmp	r3, #12
 8014ba8:	d1ee      	bne.n	8014b88 <HAL_RCC_ClockConfig+0x204>
 8014baa:	e044      	b.n	8014c36 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	2b02      	cmp	r3, #2
 8014bb2:	d112      	bne.n	8014bda <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014bb4:	e00a      	b.n	8014bcc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014bb6:	f7fd fc53 	bl	8012460 <HAL_GetTick>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	693b      	ldr	r3, [r7, #16]
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	d901      	bls.n	8014bcc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8014bc8:	2303      	movs	r3, #3
 8014bca:	e0bf      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014bce:	69db      	ldr	r3, [r3, #28]
 8014bd0:	f003 030c 	and.w	r3, r3, #12
 8014bd4:	2b08      	cmp	r3, #8
 8014bd6:	d1ee      	bne.n	8014bb6 <HAL_RCC_ClockConfig+0x232>
 8014bd8:	e02d      	b.n	8014c36 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d123      	bne.n	8014c2a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014be2:	e00a      	b.n	8014bfa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014be4:	f7fd fc3c 	bl	8012460 <HAL_GetTick>
 8014be8:	4602      	mov	r2, r0
 8014bea:	693b      	ldr	r3, [r7, #16]
 8014bec:	1ad3      	subs	r3, r2, r3
 8014bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	d901      	bls.n	8014bfa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8014bf6:	2303      	movs	r3, #3
 8014bf8:	e0a8      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014bfa:	4b04      	ldr	r3, [pc, #16]	@ (8014c0c <HAL_RCC_ClockConfig+0x288>)
 8014bfc:	69db      	ldr	r3, [r3, #28]
 8014bfe:	f003 030c 	and.w	r3, r3, #12
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d1ee      	bne.n	8014be4 <HAL_RCC_ClockConfig+0x260>
 8014c06:	e016      	b.n	8014c36 <HAL_RCC_ClockConfig+0x2b2>
 8014c08:	40022000 	.word	0x40022000
 8014c0c:	46020c00 	.word	0x46020c00
 8014c10:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014c14:	f7fd fc24 	bl	8012460 <HAL_GetTick>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	1ad3      	subs	r3, r2, r3
 8014c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014c22:	4293      	cmp	r3, r2
 8014c24:	d901      	bls.n	8014c2a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8014c26:	2303      	movs	r3, #3
 8014c28:	e090      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014c2c:	69db      	ldr	r3, [r3, #28]
 8014c2e:	f003 030c 	and.w	r3, r3, #12
 8014c32:	2b04      	cmp	r3, #4
 8014c34:	d1ee      	bne.n	8014c14 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	f003 0302 	and.w	r3, r3, #2
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d010      	beq.n	8014c64 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	689a      	ldr	r2, [r3, #8]
 8014c46:	4b43      	ldr	r3, [pc, #268]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014c48:	6a1b      	ldr	r3, [r3, #32]
 8014c4a:	f003 030f 	and.w	r3, r3, #15
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d208      	bcs.n	8014c64 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8014c52:	4b40      	ldr	r3, [pc, #256]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014c54:	6a1b      	ldr	r3, [r3, #32]
 8014c56:	f023 020f 	bic.w	r2, r3, #15
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	689b      	ldr	r3, [r3, #8]
 8014c5e:	493d      	ldr	r1, [pc, #244]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014c60:	4313      	orrs	r3, r2
 8014c62:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014c64:	4b3c      	ldr	r3, [pc, #240]	@ (8014d58 <HAL_RCC_ClockConfig+0x3d4>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f003 030f 	and.w	r3, r3, #15
 8014c6c:	683a      	ldr	r2, [r7, #0]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d210      	bcs.n	8014c94 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014c72:	4b39      	ldr	r3, [pc, #228]	@ (8014d58 <HAL_RCC_ClockConfig+0x3d4>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f023 020f 	bic.w	r2, r3, #15
 8014c7a:	4937      	ldr	r1, [pc, #220]	@ (8014d58 <HAL_RCC_ClockConfig+0x3d4>)
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	4313      	orrs	r3, r2
 8014c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014c82:	4b35      	ldr	r3, [pc, #212]	@ (8014d58 <HAL_RCC_ClockConfig+0x3d4>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	f003 030f 	and.w	r3, r3, #15
 8014c8a:	683a      	ldr	r2, [r7, #0]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d001      	beq.n	8014c94 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8014c90:	2301      	movs	r3, #1
 8014c92:	e05b      	b.n	8014d4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	f003 0304 	and.w	r3, r3, #4
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d010      	beq.n	8014cc2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	68da      	ldr	r2, [r3, #12]
 8014ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014ca6:	6a1b      	ldr	r3, [r3, #32]
 8014ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d208      	bcs.n	8014cc2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8014cb0:	4b28      	ldr	r3, [pc, #160]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014cb2:	6a1b      	ldr	r3, [r3, #32]
 8014cb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	4925      	ldr	r1, [pc, #148]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014cbe:	4313      	orrs	r3, r2
 8014cc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	f003 0308 	and.w	r3, r3, #8
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d012      	beq.n	8014cf4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	691a      	ldr	r2, [r3, #16]
 8014cd2:	4b20      	ldr	r3, [pc, #128]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014cd4:	6a1b      	ldr	r3, [r3, #32]
 8014cd6:	091b      	lsrs	r3, r3, #4
 8014cd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d209      	bcs.n	8014cf4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8014ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014ce2:	6a1b      	ldr	r3, [r3, #32]
 8014ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	691b      	ldr	r3, [r3, #16]
 8014cec:	011b      	lsls	r3, r3, #4
 8014cee:	4919      	ldr	r1, [pc, #100]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014cf0:	4313      	orrs	r3, r2
 8014cf2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	f003 0310 	and.w	r3, r3, #16
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d010      	beq.n	8014d22 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	695a      	ldr	r2, [r3, #20]
 8014d04:	4b13      	ldr	r3, [pc, #76]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d208      	bcs.n	8014d22 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8014d10:	4b10      	ldr	r3, [pc, #64]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	695b      	ldr	r3, [r3, #20]
 8014d1c:	490d      	ldr	r1, [pc, #52]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014d1e:	4313      	orrs	r3, r2
 8014d20:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8014d22:	f000 f821 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8014d26:	4602      	mov	r2, r0
 8014d28:	4b0a      	ldr	r3, [pc, #40]	@ (8014d54 <HAL_RCC_ClockConfig+0x3d0>)
 8014d2a:	6a1b      	ldr	r3, [r3, #32]
 8014d2c:	f003 030f 	and.w	r3, r3, #15
 8014d30:	490a      	ldr	r1, [pc, #40]	@ (8014d5c <HAL_RCC_ClockConfig+0x3d8>)
 8014d32:	5ccb      	ldrb	r3, [r1, r3]
 8014d34:	fa22 f303 	lsr.w	r3, r2, r3
 8014d38:	4a09      	ldr	r2, [pc, #36]	@ (8014d60 <HAL_RCC_ClockConfig+0x3dc>)
 8014d3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014d3c:	4b09      	ldr	r3, [pc, #36]	@ (8014d64 <HAL_RCC_ClockConfig+0x3e0>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7fc fed7 	bl	8011af4 <HAL_InitTick>
 8014d46:	4603      	mov	r3, r0
 8014d48:	73fb      	strb	r3, [r7, #15]

  return status;
 8014d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3718      	adds	r7, #24
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}
 8014d54:	46020c00 	.word	0x46020c00
 8014d58:	40022000 	.word	0x40022000
 8014d5c:	080254a4 	.word	0x080254a4
 8014d60:	20000034 	.word	0x20000034
 8014d64:	20000038 	.word	0x20000038

08014d68 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014d68:	b480      	push	{r7}
 8014d6a:	b08b      	sub	sp, #44	@ 0x2c
 8014d6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8014d72:	2300      	movs	r3, #0
 8014d74:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014d76:	4b78      	ldr	r3, [pc, #480]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014d78:	69db      	ldr	r3, [r3, #28]
 8014d7a:	f003 030c 	and.w	r3, r3, #12
 8014d7e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014d80:	4b75      	ldr	r3, [pc, #468]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d84:	f003 0303 	and.w	r3, r3, #3
 8014d88:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d005      	beq.n	8014d9c <HAL_RCC_GetSysClockFreq+0x34>
 8014d90:	69bb      	ldr	r3, [r7, #24]
 8014d92:	2b0c      	cmp	r3, #12
 8014d94:	d121      	bne.n	8014dda <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	2b01      	cmp	r3, #1
 8014d9a:	d11e      	bne.n	8014dda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8014d9c:	4b6e      	ldr	r3, [pc, #440]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014d9e:	689b      	ldr	r3, [r3, #8]
 8014da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d107      	bne.n	8014db8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8014da8:	4b6b      	ldr	r3, [pc, #428]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8014dae:	0b1b      	lsrs	r3, r3, #12
 8014db0:	f003 030f 	and.w	r3, r3, #15
 8014db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014db6:	e005      	b.n	8014dc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8014db8:	4b67      	ldr	r3, [pc, #412]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014dba:	689b      	ldr	r3, [r3, #8]
 8014dbc:	0f1b      	lsrs	r3, r3, #28
 8014dbe:	f003 030f 	and.w	r3, r3, #15
 8014dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8014dc4:	4a65      	ldr	r2, [pc, #404]	@ (8014f5c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8014dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014dcc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014dce:	69bb      	ldr	r3, [r7, #24]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d110      	bne.n	8014df6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8014dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dd6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8014dd8:	e00d      	b.n	8014df6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014dda:	4b5f      	ldr	r3, [pc, #380]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014ddc:	69db      	ldr	r3, [r3, #28]
 8014dde:	f003 030c 	and.w	r3, r3, #12
 8014de2:	2b04      	cmp	r3, #4
 8014de4:	d102      	bne.n	8014dec <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014de6:	4b5e      	ldr	r3, [pc, #376]	@ (8014f60 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8014de8:	623b      	str	r3, [r7, #32]
 8014dea:	e004      	b.n	8014df6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	2b08      	cmp	r3, #8
 8014df0:	d101      	bne.n	8014df6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8014df2:	4b5b      	ldr	r3, [pc, #364]	@ (8014f60 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8014df4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014df6:	69bb      	ldr	r3, [r7, #24]
 8014df8:	2b0c      	cmp	r3, #12
 8014dfa:	f040 80a5 	bne.w	8014f48 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8014dfe:	4b56      	ldr	r3, [pc, #344]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e02:	f003 0303 	and.w	r3, r3, #3
 8014e06:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8014e08:	4b53      	ldr	r3, [pc, #332]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e0c:	0a1b      	lsrs	r3, r3, #8
 8014e0e:	f003 030f 	and.w	r3, r3, #15
 8014e12:	3301      	adds	r3, #1
 8014e14:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8014e16:	4b50      	ldr	r3, [pc, #320]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e1a:	091b      	lsrs	r3, r3, #4
 8014e1c:	f003 0301 	and.w	r3, r3, #1
 8014e20:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8014e22:	4b4d      	ldr	r3, [pc, #308]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e26:	08db      	lsrs	r3, r3, #3
 8014e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e2c:	68ba      	ldr	r2, [r7, #8]
 8014e2e:	fb02 f303 	mul.w	r3, r2, r3
 8014e32:	ee07 3a90 	vmov	s15, r3
 8014e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e3a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	2b02      	cmp	r3, #2
 8014e42:	d003      	beq.n	8014e4c <HAL_RCC_GetSysClockFreq+0xe4>
 8014e44:	693b      	ldr	r3, [r7, #16]
 8014e46:	2b03      	cmp	r3, #3
 8014e48:	d022      	beq.n	8014e90 <HAL_RCC_GetSysClockFreq+0x128>
 8014e4a:	e043      	b.n	8014ed4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	ee07 3a90 	vmov	s15, r3
 8014e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e56:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8014f64 <HAL_RCC_GetSysClockFreq+0x1fc>
 8014e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e66:	ee07 3a90 	vmov	s15, r3
 8014e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8014e6e:	ed97 6a01 	vldr	s12, [r7, #4]
 8014e72:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8014f68 <HAL_RCC_GetSysClockFreq+0x200>
 8014e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8014e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014e8e:	e046      	b.n	8014f1e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	ee07 3a90 	vmov	s15, r3
 8014e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e9a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8014f64 <HAL_RCC_GetSysClockFreq+0x1fc>
 8014e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014eaa:	ee07 3a90 	vmov	s15, r3
 8014eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8014eb2:	ed97 6a01 	vldr	s12, [r7, #4]
 8014eb6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8014f68 <HAL_RCC_GetSysClockFreq+0x200>
 8014eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8014ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014ed2:	e024      	b.n	8014f1e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ed6:	ee07 3a90 	vmov	s15, r3
 8014eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	ee07 3a90 	vmov	s15, r3
 8014ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014eec:	4b1a      	ldr	r3, [pc, #104]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ef4:	ee07 3a90 	vmov	s15, r3
 8014ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8014efc:	ed97 6a01 	vldr	s12, [r7, #4]
 8014f00:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8014f68 <HAL_RCC_GetSysClockFreq+0x200>
 8014f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8014f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8014f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014f1c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8014f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8014f58 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8014f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f22:	0e1b      	lsrs	r3, r3, #24
 8014f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014f28:	3301      	adds	r3, #1
 8014f2a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	ee07 3a90 	vmov	s15, r3
 8014f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8014f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014f42:	ee17 3a90 	vmov	r3, s15
 8014f46:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8014f48:	6a3b      	ldr	r3, [r7, #32]
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	372c      	adds	r7, #44	@ 0x2c
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	46020c00 	.word	0x46020c00
 8014f5c:	080254bc 	.word	0x080254bc
 8014f60:	00f42400 	.word	0x00f42400
 8014f64:	4b742400 	.word	0x4b742400
 8014f68:	46000000 	.word	0x46000000

08014f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8014f70:	f7ff fefa 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8014f74:	4602      	mov	r2, r0
 8014f76:	4b07      	ldr	r3, [pc, #28]	@ (8014f94 <HAL_RCC_GetHCLKFreq+0x28>)
 8014f78:	6a1b      	ldr	r3, [r3, #32]
 8014f7a:	f003 030f 	and.w	r3, r3, #15
 8014f7e:	4906      	ldr	r1, [pc, #24]	@ (8014f98 <HAL_RCC_GetHCLKFreq+0x2c>)
 8014f80:	5ccb      	ldrb	r3, [r1, r3]
 8014f82:	fa22 f303 	lsr.w	r3, r2, r3
 8014f86:	4a05      	ldr	r2, [pc, #20]	@ (8014f9c <HAL_RCC_GetHCLKFreq+0x30>)
 8014f88:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8014f8a:	4b04      	ldr	r3, [pc, #16]	@ (8014f9c <HAL_RCC_GetHCLKFreq+0x30>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	46020c00 	.word	0x46020c00
 8014f98:	080254a4 	.word	0x080254a4
 8014f9c:	20000034 	.word	0x20000034

08014fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8014fa4:	f7ff ffe2 	bl	8014f6c <HAL_RCC_GetHCLKFreq>
 8014fa8:	4602      	mov	r2, r0
 8014faa:	4b05      	ldr	r3, [pc, #20]	@ (8014fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014fac:	6a1b      	ldr	r3, [r3, #32]
 8014fae:	091b      	lsrs	r3, r3, #4
 8014fb0:	f003 0307 	and.w	r3, r3, #7
 8014fb4:	4903      	ldr	r1, [pc, #12]	@ (8014fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014fb6:	5ccb      	ldrb	r3, [r1, r3]
 8014fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	46020c00 	.word	0x46020c00
 8014fc4:	080254b4 	.word	0x080254b4

08014fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8014fcc:	f7ff ffce 	bl	8014f6c <HAL_RCC_GetHCLKFreq>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	4b05      	ldr	r3, [pc, #20]	@ (8014fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8014fd4:	6a1b      	ldr	r3, [r3, #32]
 8014fd6:	0a1b      	lsrs	r3, r3, #8
 8014fd8:	f003 0307 	and.w	r3, r3, #7
 8014fdc:	4903      	ldr	r1, [pc, #12]	@ (8014fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8014fde:	5ccb      	ldrb	r3, [r1, r3]
 8014fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	46020c00 	.word	0x46020c00
 8014fec:	080254b4 	.word	0x080254b4

08014ff0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8014ff4:	f7ff ffba 	bl	8014f6c <HAL_RCC_GetHCLKFreq>
 8014ff8:	4602      	mov	r2, r0
 8014ffa:	4b05      	ldr	r3, [pc, #20]	@ (8015010 <HAL_RCC_GetPCLK3Freq+0x20>)
 8014ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ffe:	091b      	lsrs	r3, r3, #4
 8015000:	f003 0307 	and.w	r3, r3, #7
 8015004:	4903      	ldr	r1, [pc, #12]	@ (8015014 <HAL_RCC_GetPCLK3Freq+0x24>)
 8015006:	5ccb      	ldrb	r3, [r1, r3]
 8015008:	fa22 f303 	lsr.w	r3, r2, r3
}
 801500c:	4618      	mov	r0, r3
 801500e:	bd80      	pop	{r7, pc}
 8015010:	46020c00 	.word	0x46020c00
 8015014:	080254b4 	.word	0x080254b4

08015018 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015018:	b480      	push	{r7}
 801501a:	b083      	sub	sp, #12
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	221f      	movs	r2, #31
 8015026:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8015028:	4b15      	ldr	r3, [pc, #84]	@ (8015080 <HAL_RCC_GetClockConfig+0x68>)
 801502a:	69db      	ldr	r3, [r3, #28]
 801502c:	f003 0203 	and.w	r2, r3, #3
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8015034:	4b12      	ldr	r3, [pc, #72]	@ (8015080 <HAL_RCC_GetClockConfig+0x68>)
 8015036:	6a1b      	ldr	r3, [r3, #32]
 8015038:	f003 020f 	and.w	r2, r3, #15
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8015040:	4b0f      	ldr	r3, [pc, #60]	@ (8015080 <HAL_RCC_GetClockConfig+0x68>)
 8015042:	6a1b      	ldr	r3, [r3, #32]
 8015044:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 801504c:	4b0c      	ldr	r3, [pc, #48]	@ (8015080 <HAL_RCC_GetClockConfig+0x68>)
 801504e:	6a1b      	ldr	r3, [r3, #32]
 8015050:	091b      	lsrs	r3, r3, #4
 8015052:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 801505a:	4b09      	ldr	r3, [pc, #36]	@ (8015080 <HAL_RCC_GetClockConfig+0x68>)
 801505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801505e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8015066:	4b07      	ldr	r3, [pc, #28]	@ (8015084 <HAL_RCC_GetClockConfig+0x6c>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	f003 020f 	and.w	r2, r3, #15
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	601a      	str	r2, [r3, #0]
}
 8015072:	bf00      	nop
 8015074:	370c      	adds	r7, #12
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	46020c00 	.word	0x46020c00
 8015084:	40022000 	.word	0x40022000

08015088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b086      	sub	sp, #24
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8015090:	4b3e      	ldr	r3, [pc, #248]	@ (801518c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8015092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015096:	f003 0304 	and.w	r3, r3, #4
 801509a:	2b00      	cmp	r3, #0
 801509c:	d003      	beq.n	80150a6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801509e:	f7fe fd17 	bl	8013ad0 <HAL_PWREx_GetVoltageRange>
 80150a2:	6178      	str	r0, [r7, #20]
 80150a4:	e019      	b.n	80150da <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80150a6:	4b39      	ldr	r3, [pc, #228]	@ (801518c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80150a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80150ac:	4a37      	ldr	r2, [pc, #220]	@ (801518c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80150ae:	f043 0304 	orr.w	r3, r3, #4
 80150b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80150b6:	4b35      	ldr	r3, [pc, #212]	@ (801518c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80150b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80150bc:	f003 0304 	and.w	r3, r3, #4
 80150c0:	60fb      	str	r3, [r7, #12]
 80150c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80150c4:	f7fe fd04 	bl	8013ad0 <HAL_PWREx_GetVoltageRange>
 80150c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80150ca:	4b30      	ldr	r3, [pc, #192]	@ (801518c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80150cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80150d0:	4a2e      	ldr	r2, [pc, #184]	@ (801518c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80150d2:	f023 0304 	bic.w	r3, r3, #4
 80150d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80150e0:	d003      	beq.n	80150ea <RCC_SetFlashLatencyFromMSIRange+0x62>
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80150e8:	d109      	bne.n	80150fe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80150f0:	d202      	bcs.n	80150f8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80150f2:	2301      	movs	r3, #1
 80150f4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80150f6:	e033      	b.n	8015160 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80150f8:	2300      	movs	r3, #0
 80150fa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80150fc:	e030      	b.n	8015160 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015104:	d208      	bcs.n	8015118 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801510c:	d102      	bne.n	8015114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 801510e:	2303      	movs	r3, #3
 8015110:	613b      	str	r3, [r7, #16]
 8015112:	e025      	b.n	8015160 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8015114:	2301      	movs	r3, #1
 8015116:	e035      	b.n	8015184 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801511e:	d90f      	bls.n	8015140 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d109      	bne.n	801513a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801512c:	d902      	bls.n	8015134 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 801512e:	2300      	movs	r3, #0
 8015130:	613b      	str	r3, [r7, #16]
 8015132:	e015      	b.n	8015160 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8015134:	2301      	movs	r3, #1
 8015136:	613b      	str	r3, [r7, #16]
 8015138:	e012      	b.n	8015160 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 801513a:	2300      	movs	r3, #0
 801513c:	613b      	str	r3, [r7, #16]
 801513e:	e00f      	b.n	8015160 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015146:	d109      	bne.n	801515c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801514e:	d102      	bne.n	8015156 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8015150:	2301      	movs	r3, #1
 8015152:	613b      	str	r3, [r7, #16]
 8015154:	e004      	b.n	8015160 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8015156:	2302      	movs	r3, #2
 8015158:	613b      	str	r3, [r7, #16]
 801515a:	e001      	b.n	8015160 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 801515c:	2301      	movs	r3, #1
 801515e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8015160:	4b0b      	ldr	r3, [pc, #44]	@ (8015190 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f023 020f 	bic.w	r2, r3, #15
 8015168:	4909      	ldr	r1, [pc, #36]	@ (8015190 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	4313      	orrs	r3, r2
 801516e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8015170:	4b07      	ldr	r3, [pc, #28]	@ (8015190 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	f003 030f 	and.w	r3, r3, #15
 8015178:	693a      	ldr	r2, [r7, #16]
 801517a:	429a      	cmp	r2, r3
 801517c:	d001      	beq.n	8015182 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 801517e:	2301      	movs	r3, #1
 8015180:	e000      	b.n	8015184 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8015182:	2300      	movs	r3, #0
}
 8015184:	4618      	mov	r0, r3
 8015186:	3718      	adds	r7, #24
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	46020c00 	.word	0x46020c00
 8015190:	40022000 	.word	0x40022000

08015194 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8015194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015198:	b0b8      	sub	sp, #224	@ 0xe0
 801519a:	af00      	add	r7, sp, #0
 801519c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80151a0:	2300      	movs	r3, #0
 80151a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80151a6:	2300      	movs	r3, #0
 80151a8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80151ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80151b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b4:	f002 0401 	and.w	r4, r2, #1
 80151b8:	2500      	movs	r5, #0
 80151ba:	ea54 0305 	orrs.w	r3, r4, r5
 80151be:	d00b      	beq.n	80151d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80151c0:	4bca      	ldr	r3, [pc, #808]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80151c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80151c6:	f023 0103 	bic.w	r1, r3, #3
 80151ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80151ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151d0:	4ac6      	ldr	r2, [pc, #792]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80151d2:	430b      	orrs	r3, r1
 80151d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80151d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80151dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e0:	f002 0802 	and.w	r8, r2, #2
 80151e4:	f04f 0900 	mov.w	r9, #0
 80151e8:	ea58 0309 	orrs.w	r3, r8, r9
 80151ec:	d00b      	beq.n	8015206 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80151ee:	4bbf      	ldr	r3, [pc, #764]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80151f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80151f4:	f023 010c 	bic.w	r1, r3, #12
 80151f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80151fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80151fe:	4abb      	ldr	r2, [pc, #748]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8015200:	430b      	orrs	r3, r1
 8015202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8015206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520e:	f002 0a04 	and.w	sl, r2, #4
 8015212:	f04f 0b00 	mov.w	fp, #0
 8015216:	ea5a 030b 	orrs.w	r3, sl, fp
 801521a:	d00b      	beq.n	8015234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 801521c:	4bb3      	ldr	r3, [pc, #716]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801521e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015222:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8015226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801522a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801522c:	4aaf      	ldr	r2, [pc, #700]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801522e:	430b      	orrs	r3, r1
 8015230:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8015234:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801523c:	f002 0308 	and.w	r3, r2, #8
 8015240:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015244:	2300      	movs	r3, #0
 8015246:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801524a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801524e:	460b      	mov	r3, r1
 8015250:	4313      	orrs	r3, r2
 8015252:	d00b      	beq.n	801526c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8015254:	4ba5      	ldr	r3, [pc, #660]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8015256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801525a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 801525e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015264:	4aa1      	ldr	r2, [pc, #644]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8015266:	430b      	orrs	r3, r1
 8015268:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801526c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015274:	f002 0310 	and.w	r3, r2, #16
 8015278:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801527c:	2300      	movs	r3, #0
 801527e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015282:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8015286:	460b      	mov	r3, r1
 8015288:	4313      	orrs	r3, r2
 801528a:	d00b      	beq.n	80152a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 801528c:	4b97      	ldr	r3, [pc, #604]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801528e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015292:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8015296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801529a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801529c:	4a93      	ldr	r2, [pc, #588]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801529e:	430b      	orrs	r3, r1
 80152a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80152a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80152a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ac:	f002 0320 	and.w	r3, r2, #32
 80152b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80152b4:	2300      	movs	r3, #0
 80152b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80152ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80152be:	460b      	mov	r3, r1
 80152c0:	4313      	orrs	r3, r2
 80152c2:	d00b      	beq.n	80152dc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80152c4:	4b89      	ldr	r3, [pc, #548]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80152c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80152ca:	f023 0107 	bic.w	r1, r3, #7
 80152ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80152d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152d4:	4a85      	ldr	r2, [pc, #532]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80152d6:	430b      	orrs	r3, r1
 80152d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80152dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80152e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80152e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80152ec:	2300      	movs	r3, #0
 80152ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80152f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80152f6:	460b      	mov	r3, r1
 80152f8:	4313      	orrs	r3, r2
 80152fa:	d00b      	beq.n	8015314 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80152fc:	4b7b      	ldr	r3, [pc, #492]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80152fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015302:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8015306:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801530a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801530c:	4a77      	ldr	r2, [pc, #476]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801530e:	430b      	orrs	r3, r1
 8015310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8015314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8015320:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015324:	2300      	movs	r3, #0
 8015326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801532a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801532e:	460b      	mov	r3, r1
 8015330:	4313      	orrs	r3, r2
 8015332:	d00b      	beq.n	801534c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8015334:	4b6d      	ldr	r3, [pc, #436]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8015336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801533a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801533e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015344:	4a69      	ldr	r2, [pc, #420]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8015346:	430b      	orrs	r3, r1
 8015348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801534c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015354:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8015358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801535c:	2300      	movs	r3, #0
 801535e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015362:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8015366:	460b      	mov	r3, r1
 8015368:	4313      	orrs	r3, r2
 801536a:	d00b      	beq.n	8015384 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 801536c:	4b5f      	ldr	r3, [pc, #380]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801536e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8015372:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8015376:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801537a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801537c:	4a5b      	ldr	r2, [pc, #364]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801537e:	430b      	orrs	r3, r1
 8015380:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8015384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8015390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015394:	2300      	movs	r3, #0
 8015396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801539a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801539e:	460b      	mov	r3, r1
 80153a0:	4313      	orrs	r3, r2
 80153a2:	d00b      	beq.n	80153bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80153a4:	4b51      	ldr	r3, [pc, #324]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80153a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80153aa:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80153ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80153b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153b4:	4a4d      	ldr	r2, [pc, #308]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80153b6:	430b      	orrs	r3, r1
 80153b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80153bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80153c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80153c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80153cc:	2300      	movs	r3, #0
 80153ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80153d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80153d6:	460b      	mov	r3, r1
 80153d8:	4313      	orrs	r3, r2
 80153da:	d00b      	beq.n	80153f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80153dc:	4b43      	ldr	r3, [pc, #268]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80153de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80153e2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80153e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80153ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80153ec:	4a3f      	ldr	r2, [pc, #252]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80153ee:	430b      	orrs	r3, r1
 80153f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80153f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80153f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8015400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8015404:	2300      	movs	r3, #0
 8015406:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801540a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801540e:	460b      	mov	r3, r1
 8015410:	4313      	orrs	r3, r2
 8015412:	d00b      	beq.n	801542c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8015414:	4b35      	ldr	r3, [pc, #212]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8015416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801541a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 801541e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015424:	4a31      	ldr	r2, [pc, #196]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8015426:	430b      	orrs	r3, r1
 8015428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 801542c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015434:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8015438:	67bb      	str	r3, [r7, #120]	@ 0x78
 801543a:	2300      	movs	r3, #0
 801543c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801543e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8015442:	460b      	mov	r3, r1
 8015444:	4313      	orrs	r3, r2
 8015446:	d00c      	beq.n	8015462 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8015448:	4b28      	ldr	r3, [pc, #160]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801544a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801544e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8015452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801545a:	4a24      	ldr	r2, [pc, #144]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801545c:	430b      	orrs	r3, r1
 801545e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8015462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801546a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801546e:	673b      	str	r3, [r7, #112]	@ 0x70
 8015470:	2300      	movs	r3, #0
 8015472:	677b      	str	r3, [r7, #116]	@ 0x74
 8015474:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8015478:	460b      	mov	r3, r1
 801547a:	4313      	orrs	r3, r2
 801547c:	d04f      	beq.n	801551e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 801547e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015486:	2b80      	cmp	r3, #128	@ 0x80
 8015488:	d02d      	beq.n	80154e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 801548a:	2b80      	cmp	r3, #128	@ 0x80
 801548c:	d827      	bhi.n	80154de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801548e:	2b60      	cmp	r3, #96	@ 0x60
 8015490:	d02e      	beq.n	80154f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8015492:	2b60      	cmp	r3, #96	@ 0x60
 8015494:	d823      	bhi.n	80154de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8015496:	2b40      	cmp	r3, #64	@ 0x40
 8015498:	d006      	beq.n	80154a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 801549a:	2b40      	cmp	r3, #64	@ 0x40
 801549c:	d81f      	bhi.n	80154de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d009      	beq.n	80154b6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80154a2:	2b20      	cmp	r3, #32
 80154a4:	d011      	beq.n	80154ca <HAL_RCCEx_PeriphCLKConfig+0x336>
 80154a6:	e01a      	b.n	80154de <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80154a8:	4b10      	ldr	r3, [pc, #64]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80154aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154ac:	4a0f      	ldr	r2, [pc, #60]	@ (80154ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80154ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80154b2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80154b4:	e01d      	b.n	80154f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80154b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80154ba:	3308      	adds	r3, #8
 80154bc:	4618      	mov	r0, r3
 80154be:	f002 f9d1 	bl	8017864 <RCCEx_PLL2_Config>
 80154c2:	4603      	mov	r3, r0
 80154c4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80154c8:	e013      	b.n	80154f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80154ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80154ce:	332c      	adds	r3, #44	@ 0x2c
 80154d0:	4618      	mov	r0, r3
 80154d2:	f002 fa5f 	bl	8017994 <RCCEx_PLL3_Config>
 80154d6:	4603      	mov	r3, r0
 80154d8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80154dc:	e009      	b.n	80154f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80154de:	2301      	movs	r3, #1
 80154e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80154e4:	e005      	b.n	80154f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80154e6:	bf00      	nop
 80154e8:	e003      	b.n	80154f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80154ea:	bf00      	nop
 80154ec:	46020c00 	.word	0x46020c00
        break;
 80154f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80154f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d10d      	bne.n	8015516 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80154fa:	4bb6      	ldr	r3, [pc, #728]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80154fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015500:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8015504:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801550c:	4ab1      	ldr	r2, [pc, #708]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801550e:	430b      	orrs	r3, r1
 8015510:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8015514:	e003      	b.n	801551e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015516:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801551a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801551e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015526:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801552a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801552c:	2300      	movs	r3, #0
 801552e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015530:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8015534:	460b      	mov	r3, r1
 8015536:	4313      	orrs	r3, r2
 8015538:	d053      	beq.n	80155e2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 801553a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801553e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015546:	d033      	beq.n	80155b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8015548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801554c:	d82c      	bhi.n	80155a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 801554e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015552:	d02f      	beq.n	80155b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8015554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015558:	d826      	bhi.n	80155a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 801555a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801555e:	d008      	beq.n	8015572 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8015560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015564:	d820      	bhi.n	80155a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8015566:	2b00      	cmp	r3, #0
 8015568:	d00a      	beq.n	8015580 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 801556a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801556e:	d011      	beq.n	8015594 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8015570:	e01a      	b.n	80155a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8015572:	4b98      	ldr	r3, [pc, #608]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8015574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015576:	4a97      	ldr	r2, [pc, #604]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8015578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801557c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 801557e:	e01a      	b.n	80155b6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015584:	3308      	adds	r3, #8
 8015586:	4618      	mov	r0, r3
 8015588:	f002 f96c 	bl	8017864 <RCCEx_PLL2_Config>
 801558c:	4603      	mov	r3, r0
 801558e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8015592:	e010      	b.n	80155b6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015598:	332c      	adds	r3, #44	@ 0x2c
 801559a:	4618      	mov	r0, r3
 801559c:	f002 f9fa 	bl	8017994 <RCCEx_PLL3_Config>
 80155a0:	4603      	mov	r3, r0
 80155a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80155a6:	e006      	b.n	80155b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80155a8:	2301      	movs	r3, #1
 80155aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80155ae:	e002      	b.n	80155b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80155b0:	bf00      	nop
 80155b2:	e000      	b.n	80155b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80155b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80155b6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d10d      	bne.n	80155da <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80155be:	4b85      	ldr	r3, [pc, #532]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80155c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80155c4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80155c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80155cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80155d0:	4a80      	ldr	r2, [pc, #512]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80155d2:	430b      	orrs	r3, r1
 80155d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80155d8:	e003      	b.n	80155e2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80155da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80155de:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80155e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80155e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ea:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80155ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80155f0:	2300      	movs	r3, #0
 80155f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80155f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80155f8:	460b      	mov	r3, r1
 80155fa:	4313      	orrs	r3, r2
 80155fc:	d046      	beq.n	801568c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80155fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015606:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801560a:	d028      	beq.n	801565e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 801560c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8015610:	d821      	bhi.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8015612:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015616:	d022      	beq.n	801565e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8015618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801561c:	d81b      	bhi.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801561e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015622:	d01c      	beq.n	801565e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8015624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015628:	d815      	bhi.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801562a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801562e:	d008      	beq.n	8015642 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8015630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015634:	d80f      	bhi.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8015636:	2b00      	cmp	r3, #0
 8015638:	d011      	beq.n	801565e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 801563a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801563e:	d00e      	beq.n	801565e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8015640:	e009      	b.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015642:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015646:	3308      	adds	r3, #8
 8015648:	4618      	mov	r0, r3
 801564a:	f002 f90b 	bl	8017864 <RCCEx_PLL2_Config>
 801564e:	4603      	mov	r3, r0
 8015650:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8015654:	e004      	b.n	8015660 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8015656:	2301      	movs	r3, #1
 8015658:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801565c:	e000      	b.n	8015660 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 801565e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015660:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015664:	2b00      	cmp	r3, #0
 8015666:	d10d      	bne.n	8015684 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8015668:	4b5a      	ldr	r3, [pc, #360]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801566a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801566e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8015672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801567a:	4a56      	ldr	r2, [pc, #344]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801567c:	430b      	orrs	r3, r1
 801567e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8015682:	e003      	b.n	801568c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015684:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015688:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 801568c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015694:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8015698:	65bb      	str	r3, [r7, #88]	@ 0x58
 801569a:	2300      	movs	r3, #0
 801569c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801569e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80156a2:	460b      	mov	r3, r1
 80156a4:	4313      	orrs	r3, r2
 80156a6:	d03f      	beq.n	8015728 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80156a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80156ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80156b0:	2b04      	cmp	r3, #4
 80156b2:	d81e      	bhi.n	80156f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80156b4:	a201      	add	r2, pc, #4	@ (adr r2, 80156bc <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80156b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156ba:	bf00      	nop
 80156bc:	080156fb 	.word	0x080156fb
 80156c0:	080156d1 	.word	0x080156d1
 80156c4:	080156df 	.word	0x080156df
 80156c8:	080156fb 	.word	0x080156fb
 80156cc:	080156fb 	.word	0x080156fb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80156d0:	4b40      	ldr	r3, [pc, #256]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80156d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156d4:	4a3f      	ldr	r2, [pc, #252]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80156d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80156da:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80156dc:	e00e      	b.n	80156fc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80156de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80156e2:	332c      	adds	r3, #44	@ 0x2c
 80156e4:	4618      	mov	r0, r3
 80156e6:	f002 f955 	bl	8017994 <RCCEx_PLL3_Config>
 80156ea:	4603      	mov	r3, r0
 80156ec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80156f0:	e004      	b.n	80156fc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80156f2:	2301      	movs	r3, #1
 80156f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80156f8:	e000      	b.n	80156fc <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80156fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80156fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015700:	2b00      	cmp	r3, #0
 8015702:	d10d      	bne.n	8015720 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8015704:	4b33      	ldr	r3, [pc, #204]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8015706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801570a:	f023 0107 	bic.w	r1, r3, #7
 801570e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015716:	4a2f      	ldr	r2, [pc, #188]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8015718:	430b      	orrs	r3, r1
 801571a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 801571e:	e003      	b.n	8015728 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015720:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015724:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8015728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015730:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8015734:	653b      	str	r3, [r7, #80]	@ 0x50
 8015736:	2300      	movs	r3, #0
 8015738:	657b      	str	r3, [r7, #84]	@ 0x54
 801573a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801573e:	460b      	mov	r3, r1
 8015740:	4313      	orrs	r3, r2
 8015742:	d04d      	beq.n	80157e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8015744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801574c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015750:	d028      	beq.n	80157a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8015752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015756:	d821      	bhi.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8015758:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801575c:	d024      	beq.n	80157a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 801575e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015762:	d81b      	bhi.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8015764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015768:	d00e      	beq.n	8015788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 801576a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801576e:	d815      	bhi.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8015770:	2b00      	cmp	r3, #0
 8015772:	d01b      	beq.n	80157ac <HAL_RCCEx_PeriphCLKConfig+0x618>
 8015774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015778:	d110      	bne.n	801579c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801577a:	4b16      	ldr	r3, [pc, #88]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801577e:	4a15      	ldr	r2, [pc, #84]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8015780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015784:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8015786:	e012      	b.n	80157ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8015788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801578c:	332c      	adds	r3, #44	@ 0x2c
 801578e:	4618      	mov	r0, r3
 8015790:	f002 f900 	bl	8017994 <RCCEx_PLL3_Config>
 8015794:	4603      	mov	r3, r0
 8015796:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801579a:	e008      	b.n	80157ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 801579c:	2301      	movs	r3, #1
 801579e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80157a2:	e004      	b.n	80157ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80157a4:	bf00      	nop
 80157a6:	e002      	b.n	80157ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80157a8:	bf00      	nop
 80157aa:	e000      	b.n	80157ae <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80157ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80157ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d110      	bne.n	80157d8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80157b6:	4b07      	ldr	r3, [pc, #28]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80157b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80157bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80157c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80157c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80157c8:	4a02      	ldr	r2, [pc, #8]	@ (80157d4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80157ca:	430b      	orrs	r3, r1
 80157cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80157d0:	e006      	b.n	80157e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80157d2:	bf00      	nop
 80157d4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80157dc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80157e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80157e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80157ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80157ee:	2300      	movs	r3, #0
 80157f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80157f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80157f6:	460b      	mov	r3, r1
 80157f8:	4313      	orrs	r3, r2
 80157fa:	f000 80b5 	beq.w	8015968 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80157fe:	2300      	movs	r3, #0
 8015800:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015804:	4b9d      	ldr	r3, [pc, #628]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8015806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801580a:	f003 0304 	and.w	r3, r3, #4
 801580e:	2b00      	cmp	r3, #0
 8015810:	d113      	bne.n	801583a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015812:	4b9a      	ldr	r3, [pc, #616]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8015814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015818:	4a98      	ldr	r2, [pc, #608]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801581a:	f043 0304 	orr.w	r3, r3, #4
 801581e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8015822:	4b96      	ldr	r3, [pc, #600]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8015824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015828:	f003 0304 	and.w	r3, r3, #4
 801582c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015830:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8015834:	2301      	movs	r3, #1
 8015836:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 801583a:	4b91      	ldr	r3, [pc, #580]	@ (8015a80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801583e:	4a90      	ldr	r2, [pc, #576]	@ (8015a80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8015840:	f043 0301 	orr.w	r3, r3, #1
 8015844:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015846:	f7fc fe0b 	bl	8012460 <HAL_GetTick>
 801584a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801584e:	e00b      	b.n	8015868 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015850:	f7fc fe06 	bl	8012460 <HAL_GetTick>
 8015854:	4602      	mov	r2, r0
 8015856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801585a:	1ad3      	subs	r3, r2, r3
 801585c:	2b02      	cmp	r3, #2
 801585e:	d903      	bls.n	8015868 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8015860:	2303      	movs	r3, #3
 8015862:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8015866:	e005      	b.n	8015874 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8015868:	4b85      	ldr	r3, [pc, #532]	@ (8015a80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801586c:	f003 0301 	and.w	r3, r3, #1
 8015870:	2b00      	cmp	r3, #0
 8015872:	d0ed      	beq.n	8015850 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8015874:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015878:	2b00      	cmp	r3, #0
 801587a:	d165      	bne.n	8015948 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801587c:	4b7f      	ldr	r3, [pc, #508]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801587e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8015882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 801588a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801588e:	2b00      	cmp	r3, #0
 8015890:	d023      	beq.n	80158da <HAL_RCCEx_PeriphCLKConfig+0x746>
 8015892:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015896:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 801589a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801589e:	4293      	cmp	r3, r2
 80158a0:	d01b      	beq.n	80158da <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80158a2:	4b76      	ldr	r3, [pc, #472]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80158a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80158a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80158ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80158b0:	4b72      	ldr	r3, [pc, #456]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80158b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80158b6:	4a71      	ldr	r2, [pc, #452]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80158b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80158bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80158c0:	4b6e      	ldr	r3, [pc, #440]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80158c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80158c6:	4a6d      	ldr	r2, [pc, #436]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80158c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80158cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80158d0:	4a6a      	ldr	r2, [pc, #424]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80158d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80158d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80158da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80158de:	f003 0301 	and.w	r3, r3, #1
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d019      	beq.n	801591a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80158e6:	f7fc fdbb 	bl	8012460 <HAL_GetTick>
 80158ea:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80158ee:	e00d      	b.n	801590c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80158f0:	f7fc fdb6 	bl	8012460 <HAL_GetTick>
 80158f4:	4602      	mov	r2, r0
 80158f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80158fa:	1ad2      	subs	r2, r2, r3
 80158fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015900:	429a      	cmp	r2, r3
 8015902:	d903      	bls.n	801590c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8015904:	2303      	movs	r3, #3
 8015906:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 801590a:	e006      	b.n	801591a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801590c:	4b5b      	ldr	r3, [pc, #364]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801590e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8015912:	f003 0302 	and.w	r3, r3, #2
 8015916:	2b00      	cmp	r3, #0
 8015918:	d0ea      	beq.n	80158f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 801591a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801591e:	2b00      	cmp	r3, #0
 8015920:	d10d      	bne.n	801593e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8015922:	4b56      	ldr	r3, [pc, #344]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8015924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8015928:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801592c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015930:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015934:	4a51      	ldr	r2, [pc, #324]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8015936:	430b      	orrs	r3, r1
 8015938:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801593c:	e008      	b.n	8015950 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801593e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015942:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8015946:	e003      	b.n	8015950 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015948:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801594c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8015950:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8015954:	2b01      	cmp	r3, #1
 8015956:	d107      	bne.n	8015968 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015958:	4b48      	ldr	r3, [pc, #288]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801595a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801595e:	4a47      	ldr	r2, [pc, #284]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8015960:	f023 0304 	bic.w	r3, r3, #4
 8015964:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8015968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015970:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8015974:	643b      	str	r3, [r7, #64]	@ 0x40
 8015976:	2300      	movs	r3, #0
 8015978:	647b      	str	r3, [r7, #68]	@ 0x44
 801597a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801597e:	460b      	mov	r3, r1
 8015980:	4313      	orrs	r3, r2
 8015982:	d042      	beq.n	8015a0a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8015984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015988:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801598c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8015990:	d022      	beq.n	80159d8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8015992:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8015996:	d81b      	bhi.n	80159d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8015998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801599c:	d011      	beq.n	80159c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 801599e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80159a2:	d815      	bhi.n	80159d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d019      	beq.n	80159dc <HAL_RCCEx_PeriphCLKConfig+0x848>
 80159a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80159ac:	d110      	bne.n	80159d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80159ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80159b2:	3308      	adds	r3, #8
 80159b4:	4618      	mov	r0, r3
 80159b6:	f001 ff55 	bl	8017864 <RCCEx_PLL2_Config>
 80159ba:	4603      	mov	r3, r0
 80159bc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80159c0:	e00d      	b.n	80159de <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80159c2:	4b2e      	ldr	r3, [pc, #184]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80159c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159c6:	4a2d      	ldr	r2, [pc, #180]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80159c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80159cc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80159ce:	e006      	b.n	80159de <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80159d0:	2301      	movs	r3, #1
 80159d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80159d6:	e002      	b.n	80159de <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80159d8:	bf00      	nop
 80159da:	e000      	b.n	80159de <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80159dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80159de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d10d      	bne.n	8015a02 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80159e6:	4b25      	ldr	r3, [pc, #148]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80159e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80159ec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80159f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80159f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80159f8:	4a20      	ldr	r2, [pc, #128]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80159fa:	430b      	orrs	r3, r1
 80159fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015a00:	e003      	b.n	8015a0a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a02:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015a06:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8015a0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a12:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8015a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015a18:	2300      	movs	r3, #0
 8015a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015a1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8015a20:	460b      	mov	r3, r1
 8015a22:	4313      	orrs	r3, r2
 8015a24:	d032      	beq.n	8015a8c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8015a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a32:	d00b      	beq.n	8015a4c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8015a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a38:	d804      	bhi.n	8015a44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d008      	beq.n	8015a50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8015a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015a42:	d007      	beq.n	8015a54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8015a44:	2301      	movs	r3, #1
 8015a46:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8015a4a:	e004      	b.n	8015a56 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8015a4c:	bf00      	nop
 8015a4e:	e002      	b.n	8015a56 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8015a50:	bf00      	nop
 8015a52:	e000      	b.n	8015a56 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8015a54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8015a56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d112      	bne.n	8015a84 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8015a5e:	4b07      	ldr	r3, [pc, #28]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8015a60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015a64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8015a68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015a70:	4a02      	ldr	r2, [pc, #8]	@ (8015a7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8015a72:	430b      	orrs	r3, r1
 8015a74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8015a78:	e008      	b.n	8015a8c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8015a7a:	bf00      	nop
 8015a7c:	46020c00 	.word	0x46020c00
 8015a80:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a84:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015a88:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8015a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a94:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8015a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8015a9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	4313      	orrs	r3, r2
 8015aa6:	d019      	beq.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8015aa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ab4:	d105      	bne.n	8015ac2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8015ab6:	4b88      	ldr	r3, [pc, #544]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015aba:	4a87      	ldr	r2, [pc, #540]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015ac0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8015ac2:	4b85      	ldr	r3, [pc, #532]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015ac8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8015acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015ad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015ad4:	4a80      	ldr	r2, [pc, #512]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015ad6:	430b      	orrs	r3, r1
 8015ad8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8015adc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8015ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015aea:	2300      	movs	r3, #0
 8015aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015aee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8015af2:	460b      	mov	r3, r1
 8015af4:	4313      	orrs	r3, r2
 8015af6:	d00c      	beq.n	8015b12 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8015af8:	4b77      	ldr	r3, [pc, #476]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015afe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8015b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015b0a:	4973      	ldr	r1, [pc, #460]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015b0c:	4313      	orrs	r3, r2
 8015b0e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8015b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b1a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8015b1e:	623b      	str	r3, [r7, #32]
 8015b20:	2300      	movs	r3, #0
 8015b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8015b24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	4313      	orrs	r3, r2
 8015b2c:	d00c      	beq.n	8015b48 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8015b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015b34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8015b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015b40:	4965      	ldr	r1, [pc, #404]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015b42:	4313      	orrs	r3, r2
 8015b44:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8015b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b50:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8015b54:	61bb      	str	r3, [r7, #24]
 8015b56:	2300      	movs	r3, #0
 8015b58:	61fb      	str	r3, [r7, #28]
 8015b5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8015b5e:	460b      	mov	r3, r1
 8015b60:	4313      	orrs	r3, r2
 8015b62:	d00c      	beq.n	8015b7e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8015b64:	4b5c      	ldr	r3, [pc, #368]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8015b6a:	f023 0218 	bic.w	r2, r3, #24
 8015b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8015b76:	4958      	ldr	r1, [pc, #352]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015b78:	4313      	orrs	r3, r2
 8015b7a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8015b7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b86:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8015b8a:	613b      	str	r3, [r7, #16]
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	617b      	str	r3, [r7, #20]
 8015b90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8015b94:	460b      	mov	r3, r1
 8015b96:	4313      	orrs	r3, r2
 8015b98:	d032      	beq.n	8015c00 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8015b9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015ba6:	d105      	bne.n	8015bb4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bac:	4a4a      	ldr	r2, [pc, #296]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015bb2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8015bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015bb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8015bc0:	d108      	bne.n	8015bd4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015bc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015bc6:	3308      	adds	r3, #8
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f001 fe4b 	bl	8017864 <RCCEx_PLL2_Config>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8015bd4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d10d      	bne.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8015bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015bde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8015be2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8015be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015bea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015bee:	493a      	ldr	r1, [pc, #232]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015bf0:	4313      	orrs	r3, r2
 8015bf2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8015bf6:	e003      	b.n	8015c00 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015bf8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015bfc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8015c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c08:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8015c0c:	60bb      	str	r3, [r7, #8]
 8015c0e:	2300      	movs	r3, #0
 8015c10:	60fb      	str	r3, [r7, #12]
 8015c12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8015c16:	460b      	mov	r3, r1
 8015c18:	4313      	orrs	r3, r2
 8015c1a:	d03a      	beq.n	8015c92 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8015c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015c28:	d00e      	beq.n	8015c48 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8015c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015c2e:	d815      	bhi.n	8015c5c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d017      	beq.n	8015c64 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8015c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015c38:	d110      	bne.n	8015c5c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015c3a:	4b27      	ldr	r3, [pc, #156]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c3e:	4a26      	ldr	r2, [pc, #152]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015c44:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8015c46:	e00e      	b.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8015c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c4c:	3308      	adds	r3, #8
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f001 fe08 	bl	8017864 <RCCEx_PLL2_Config>
 8015c54:	4603      	mov	r3, r0
 8015c56:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8015c5a:	e004      	b.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8015c62:	e000      	b.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8015c64:	bf00      	nop
    }
    if (ret == HAL_OK)
 8015c66:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d10d      	bne.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8015c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015c74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8015c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c80:	4915      	ldr	r1, [pc, #84]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015c82:	4313      	orrs	r3, r2
 8015c84:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8015c88:	e003      	b.n	8015c92 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c8a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8015c8e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8015c92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8015c9e:	603b      	str	r3, [r7, #0]
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	607b      	str	r3, [r7, #4]
 8015ca4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015ca8:	460b      	mov	r3, r1
 8015caa:	4313      	orrs	r3, r2
 8015cac:	d00c      	beq.n	8015cc8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8015cae:	4b0a      	ldr	r3, [pc, #40]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8015cb4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8015cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015cbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015cc0:	4905      	ldr	r1, [pc, #20]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8015cc2:	4313      	orrs	r3, r2
 8015cc4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8015cc8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8015ccc:	4618      	mov	r0, r3
 8015cce:	37e0      	adds	r7, #224	@ 0xe0
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015cd6:	bf00      	nop
 8015cd8:	46020c00 	.word	0x46020c00

08015cdc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b089      	sub	sp, #36	@ 0x24
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8015ce4:	4ba6      	ldr	r3, [pc, #664]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015cec:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8015cee:	4ba4      	ldr	r3, [pc, #656]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cf2:	f003 0303 	and.w	r3, r3, #3
 8015cf6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8015cf8:	4ba1      	ldr	r3, [pc, #644]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cfc:	0a1b      	lsrs	r3, r3, #8
 8015cfe:	f003 030f 	and.w	r3, r3, #15
 8015d02:	3301      	adds	r3, #1
 8015d04:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8015d06:	4b9e      	ldr	r3, [pc, #632]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d0a:	091b      	lsrs	r3, r3, #4
 8015d0c:	f003 0301 	and.w	r3, r3, #1
 8015d10:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8015d12:	4b9b      	ldr	r3, [pc, #620]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d16:	08db      	lsrs	r3, r3, #3
 8015d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d1c:	68fa      	ldr	r2, [r7, #12]
 8015d1e:	fb02 f303 	mul.w	r3, r2, r3
 8015d22:	ee07 3a90 	vmov	s15, r3
 8015d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d2a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	2b03      	cmp	r3, #3
 8015d32:	d062      	beq.n	8015dfa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8015d34:	697b      	ldr	r3, [r7, #20]
 8015d36:	2b03      	cmp	r3, #3
 8015d38:	f200 8081 	bhi.w	8015e3e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	2b01      	cmp	r3, #1
 8015d40:	d024      	beq.n	8015d8c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	2b02      	cmp	r3, #2
 8015d46:	d17a      	bne.n	8015e3e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015d48:	693b      	ldr	r3, [r7, #16]
 8015d4a:	ee07 3a90 	vmov	s15, r3
 8015d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d52:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8015f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8015d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d5a:	4b89      	ldr	r3, [pc, #548]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d62:	ee07 3a90 	vmov	s15, r3
 8015d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8015d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8015d6e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8015f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8015d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8015d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8015d8a:	e08f      	b.n	8015eac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8015d8c:	4b7c      	ldr	r3, [pc, #496]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015d8e:	689b      	ldr	r3, [r3, #8]
 8015d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d005      	beq.n	8015da4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8015d98:	4b79      	ldr	r3, [pc, #484]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015d9a:	689b      	ldr	r3, [r3, #8]
 8015d9c:	0f1b      	lsrs	r3, r3, #28
 8015d9e:	f003 030f 	and.w	r3, r3, #15
 8015da2:	e006      	b.n	8015db2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8015da4:	4b76      	ldr	r3, [pc, #472]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8015daa:	041b      	lsls	r3, r3, #16
 8015dac:	0f1b      	lsrs	r3, r3, #28
 8015dae:	f003 030f 	and.w	r3, r3, #15
 8015db2:	4a76      	ldr	r2, [pc, #472]	@ (8015f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8015db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015db8:	ee07 3a90 	vmov	s15, r3
 8015dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	ee07 3a90 	vmov	s15, r3
 8015dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	ee07 3a90 	vmov	s15, r3
 8015dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015dd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8015ddc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8015f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8015de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015de8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8015df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015df4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8015df8:	e058      	b.n	8015eac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	ee07 3a90 	vmov	s15, r3
 8015e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e04:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8015f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8015e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e14:	ee07 3a90 	vmov	s15, r3
 8015e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8015e1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8015e20:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8015f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8015e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8015e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8015e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8015e3c:	e036      	b.n	8015eac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8015e3e:	4b50      	ldr	r3, [pc, #320]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015e40:	689b      	ldr	r3, [r3, #8]
 8015e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d005      	beq.n	8015e56 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8015e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015e4c:	689b      	ldr	r3, [r3, #8]
 8015e4e:	0f1b      	lsrs	r3, r3, #28
 8015e50:	f003 030f 	and.w	r3, r3, #15
 8015e54:	e006      	b.n	8015e64 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8015e56:	4b4a      	ldr	r3, [pc, #296]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8015e5c:	041b      	lsls	r3, r3, #16
 8015e5e:	0f1b      	lsrs	r3, r3, #28
 8015e60:	f003 030f 	and.w	r3, r3, #15
 8015e64:	4a49      	ldr	r2, [pc, #292]	@ (8015f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8015e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e6a:	ee07 3a90 	vmov	s15, r3
 8015e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015e72:	693b      	ldr	r3, [r7, #16]
 8015e74:	ee07 3a90 	vmov	s15, r3
 8015e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015e80:	69bb      	ldr	r3, [r7, #24]
 8015e82:	ee07 3a90 	vmov	s15, r3
 8015e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8015e8e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8015f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8015e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8015ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8015eaa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8015eac:	4b34      	ldr	r3, [pc, #208]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d017      	beq.n	8015ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015eb8:	4b31      	ldr	r3, [pc, #196]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ebc:	0a5b      	lsrs	r3, r3, #9
 8015ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015ec2:	ee07 3a90 	vmov	s15, r3
 8015ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8015eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015ece:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8015ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015ede:	ee17 2a90 	vmov	r2, s15
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	601a      	str	r2, [r3, #0]
 8015ee6:	e002      	b.n	8015eee <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2200      	movs	r2, #0
 8015eec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8015eee:	4b24      	ldr	r3, [pc, #144]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d017      	beq.n	8015f2a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015efa:	4b21      	ldr	r3, [pc, #132]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015efe:	0c1b      	lsrs	r3, r3, #16
 8015f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f04:	ee07 3a90 	vmov	s15, r3
 8015f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8015f0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015f10:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8015f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015f20:	ee17 2a90 	vmov	r2, s15
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	605a      	str	r2, [r3, #4]
 8015f28:	e002      	b.n	8015f30 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8015f30:	4b13      	ldr	r3, [pc, #76]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d017      	beq.n	8015f6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015f3c:	4b10      	ldr	r3, [pc, #64]	@ (8015f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8015f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f40:	0e1b      	lsrs	r3, r3, #24
 8015f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f46:	ee07 3a90 	vmov	s15, r3
 8015f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8015f4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015f52:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8015f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8015f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015f62:	ee17 2a90 	vmov	r2, s15
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8015f6a:	e002      	b.n	8015f72 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	609a      	str	r2, [r3, #8]
}
 8015f72:	bf00      	nop
 8015f74:	3724      	adds	r7, #36	@ 0x24
 8015f76:	46bd      	mov	sp, r7
 8015f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7c:	4770      	bx	lr
 8015f7e:	bf00      	nop
 8015f80:	46020c00 	.word	0x46020c00
 8015f84:	4b742400 	.word	0x4b742400
 8015f88:	46000000 	.word	0x46000000
 8015f8c:	080254bc 	.word	0x080254bc

08015f90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8015f90:	b480      	push	{r7}
 8015f92:	b089      	sub	sp, #36	@ 0x24
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8015f98:	4ba6      	ldr	r3, [pc, #664]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8015f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015fa0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8015fa2:	4ba4      	ldr	r3, [pc, #656]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8015fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fa6:	f003 0303 	and.w	r3, r3, #3
 8015faa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8015fac:	4ba1      	ldr	r3, [pc, #644]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8015fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fb0:	0a1b      	lsrs	r3, r3, #8
 8015fb2:	f003 030f 	and.w	r3, r3, #15
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8015fba:	4b9e      	ldr	r3, [pc, #632]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8015fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fbe:	091b      	lsrs	r3, r3, #4
 8015fc0:	f003 0301 	and.w	r3, r3, #1
 8015fc4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8015fc6:	4b9b      	ldr	r3, [pc, #620]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8015fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015fca:	08db      	lsrs	r3, r3, #3
 8015fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fd0:	68fa      	ldr	r2, [r7, #12]
 8015fd2:	fb02 f303 	mul.w	r3, r2, r3
 8015fd6:	ee07 3a90 	vmov	s15, r3
 8015fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fde:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	2b03      	cmp	r3, #3
 8015fe6:	d062      	beq.n	80160ae <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8015fe8:	697b      	ldr	r3, [r7, #20]
 8015fea:	2b03      	cmp	r3, #3
 8015fec:	f200 8081 	bhi.w	80160f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	2b01      	cmp	r3, #1
 8015ff4:	d024      	beq.n	8016040 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	2b02      	cmp	r3, #2
 8015ffa:	d17a      	bne.n	80160f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	ee07 3a90 	vmov	s15, r3
 8016002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016006:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8016238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 801600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801600e:	4b89      	ldr	r3, [pc, #548]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8016010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016016:	ee07 3a90 	vmov	s15, r3
 801601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 801601e:	ed97 6a02 	vldr	s12, [r7, #8]
 8016022:	eddf 5a86 	vldr	s11, [pc, #536]	@ 801623c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8016026:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 801602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 801602e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016032:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8016036:	ee67 7a27 	vmul.f32	s15, s14, s15
 801603a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801603e:	e08f      	b.n	8016160 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8016040:	4b7c      	ldr	r3, [pc, #496]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8016042:	689b      	ldr	r3, [r3, #8]
 8016044:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016048:	2b00      	cmp	r3, #0
 801604a:	d005      	beq.n	8016058 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 801604c:	4b79      	ldr	r3, [pc, #484]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801604e:	689b      	ldr	r3, [r3, #8]
 8016050:	0f1b      	lsrs	r3, r3, #28
 8016052:	f003 030f 	and.w	r3, r3, #15
 8016056:	e006      	b.n	8016066 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8016058:	4b76      	ldr	r3, [pc, #472]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801605a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801605e:	041b      	lsls	r3, r3, #16
 8016060:	0f1b      	lsrs	r3, r3, #28
 8016062:	f003 030f 	and.w	r3, r3, #15
 8016066:	4a76      	ldr	r2, [pc, #472]	@ (8016240 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8016068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801606c:	ee07 3a90 	vmov	s15, r3
 8016070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	ee07 3a90 	vmov	s15, r3
 801607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801607e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016082:	69bb      	ldr	r3, [r7, #24]
 8016084:	ee07 3a90 	vmov	s15, r3
 8016088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801608c:	ed97 6a02 	vldr	s12, [r7, #8]
 8016090:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 801623c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8016094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801609c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80160a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80160ac:	e058      	b.n	8016160 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	ee07 3a90 	vmov	s15, r3
 80160b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160b8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8016238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80160bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80160c0:	4b5c      	ldr	r3, [pc, #368]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80160c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80160c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160c8:	ee07 3a90 	vmov	s15, r3
 80160cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80160d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80160d4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801623c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80160d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80160dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80160e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80160e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80160f0:	e036      	b.n	8016160 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80160f2:	4b50      	ldr	r3, [pc, #320]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80160f4:	689b      	ldr	r3, [r3, #8]
 80160f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d005      	beq.n	801610a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80160fe:	4b4d      	ldr	r3, [pc, #308]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8016100:	689b      	ldr	r3, [r3, #8]
 8016102:	0f1b      	lsrs	r3, r3, #28
 8016104:	f003 030f 	and.w	r3, r3, #15
 8016108:	e006      	b.n	8016118 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 801610a:	4b4a      	ldr	r3, [pc, #296]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801610c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016110:	041b      	lsls	r3, r3, #16
 8016112:	0f1b      	lsrs	r3, r3, #28
 8016114:	f003 030f 	and.w	r3, r3, #15
 8016118:	4a49      	ldr	r2, [pc, #292]	@ (8016240 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 801611a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801611e:	ee07 3a90 	vmov	s15, r3
 8016122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	ee07 3a90 	vmov	s15, r3
 801612c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016134:	69bb      	ldr	r3, [r7, #24]
 8016136:	ee07 3a90 	vmov	s15, r3
 801613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801613e:	ed97 6a02 	vldr	s12, [r7, #8]
 8016142:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 801623c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8016146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801614e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016152:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8016156:	ee67 7a27 	vmul.f32	s15, s14, s15
 801615a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801615e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8016160:	4b34      	ldr	r3, [pc, #208]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8016162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016168:	2b00      	cmp	r3, #0
 801616a:	d017      	beq.n	801619c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801616c:	4b31      	ldr	r3, [pc, #196]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016170:	0a5b      	lsrs	r3, r3, #9
 8016172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016176:	ee07 3a90 	vmov	s15, r3
 801617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 801617e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016182:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8016186:	edd7 6a07 	vldr	s13, [r7, #28]
 801618a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801618e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016192:	ee17 2a90 	vmov	r2, s15
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	601a      	str	r2, [r3, #0]
 801619a:	e002      	b.n	80161a2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2200      	movs	r2, #0
 80161a0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80161a2:	4b24      	ldr	r3, [pc, #144]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80161a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d017      	beq.n	80161de <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80161ae:	4b21      	ldr	r3, [pc, #132]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80161b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161b2:	0c1b      	lsrs	r3, r3, #16
 80161b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80161b8:	ee07 3a90 	vmov	s15, r3
 80161bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80161c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80161c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80161c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80161cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80161d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80161d4:	ee17 2a90 	vmov	r2, s15
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	605a      	str	r2, [r3, #4]
 80161dc:	e002      	b.n	80161e4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2200      	movs	r2, #0
 80161e2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80161e4:	4b13      	ldr	r3, [pc, #76]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80161e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d017      	beq.n	8016220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80161f0:	4b10      	ldr	r3, [pc, #64]	@ (8016234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80161f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161f4:	0e1b      	lsrs	r3, r3, #24
 80161f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80161fa:	ee07 3a90 	vmov	s15, r3
 80161fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8016202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016206:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801620a:	edd7 6a07 	vldr	s13, [r7, #28]
 801620e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016216:	ee17 2a90 	vmov	r2, s15
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801621e:	e002      	b.n	8016226 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2200      	movs	r2, #0
 8016224:	609a      	str	r2, [r3, #8]
}
 8016226:	bf00      	nop
 8016228:	3724      	adds	r7, #36	@ 0x24
 801622a:	46bd      	mov	sp, r7
 801622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016230:	4770      	bx	lr
 8016232:	bf00      	nop
 8016234:	46020c00 	.word	0x46020c00
 8016238:	4b742400 	.word	0x4b742400
 801623c:	46000000 	.word	0x46000000
 8016240:	080254bc 	.word	0x080254bc

08016244 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8016244:	b480      	push	{r7}
 8016246:	b089      	sub	sp, #36	@ 0x24
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 801624c:	4ba6      	ldr	r3, [pc, #664]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801624e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016254:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8016256:	4ba4      	ldr	r3, [pc, #656]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801625a:	f003 0303 	and.w	r3, r3, #3
 801625e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8016260:	4ba1      	ldr	r3, [pc, #644]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016264:	0a1b      	lsrs	r3, r3, #8
 8016266:	f003 030f 	and.w	r3, r3, #15
 801626a:	3301      	adds	r3, #1
 801626c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 801626e:	4b9e      	ldr	r3, [pc, #632]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016272:	091b      	lsrs	r3, r3, #4
 8016274:	f003 0301 	and.w	r3, r3, #1
 8016278:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 801627a:	4b9b      	ldr	r3, [pc, #620]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801627c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801627e:	08db      	lsrs	r3, r3, #3
 8016280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016284:	68fa      	ldr	r2, [r7, #12]
 8016286:	fb02 f303 	mul.w	r3, r2, r3
 801628a:	ee07 3a90 	vmov	s15, r3
 801628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016292:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	2b03      	cmp	r3, #3
 801629a:	d062      	beq.n	8016362 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	2b03      	cmp	r3, #3
 80162a0:	f200 8081 	bhi.w	80163a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d024      	beq.n	80162f4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	2b02      	cmp	r3, #2
 80162ae:	d17a      	bne.n	80163a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	ee07 3a90 	vmov	s15, r3
 80162b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80162ba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80164ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80162be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80162c2:	4b89      	ldr	r3, [pc, #548]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80162c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162ca:	ee07 3a90 	vmov	s15, r3
 80162ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80162d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80162d6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80164f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80162da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80162de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80162e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80162e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80162ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162ee:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80162f2:	e08f      	b.n	8016414 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80162f4:	4b7c      	ldr	r3, [pc, #496]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80162f6:	689b      	ldr	r3, [r3, #8]
 80162f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d005      	beq.n	801630c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8016300:	4b79      	ldr	r3, [pc, #484]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016302:	689b      	ldr	r3, [r3, #8]
 8016304:	0f1b      	lsrs	r3, r3, #28
 8016306:	f003 030f 	and.w	r3, r3, #15
 801630a:	e006      	b.n	801631a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 801630c:	4b76      	ldr	r3, [pc, #472]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801630e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016312:	041b      	lsls	r3, r3, #16
 8016314:	0f1b      	lsrs	r3, r3, #28
 8016316:	f003 030f 	and.w	r3, r3, #15
 801631a:	4a76      	ldr	r2, [pc, #472]	@ (80164f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 801631c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016320:	ee07 3a90 	vmov	s15, r3
 8016324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	ee07 3a90 	vmov	s15, r3
 801632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	ee07 3a90 	vmov	s15, r3
 801633c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016340:	ed97 6a02 	vldr	s12, [r7, #8]
 8016344:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80164f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8016348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801634c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016354:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8016358:	ee67 7a27 	vmul.f32	s15, s14, s15
 801635c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016360:	e058      	b.n	8016414 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	ee07 3a90 	vmov	s15, r3
 8016368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801636c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80164ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8016370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016374:	4b5c      	ldr	r3, [pc, #368]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801637c:	ee07 3a90 	vmov	s15, r3
 8016380:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8016384:	ed97 6a02 	vldr	s12, [r7, #8]
 8016388:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80164f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 801638c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8016390:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8016394:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016398:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 801639c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80163a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80163a4:	e036      	b.n	8016414 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80163a6:	4b50      	ldr	r3, [pc, #320]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80163a8:	689b      	ldr	r3, [r3, #8]
 80163aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d005      	beq.n	80163be <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80163b2:	4b4d      	ldr	r3, [pc, #308]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80163b4:	689b      	ldr	r3, [r3, #8]
 80163b6:	0f1b      	lsrs	r3, r3, #28
 80163b8:	f003 030f 	and.w	r3, r3, #15
 80163bc:	e006      	b.n	80163cc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80163be:	4b4a      	ldr	r3, [pc, #296]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80163c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80163c4:	041b      	lsls	r3, r3, #16
 80163c6:	0f1b      	lsrs	r3, r3, #28
 80163c8:	f003 030f 	and.w	r3, r3, #15
 80163cc:	4a49      	ldr	r2, [pc, #292]	@ (80164f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80163ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163d2:	ee07 3a90 	vmov	s15, r3
 80163d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	ee07 3a90 	vmov	s15, r3
 80163e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80163e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80163e8:	69bb      	ldr	r3, [r7, #24]
 80163ea:	ee07 3a90 	vmov	s15, r3
 80163ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80163f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80163f6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80164f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80163fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80163fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016406:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 801640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801640e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016412:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8016414:	4b34      	ldr	r3, [pc, #208]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801641c:	2b00      	cmp	r3, #0
 801641e:	d017      	beq.n	8016450 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8016420:	4b31      	ldr	r3, [pc, #196]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016424:	0a5b      	lsrs	r3, r3, #9
 8016426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801642a:	ee07 3a90 	vmov	s15, r3
 801642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8016432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016436:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801643a:	edd7 6a07 	vldr	s13, [r7, #28]
 801643e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016446:	ee17 2a90 	vmov	r2, s15
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	601a      	str	r2, [r3, #0]
 801644e:	e002      	b.n	8016456 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2200      	movs	r2, #0
 8016454:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8016456:	4b24      	ldr	r3, [pc, #144]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801645e:	2b00      	cmp	r3, #0
 8016460:	d017      	beq.n	8016492 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8016462:	4b21      	ldr	r3, [pc, #132]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8016464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016466:	0c1b      	lsrs	r3, r3, #16
 8016468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801646c:	ee07 3a90 	vmov	s15, r3
 8016470:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8016474:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016478:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801647c:	edd7 6a07 	vldr	s13, [r7, #28]
 8016480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016488:	ee17 2a90 	vmov	r2, s15
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	605a      	str	r2, [r3, #4]
 8016490:	e002      	b.n	8016498 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	2200      	movs	r2, #0
 8016496:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8016498:	4b13      	ldr	r3, [pc, #76]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801649c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d017      	beq.n	80164d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80164a4:	4b10      	ldr	r3, [pc, #64]	@ (80164e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80164a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164a8:	0e1b      	lsrs	r3, r3, #24
 80164aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80164ae:	ee07 3a90 	vmov	s15, r3
 80164b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80164b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80164ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80164be:	edd7 6a07 	vldr	s13, [r7, #28]
 80164c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80164c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80164ca:	ee17 2a90 	vmov	r2, s15
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80164d2:	e002      	b.n	80164da <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2200      	movs	r2, #0
 80164d8:	609a      	str	r2, [r3, #8]
}
 80164da:	bf00      	nop
 80164dc:	3724      	adds	r7, #36	@ 0x24
 80164de:	46bd      	mov	sp, r7
 80164e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	46020c00 	.word	0x46020c00
 80164ec:	4b742400 	.word	0x4b742400
 80164f0:	46000000 	.word	0x46000000
 80164f4:	080254bc 	.word	0x080254bc

080164f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b08e      	sub	sp, #56	@ 0x38
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8016502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016506:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 801650a:	430b      	orrs	r3, r1
 801650c:	d145      	bne.n	801659a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801650e:	4baa      	ldr	r3, [pc, #680]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8016510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016518:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 801651a:	4ba7      	ldr	r3, [pc, #668]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801651c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016520:	f003 0302 	and.w	r3, r3, #2
 8016524:	2b02      	cmp	r3, #2
 8016526:	d108      	bne.n	801653a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8016528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801652a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801652e:	d104      	bne.n	801653a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8016530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016534:	637b      	str	r3, [r7, #52]	@ 0x34
 8016536:	f001 b987 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 801653a:	4b9f      	ldr	r3, [pc, #636]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801653c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016548:	d114      	bne.n	8016574 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 801654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801654c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016550:	d110      	bne.n	8016574 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8016552:	4b99      	ldr	r3, [pc, #612]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8016554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801655c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016560:	d103      	bne.n	801656a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8016562:	23fa      	movs	r3, #250	@ 0xfa
 8016564:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8016566:	f001 b96f 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 801656a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 801656e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8016570:	f001 b96a 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8016574:	4b90      	ldr	r3, [pc, #576]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801657c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016580:	d107      	bne.n	8016592 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8016582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016588:	d103      	bne.n	8016592 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 801658a:	4b8c      	ldr	r3, [pc, #560]	@ (80167bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 801658c:	637b      	str	r3, [r7, #52]	@ 0x34
 801658e:	f001 b95b 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8016592:	2300      	movs	r3, #0
 8016594:	637b      	str	r3, [r7, #52]	@ 0x34
 8016596:	f001 b957 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801659a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801659e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80165a2:	430b      	orrs	r3, r1
 80165a4:	d151      	bne.n	801664a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80165a6:	4b84      	ldr	r3, [pc, #528]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80165a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80165ac:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80165b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80165b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165b4:	2b80      	cmp	r3, #128	@ 0x80
 80165b6:	d035      	beq.n	8016624 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80165b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165ba:	2b80      	cmp	r3, #128	@ 0x80
 80165bc:	d841      	bhi.n	8016642 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80165be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165c0:	2b60      	cmp	r3, #96	@ 0x60
 80165c2:	d02a      	beq.n	801661a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80165c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165c6:	2b60      	cmp	r3, #96	@ 0x60
 80165c8:	d83b      	bhi.n	8016642 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80165ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165cc:	2b40      	cmp	r3, #64	@ 0x40
 80165ce:	d009      	beq.n	80165e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80165d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165d2:	2b40      	cmp	r3, #64	@ 0x40
 80165d4:	d835      	bhi.n	8016642 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80165d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d00c      	beq.n	80165f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80165dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165de:	2b20      	cmp	r3, #32
 80165e0:	d012      	beq.n	8016608 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80165e2:	e02e      	b.n	8016642 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80165e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7ff fb77 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80165ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80165f2:	f001 b929 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80165f6:	f107 0318 	add.w	r3, r7, #24
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7ff fcc8 	bl	8015f90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8016600:	69bb      	ldr	r3, [r7, #24]
 8016602:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016604:	f001 b920 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016608:	f107 030c 	add.w	r3, r7, #12
 801660c:	4618      	mov	r0, r3
 801660e:	f7ff fe19 	bl	8016244 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016616:	f001 b917 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 801661a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 801661e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016620:	f001 b912 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016624:	4b64      	ldr	r3, [pc, #400]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801662c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016630:	d103      	bne.n	801663a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8016632:	4b63      	ldr	r3, [pc, #396]	@ (80167c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8016634:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8016636:	f001 b907 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 801663a:	2300      	movs	r3, #0
 801663c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801663e:	f001 b903 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8016642:	2300      	movs	r3, #0
 8016644:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016646:	f001 b8ff 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 801664a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801664e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8016652:	430b      	orrs	r3, r1
 8016654:	d158      	bne.n	8016708 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8016656:	4b58      	ldr	r3, [pc, #352]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8016658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801665c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016660:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8016662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016668:	d03b      	beq.n	80166e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 801666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801666c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016670:	d846      	bhi.n	8016700 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8016672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016678:	d02e      	beq.n	80166d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 801667a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801667c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016680:	d83e      	bhi.n	8016700 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8016682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016688:	d00b      	beq.n	80166a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 801668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801668c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016690:	d836      	bhi.n	8016700 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8016692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016694:	2b00      	cmp	r3, #0
 8016696:	d00d      	beq.n	80166b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8016698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801669a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801669e:	d012      	beq.n	80166c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80166a0:	e02e      	b.n	8016700 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80166a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7ff fb18 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80166ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80166b0:	f001 b8ca 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80166b4:	f107 0318 	add.w	r3, r7, #24
 80166b8:	4618      	mov	r0, r3
 80166ba:	f7ff fc69 	bl	8015f90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80166be:	69bb      	ldr	r3, [r7, #24]
 80166c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80166c2:	f001 b8c1 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80166c6:	f107 030c 	add.w	r3, r7, #12
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7ff fdba 	bl	8016244 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80166d4:	f001 b8b8 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80166d8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80166dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80166de:	f001 b8b3 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80166e2:	4b35      	ldr	r3, [pc, #212]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80166ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80166ee:	d103      	bne.n	80166f8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80166f0:	4b33      	ldr	r3, [pc, #204]	@ (80167c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80166f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80166f4:	f001 b8a8 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80166f8:	2300      	movs	r3, #0
 80166fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80166fc:	f001 b8a4 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8016700:	2300      	movs	r3, #0
 8016702:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016704:	f001 b8a0 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8016708:	e9d7 2300 	ldrd	r2, r3, [r7]
 801670c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8016710:	430b      	orrs	r3, r1
 8016712:	d16e      	bne.n	80167f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8016714:	4b28      	ldr	r3, [pc, #160]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8016716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801671a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 801671e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8016720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016722:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8016726:	d034      	beq.n	8016792 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8016728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801672a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801672e:	d85c      	bhi.n	80167ea <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8016730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016736:	d00b      	beq.n	8016750 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8016738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801673a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801673e:	d854      	bhi.n	80167ea <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8016740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016742:	2b00      	cmp	r3, #0
 8016744:	d016      	beq.n	8016774 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8016746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801674c:	d009      	beq.n	8016762 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 801674e:	e04c      	b.n	80167ea <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016754:	4618      	mov	r0, r3
 8016756:	f7ff fac1 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 801675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801675c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801675e:	f001 b873 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016762:	f107 0318 	add.w	r3, r7, #24
 8016766:	4618      	mov	r0, r3
 8016768:	f7ff fc12 	bl	8015f90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 801676c:	69fb      	ldr	r3, [r7, #28]
 801676e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016770:	f001 b86a 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8016774:	4b10      	ldr	r3, [pc, #64]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801677c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016780:	d103      	bne.n	801678a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8016782:	4b10      	ldr	r3, [pc, #64]	@ (80167c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8016784:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8016786:	f001 b85f 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 801678a:	2300      	movs	r3, #0
 801678c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801678e:	f001 b85b 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8016792:	4b09      	ldr	r3, [pc, #36]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	f003 0320 	and.w	r3, r3, #32
 801679a:	2b20      	cmp	r3, #32
 801679c:	d121      	bne.n	80167e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801679e:	4b06      	ldr	r3, [pc, #24]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80167a0:	689b      	ldr	r3, [r3, #8]
 80167a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d00e      	beq.n	80167c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80167aa:	4b03      	ldr	r3, [pc, #12]	@ (80167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80167ac:	689b      	ldr	r3, [r3, #8]
 80167ae:	0e1b      	lsrs	r3, r3, #24
 80167b0:	f003 030f 	and.w	r3, r3, #15
 80167b4:	e00f      	b.n	80167d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80167b6:	bf00      	nop
 80167b8:	46020c00 	.word	0x46020c00
 80167bc:	0007a120 	.word	0x0007a120
 80167c0:	00f42400 	.word	0x00f42400
 80167c4:	02dc6c00 	.word	0x02dc6c00
 80167c8:	4ba7      	ldr	r3, [pc, #668]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80167ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80167ce:	041b      	lsls	r3, r3, #16
 80167d0:	0e1b      	lsrs	r3, r3, #24
 80167d2:	f003 030f 	and.w	r3, r3, #15
 80167d6:	4aa5      	ldr	r2, [pc, #660]	@ (8016a6c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80167d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80167dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80167de:	f001 b833 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80167e2:	2300      	movs	r3, #0
 80167e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80167e6:	f001 b82f 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80167ea:	2300      	movs	r3, #0
 80167ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80167ee:	f001 b82b 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80167f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80167f6:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80167fa:	430b      	orrs	r3, r1
 80167fc:	d17f      	bne.n	80168fe <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80167fe:	4b9a      	ldr	r3, [pc, #616]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016800:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8016804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016808:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 801680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801680c:	2b00      	cmp	r3, #0
 801680e:	d165      	bne.n	80168dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8016810:	4b95      	ldr	r3, [pc, #596]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016816:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 801681a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 801681c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801681e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8016822:	d034      	beq.n	801688e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8016824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016826:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801682a:	d853      	bhi.n	80168d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801682e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016832:	d00b      	beq.n	801684c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8016834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801683a:	d84b      	bhi.n	80168d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801683e:	2b00      	cmp	r3, #0
 8016840:	d016      	beq.n	8016870 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8016842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016848:	d009      	beq.n	801685e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801684a:	e043      	b.n	80168d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801684c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016850:	4618      	mov	r0, r3
 8016852:	f7ff fa43 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016858:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 801685a:	f000 bff5 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801685e:	f107 0318 	add.w	r3, r7, #24
 8016862:	4618      	mov	r0, r3
 8016864:	f7ff fb94 	bl	8015f90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 801686c:	f000 bfec 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8016870:	4b7d      	ldr	r3, [pc, #500]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801687c:	d103      	bne.n	8016886 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 801687e:	4b7c      	ldr	r3, [pc, #496]	@ (8016a70 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8016880:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8016882:	f000 bfe1 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8016886:	2300      	movs	r3, #0
 8016888:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 801688a:	f000 bfdd 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801688e:	4b76      	ldr	r3, [pc, #472]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	f003 0320 	and.w	r3, r3, #32
 8016896:	2b20      	cmp	r3, #32
 8016898:	d118      	bne.n	80168cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801689a:	4b73      	ldr	r3, [pc, #460]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801689c:	689b      	ldr	r3, [r3, #8]
 801689e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d005      	beq.n	80168b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80168a6:	4b70      	ldr	r3, [pc, #448]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80168a8:	689b      	ldr	r3, [r3, #8]
 80168aa:	0e1b      	lsrs	r3, r3, #24
 80168ac:	f003 030f 	and.w	r3, r3, #15
 80168b0:	e006      	b.n	80168c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80168b2:	4b6d      	ldr	r3, [pc, #436]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80168b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80168b8:	041b      	lsls	r3, r3, #16
 80168ba:	0e1b      	lsrs	r3, r3, #24
 80168bc:	f003 030f 	and.w	r3, r3, #15
 80168c0:	4a6a      	ldr	r2, [pc, #424]	@ (8016a6c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80168c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168c6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80168c8:	f000 bfbe 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80168cc:	2300      	movs	r3, #0
 80168ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80168d0:	f000 bfba 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80168d4:	2300      	movs	r3, #0
 80168d6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80168d8:	f000 bfb6 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80168dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80168e2:	d108      	bne.n	80168f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80168e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7ff f9f7 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80168ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80168f2:	f000 bfa9 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80168f6:	2300      	movs	r3, #0
 80168f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80168fa:	f000 bfa5 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80168fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016902:	1e51      	subs	r1, r2, #1
 8016904:	430b      	orrs	r3, r1
 8016906:	d136      	bne.n	8016976 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8016908:	4b57      	ldr	r3, [pc, #348]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801690a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801690e:	f003 0303 	and.w	r3, r3, #3
 8016912:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8016914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016916:	2b00      	cmp	r3, #0
 8016918:	d104      	bne.n	8016924 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 801691a:	f7fe fb55 	bl	8014fc8 <HAL_RCC_GetPCLK2Freq>
 801691e:	6378      	str	r0, [r7, #52]	@ 0x34
 8016920:	f000 bf92 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8016924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016926:	2b01      	cmp	r3, #1
 8016928:	d104      	bne.n	8016934 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801692a:	f7fe fa1d 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 801692e:	6378      	str	r0, [r7, #52]	@ 0x34
 8016930:	f000 bf8a 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8016934:	4b4c      	ldr	r3, [pc, #304]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801693c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016940:	d106      	bne.n	8016950 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8016942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016944:	2b02      	cmp	r3, #2
 8016946:	d103      	bne.n	8016950 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8016948:	4b4a      	ldr	r3, [pc, #296]	@ (8016a74 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 801694a:	637b      	str	r3, [r7, #52]	@ 0x34
 801694c:	f000 bf7c 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8016950:	4b45      	ldr	r3, [pc, #276]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016956:	f003 0302 	and.w	r3, r3, #2
 801695a:	2b02      	cmp	r3, #2
 801695c:	d107      	bne.n	801696e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 801695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016960:	2b03      	cmp	r3, #3
 8016962:	d104      	bne.n	801696e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8016964:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016968:	637b      	str	r3, [r7, #52]	@ 0x34
 801696a:	f000 bf6d 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 801696e:	2300      	movs	r3, #0
 8016970:	637b      	str	r3, [r7, #52]	@ 0x34
 8016972:	f000 bf69 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8016976:	e9d7 2300 	ldrd	r2, r3, [r7]
 801697a:	1e91      	subs	r1, r2, #2
 801697c:	430b      	orrs	r3, r1
 801697e:	d136      	bne.n	80169ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8016980:	4b39      	ldr	r3, [pc, #228]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016986:	f003 030c 	and.w	r3, r3, #12
 801698a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 801698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801698e:	2b00      	cmp	r3, #0
 8016990:	d104      	bne.n	801699c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8016992:	f7fe fb05 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 8016996:	6378      	str	r0, [r7, #52]	@ 0x34
 8016998:	f000 bf56 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 801699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801699e:	2b04      	cmp	r3, #4
 80169a0:	d104      	bne.n	80169ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80169a2:	f7fe f9e1 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 80169a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80169a8:	f000 bf4e 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80169ac:	4b2e      	ldr	r3, [pc, #184]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80169b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80169b8:	d106      	bne.n	80169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80169ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169bc:	2b08      	cmp	r3, #8
 80169be:	d103      	bne.n	80169c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80169c0:	4b2c      	ldr	r3, [pc, #176]	@ (8016a74 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80169c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80169c4:	f000 bf40 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80169c8:	4b27      	ldr	r3, [pc, #156]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80169ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80169ce:	f003 0302 	and.w	r3, r3, #2
 80169d2:	2b02      	cmp	r3, #2
 80169d4:	d107      	bne.n	80169e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80169d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169d8:	2b0c      	cmp	r3, #12
 80169da:	d104      	bne.n	80169e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80169dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80169e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80169e2:	f000 bf31 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80169e6:	2300      	movs	r3, #0
 80169e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80169ea:	f000 bf2d 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80169ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169f2:	1f11      	subs	r1, r2, #4
 80169f4:	430b      	orrs	r3, r1
 80169f6:	d13f      	bne.n	8016a78 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80169f8:	4b1b      	ldr	r3, [pc, #108]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80169fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80169fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8016a02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8016a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d104      	bne.n	8016a14 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8016a0a:	f7fe fac9 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 8016a0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8016a10:	f000 bf1a 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8016a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a16:	2b10      	cmp	r3, #16
 8016a18:	d104      	bne.n	8016a24 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8016a1a:	f7fe f9a5 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8016a1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8016a20:	f000 bf12 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8016a24:	4b10      	ldr	r3, [pc, #64]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016a30:	d106      	bne.n	8016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8016a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a34:	2b20      	cmp	r3, #32
 8016a36:	d103      	bne.n	8016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8016a38:	4b0e      	ldr	r3, [pc, #56]	@ (8016a74 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8016a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016a3c:	f000 bf04 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8016a40:	4b09      	ldr	r3, [pc, #36]	@ (8016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8016a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016a46:	f003 0302 	and.w	r3, r3, #2
 8016a4a:	2b02      	cmp	r3, #2
 8016a4c:	d107      	bne.n	8016a5e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a50:	2b30      	cmp	r3, #48	@ 0x30
 8016a52:	d104      	bne.n	8016a5e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8016a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8016a5a:	f000 bef5 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8016a62:	f000 bef1 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8016a66:	bf00      	nop
 8016a68:	46020c00 	.word	0x46020c00
 8016a6c:	080254bc 	.word	0x080254bc
 8016a70:	02dc6c00 	.word	0x02dc6c00
 8016a74:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8016a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016a7c:	f1a2 0108 	sub.w	r1, r2, #8
 8016a80:	430b      	orrs	r3, r1
 8016a82:	d136      	bne.n	8016af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8016a84:	4ba4      	ldr	r3, [pc, #656]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016a8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016a8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8016a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d104      	bne.n	8016aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8016a96:	f7fe fa83 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 8016a9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8016a9c:	f000 bed4 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8016aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016aa2:	2b40      	cmp	r3, #64	@ 0x40
 8016aa4:	d104      	bne.n	8016ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8016aa6:	f7fe f95f 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8016aaa:	6378      	str	r0, [r7, #52]	@ 0x34
 8016aac:	f000 becc 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8016ab0:	4b99      	ldr	r3, [pc, #612]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016abc:	d106      	bne.n	8016acc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8016abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ac0:	2b80      	cmp	r3, #128	@ 0x80
 8016ac2:	d103      	bne.n	8016acc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8016ac4:	4b95      	ldr	r3, [pc, #596]	@ (8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8016ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ac8:	f000 bebe 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8016acc:	4b92      	ldr	r3, [pc, #584]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016ad2:	f003 0302 	and.w	r3, r3, #2
 8016ad6:	2b02      	cmp	r3, #2
 8016ad8:	d107      	bne.n	8016aea <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8016ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016adc:	2bc0      	cmp	r3, #192	@ 0xc0
 8016ade:	d104      	bne.n	8016aea <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8016ae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ae6:	f000 beaf 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8016aea:	2300      	movs	r3, #0
 8016aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8016aee:	f000 beab 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8016af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016af6:	f1a2 0110 	sub.w	r1, r2, #16
 8016afa:	430b      	orrs	r3, r1
 8016afc:	d139      	bne.n	8016b72 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8016afe:	4b86      	ldr	r3, [pc, #536]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016b08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8016b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d104      	bne.n	8016b1a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8016b10:	f7fe fa46 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 8016b14:	6378      	str	r0, [r7, #52]	@ 0x34
 8016b16:	f000 be97 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8016b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016b20:	d104      	bne.n	8016b2c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8016b22:	f7fe f921 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8016b26:	6378      	str	r0, [r7, #52]	@ 0x34
 8016b28:	f000 be8e 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8016b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016b38:	d107      	bne.n	8016b4a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8016b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b40:	d103      	bne.n	8016b4a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8016b42:	4b76      	ldr	r3, [pc, #472]	@ (8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8016b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b46:	f000 be7f 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8016b4a:	4b73      	ldr	r3, [pc, #460]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016b50:	f003 0302 	and.w	r3, r3, #2
 8016b54:	2b02      	cmp	r3, #2
 8016b56:	d108      	bne.n	8016b6a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8016b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016b5e:	d104      	bne.n	8016b6a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8016b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b66:	f000 be6f 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b6e:	f000 be6b 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8016b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b76:	f1a2 0120 	sub.w	r1, r2, #32
 8016b7a:	430b      	orrs	r3, r1
 8016b7c:	d158      	bne.n	8016c30 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8016b7e:	4b66      	ldr	r3, [pc, #408]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8016b84:	f003 0307 	and.w	r3, r3, #7
 8016b88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8016b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d104      	bne.n	8016b9a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8016b90:	f7fe fa2e 	bl	8014ff0 <HAL_RCC_GetPCLK3Freq>
 8016b94:	6378      	str	r0, [r7, #52]	@ 0x34
 8016b96:	f000 be57 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8016b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b9c:	2b01      	cmp	r3, #1
 8016b9e:	d104      	bne.n	8016baa <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8016ba0:	f7fe f8e2 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8016ba4:	6378      	str	r0, [r7, #52]	@ 0x34
 8016ba6:	f000 be4f 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8016baa:	4b5b      	ldr	r3, [pc, #364]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016bb6:	d106      	bne.n	8016bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8016bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bba:	2b02      	cmp	r3, #2
 8016bbc:	d103      	bne.n	8016bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8016bbe:	4b57      	ldr	r3, [pc, #348]	@ (8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8016bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8016bc2:	f000 be41 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8016bc6:	4b54      	ldr	r3, [pc, #336]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016bcc:	f003 0302 	and.w	r3, r3, #2
 8016bd0:	2b02      	cmp	r3, #2
 8016bd2:	d107      	bne.n	8016be4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8016bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bd6:	2b03      	cmp	r3, #3
 8016bd8:	d104      	bne.n	8016be4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8016bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8016be0:	f000 be32 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8016be4:	4b4c      	ldr	r3, [pc, #304]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	f003 0320 	and.w	r3, r3, #32
 8016bec:	2b20      	cmp	r3, #32
 8016bee:	d11b      	bne.n	8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8016bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bf2:	2b04      	cmp	r3, #4
 8016bf4:	d118      	bne.n	8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8016bf6:	4b48      	ldr	r3, [pc, #288]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016bf8:	689b      	ldr	r3, [r3, #8]
 8016bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d005      	beq.n	8016c0e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8016c02:	4b45      	ldr	r3, [pc, #276]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016c04:	689b      	ldr	r3, [r3, #8]
 8016c06:	0e1b      	lsrs	r3, r3, #24
 8016c08:	f003 030f 	and.w	r3, r3, #15
 8016c0c:	e006      	b.n	8016c1c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8016c0e:	4b42      	ldr	r3, [pc, #264]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016c14:	041b      	lsls	r3, r3, #16
 8016c16:	0e1b      	lsrs	r3, r3, #24
 8016c18:	f003 030f 	and.w	r3, r3, #15
 8016c1c:	4a40      	ldr	r2, [pc, #256]	@ (8016d20 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8016c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c24:	f000 be10 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c2c:	f000 be0c 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8016c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c34:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8016c38:	430b      	orrs	r3, r1
 8016c3a:	d173      	bne.n	8016d24 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8016c3c:	4b36      	ldr	r3, [pc, #216]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8016c42:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8016c46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8016c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016c4e:	d104      	bne.n	8016c5a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8016c50:	f7fe f88a 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8016c54:	6378      	str	r0, [r7, #52]	@ 0x34
 8016c56:	f000 bdf7 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8016c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016c60:	d108      	bne.n	8016c74 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016c62:	f107 0318 	add.w	r3, r7, #24
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7ff f992 	bl	8015f90 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8016c6c:	6a3b      	ldr	r3, [r7, #32]
 8016c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c70:	f000 bdea 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8016c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d104      	bne.n	8016c84 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8016c7a:	f7fe f977 	bl	8014f6c <HAL_RCC_GetHCLKFreq>
 8016c7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8016c80:	f000 bde2 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8016c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8016c8a:	d122      	bne.n	8016cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8016c8c:	4b22      	ldr	r3, [pc, #136]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	f003 0320 	and.w	r3, r3, #32
 8016c94:	2b20      	cmp	r3, #32
 8016c96:	d118      	bne.n	8016cca <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8016c98:	4b1f      	ldr	r3, [pc, #124]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016c9a:	689b      	ldr	r3, [r3, #8]
 8016c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d005      	beq.n	8016cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8016ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016ca6:	689b      	ldr	r3, [r3, #8]
 8016ca8:	0e1b      	lsrs	r3, r3, #24
 8016caa:	f003 030f 	and.w	r3, r3, #15
 8016cae:	e006      	b.n	8016cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8016cb0:	4b19      	ldr	r3, [pc, #100]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016cb6:	041b      	lsls	r3, r3, #16
 8016cb8:	0e1b      	lsrs	r3, r3, #24
 8016cba:	f003 030f 	and.w	r3, r3, #15
 8016cbe:	4a18      	ldr	r2, [pc, #96]	@ (8016d20 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8016cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8016cc6:	f000 bdbf 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8016cce:	f000 bdbb 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8016cd2:	4b11      	ldr	r3, [pc, #68]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016cda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016cde:	d107      	bne.n	8016cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8016ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ce2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016ce6:	d103      	bne.n	8016cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8016ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8016cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8016cec:	f000 bdac 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8016cf0:	4b09      	ldr	r3, [pc, #36]	@ (8016d18 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016cfc:	d107      	bne.n	8016d0e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8016cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016d04:	d103      	bne.n	8016d0e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8016d06:	4b05      	ldr	r3, [pc, #20]	@ (8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8016d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d0a:	f000 bd9d 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8016d0e:	2300      	movs	r3, #0
 8016d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d12:	f000 bd99 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8016d16:	bf00      	nop
 8016d18:	46020c00 	.word	0x46020c00
 8016d1c:	00f42400 	.word	0x00f42400
 8016d20:	080254bc 	.word	0x080254bc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8016d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016d28:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8016d2c:	430b      	orrs	r3, r1
 8016d2e:	d158      	bne.n	8016de2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8016d30:	4bad      	ldr	r3, [pc, #692]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016d32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8016d36:	f003 0307 	and.w	r3, r3, #7
 8016d3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8016d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d3e:	2b04      	cmp	r3, #4
 8016d40:	d84b      	bhi.n	8016dda <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8016d42:	a201      	add	r2, pc, #4	@ (adr r2, 8016d48 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8016d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d48:	08016d81 	.word	0x08016d81
 8016d4c:	08016d5d 	.word	0x08016d5d
 8016d50:	08016d6f 	.word	0x08016d6f
 8016d54:	08016d8b 	.word	0x08016d8b
 8016d58:	08016d95 	.word	0x08016d95
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016d60:	4618      	mov	r0, r3
 8016d62:	f7fe ffbb 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8016d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016d6a:	f000 bd6d 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016d6e:	f107 030c 	add.w	r3, r7, #12
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7ff fa66 	bl	8016244 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016d7c:	f000 bd64 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8016d80:	f7fe f8f4 	bl	8014f6c <HAL_RCC_GetHCLKFreq>
 8016d84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8016d86:	f000 bd5f 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8016d8a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8016d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016d90:	f000 bd5a 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8016d94:	4b94      	ldr	r3, [pc, #592]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	f003 0320 	and.w	r3, r3, #32
 8016d9c:	2b20      	cmp	r3, #32
 8016d9e:	d118      	bne.n	8016dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8016da0:	4b91      	ldr	r3, [pc, #580]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016da2:	689b      	ldr	r3, [r3, #8]
 8016da4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d005      	beq.n	8016db8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8016dac:	4b8e      	ldr	r3, [pc, #568]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016dae:	689b      	ldr	r3, [r3, #8]
 8016db0:	0e1b      	lsrs	r3, r3, #24
 8016db2:	f003 030f 	and.w	r3, r3, #15
 8016db6:	e006      	b.n	8016dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8016db8:	4b8b      	ldr	r3, [pc, #556]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016dbe:	041b      	lsls	r3, r3, #16
 8016dc0:	0e1b      	lsrs	r3, r3, #24
 8016dc2:	f003 030f 	and.w	r3, r3, #15
 8016dc6:	4a89      	ldr	r2, [pc, #548]	@ (8016fec <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8016dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016dcc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8016dce:	f000 bd3b 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016dd6:	f000 bd37 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016dde:	f000 bd33 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8016de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016de6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8016dea:	430b      	orrs	r3, r1
 8016dec:	d167      	bne.n	8016ebe <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8016dee:	4b7e      	ldr	r3, [pc, #504]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8016df4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8016df8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8016dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016e00:	d036      	beq.n	8016e70 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8016e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016e08:	d855      	bhi.n	8016eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8016e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8016e10:	d029      	beq.n	8016e66 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8016e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8016e18:	d84d      	bhi.n	8016eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8016e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016e20:	d013      	beq.n	8016e4a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8016e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016e28:	d845      	bhi.n	8016eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8016e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d015      	beq.n	8016e5c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8016e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016e36:	d13e      	bne.n	8016eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f7fe ff4d 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8016e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016e46:	f000 bcff 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016e4a:	f107 030c 	add.w	r3, r7, #12
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7ff f9f8 	bl	8016244 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016e58:	f000 bcf6 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8016e5c:	f7fe f886 	bl	8014f6c <HAL_RCC_GetHCLKFreq>
 8016e60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8016e62:	f000 bcf1 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8016e66:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8016e6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016e6c:	f000 bcec 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8016e70:	4b5d      	ldr	r3, [pc, #372]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	f003 0320 	and.w	r3, r3, #32
 8016e78:	2b20      	cmp	r3, #32
 8016e7a:	d118      	bne.n	8016eae <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8016e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016e7e:	689b      	ldr	r3, [r3, #8]
 8016e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d005      	beq.n	8016e94 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8016e88:	4b57      	ldr	r3, [pc, #348]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016e8a:	689b      	ldr	r3, [r3, #8]
 8016e8c:	0e1b      	lsrs	r3, r3, #24
 8016e8e:	f003 030f 	and.w	r3, r3, #15
 8016e92:	e006      	b.n	8016ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8016e94:	4b54      	ldr	r3, [pc, #336]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016e9a:	041b      	lsls	r3, r3, #16
 8016e9c:	0e1b      	lsrs	r3, r3, #24
 8016e9e:	f003 030f 	and.w	r3, r3, #15
 8016ea2:	4a52      	ldr	r2, [pc, #328]	@ (8016fec <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8016ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ea8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8016eaa:	f000 bccd 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016eb2:	f000 bcc9 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8016eba:	f000 bcc5 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8016ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ec2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8016ec6:	430b      	orrs	r3, r1
 8016ec8:	d14c      	bne.n	8016f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8016eca:	4b47      	ldr	r3, [pc, #284]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016ed0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8016ed4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8016ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d104      	bne.n	8016ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8016edc:	f7fe f860 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 8016ee0:	6378      	str	r0, [r7, #52]	@ 0x34
 8016ee2:	f000 bcb1 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8016ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016eec:	d104      	bne.n	8016ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8016eee:	f7fd ff3b 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8016ef2:	6378      	str	r0, [r7, #52]	@ 0x34
 8016ef4:	f000 bca8 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8016ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016f04:	d107      	bne.n	8016f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8016f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016f0c:	d103      	bne.n	8016f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8016f0e:	4b38      	ldr	r3, [pc, #224]	@ (8016ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8016f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f12:	f000 bc99 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8016f16:	4b34      	ldr	r3, [pc, #208]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	f003 0320 	and.w	r3, r3, #32
 8016f1e:	2b20      	cmp	r3, #32
 8016f20:	d11c      	bne.n	8016f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8016f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016f28:	d118      	bne.n	8016f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8016f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016f2c:	689b      	ldr	r3, [r3, #8]
 8016f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d005      	beq.n	8016f42 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8016f36:	4b2c      	ldr	r3, [pc, #176]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016f38:	689b      	ldr	r3, [r3, #8]
 8016f3a:	0e1b      	lsrs	r3, r3, #24
 8016f3c:	f003 030f 	and.w	r3, r3, #15
 8016f40:	e006      	b.n	8016f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8016f42:	4b29      	ldr	r3, [pc, #164]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016f48:	041b      	lsls	r3, r3, #16
 8016f4a:	0e1b      	lsrs	r3, r3, #24
 8016f4c:	f003 030f 	and.w	r3, r3, #15
 8016f50:	4a26      	ldr	r2, [pc, #152]	@ (8016fec <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8016f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f58:	f000 bc76 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016f60:	f000 bc72 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8016f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f68:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8016f6c:	430b      	orrs	r3, r1
 8016f6e:	d152      	bne.n	8017016 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8016f70:	4b1d      	ldr	r3, [pc, #116]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016f76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8016f7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8016f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d104      	bne.n	8016f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8016f82:	f7fe f80d 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 8016f86:	6378      	str	r0, [r7, #52]	@ 0x34
 8016f88:	f000 bc5e 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8016f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f92:	d104      	bne.n	8016f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8016f94:	f7fd fee8 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8016f98:	6378      	str	r0, [r7, #52]	@ 0x34
 8016f9a:	f000 bc55 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8016f9e:	4b12      	ldr	r3, [pc, #72]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016faa:	d107      	bne.n	8016fbc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8016fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016fb2:	d103      	bne.n	8016fbc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8016fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8016ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8016fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8016fb8:	f000 bc46 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8016fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	f003 0320 	and.w	r3, r3, #32
 8016fc4:	2b20      	cmp	r3, #32
 8016fc6:	d122      	bne.n	801700e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8016fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016fce:	d11e      	bne.n	801700e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8016fd0:	4b05      	ldr	r3, [pc, #20]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016fd2:	689b      	ldr	r3, [r3, #8]
 8016fd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d00b      	beq.n	8016ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8016fdc:	4b02      	ldr	r3, [pc, #8]	@ (8016fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8016fde:	689b      	ldr	r3, [r3, #8]
 8016fe0:	0e1b      	lsrs	r3, r3, #24
 8016fe2:	f003 030f 	and.w	r3, r3, #15
 8016fe6:	e00c      	b.n	8017002 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8016fe8:	46020c00 	.word	0x46020c00
 8016fec:	080254bc 	.word	0x080254bc
 8016ff0:	00f42400 	.word	0x00f42400
 8016ff4:	4ba1      	ldr	r3, [pc, #644]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8016ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016ffa:	041b      	lsls	r3, r3, #16
 8016ffc:	0e1b      	lsrs	r3, r3, #24
 8016ffe:	f003 030f 	and.w	r3, r3, #15
 8017002:	4a9f      	ldr	r2, [pc, #636]	@ (8017280 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017008:	637b      	str	r3, [r7, #52]	@ 0x34
 801700a:	f000 bc1d 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 801700e:	2300      	movs	r3, #0
 8017010:	637b      	str	r3, [r7, #52]	@ 0x34
 8017012:	f000 bc19 	b.w	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8017016:	e9d7 2300 	ldrd	r2, r3, [r7]
 801701a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801701e:	430b      	orrs	r3, r1
 8017020:	d151      	bne.n	80170c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8017022:	4b96      	ldr	r3, [pc, #600]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017028:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801702c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 801702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017030:	2bc0      	cmp	r3, #192	@ 0xc0
 8017032:	d024      	beq.n	801707e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8017034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017036:	2bc0      	cmp	r3, #192	@ 0xc0
 8017038:	d842      	bhi.n	80170c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 801703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801703c:	2b80      	cmp	r3, #128	@ 0x80
 801703e:	d00d      	beq.n	801705c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8017040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017042:	2b80      	cmp	r3, #128	@ 0x80
 8017044:	d83c      	bhi.n	80170c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8017046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017048:	2b00      	cmp	r3, #0
 801704a:	d003      	beq.n	8017054 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 801704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801704e:	2b40      	cmp	r3, #64	@ 0x40
 8017050:	d011      	beq.n	8017076 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8017052:	e035      	b.n	80170c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8017054:	f7fd ffcc 	bl	8014ff0 <HAL_RCC_GetPCLK3Freq>
 8017058:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801705a:	e3f5      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801705c:	4b87      	ldr	r3, [pc, #540]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017068:	d102      	bne.n	8017070 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 801706a:	4b86      	ldr	r3, [pc, #536]	@ (8017284 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 801706c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801706e:	e3eb      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8017070:	2300      	movs	r3, #0
 8017072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017074:	e3e8      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8017076:	f7fd fe77 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 801707a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801707c:	e3e4      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801707e:	4b7f      	ldr	r3, [pc, #508]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	f003 0320 	and.w	r3, r3, #32
 8017086:	2b20      	cmp	r3, #32
 8017088:	d117      	bne.n	80170ba <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801708a:	4b7c      	ldr	r3, [pc, #496]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 801708c:	689b      	ldr	r3, [r3, #8]
 801708e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017092:	2b00      	cmp	r3, #0
 8017094:	d005      	beq.n	80170a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8017096:	4b79      	ldr	r3, [pc, #484]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017098:	689b      	ldr	r3, [r3, #8]
 801709a:	0e1b      	lsrs	r3, r3, #24
 801709c:	f003 030f 	and.w	r3, r3, #15
 80170a0:	e006      	b.n	80170b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80170a2:	4b76      	ldr	r3, [pc, #472]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80170a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80170a8:	041b      	lsls	r3, r3, #16
 80170aa:	0e1b      	lsrs	r3, r3, #24
 80170ac:	f003 030f 	and.w	r3, r3, #15
 80170b0:	4a73      	ldr	r2, [pc, #460]	@ (8017280 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80170b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80170b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80170b8:	e3c6      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80170ba:	2300      	movs	r3, #0
 80170bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80170be:	e3c3      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80170c0:	2300      	movs	r3, #0
 80170c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80170c4:	e3c0      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80170c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80170ca:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80170ce:	430b      	orrs	r3, r1
 80170d0:	d147      	bne.n	8017162 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80170d2:	4b6a      	ldr	r3, [pc, #424]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80170d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80170d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80170dc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80170de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d103      	bne.n	80170ec <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80170e4:	f7fd ff5c 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 80170e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80170ea:	e3ad      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80170ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80170f2:	d103      	bne.n	80170fc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80170f4:	f7fd fe38 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 80170f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80170fa:	e3a5      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80170fc:	4b5f      	ldr	r3, [pc, #380]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017108:	d106      	bne.n	8017118 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 801710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801710c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017110:	d102      	bne.n	8017118 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8017112:	4b5c      	ldr	r3, [pc, #368]	@ (8017284 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8017114:	637b      	str	r3, [r7, #52]	@ 0x34
 8017116:	e397      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8017118:	4b58      	ldr	r3, [pc, #352]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	f003 0320 	and.w	r3, r3, #32
 8017120:	2b20      	cmp	r3, #32
 8017122:	d11b      	bne.n	801715c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8017124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017126:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801712a:	d117      	bne.n	801715c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801712c:	4b53      	ldr	r3, [pc, #332]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 801712e:	689b      	ldr	r3, [r3, #8]
 8017130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017134:	2b00      	cmp	r3, #0
 8017136:	d005      	beq.n	8017144 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8017138:	4b50      	ldr	r3, [pc, #320]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 801713a:	689b      	ldr	r3, [r3, #8]
 801713c:	0e1b      	lsrs	r3, r3, #24
 801713e:	f003 030f 	and.w	r3, r3, #15
 8017142:	e006      	b.n	8017152 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8017144:	4b4d      	ldr	r3, [pc, #308]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801714a:	041b      	lsls	r3, r3, #16
 801714c:	0e1b      	lsrs	r3, r3, #24
 801714e:	f003 030f 	and.w	r3, r3, #15
 8017152:	4a4b      	ldr	r2, [pc, #300]	@ (8017280 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8017154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017158:	637b      	str	r3, [r7, #52]	@ 0x34
 801715a:	e375      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 801715c:	2300      	movs	r3, #0
 801715e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017160:	e372      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8017162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017166:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801716a:	430b      	orrs	r3, r1
 801716c:	d164      	bne.n	8017238 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 801716e:	4b43      	ldr	r3, [pc, #268]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8017178:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 801717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801717c:	2b00      	cmp	r3, #0
 801717e:	d120      	bne.n	80171c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8017180:	4b3e      	ldr	r3, [pc, #248]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	f003 0320 	and.w	r3, r3, #32
 8017188:	2b20      	cmp	r3, #32
 801718a:	d117      	bne.n	80171bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801718c:	4b3b      	ldr	r3, [pc, #236]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 801718e:	689b      	ldr	r3, [r3, #8]
 8017190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017194:	2b00      	cmp	r3, #0
 8017196:	d005      	beq.n	80171a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8017198:	4b38      	ldr	r3, [pc, #224]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 801719a:	689b      	ldr	r3, [r3, #8]
 801719c:	0e1b      	lsrs	r3, r3, #24
 801719e:	f003 030f 	and.w	r3, r3, #15
 80171a2:	e006      	b.n	80171b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80171a4:	4b35      	ldr	r3, [pc, #212]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80171a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80171aa:	041b      	lsls	r3, r3, #16
 80171ac:	0e1b      	lsrs	r3, r3, #24
 80171ae:	f003 030f 	and.w	r3, r3, #15
 80171b2:	4a33      	ldr	r2, [pc, #204]	@ (8017280 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80171b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80171b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80171ba:	e345      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80171bc:	2300      	movs	r3, #0
 80171be:	637b      	str	r3, [r7, #52]	@ 0x34
 80171c0:	e342      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80171c2:	4b2e      	ldr	r3, [pc, #184]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80171c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80171c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80171cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80171d0:	d112      	bne.n	80171f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80171d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80171d8:	d10e      	bne.n	80171f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80171da:	4b28      	ldr	r3, [pc, #160]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80171dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80171e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80171e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80171e8:	d102      	bne.n	80171f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80171ea:	23fa      	movs	r3, #250	@ 0xfa
 80171ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80171ee:	e32b      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80171f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80171f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80171f6:	e327      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80171f8:	4b20      	ldr	r3, [pc, #128]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017204:	d106      	bne.n	8017214 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8017206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801720c:	d102      	bne.n	8017214 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 801720e:	4b1d      	ldr	r3, [pc, #116]	@ (8017284 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8017210:	637b      	str	r3, [r7, #52]	@ 0x34
 8017212:	e319      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8017214:	4b19      	ldr	r3, [pc, #100]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801721a:	f003 0302 	and.w	r3, r3, #2
 801721e:	2b02      	cmp	r3, #2
 8017220:	d107      	bne.n	8017232 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8017222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017228:	d103      	bne.n	8017232 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 801722a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801722e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017230:	e30a      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8017232:	2300      	movs	r3, #0
 8017234:	637b      	str	r3, [r7, #52]	@ 0x34
 8017236:	e307      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8017238:	e9d7 2300 	ldrd	r2, r3, [r7]
 801723c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8017240:	430b      	orrs	r3, r1
 8017242:	d16b      	bne.n	801731c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8017244:	4b0d      	ldr	r3, [pc, #52]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801724a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801724e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8017250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017252:	2b00      	cmp	r3, #0
 8017254:	d127      	bne.n	80172a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8017256:	4b09      	ldr	r3, [pc, #36]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	f003 0320 	and.w	r3, r3, #32
 801725e:	2b20      	cmp	r3, #32
 8017260:	d11e      	bne.n	80172a0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017262:	4b06      	ldr	r3, [pc, #24]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017264:	689b      	ldr	r3, [r3, #8]
 8017266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801726a:	2b00      	cmp	r3, #0
 801726c:	d00c      	beq.n	8017288 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 801726e:	4b03      	ldr	r3, [pc, #12]	@ (801727c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8017270:	689b      	ldr	r3, [r3, #8]
 8017272:	0e1b      	lsrs	r3, r3, #24
 8017274:	f003 030f 	and.w	r3, r3, #15
 8017278:	e00d      	b.n	8017296 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 801727a:	bf00      	nop
 801727c:	46020c00 	.word	0x46020c00
 8017280:	080254bc 	.word	0x080254bc
 8017284:	00f42400 	.word	0x00f42400
 8017288:	4b94      	ldr	r3, [pc, #592]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 801728a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801728e:	041b      	lsls	r3, r3, #16
 8017290:	0e1b      	lsrs	r3, r3, #24
 8017292:	f003 030f 	and.w	r3, r3, #15
 8017296:	4a92      	ldr	r2, [pc, #584]	@ (80174e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8017298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801729c:	637b      	str	r3, [r7, #52]	@ 0x34
 801729e:	e2d3      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80172a0:	2300      	movs	r3, #0
 80172a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80172a4:	e2d0      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80172a6:	4b8d      	ldr	r3, [pc, #564]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80172a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80172ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80172b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80172b4:	d112      	bne.n	80172dc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80172b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80172bc:	d10e      	bne.n	80172dc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80172be:	4b87      	ldr	r3, [pc, #540]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80172c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80172c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80172c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80172cc:	d102      	bne.n	80172d4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80172ce:	23fa      	movs	r3, #250	@ 0xfa
 80172d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80172d2:	e2b9      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80172d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80172d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80172da:	e2b5      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80172dc:	4b7f      	ldr	r3, [pc, #508]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80172e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80172e8:	d106      	bne.n	80172f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80172ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80172f0:	d102      	bne.n	80172f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80172f2:	4b7c      	ldr	r3, [pc, #496]	@ (80174e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80172f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80172f6:	e2a7      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80172f8:	4b78      	ldr	r3, [pc, #480]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80172fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80172fe:	f003 0302 	and.w	r3, r3, #2
 8017302:	2b02      	cmp	r3, #2
 8017304:	d107      	bne.n	8017316 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8017306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017308:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801730c:	d103      	bne.n	8017316 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 801730e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017312:	637b      	str	r3, [r7, #52]	@ 0x34
 8017314:	e298      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8017316:	2300      	movs	r3, #0
 8017318:	637b      	str	r3, [r7, #52]	@ 0x34
 801731a:	e295      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 801731c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017320:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8017324:	430b      	orrs	r3, r1
 8017326:	d147      	bne.n	80173b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8017328:	4b6c      	ldr	r3, [pc, #432]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 801732a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801732e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8017332:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8017334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017336:	2b00      	cmp	r3, #0
 8017338:	d103      	bne.n	8017342 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 801733a:	f7fd fe31 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 801733e:	6378      	str	r0, [r7, #52]	@ 0x34
 8017340:	e282      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8017342:	4b66      	ldr	r3, [pc, #408]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8017344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801734c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017350:	d112      	bne.n	8017378 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8017352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017354:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017358:	d10e      	bne.n	8017378 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801735a:	4b60      	ldr	r3, [pc, #384]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 801735c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017368:	d102      	bne.n	8017370 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 801736a:	23fa      	movs	r3, #250	@ 0xfa
 801736c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801736e:	e26b      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8017370:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8017374:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8017376:	e267      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8017378:	4b58      	ldr	r3, [pc, #352]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017384:	d106      	bne.n	8017394 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8017386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017388:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801738c:	d102      	bne.n	8017394 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 801738e:	4b55      	ldr	r3, [pc, #340]	@ (80174e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017390:	637b      	str	r3, [r7, #52]	@ 0x34
 8017392:	e259      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8017394:	4b51      	ldr	r3, [pc, #324]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8017396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801739a:	f003 0302 	and.w	r3, r3, #2
 801739e:	2b02      	cmp	r3, #2
 80173a0:	d107      	bne.n	80173b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80173a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80173a8:	d103      	bne.n	80173b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80173aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80173ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80173b0:	e24a      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80173b2:	2300      	movs	r3, #0
 80173b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80173b6:	e247      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80173b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80173bc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80173c0:	430b      	orrs	r3, r1
 80173c2:	d12d      	bne.n	8017420 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80173c4:	4b45      	ldr	r3, [pc, #276]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80173c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80173ca:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80173ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80173d0:	4b42      	ldr	r3, [pc, #264]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80173d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80173dc:	d105      	bne.n	80173ea <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80173de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d102      	bne.n	80173ea <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80173e4:	4b3f      	ldr	r3, [pc, #252]	@ (80174e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80173e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80173e8:	e22e      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80173ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80173f0:	d107      	bne.n	8017402 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80173f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7fe fc70 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80173fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8017400:	e222      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8017402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017408:	d107      	bne.n	801741a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801740a:	f107 0318 	add.w	r3, r7, #24
 801740e:	4618      	mov	r0, r3
 8017410:	f7fe fdbe 	bl	8015f90 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8017414:	69bb      	ldr	r3, [r7, #24]
 8017416:	637b      	str	r3, [r7, #52]	@ 0x34
 8017418:	e216      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 801741a:	2300      	movs	r3, #0
 801741c:	637b      	str	r3, [r7, #52]	@ 0x34
 801741e:	e213      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8017420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017424:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8017428:	430b      	orrs	r3, r1
 801742a:	d15d      	bne.n	80174e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 801742c:	4b2b      	ldr	r3, [pc, #172]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 801742e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017432:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8017436:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8017438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801743a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801743e:	d028      	beq.n	8017492 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8017440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017442:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017446:	d845      	bhi.n	80174d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8017448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801744a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801744e:	d013      	beq.n	8017478 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8017450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017456:	d83d      	bhi.n	80174d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8017458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801745a:	2b00      	cmp	r3, #0
 801745c:	d004      	beq.n	8017468 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 801745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017460:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017464:	d004      	beq.n	8017470 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8017466:	e035      	b.n	80174d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8017468:	f7fd fdae 	bl	8014fc8 <HAL_RCC_GetPCLK2Freq>
 801746c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801746e:	e1eb      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8017470:	f7fd fc7a 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8017474:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8017476:	e1e7      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017478:	4b18      	ldr	r3, [pc, #96]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017484:	d102      	bne.n	801748c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8017486:	4b17      	ldr	r3, [pc, #92]	@ (80174e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8017488:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801748a:	e1dd      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 801748c:	2300      	movs	r3, #0
 801748e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017490:	e1da      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8017492:	4b12      	ldr	r3, [pc, #72]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	f003 0320 	and.w	r3, r3, #32
 801749a:	2b20      	cmp	r3, #32
 801749c:	d117      	bne.n	80174ce <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801749e:	4b0f      	ldr	r3, [pc, #60]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80174a0:	689b      	ldr	r3, [r3, #8]
 80174a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d005      	beq.n	80174b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80174aa:	4b0c      	ldr	r3, [pc, #48]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80174ac:	689b      	ldr	r3, [r3, #8]
 80174ae:	0e1b      	lsrs	r3, r3, #24
 80174b0:	f003 030f 	and.w	r3, r3, #15
 80174b4:	e006      	b.n	80174c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80174b6:	4b09      	ldr	r3, [pc, #36]	@ (80174dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80174b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80174bc:	041b      	lsls	r3, r3, #16
 80174be:	0e1b      	lsrs	r3, r3, #24
 80174c0:	f003 030f 	and.w	r3, r3, #15
 80174c4:	4a06      	ldr	r2, [pc, #24]	@ (80174e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80174c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80174ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80174cc:	e1bc      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80174ce:	2300      	movs	r3, #0
 80174d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80174d2:	e1b9      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80174d4:	2300      	movs	r3, #0
 80174d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80174d8:	e1b6      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80174da:	bf00      	nop
 80174dc:	46020c00 	.word	0x46020c00
 80174e0:	080254bc 	.word	0x080254bc
 80174e4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80174e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80174ec:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80174f0:	430b      	orrs	r3, r1
 80174f2:	d156      	bne.n	80175a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80174f4:	4ba5      	ldr	r3, [pc, #660]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80174f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80174fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80174fe:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8017500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017502:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8017506:	d028      	beq.n	801755a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8017508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801750a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801750e:	d845      	bhi.n	801759c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8017510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017516:	d013      	beq.n	8017540 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8017518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801751a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801751e:	d83d      	bhi.n	801759c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8017520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017522:	2b00      	cmp	r3, #0
 8017524:	d004      	beq.n	8017530 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8017526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801752c:	d004      	beq.n	8017538 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 801752e:	e035      	b.n	801759c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8017530:	f7fd fd36 	bl	8014fa0 <HAL_RCC_GetPCLK1Freq>
 8017534:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8017536:	e187      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8017538:	f7fd fc16 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 801753c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801753e:	e183      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017540:	4b92      	ldr	r3, [pc, #584]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801754c:	d102      	bne.n	8017554 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 801754e:	4b90      	ldr	r3, [pc, #576]	@ (8017790 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8017550:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8017552:	e179      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8017554:	2300      	movs	r3, #0
 8017556:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017558:	e176      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801755a:	4b8c      	ldr	r3, [pc, #560]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	f003 0320 	and.w	r3, r3, #32
 8017562:	2b20      	cmp	r3, #32
 8017564:	d117      	bne.n	8017596 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017566:	4b89      	ldr	r3, [pc, #548]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017568:	689b      	ldr	r3, [r3, #8]
 801756a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801756e:	2b00      	cmp	r3, #0
 8017570:	d005      	beq.n	801757e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8017572:	4b86      	ldr	r3, [pc, #536]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017574:	689b      	ldr	r3, [r3, #8]
 8017576:	0e1b      	lsrs	r3, r3, #24
 8017578:	f003 030f 	and.w	r3, r3, #15
 801757c:	e006      	b.n	801758c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 801757e:	4b83      	ldr	r3, [pc, #524]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8017584:	041b      	lsls	r3, r3, #16
 8017586:	0e1b      	lsrs	r3, r3, #24
 8017588:	f003 030f 	and.w	r3, r3, #15
 801758c:	4a81      	ldr	r2, [pc, #516]	@ (8017794 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 801758e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017592:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8017594:	e158      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8017596:	2300      	movs	r3, #0
 8017598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801759a:	e155      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 801759c:	2300      	movs	r3, #0
 801759e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80175a0:	e152      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80175a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80175a6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80175aa:	430b      	orrs	r3, r1
 80175ac:	d177      	bne.n	801769e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80175ae:	4b77      	ldr	r3, [pc, #476]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80175b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80175b4:	f003 0318 	and.w	r3, r3, #24
 80175b8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80175ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175bc:	2b18      	cmp	r3, #24
 80175be:	d86b      	bhi.n	8017698 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80175c0:	a201      	add	r2, pc, #4	@ (adr r2, 80175c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80175c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175c6:	bf00      	nop
 80175c8:	0801762d 	.word	0x0801762d
 80175cc:	08017699 	.word	0x08017699
 80175d0:	08017699 	.word	0x08017699
 80175d4:	08017699 	.word	0x08017699
 80175d8:	08017699 	.word	0x08017699
 80175dc:	08017699 	.word	0x08017699
 80175e0:	08017699 	.word	0x08017699
 80175e4:	08017699 	.word	0x08017699
 80175e8:	08017635 	.word	0x08017635
 80175ec:	08017699 	.word	0x08017699
 80175f0:	08017699 	.word	0x08017699
 80175f4:	08017699 	.word	0x08017699
 80175f8:	08017699 	.word	0x08017699
 80175fc:	08017699 	.word	0x08017699
 8017600:	08017699 	.word	0x08017699
 8017604:	08017699 	.word	0x08017699
 8017608:	0801763d 	.word	0x0801763d
 801760c:	08017699 	.word	0x08017699
 8017610:	08017699 	.word	0x08017699
 8017614:	08017699 	.word	0x08017699
 8017618:	08017699 	.word	0x08017699
 801761c:	08017699 	.word	0x08017699
 8017620:	08017699 	.word	0x08017699
 8017624:	08017699 	.word	0x08017699
 8017628:	08017657 	.word	0x08017657
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 801762c:	f7fd fce0 	bl	8014ff0 <HAL_RCC_GetPCLK3Freq>
 8017630:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8017632:	e109      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8017634:	f7fd fb98 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 8017638:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801763a:	e105      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801763c:	4b53      	ldr	r3, [pc, #332]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017648:	d102      	bne.n	8017650 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 801764a:	4b51      	ldr	r3, [pc, #324]	@ (8017790 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 801764c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801764e:	e0fb      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8017650:	2300      	movs	r3, #0
 8017652:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017654:	e0f8      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8017656:	4b4d      	ldr	r3, [pc, #308]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	f003 0320 	and.w	r3, r3, #32
 801765e:	2b20      	cmp	r3, #32
 8017660:	d117      	bne.n	8017692 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8017662:	4b4a      	ldr	r3, [pc, #296]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017664:	689b      	ldr	r3, [r3, #8]
 8017666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801766a:	2b00      	cmp	r3, #0
 801766c:	d005      	beq.n	801767a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 801766e:	4b47      	ldr	r3, [pc, #284]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017670:	689b      	ldr	r3, [r3, #8]
 8017672:	0e1b      	lsrs	r3, r3, #24
 8017674:	f003 030f 	and.w	r3, r3, #15
 8017678:	e006      	b.n	8017688 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 801767a:	4b44      	ldr	r3, [pc, #272]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 801767c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8017680:	041b      	lsls	r3, r3, #16
 8017682:	0e1b      	lsrs	r3, r3, #24
 8017684:	f003 030f 	and.w	r3, r3, #15
 8017688:	4a42      	ldr	r2, [pc, #264]	@ (8017794 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 801768a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801768e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8017690:	e0da      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8017692:	2300      	movs	r3, #0
 8017694:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017696:	e0d7      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8017698:	2300      	movs	r3, #0
 801769a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801769c:	e0d4      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 801769e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80176a2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80176a6:	430b      	orrs	r3, r1
 80176a8:	d155      	bne.n	8017756 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80176aa:	4b38      	ldr	r3, [pc, #224]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80176ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80176b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80176b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80176b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80176bc:	d013      	beq.n	80176e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80176be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80176c4:	d844      	bhi.n	8017750 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80176c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80176cc:	d013      	beq.n	80176f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80176ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80176d4:	d83c      	bhi.n	8017750 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80176d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d014      	beq.n	8017706 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80176dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80176e2:	d014      	beq.n	801770e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80176e4:	e034      	b.n	8017750 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80176e6:	f107 0318 	add.w	r3, r7, #24
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7fe fc50 	bl	8015f90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80176f0:	69fb      	ldr	r3, [r7, #28]
 80176f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80176f4:	e0a8      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80176f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7fe faee 	bl	8015cdc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8017700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017702:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017704:	e0a0      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8017706:	f7fd fb2f 	bl	8014d68 <HAL_RCC_GetSysClockFreq>
 801770a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801770c:	e09c      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801770e:	4b1f      	ldr	r3, [pc, #124]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	f003 0320 	and.w	r3, r3, #32
 8017716:	2b20      	cmp	r3, #32
 8017718:	d117      	bne.n	801774a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801771a:	4b1c      	ldr	r3, [pc, #112]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 801771c:	689b      	ldr	r3, [r3, #8]
 801771e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017722:	2b00      	cmp	r3, #0
 8017724:	d005      	beq.n	8017732 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8017726:	4b19      	ldr	r3, [pc, #100]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017728:	689b      	ldr	r3, [r3, #8]
 801772a:	0e1b      	lsrs	r3, r3, #24
 801772c:	f003 030f 	and.w	r3, r3, #15
 8017730:	e006      	b.n	8017740 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8017732:	4b16      	ldr	r3, [pc, #88]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8017738:	041b      	lsls	r3, r3, #16
 801773a:	0e1b      	lsrs	r3, r3, #24
 801773c:	f003 030f 	and.w	r3, r3, #15
 8017740:	4a14      	ldr	r2, [pc, #80]	@ (8017794 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8017742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017746:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8017748:	e07e      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 801774a:	2300      	movs	r3, #0
 801774c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801774e:	e07b      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8017750:	2300      	movs	r3, #0
 8017752:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8017754:	e078      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8017756:	e9d7 2300 	ldrd	r2, r3, [r7]
 801775a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 801775e:	430b      	orrs	r3, r1
 8017760:	d138      	bne.n	80177d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8017762:	4b0a      	ldr	r3, [pc, #40]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801776c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 801776e:	4b07      	ldr	r3, [pc, #28]	@ (801778c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8017770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8017774:	f003 0302 	and.w	r3, r3, #2
 8017778:	2b02      	cmp	r3, #2
 801777a:	d10d      	bne.n	8017798 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 801777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801777e:	2b00      	cmp	r3, #0
 8017780:	d10a      	bne.n	8017798 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8017782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017786:	637b      	str	r3, [r7, #52]	@ 0x34
 8017788:	e05e      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 801778a:	bf00      	nop
 801778c:	46020c00 	.word	0x46020c00
 8017790:	00f42400 	.word	0x00f42400
 8017794:	080254bc 	.word	0x080254bc
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8017798:	4b2e      	ldr	r3, [pc, #184]	@ (8017854 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 801779a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801779e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80177a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80177a6:	d112      	bne.n	80177ce <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80177a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80177ae:	d10e      	bne.n	80177ce <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80177b0:	4b28      	ldr	r3, [pc, #160]	@ (8017854 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80177b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80177b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80177ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80177be:	d102      	bne.n	80177c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80177c0:	23fa      	movs	r3, #250	@ 0xfa
 80177c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80177c4:	e040      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80177c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80177ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80177cc:	e03c      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80177ce:	2300      	movs	r3, #0
 80177d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80177d2:	e039      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80177d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80177d8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80177dc:	430b      	orrs	r3, r1
 80177de:	d131      	bne.n	8017844 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80177e0:	4b1c      	ldr	r3, [pc, #112]	@ (8017854 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80177e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80177e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80177ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80177ec:	4b19      	ldr	r3, [pc, #100]	@ (8017854 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80177f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80177f8:	d105      	bne.n	8017806 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80177fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d102      	bne.n	8017806 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8017800:	4b15      	ldr	r3, [pc, #84]	@ (8017858 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8017802:	637b      	str	r3, [r7, #52]	@ 0x34
 8017804:	e020      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8017806:	4b13      	ldr	r3, [pc, #76]	@ (8017854 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801780e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017812:	d106      	bne.n	8017822 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8017814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801781a:	d102      	bne.n	8017822 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 801781c:	4b0f      	ldr	r3, [pc, #60]	@ (801785c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 801781e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017820:	e012      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8017822:	4b0c      	ldr	r3, [pc, #48]	@ (8017854 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801782a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801782e:	d106      	bne.n	801783e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8017830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017836:	d102      	bne.n	801783e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8017838:	4b09      	ldr	r3, [pc, #36]	@ (8017860 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 801783a:	637b      	str	r3, [r7, #52]	@ 0x34
 801783c:	e004      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 801783e:	2300      	movs	r3, #0
 8017840:	637b      	str	r3, [r7, #52]	@ 0x34
 8017842:	e001      	b.n	8017848 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8017844:	2300      	movs	r3, #0
 8017846:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8017848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801784a:	4618      	mov	r0, r3
 801784c:	3738      	adds	r7, #56	@ 0x38
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
 8017852:	bf00      	nop
 8017854:	46020c00 	.word	0x46020c00
 8017858:	02dc6c00 	.word	0x02dc6c00
 801785c:	016e3600 	.word	0x016e3600
 8017860:	00f42400 	.word	0x00f42400

08017864 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b084      	sub	sp, #16
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 801786c:	4b47      	ldr	r3, [pc, #284]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	4a46      	ldr	r2, [pc, #280]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017872:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017876:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017878:	f7fa fdf2 	bl	8012460 <HAL_GetTick>
 801787c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801787e:	e008      	b.n	8017892 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8017880:	f7fa fdee 	bl	8012460 <HAL_GetTick>
 8017884:	4602      	mov	r2, r0
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	1ad3      	subs	r3, r2, r3
 801788a:	2b02      	cmp	r3, #2
 801788c:	d901      	bls.n	8017892 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 801788e:	2303      	movs	r3, #3
 8017890:	e077      	b.n	8017982 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8017892:	4b3e      	ldr	r3, [pc, #248]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801789a:	2b00      	cmp	r3, #0
 801789c:	d1f0      	bne.n	8017880 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 801789e:	4b3b      	ldr	r3, [pc, #236]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 80178a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80178a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80178a6:	f023 0303 	bic.w	r3, r3, #3
 80178aa:	687a      	ldr	r2, [r7, #4]
 80178ac:	6811      	ldr	r1, [r2, #0]
 80178ae:	687a      	ldr	r2, [r7, #4]
 80178b0:	6852      	ldr	r2, [r2, #4]
 80178b2:	3a01      	subs	r2, #1
 80178b4:	0212      	lsls	r2, r2, #8
 80178b6:	430a      	orrs	r2, r1
 80178b8:	4934      	ldr	r1, [pc, #208]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 80178ba:	4313      	orrs	r3, r2
 80178bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80178be:	4b33      	ldr	r3, [pc, #204]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 80178c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80178c2:	4b33      	ldr	r3, [pc, #204]	@ (8017990 <RCCEx_PLL2_Config+0x12c>)
 80178c4:	4013      	ands	r3, r2
 80178c6:	687a      	ldr	r2, [r7, #4]
 80178c8:	6892      	ldr	r2, [r2, #8]
 80178ca:	3a01      	subs	r2, #1
 80178cc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80178d0:	687a      	ldr	r2, [r7, #4]
 80178d2:	68d2      	ldr	r2, [r2, #12]
 80178d4:	3a01      	subs	r2, #1
 80178d6:	0252      	lsls	r2, r2, #9
 80178d8:	b292      	uxth	r2, r2
 80178da:	4311      	orrs	r1, r2
 80178dc:	687a      	ldr	r2, [r7, #4]
 80178de:	6912      	ldr	r2, [r2, #16]
 80178e0:	3a01      	subs	r2, #1
 80178e2:	0412      	lsls	r2, r2, #16
 80178e4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80178e8:	4311      	orrs	r1, r2
 80178ea:	687a      	ldr	r2, [r7, #4]
 80178ec:	6952      	ldr	r2, [r2, #20]
 80178ee:	3a01      	subs	r2, #1
 80178f0:	0612      	lsls	r2, r2, #24
 80178f2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80178f6:	430a      	orrs	r2, r1
 80178f8:	4924      	ldr	r1, [pc, #144]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 80178fa:	4313      	orrs	r3, r2
 80178fc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80178fe:	4b23      	ldr	r3, [pc, #140]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017902:	f023 020c 	bic.w	r2, r3, #12
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	699b      	ldr	r3, [r3, #24]
 801790a:	4920      	ldr	r1, [pc, #128]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 801790c:	4313      	orrs	r3, r2
 801790e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8017910:	4b1e      	ldr	r3, [pc, #120]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6a1b      	ldr	r3, [r3, #32]
 8017918:	491c      	ldr	r1, [pc, #112]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 801791a:	4313      	orrs	r3, r2
 801791c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 801791e:	4b1b      	ldr	r3, [pc, #108]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017922:	4a1a      	ldr	r2, [pc, #104]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017924:	f023 0310 	bic.w	r3, r3, #16
 8017928:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801792a:	4b18      	ldr	r3, [pc, #96]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 801792c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801792e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017932:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8017936:	687a      	ldr	r2, [r7, #4]
 8017938:	69d2      	ldr	r2, [r2, #28]
 801793a:	00d2      	lsls	r2, r2, #3
 801793c:	4913      	ldr	r1, [pc, #76]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 801793e:	4313      	orrs	r3, r2
 8017940:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8017942:	4b12      	ldr	r3, [pc, #72]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017946:	4a11      	ldr	r2, [pc, #68]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017948:	f043 0310 	orr.w	r3, r3, #16
 801794c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 801794e:	4b0f      	ldr	r3, [pc, #60]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	4a0e      	ldr	r2, [pc, #56]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017954:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017958:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801795a:	f7fa fd81 	bl	8012460 <HAL_GetTick>
 801795e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8017960:	e008      	b.n	8017974 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8017962:	f7fa fd7d 	bl	8012460 <HAL_GetTick>
 8017966:	4602      	mov	r2, r0
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	1ad3      	subs	r3, r2, r3
 801796c:	2b02      	cmp	r3, #2
 801796e:	d901      	bls.n	8017974 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8017970:	2303      	movs	r3, #3
 8017972:	e006      	b.n	8017982 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8017974:	4b05      	ldr	r3, [pc, #20]	@ (801798c <RCCEx_PLL2_Config+0x128>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801797c:	2b00      	cmp	r3, #0
 801797e:	d0f0      	beq.n	8017962 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8017980:	2300      	movs	r3, #0

}
 8017982:	4618      	mov	r0, r3
 8017984:	3710      	adds	r7, #16
 8017986:	46bd      	mov	sp, r7
 8017988:	bd80      	pop	{r7, pc}
 801798a:	bf00      	nop
 801798c:	46020c00 	.word	0x46020c00
 8017990:	80800000 	.word	0x80800000

08017994 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b084      	sub	sp, #16
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 801799c:	4b47      	ldr	r3, [pc, #284]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	4a46      	ldr	r2, [pc, #280]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 80179a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80179a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80179a8:	f7fa fd5a 	bl	8012460 <HAL_GetTick>
 80179ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80179ae:	e008      	b.n	80179c2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80179b0:	f7fa fd56 	bl	8012460 <HAL_GetTick>
 80179b4:	4602      	mov	r2, r0
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	1ad3      	subs	r3, r2, r3
 80179ba:	2b02      	cmp	r3, #2
 80179bc:	d901      	bls.n	80179c2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80179be:	2303      	movs	r3, #3
 80179c0:	e077      	b.n	8017ab2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80179c2:	4b3e      	ldr	r3, [pc, #248]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d1f0      	bne.n	80179b0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80179ce:	4b3b      	ldr	r3, [pc, #236]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 80179d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80179d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80179d6:	f023 0303 	bic.w	r3, r3, #3
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	6811      	ldr	r1, [r2, #0]
 80179de:	687a      	ldr	r2, [r7, #4]
 80179e0:	6852      	ldr	r2, [r2, #4]
 80179e2:	3a01      	subs	r2, #1
 80179e4:	0212      	lsls	r2, r2, #8
 80179e6:	430a      	orrs	r2, r1
 80179e8:	4934      	ldr	r1, [pc, #208]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 80179ea:	4313      	orrs	r3, r2
 80179ec:	630b      	str	r3, [r1, #48]	@ 0x30
 80179ee:	4b33      	ldr	r3, [pc, #204]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 80179f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80179f2:	4b33      	ldr	r3, [pc, #204]	@ (8017ac0 <RCCEx_PLL3_Config+0x12c>)
 80179f4:	4013      	ands	r3, r2
 80179f6:	687a      	ldr	r2, [r7, #4]
 80179f8:	6892      	ldr	r2, [r2, #8]
 80179fa:	3a01      	subs	r2, #1
 80179fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8017a00:	687a      	ldr	r2, [r7, #4]
 8017a02:	68d2      	ldr	r2, [r2, #12]
 8017a04:	3a01      	subs	r2, #1
 8017a06:	0252      	lsls	r2, r2, #9
 8017a08:	b292      	uxth	r2, r2
 8017a0a:	4311      	orrs	r1, r2
 8017a0c:	687a      	ldr	r2, [r7, #4]
 8017a0e:	6912      	ldr	r2, [r2, #16]
 8017a10:	3a01      	subs	r2, #1
 8017a12:	0412      	lsls	r2, r2, #16
 8017a14:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8017a18:	4311      	orrs	r1, r2
 8017a1a:	687a      	ldr	r2, [r7, #4]
 8017a1c:	6952      	ldr	r2, [r2, #20]
 8017a1e:	3a01      	subs	r2, #1
 8017a20:	0612      	lsls	r2, r2, #24
 8017a22:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8017a26:	430a      	orrs	r2, r1
 8017a28:	4924      	ldr	r1, [pc, #144]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a2a:	4313      	orrs	r3, r2
 8017a2c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8017a2e:	4b23      	ldr	r3, [pc, #140]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a32:	f023 020c 	bic.w	r2, r3, #12
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	699b      	ldr	r3, [r3, #24]
 8017a3a:	4920      	ldr	r1, [pc, #128]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a3c:	4313      	orrs	r3, r2
 8017a3e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8017a40:	4b1e      	ldr	r3, [pc, #120]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	6a1b      	ldr	r3, [r3, #32]
 8017a48:	491c      	ldr	r1, [pc, #112]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a4a:	4313      	orrs	r3, r2
 8017a4c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8017a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a52:	4a1a      	ldr	r2, [pc, #104]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a54:	f023 0310 	bic.w	r3, r3, #16
 8017a58:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8017a5a:	4b18      	ldr	r3, [pc, #96]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017a62:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8017a66:	687a      	ldr	r2, [r7, #4]
 8017a68:	69d2      	ldr	r2, [r2, #28]
 8017a6a:	00d2      	lsls	r2, r2, #3
 8017a6c:	4913      	ldr	r1, [pc, #76]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a6e:	4313      	orrs	r3, r2
 8017a70:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8017a72:	4b12      	ldr	r3, [pc, #72]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a76:	4a11      	ldr	r2, [pc, #68]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a78:	f043 0310 	orr.w	r3, r3, #16
 8017a7c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8017a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	4a0e      	ldr	r2, [pc, #56]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017a88:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017a8a:	f7fa fce9 	bl	8012460 <HAL_GetTick>
 8017a8e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017a90:	e008      	b.n	8017aa4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8017a92:	f7fa fce5 	bl	8012460 <HAL_GetTick>
 8017a96:	4602      	mov	r2, r0
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	1ad3      	subs	r3, r2, r3
 8017a9c:	2b02      	cmp	r3, #2
 8017a9e:	d901      	bls.n	8017aa4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8017aa0:	2303      	movs	r3, #3
 8017aa2:	e006      	b.n	8017ab2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017aa4:	4b05      	ldr	r3, [pc, #20]	@ (8017abc <RCCEx_PLL3_Config+0x128>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d0f0      	beq.n	8017a92 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8017ab0:	2300      	movs	r3, #0
}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3710      	adds	r7, #16
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}
 8017aba:	bf00      	nop
 8017abc:	46020c00 	.word	0x46020c00
 8017ac0:	80800000 	.word	0x80800000

08017ac4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b084      	sub	sp, #16
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d101      	bne.n	8017ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	e0fb      	b.n	8017cce <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	4a7f      	ldr	r2, [pc, #508]	@ (8017cd8 <HAL_SPI_Init+0x214>)
 8017adc:	4293      	cmp	r3, r2
 8017ade:	d004      	beq.n	8017aea <HAL_SPI_Init+0x26>
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	4a7d      	ldr	r2, [pc, #500]	@ (8017cdc <HAL_SPI_Init+0x218>)
 8017ae6:	4293      	cmp	r3, r2
 8017ae8:	e000      	b.n	8017aec <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8017aea:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	2200      	movs	r2, #0
 8017af0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	4a78      	ldr	r2, [pc, #480]	@ (8017cd8 <HAL_SPI_Init+0x214>)
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d004      	beq.n	8017b06 <HAL_SPI_Init+0x42>
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	4a76      	ldr	r2, [pc, #472]	@ (8017cdc <HAL_SPI_Init+0x218>)
 8017b02:	4293      	cmp	r3, r2
 8017b04:	d105      	bne.n	8017b12 <HAL_SPI_Init+0x4e>
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	68db      	ldr	r3, [r3, #12]
 8017b0a:	2b0f      	cmp	r3, #15
 8017b0c:	d901      	bls.n	8017b12 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	e0dd      	b.n	8017cce <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8017b12:	6878      	ldr	r0, [r7, #4]
 8017b14:	f000 fbce 	bl	80182b4 <SPI_GetPacketSize>
 8017b18:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	4a6e      	ldr	r2, [pc, #440]	@ (8017cd8 <HAL_SPI_Init+0x214>)
 8017b20:	4293      	cmp	r3, r2
 8017b22:	d004      	beq.n	8017b2e <HAL_SPI_Init+0x6a>
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	4a6c      	ldr	r2, [pc, #432]	@ (8017cdc <HAL_SPI_Init+0x218>)
 8017b2a:	4293      	cmp	r3, r2
 8017b2c:	d102      	bne.n	8017b34 <HAL_SPI_Init+0x70>
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	2b08      	cmp	r3, #8
 8017b32:	d816      	bhi.n	8017b62 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8017b38:	4a69      	ldr	r2, [pc, #420]	@ (8017ce0 <HAL_SPI_Init+0x21c>)
 8017b3a:	4293      	cmp	r3, r2
 8017b3c:	d00e      	beq.n	8017b5c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	4a68      	ldr	r2, [pc, #416]	@ (8017ce4 <HAL_SPI_Init+0x220>)
 8017b44:	4293      	cmp	r3, r2
 8017b46:	d009      	beq.n	8017b5c <HAL_SPI_Init+0x98>
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	4a66      	ldr	r2, [pc, #408]	@ (8017ce8 <HAL_SPI_Init+0x224>)
 8017b4e:	4293      	cmp	r3, r2
 8017b50:	d004      	beq.n	8017b5c <HAL_SPI_Init+0x98>
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	4a65      	ldr	r2, [pc, #404]	@ (8017cec <HAL_SPI_Init+0x228>)
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	d104      	bne.n	8017b66 <HAL_SPI_Init+0xa2>
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	2b10      	cmp	r3, #16
 8017b60:	d901      	bls.n	8017b66 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8017b62:	2301      	movs	r3, #1
 8017b64:	e0b3      	b.n	8017cce <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8017b6c:	b2db      	uxtb	r3, r3
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d106      	bne.n	8017b80 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2200      	movs	r2, #0
 8017b76:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f7f9 fe9a 	bl	80118b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	2202      	movs	r2, #2
 8017b84:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	681a      	ldr	r2, [r3, #0]
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	f022 0201 	bic.w	r2, r2, #1
 8017b96:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	689b      	ldr	r3, [r3, #8]
 8017b9e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8017ba2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	699b      	ldr	r3, [r3, #24]
 8017ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017bac:	d119      	bne.n	8017be2 <HAL_SPI_Init+0x11e>
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	685b      	ldr	r3, [r3, #4]
 8017bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017bb6:	d103      	bne.n	8017bc0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d008      	beq.n	8017bd2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d10c      	bne.n	8017be2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8017bcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017bd0:	d107      	bne.n	8017be2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	681a      	ldr	r2, [r3, #0]
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8017be0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	685b      	ldr	r3, [r3, #4]
 8017be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d00f      	beq.n	8017c0e <HAL_SPI_Init+0x14a>
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	68db      	ldr	r3, [r3, #12]
 8017bf2:	2b06      	cmp	r3, #6
 8017bf4:	d90b      	bls.n	8017c0e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	430a      	orrs	r2, r1
 8017c0a:	601a      	str	r2, [r3, #0]
 8017c0c:	e007      	b.n	8017c1e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	681a      	ldr	r2, [r3, #0]
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8017c1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	69da      	ldr	r2, [r3, #28]
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c26:	431a      	orrs	r2, r3
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	431a      	orrs	r2, r3
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017c30:	ea42 0103 	orr.w	r1, r2, r3
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	68da      	ldr	r2, [r3, #12]
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	430a      	orrs	r2, r1
 8017c3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c48:	431a      	orrs	r2, r3
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017c4e:	431a      	orrs	r2, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	699b      	ldr	r3, [r3, #24]
 8017c54:	431a      	orrs	r2, r3
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	691b      	ldr	r3, [r3, #16]
 8017c5a:	431a      	orrs	r2, r3
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	695b      	ldr	r3, [r3, #20]
 8017c60:	431a      	orrs	r2, r3
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	6a1b      	ldr	r3, [r3, #32]
 8017c66:	431a      	orrs	r2, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	685b      	ldr	r3, [r3, #4]
 8017c6c:	431a      	orrs	r2, r3
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c72:	431a      	orrs	r2, r3
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	689b      	ldr	r3, [r3, #8]
 8017c78:	431a      	orrs	r2, r3
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017c7e:	431a      	orrs	r2, r3
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017c84:	431a      	orrs	r2, r3
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017c8a:	ea42 0103 	orr.w	r1, r2, r3
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	430a      	orrs	r2, r1
 8017c98:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	685b      	ldr	r3, [r3, #4]
 8017c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d00a      	beq.n	8017cbc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	68db      	ldr	r3, [r3, #12]
 8017cac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	430a      	orrs	r2, r1
 8017cba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2201      	movs	r2, #1
 8017cc8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8017ccc:	2300      	movs	r3, #0
}
 8017cce:	4618      	mov	r0, r3
 8017cd0:	3710      	adds	r7, #16
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}
 8017cd6:	bf00      	nop
 8017cd8:	46002000 	.word	0x46002000
 8017cdc:	56002000 	.word	0x56002000
 8017ce0:	40013000 	.word	0x40013000
 8017ce4:	50013000 	.word	0x50013000
 8017ce8:	40003800 	.word	0x40003800
 8017cec:	50003800 	.word	0x50003800

08017cf0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b088      	sub	sp, #32
 8017cf4:	af02      	add	r7, sp, #8
 8017cf6:	60f8      	str	r0, [r7, #12]
 8017cf8:	60b9      	str	r1, [r7, #8]
 8017cfa:	603b      	str	r3, [r7, #0]
 8017cfc:	4613      	mov	r3, r2
 8017cfe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	3320      	adds	r3, #32
 8017d06:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	4a90      	ldr	r2, [pc, #576]	@ (8017f50 <HAL_SPI_Transmit+0x260>)
 8017d0e:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8017d10:	f7fa fba6 	bl	8012460 <HAL_GetTick>
 8017d14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8017d1c:	b2db      	uxtb	r3, r3
 8017d1e:	2b01      	cmp	r3, #1
 8017d20:	d001      	beq.n	8017d26 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8017d22:	2302      	movs	r3, #2
 8017d24:	e1f4      	b.n	8018110 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d002      	beq.n	8017d32 <HAL_SPI_Transmit+0x42>
 8017d2c:	88fb      	ldrh	r3, [r7, #6]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d101      	bne.n	8017d36 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8017d32:	2301      	movs	r3, #1
 8017d34:	e1ec      	b.n	8018110 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8017d3c:	2b01      	cmp	r3, #1
 8017d3e:	d101      	bne.n	8017d44 <HAL_SPI_Transmit+0x54>
 8017d40:	2302      	movs	r3, #2
 8017d42:	e1e5      	b.n	8018110 <HAL_SPI_Transmit+0x420>
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	2201      	movs	r2, #1
 8017d48:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	2203      	movs	r2, #3
 8017d50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	2200      	movs	r2, #0
 8017d58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	68ba      	ldr	r2, [r7, #8]
 8017d60:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	88fa      	ldrh	r2, [r7, #6]
 8017d66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	88fa      	ldrh	r2, [r7, #6]
 8017d6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	2200      	movs	r2, #0
 8017d76:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	2200      	movs	r2, #0
 8017d84:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	2200      	movs	r2, #0
 8017d92:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	689b      	ldr	r3, [r3, #8]
 8017d98:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8017d9c:	d108      	bne.n	8017db0 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8017dac:	601a      	str	r2, [r3, #0]
 8017dae:	e009      	b.n	8017dc4 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	68db      	ldr	r3, [r3, #12]
 8017db6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8017dc2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	0c1b      	lsrs	r3, r3, #16
 8017dcc:	041b      	lsls	r3, r3, #16
 8017dce:	88f9      	ldrh	r1, [r7, #6]
 8017dd0:	68fa      	ldr	r2, [r7, #12]
 8017dd2:	6812      	ldr	r2, [r2, #0]
 8017dd4:	430b      	orrs	r3, r1
 8017dd6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	681a      	ldr	r2, [r3, #0]
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	f042 0201 	orr.w	r2, r2, #1
 8017de6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	69db      	ldr	r3, [r3, #28]
 8017dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d10c      	bne.n	8017e10 <HAL_SPI_Transmit+0x120>
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	685b      	ldr	r3, [r3, #4]
 8017dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017dfe:	d107      	bne.n	8017e10 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	681a      	ldr	r2, [r3, #0]
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017e0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	68db      	ldr	r3, [r3, #12]
 8017e14:	2b0f      	cmp	r3, #15
 8017e16:	d95b      	bls.n	8017ed0 <HAL_SPI_Transmit+0x1e0>
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	4a4d      	ldr	r2, [pc, #308]	@ (8017f54 <HAL_SPI_Transmit+0x264>)
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	d04f      	beq.n	8017ec2 <HAL_SPI_Transmit+0x1d2>
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	4a4c      	ldr	r2, [pc, #304]	@ (8017f58 <HAL_SPI_Transmit+0x268>)
 8017e28:	4293      	cmp	r3, r2
 8017e2a:	d04a      	beq.n	8017ec2 <HAL_SPI_Transmit+0x1d2>
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	4a4a      	ldr	r2, [pc, #296]	@ (8017f5c <HAL_SPI_Transmit+0x26c>)
 8017e32:	4293      	cmp	r3, r2
 8017e34:	d045      	beq.n	8017ec2 <HAL_SPI_Transmit+0x1d2>
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	4a49      	ldr	r2, [pc, #292]	@ (8017f60 <HAL_SPI_Transmit+0x270>)
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	d147      	bne.n	8017ed0 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8017e40:	e03f      	b.n	8017ec2 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	695b      	ldr	r3, [r3, #20]
 8017e48:	f003 0302 	and.w	r3, r3, #2
 8017e4c:	2b02      	cmp	r3, #2
 8017e4e:	d114      	bne.n	8017e7a <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	6812      	ldr	r2, [r2, #0]
 8017e5a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017e60:	1d1a      	adds	r2, r3, #4
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	3b01      	subs	r3, #1
 8017e70:	b29a      	uxth	r2, r3
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8017e78:	e023      	b.n	8017ec2 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017e7a:	f7fa faf1 	bl	8012460 <HAL_GetTick>
 8017e7e:	4602      	mov	r2, r0
 8017e80:	693b      	ldr	r3, [r7, #16]
 8017e82:	1ad3      	subs	r3, r2, r3
 8017e84:	683a      	ldr	r2, [r7, #0]
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d803      	bhi.n	8017e92 <HAL_SPI_Transmit+0x1a2>
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e90:	d102      	bne.n	8017e98 <HAL_SPI_Transmit+0x1a8>
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d114      	bne.n	8017ec2 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8017e98:	68f8      	ldr	r0, [r7, #12]
 8017e9a:	f000 f93d 	bl	8018118 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017ea4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	2201      	movs	r2, #1
 8017eb2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8017ebe:	2303      	movs	r3, #3
 8017ec0:	e126      	b.n	8018110 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017ec8:	b29b      	uxth	r3, r3
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d1b9      	bne.n	8017e42 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8017ece:	e0f9      	b.n	80180c4 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	68db      	ldr	r3, [r3, #12]
 8017ed4:	2b07      	cmp	r3, #7
 8017ed6:	f240 80ee 	bls.w	80180b6 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8017eda:	e067      	b.n	8017fac <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	695b      	ldr	r3, [r3, #20]
 8017ee2:	f003 0302 	and.w	r3, r3, #2
 8017ee6:	2b02      	cmp	r3, #2
 8017ee8:	d13c      	bne.n	8017f64 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017ef0:	b29b      	uxth	r3, r3
 8017ef2:	2b01      	cmp	r3, #1
 8017ef4:	d918      	bls.n	8017f28 <HAL_SPI_Transmit+0x238>
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d014      	beq.n	8017f28 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	6812      	ldr	r2, [r2, #0]
 8017f08:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017f0e:	1d1a      	adds	r2, r3, #4
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017f1a:	b29b      	uxth	r3, r3
 8017f1c:	3b02      	subs	r3, #2
 8017f1e:	b29a      	uxth	r2, r3
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8017f26:	e041      	b.n	8017fac <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017f2c:	881a      	ldrh	r2, [r3, #0]
 8017f2e:	697b      	ldr	r3, [r7, #20]
 8017f30:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017f36:	1c9a      	adds	r2, r3, #2
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017f42:	b29b      	uxth	r3, r3
 8017f44:	3b01      	subs	r3, #1
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8017f4e:	e02d      	b.n	8017fac <HAL_SPI_Transmit+0x2bc>
 8017f50:	46002000 	.word	0x46002000
 8017f54:	40013000 	.word	0x40013000
 8017f58:	50013000 	.word	0x50013000
 8017f5c:	40003800 	.word	0x40003800
 8017f60:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017f64:	f7fa fa7c 	bl	8012460 <HAL_GetTick>
 8017f68:	4602      	mov	r2, r0
 8017f6a:	693b      	ldr	r3, [r7, #16]
 8017f6c:	1ad3      	subs	r3, r2, r3
 8017f6e:	683a      	ldr	r2, [r7, #0]
 8017f70:	429a      	cmp	r2, r3
 8017f72:	d803      	bhi.n	8017f7c <HAL_SPI_Transmit+0x28c>
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f7a:	d102      	bne.n	8017f82 <HAL_SPI_Transmit+0x292>
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d114      	bne.n	8017fac <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8017f82:	68f8      	ldr	r0, [r7, #12]
 8017f84:	f000 f8c8 	bl	8018118 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017f8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	2201      	movs	r2, #1
 8017f9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8017fa8:	2303      	movs	r3, #3
 8017faa:	e0b1      	b.n	8018110 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017fb2:	b29b      	uxth	r3, r3
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d191      	bne.n	8017edc <HAL_SPI_Transmit+0x1ec>
 8017fb8:	e084      	b.n	80180c4 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	695b      	ldr	r3, [r3, #20]
 8017fc0:	f003 0302 	and.w	r3, r3, #2
 8017fc4:	2b02      	cmp	r3, #2
 8017fc6:	d152      	bne.n	801806e <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	2b03      	cmp	r3, #3
 8017fd2:	d918      	bls.n	8018006 <HAL_SPI_Transmit+0x316>
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017fd8:	2b40      	cmp	r3, #64	@ 0x40
 8017fda:	d914      	bls.n	8018006 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	6812      	ldr	r2, [r2, #0]
 8017fe6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017fec:	1d1a      	adds	r2, r3, #4
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	3b04      	subs	r3, #4
 8017ffc:	b29a      	uxth	r2, r3
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8018004:	e057      	b.n	80180b6 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801800c:	b29b      	uxth	r3, r3
 801800e:	2b01      	cmp	r3, #1
 8018010:	d917      	bls.n	8018042 <HAL_SPI_Transmit+0x352>
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018016:	2b00      	cmp	r3, #0
 8018018:	d013      	beq.n	8018042 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801801e:	881a      	ldrh	r2, [r3, #0]
 8018020:	697b      	ldr	r3, [r7, #20]
 8018022:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018028:	1c9a      	adds	r2, r3, #2
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018034:	b29b      	uxth	r3, r3
 8018036:	3b02      	subs	r3, #2
 8018038:	b29a      	uxth	r2, r3
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8018040:	e039      	b.n	80180b6 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	3320      	adds	r3, #32
 801804c:	7812      	ldrb	r2, [r2, #0]
 801804e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018054:	1c5a      	adds	r2, r3, #1
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018060:	b29b      	uxth	r3, r3
 8018062:	3b01      	subs	r3, #1
 8018064:	b29a      	uxth	r2, r3
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801806c:	e023      	b.n	80180b6 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801806e:	f7fa f9f7 	bl	8012460 <HAL_GetTick>
 8018072:	4602      	mov	r2, r0
 8018074:	693b      	ldr	r3, [r7, #16]
 8018076:	1ad3      	subs	r3, r2, r3
 8018078:	683a      	ldr	r2, [r7, #0]
 801807a:	429a      	cmp	r2, r3
 801807c:	d803      	bhi.n	8018086 <HAL_SPI_Transmit+0x396>
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018084:	d102      	bne.n	801808c <HAL_SPI_Transmit+0x39c>
 8018086:	683b      	ldr	r3, [r7, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d114      	bne.n	80180b6 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801808c:	68f8      	ldr	r0, [r7, #12]
 801808e:	f000 f843 	bl	8018118 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018098:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	2201      	movs	r2, #1
 80180a6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	2200      	movs	r2, #0
 80180ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80180b2:	2303      	movs	r3, #3
 80180b4:	e02c      	b.n	8018110 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80180bc:	b29b      	uxth	r3, r3
 80180be:	2b00      	cmp	r3, #0
 80180c0:	f47f af7b 	bne.w	8017fba <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	9300      	str	r3, [sp, #0]
 80180c8:	683b      	ldr	r3, [r7, #0]
 80180ca:	2200      	movs	r2, #0
 80180cc:	2108      	movs	r1, #8
 80180ce:	68f8      	ldr	r0, [r7, #12]
 80180d0:	f000 f8c2 	bl	8018258 <SPI_WaitOnFlagUntilTimeout>
 80180d4:	4603      	mov	r3, r0
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d007      	beq.n	80180ea <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80180e0:	f043 0220 	orr.w	r2, r3, #32
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80180ea:	68f8      	ldr	r0, [r7, #12]
 80180ec:	f000 f814 	bl	8018118 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	2201      	movs	r2, #1
 80180f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	2200      	movs	r2, #0
 80180fc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018106:	2b00      	cmp	r3, #0
 8018108:	d001      	beq.n	801810e <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 801810a:	2301      	movs	r3, #1
 801810c:	e000      	b.n	8018110 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 801810e:	2300      	movs	r3, #0
  }
}
 8018110:	4618      	mov	r0, r3
 8018112:	3718      	adds	r7, #24
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}

08018118 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8018118:	b480      	push	{r7}
 801811a:	b085      	sub	sp, #20
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	695b      	ldr	r3, [r3, #20]
 8018126:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	699a      	ldr	r2, [r3, #24]
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	f042 0208 	orr.w	r2, r2, #8
 8018136:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	699a      	ldr	r2, [r3, #24]
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f042 0210 	orr.w	r2, r2, #16
 8018146:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	681a      	ldr	r2, [r3, #0]
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	f022 0201 	bic.w	r2, r2, #1
 8018156:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	691b      	ldr	r3, [r3, #16]
 801815e:	687a      	ldr	r2, [r7, #4]
 8018160:	6812      	ldr	r2, [r2, #0]
 8018162:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8018166:	f023 0303 	bic.w	r3, r3, #3
 801816a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	689a      	ldr	r2, [r3, #8]
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801817a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b04      	cmp	r3, #4
 8018186:	d014      	beq.n	80181b2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	f003 0320 	and.w	r3, r3, #32
 801818e:	2b00      	cmp	r3, #0
 8018190:	d00f      	beq.n	80181b2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018198:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	699a      	ldr	r2, [r3, #24]
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	f042 0220 	orr.w	r2, r2, #32
 80181b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	2b03      	cmp	r3, #3
 80181bc:	d014      	beq.n	80181e8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d00f      	beq.n	80181e8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80181ce:	f043 0204 	orr.w	r2, r3, #4
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	699a      	ldr	r2, [r3, #24]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80181e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d00f      	beq.n	8018212 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80181f8:	f043 0201 	orr.w	r2, r3, #1
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	699a      	ldr	r2, [r3, #24]
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018210:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018218:	2b00      	cmp	r3, #0
 801821a:	d00f      	beq.n	801823c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018222:	f043 0208 	orr.w	r2, r3, #8
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	699a      	ldr	r2, [r3, #24]
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801823a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	2200      	movs	r2, #0
 8018240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2200      	movs	r2, #0
 8018248:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 801824c:	bf00      	nop
 801824e:	3714      	adds	r7, #20
 8018250:	46bd      	mov	sp, r7
 8018252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018256:	4770      	bx	lr

08018258 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b084      	sub	sp, #16
 801825c:	af00      	add	r7, sp, #0
 801825e:	60f8      	str	r0, [r7, #12]
 8018260:	60b9      	str	r1, [r7, #8]
 8018262:	603b      	str	r3, [r7, #0]
 8018264:	4613      	mov	r3, r2
 8018266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8018268:	e010      	b.n	801828c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801826a:	f7fa f8f9 	bl	8012460 <HAL_GetTick>
 801826e:	4602      	mov	r2, r0
 8018270:	69bb      	ldr	r3, [r7, #24]
 8018272:	1ad3      	subs	r3, r2, r3
 8018274:	683a      	ldr	r2, [r7, #0]
 8018276:	429a      	cmp	r2, r3
 8018278:	d803      	bhi.n	8018282 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018280:	d102      	bne.n	8018288 <SPI_WaitOnFlagUntilTimeout+0x30>
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d101      	bne.n	801828c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8018288:	2303      	movs	r3, #3
 801828a:	e00f      	b.n	80182ac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	695a      	ldr	r2, [r3, #20]
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	4013      	ands	r3, r2
 8018296:	68ba      	ldr	r2, [r7, #8]
 8018298:	429a      	cmp	r2, r3
 801829a:	bf0c      	ite	eq
 801829c:	2301      	moveq	r3, #1
 801829e:	2300      	movne	r3, #0
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	461a      	mov	r2, r3
 80182a4:	79fb      	ldrb	r3, [r7, #7]
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d0df      	beq.n	801826a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80182aa:	2300      	movs	r3, #0
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	3710      	adds	r7, #16
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bd80      	pop	{r7, pc}

080182b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80182b4:	b480      	push	{r7}
 80182b6:	b085      	sub	sp, #20
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80182c0:	095b      	lsrs	r3, r3, #5
 80182c2:	3301      	adds	r3, #1
 80182c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	68db      	ldr	r3, [r3, #12]
 80182ca:	3301      	adds	r3, #1
 80182cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	3307      	adds	r3, #7
 80182d2:	08db      	lsrs	r3, r3, #3
 80182d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	68fa      	ldr	r2, [r7, #12]
 80182da:	fb02 f303 	mul.w	r3, r2, r3
}
 80182de:	4618      	mov	r0, r3
 80182e0:	3714      	adds	r7, #20
 80182e2:	46bd      	mov	sp, r7
 80182e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e8:	4770      	bx	lr

080182ea <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80182ea:	b480      	push	{r7}
 80182ec:	b083      	sub	sp, #12
 80182ee:	af00      	add	r7, sp, #0
 80182f0:	6078      	str	r0, [r7, #4]
 80182f2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80182fa:	b2db      	uxtb	r3, r3
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	d12e      	bne.n	801835e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8018306:	2b01      	cmp	r3, #1
 8018308:	d101      	bne.n	801830e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 801830a:	2302      	movs	r3, #2
 801830c:	e028      	b.n	8018360 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2201      	movs	r2, #1
 8018312:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2202      	movs	r2, #2
 801831a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	681a      	ldr	r2, [r3, #0]
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	f022 0201 	bic.w	r2, r2, #1
 801832c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	683b      	ldr	r3, [r7, #0]
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 801833a:	ea42 0103 	orr.w	r1, r2, r3
 801833e:	683b      	ldr	r3, [r7, #0]
 8018340:	689a      	ldr	r2, [r3, #8]
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	430a      	orrs	r2, r1
 8018348:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	2201      	movs	r2, #1
 801834e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2200      	movs	r2, #0
 8018356:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801835a:	2300      	movs	r3, #0
 801835c:	e000      	b.n	8018360 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 801835e:	2301      	movs	r3, #1
  }
}
 8018360:	4618      	mov	r0, r3
 8018362:	370c      	adds	r7, #12
 8018364:	46bd      	mov	sp, r7
 8018366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836a:	4770      	bx	lr

0801836c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b082      	sub	sp, #8
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d101      	bne.n	801837e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801837a:	2301      	movs	r3, #1
 801837c:	e049      	b.n	8018412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8018384:	b2db      	uxtb	r3, r3
 8018386:	2b00      	cmp	r3, #0
 8018388:	d106      	bne.n	8018398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	2200      	movs	r2, #0
 801838e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018392:	6878      	ldr	r0, [r7, #4]
 8018394:	f000 f841 	bl	801841a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2202      	movs	r2, #2
 801839c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681a      	ldr	r2, [r3, #0]
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	3304      	adds	r3, #4
 80183a8:	4619      	mov	r1, r3
 80183aa:	4610      	mov	r0, r2
 80183ac:	f000 fa58 	bl	8018860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2201      	movs	r2, #1
 80183b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	2201      	movs	r2, #1
 80183bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2201      	movs	r2, #1
 80183c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2201      	movs	r2, #1
 80183cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2201      	movs	r2, #1
 80183d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2201      	movs	r2, #1
 80183dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	2201      	movs	r2, #1
 80183e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2201      	movs	r2, #1
 80183ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2201      	movs	r2, #1
 80183f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2201      	movs	r2, #1
 80183fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2201      	movs	r2, #1
 8018404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2201      	movs	r2, #1
 801840c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8018410:	2300      	movs	r3, #0
}
 8018412:	4618      	mov	r0, r3
 8018414:	3708      	adds	r7, #8
 8018416:	46bd      	mov	sp, r7
 8018418:	bd80      	pop	{r7, pc}

0801841a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801841a:	b480      	push	{r7}
 801841c:	b083      	sub	sp, #12
 801841e:	af00      	add	r7, sp, #0
 8018420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018422:	bf00      	nop
 8018424:	370c      	adds	r7, #12
 8018426:	46bd      	mov	sp, r7
 8018428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842c:	4770      	bx	lr
	...

08018430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8018430:	b480      	push	{r7}
 8018432:	b085      	sub	sp, #20
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801843e:	b2db      	uxtb	r3, r3
 8018440:	2b01      	cmp	r3, #1
 8018442:	d001      	beq.n	8018448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018444:	2301      	movs	r3, #1
 8018446:	e072      	b.n	801852e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2202      	movs	r2, #2
 801844c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	68da      	ldr	r2, [r3, #12]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	f042 0201 	orr.w	r2, r2, #1
 801845e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	4a35      	ldr	r2, [pc, #212]	@ (801853c <HAL_TIM_Base_Start_IT+0x10c>)
 8018466:	4293      	cmp	r3, r2
 8018468:	d040      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	4a34      	ldr	r2, [pc, #208]	@ (8018540 <HAL_TIM_Base_Start_IT+0x110>)
 8018470:	4293      	cmp	r3, r2
 8018472:	d03b      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801847c:	d036      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018486:	d031      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	4a2d      	ldr	r2, [pc, #180]	@ (8018544 <HAL_TIM_Base_Start_IT+0x114>)
 801848e:	4293      	cmp	r3, r2
 8018490:	d02c      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	4a2c      	ldr	r2, [pc, #176]	@ (8018548 <HAL_TIM_Base_Start_IT+0x118>)
 8018498:	4293      	cmp	r3, r2
 801849a:	d027      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	4a2a      	ldr	r2, [pc, #168]	@ (801854c <HAL_TIM_Base_Start_IT+0x11c>)
 80184a2:	4293      	cmp	r3, r2
 80184a4:	d022      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	4a29      	ldr	r2, [pc, #164]	@ (8018550 <HAL_TIM_Base_Start_IT+0x120>)
 80184ac:	4293      	cmp	r3, r2
 80184ae:	d01d      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	4a27      	ldr	r2, [pc, #156]	@ (8018554 <HAL_TIM_Base_Start_IT+0x124>)
 80184b6:	4293      	cmp	r3, r2
 80184b8:	d018      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	4a26      	ldr	r2, [pc, #152]	@ (8018558 <HAL_TIM_Base_Start_IT+0x128>)
 80184c0:	4293      	cmp	r3, r2
 80184c2:	d013      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	4a24      	ldr	r2, [pc, #144]	@ (801855c <HAL_TIM_Base_Start_IT+0x12c>)
 80184ca:	4293      	cmp	r3, r2
 80184cc:	d00e      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	4a23      	ldr	r2, [pc, #140]	@ (8018560 <HAL_TIM_Base_Start_IT+0x130>)
 80184d4:	4293      	cmp	r3, r2
 80184d6:	d009      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	4a21      	ldr	r2, [pc, #132]	@ (8018564 <HAL_TIM_Base_Start_IT+0x134>)
 80184de:	4293      	cmp	r3, r2
 80184e0:	d004      	beq.n	80184ec <HAL_TIM_Base_Start_IT+0xbc>
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	4a20      	ldr	r2, [pc, #128]	@ (8018568 <HAL_TIM_Base_Start_IT+0x138>)
 80184e8:	4293      	cmp	r3, r2
 80184ea:	d115      	bne.n	8018518 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	689a      	ldr	r2, [r3, #8]
 80184f2:	4b1e      	ldr	r3, [pc, #120]	@ (801856c <HAL_TIM_Base_Start_IT+0x13c>)
 80184f4:	4013      	ands	r3, r2
 80184f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	2b06      	cmp	r3, #6
 80184fc:	d015      	beq.n	801852a <HAL_TIM_Base_Start_IT+0xfa>
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018504:	d011      	beq.n	801852a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	681a      	ldr	r2, [r3, #0]
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	f042 0201 	orr.w	r2, r2, #1
 8018514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018516:	e008      	b.n	801852a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	681a      	ldr	r2, [r3, #0]
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	f042 0201 	orr.w	r2, r2, #1
 8018526:	601a      	str	r2, [r3, #0]
 8018528:	e000      	b.n	801852c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801852a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801852c:	2300      	movs	r3, #0
}
 801852e:	4618      	mov	r0, r3
 8018530:	3714      	adds	r7, #20
 8018532:	46bd      	mov	sp, r7
 8018534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018538:	4770      	bx	lr
 801853a:	bf00      	nop
 801853c:	40012c00 	.word	0x40012c00
 8018540:	50012c00 	.word	0x50012c00
 8018544:	40000400 	.word	0x40000400
 8018548:	50000400 	.word	0x50000400
 801854c:	40000800 	.word	0x40000800
 8018550:	50000800 	.word	0x50000800
 8018554:	40000c00 	.word	0x40000c00
 8018558:	50000c00 	.word	0x50000c00
 801855c:	40013400 	.word	0x40013400
 8018560:	50013400 	.word	0x50013400
 8018564:	40014000 	.word	0x40014000
 8018568:	50014000 	.word	0x50014000
 801856c:	00010007 	.word	0x00010007

08018570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b084      	sub	sp, #16
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	68db      	ldr	r3, [r3, #12]
 801857e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	691b      	ldr	r3, [r3, #16]
 8018586:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8018588:	68bb      	ldr	r3, [r7, #8]
 801858a:	f003 0302 	and.w	r3, r3, #2
 801858e:	2b00      	cmp	r3, #0
 8018590:	d020      	beq.n	80185d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	f003 0302 	and.w	r3, r3, #2
 8018598:	2b00      	cmp	r3, #0
 801859a:	d01b      	beq.n	80185d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	f06f 0202 	mvn.w	r2, #2
 80185a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	2201      	movs	r2, #1
 80185aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	699b      	ldr	r3, [r3, #24]
 80185b2:	f003 0303 	and.w	r3, r3, #3
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d003      	beq.n	80185c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80185ba:	6878      	ldr	r0, [r7, #4]
 80185bc:	f000 f931 	bl	8018822 <HAL_TIM_IC_CaptureCallback>
 80185c0:	e005      	b.n	80185ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80185c2:	6878      	ldr	r0, [r7, #4]
 80185c4:	f000 f923 	bl	801880e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80185c8:	6878      	ldr	r0, [r7, #4]
 80185ca:	f000 f934 	bl	8018836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	2200      	movs	r2, #0
 80185d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	f003 0304 	and.w	r3, r3, #4
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d020      	beq.n	8018620 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	f003 0304 	and.w	r3, r3, #4
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d01b      	beq.n	8018620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	f06f 0204 	mvn.w	r2, #4
 80185f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	2202      	movs	r2, #2
 80185f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	699b      	ldr	r3, [r3, #24]
 80185fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8018602:	2b00      	cmp	r3, #0
 8018604:	d003      	beq.n	801860e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f000 f90b 	bl	8018822 <HAL_TIM_IC_CaptureCallback>
 801860c:	e005      	b.n	801861a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f000 f8fd 	bl	801880e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018614:	6878      	ldr	r0, [r7, #4]
 8018616:	f000 f90e 	bl	8018836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	2200      	movs	r2, #0
 801861e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	f003 0308 	and.w	r3, r3, #8
 8018626:	2b00      	cmp	r3, #0
 8018628:	d020      	beq.n	801866c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	f003 0308 	and.w	r3, r3, #8
 8018630:	2b00      	cmp	r3, #0
 8018632:	d01b      	beq.n	801866c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	f06f 0208 	mvn.w	r2, #8
 801863c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2204      	movs	r2, #4
 8018642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	69db      	ldr	r3, [r3, #28]
 801864a:	f003 0303 	and.w	r3, r3, #3
 801864e:	2b00      	cmp	r3, #0
 8018650:	d003      	beq.n	801865a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018652:	6878      	ldr	r0, [r7, #4]
 8018654:	f000 f8e5 	bl	8018822 <HAL_TIM_IC_CaptureCallback>
 8018658:	e005      	b.n	8018666 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801865a:	6878      	ldr	r0, [r7, #4]
 801865c:	f000 f8d7 	bl	801880e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f000 f8e8 	bl	8018836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	2200      	movs	r2, #0
 801866a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801866c:	68bb      	ldr	r3, [r7, #8]
 801866e:	f003 0310 	and.w	r3, r3, #16
 8018672:	2b00      	cmp	r3, #0
 8018674:	d020      	beq.n	80186b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	f003 0310 	and.w	r3, r3, #16
 801867c:	2b00      	cmp	r3, #0
 801867e:	d01b      	beq.n	80186b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	f06f 0210 	mvn.w	r2, #16
 8018688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	2208      	movs	r2, #8
 801868e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	69db      	ldr	r3, [r3, #28]
 8018696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801869a:	2b00      	cmp	r3, #0
 801869c:	d003      	beq.n	80186a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f000 f8bf 	bl	8018822 <HAL_TIM_IC_CaptureCallback>
 80186a4:	e005      	b.n	80186b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80186a6:	6878      	ldr	r0, [r7, #4]
 80186a8:	f000 f8b1 	bl	801880e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80186ac:	6878      	ldr	r0, [r7, #4]
 80186ae:	f000 f8c2 	bl	8018836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2200      	movs	r2, #0
 80186b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80186b8:	68bb      	ldr	r3, [r7, #8]
 80186ba:	f003 0301 	and.w	r3, r3, #1
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d00c      	beq.n	80186dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	f003 0301 	and.w	r3, r3, #1
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d007      	beq.n	80186dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	f06f 0201 	mvn.w	r2, #1
 80186d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80186d6:	6878      	ldr	r0, [r7, #4]
 80186d8:	f7f8 fde2 	bl	80112a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d104      	bne.n	80186f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d00c      	beq.n	801870a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d007      	beq.n	801870a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8018702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f000 f9b5 	bl	8018a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801870a:	68bb      	ldr	r3, [r7, #8]
 801870c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018710:	2b00      	cmp	r3, #0
 8018712:	d00c      	beq.n	801872e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801871a:	2b00      	cmp	r3, #0
 801871c:	d007      	beq.n	801872e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8018726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	f000 f9ad 	bl	8018a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801872e:	68bb      	ldr	r3, [r7, #8]
 8018730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018734:	2b00      	cmp	r3, #0
 8018736:	d00c      	beq.n	8018752 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801873e:	2b00      	cmp	r3, #0
 8018740:	d007      	beq.n	8018752 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801874a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	f000 f87c 	bl	801884a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	f003 0320 	and.w	r3, r3, #32
 8018758:	2b00      	cmp	r3, #0
 801875a:	d00c      	beq.n	8018776 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	f003 0320 	and.w	r3, r3, #32
 8018762:	2b00      	cmp	r3, #0
 8018764:	d007      	beq.n	8018776 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	f06f 0220 	mvn.w	r2, #32
 801876e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018770:	6878      	ldr	r0, [r7, #4]
 8018772:	f000 f975 	bl	8018a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8018776:	68bb      	ldr	r3, [r7, #8]
 8018778:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801877c:	2b00      	cmp	r3, #0
 801877e:	d00c      	beq.n	801879a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018786:	2b00      	cmp	r3, #0
 8018788:	d007      	beq.n	801879a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8018792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8018794:	6878      	ldr	r0, [r7, #4]
 8018796:	f000 f981 	bl	8018a9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 801879a:	68bb      	ldr	r3, [r7, #8]
 801879c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d00c      	beq.n	80187be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d007      	beq.n	80187be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80187b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80187b8:	6878      	ldr	r0, [r7, #4]
 80187ba:	f000 f979 	bl	8018ab0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80187be:	68bb      	ldr	r3, [r7, #8]
 80187c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d00c      	beq.n	80187e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d007      	beq.n	80187e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80187da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80187dc:	6878      	ldr	r0, [r7, #4]
 80187de:	f000 f971 	bl	8018ac4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80187e2:	68bb      	ldr	r3, [r7, #8]
 80187e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d00c      	beq.n	8018806 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d007      	beq.n	8018806 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80187fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f000 f969 	bl	8018ad8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018806:	bf00      	nop
 8018808:	3710      	adds	r7, #16
 801880a:	46bd      	mov	sp, r7
 801880c:	bd80      	pop	{r7, pc}

0801880e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801880e:	b480      	push	{r7}
 8018810:	b083      	sub	sp, #12
 8018812:	af00      	add	r7, sp, #0
 8018814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018816:	bf00      	nop
 8018818:	370c      	adds	r7, #12
 801881a:	46bd      	mov	sp, r7
 801881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018820:	4770      	bx	lr

08018822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018822:	b480      	push	{r7}
 8018824:	b083      	sub	sp, #12
 8018826:	af00      	add	r7, sp, #0
 8018828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801882a:	bf00      	nop
 801882c:	370c      	adds	r7, #12
 801882e:	46bd      	mov	sp, r7
 8018830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018834:	4770      	bx	lr

08018836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8018836:	b480      	push	{r7}
 8018838:	b083      	sub	sp, #12
 801883a:	af00      	add	r7, sp, #0
 801883c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801883e:	bf00      	nop
 8018840:	370c      	adds	r7, #12
 8018842:	46bd      	mov	sp, r7
 8018844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018848:	4770      	bx	lr

0801884a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801884a:	b480      	push	{r7}
 801884c:	b083      	sub	sp, #12
 801884e:	af00      	add	r7, sp, #0
 8018850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018852:	bf00      	nop
 8018854:	370c      	adds	r7, #12
 8018856:	46bd      	mov	sp, r7
 8018858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801885c:	4770      	bx	lr
	...

08018860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018860:	b480      	push	{r7}
 8018862:	b085      	sub	sp, #20
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
 8018868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	4a6b      	ldr	r2, [pc, #428]	@ (8018a20 <TIM_Base_SetConfig+0x1c0>)
 8018874:	4293      	cmp	r3, r2
 8018876:	d02b      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	4a6a      	ldr	r2, [pc, #424]	@ (8018a24 <TIM_Base_SetConfig+0x1c4>)
 801887c:	4293      	cmp	r3, r2
 801887e:	d027      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018886:	d023      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801888e:	d01f      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	4a65      	ldr	r2, [pc, #404]	@ (8018a28 <TIM_Base_SetConfig+0x1c8>)
 8018894:	4293      	cmp	r3, r2
 8018896:	d01b      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	4a64      	ldr	r2, [pc, #400]	@ (8018a2c <TIM_Base_SetConfig+0x1cc>)
 801889c:	4293      	cmp	r3, r2
 801889e:	d017      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	4a63      	ldr	r2, [pc, #396]	@ (8018a30 <TIM_Base_SetConfig+0x1d0>)
 80188a4:	4293      	cmp	r3, r2
 80188a6:	d013      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	4a62      	ldr	r2, [pc, #392]	@ (8018a34 <TIM_Base_SetConfig+0x1d4>)
 80188ac:	4293      	cmp	r3, r2
 80188ae:	d00f      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	4a61      	ldr	r2, [pc, #388]	@ (8018a38 <TIM_Base_SetConfig+0x1d8>)
 80188b4:	4293      	cmp	r3, r2
 80188b6:	d00b      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	4a60      	ldr	r2, [pc, #384]	@ (8018a3c <TIM_Base_SetConfig+0x1dc>)
 80188bc:	4293      	cmp	r3, r2
 80188be:	d007      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	4a5f      	ldr	r2, [pc, #380]	@ (8018a40 <TIM_Base_SetConfig+0x1e0>)
 80188c4:	4293      	cmp	r3, r2
 80188c6:	d003      	beq.n	80188d0 <TIM_Base_SetConfig+0x70>
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	4a5e      	ldr	r2, [pc, #376]	@ (8018a44 <TIM_Base_SetConfig+0x1e4>)
 80188cc:	4293      	cmp	r3, r2
 80188ce:	d108      	bne.n	80188e2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80188d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	685b      	ldr	r3, [r3, #4]
 80188dc:	68fa      	ldr	r2, [r7, #12]
 80188de:	4313      	orrs	r3, r2
 80188e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	4a4e      	ldr	r2, [pc, #312]	@ (8018a20 <TIM_Base_SetConfig+0x1c0>)
 80188e6:	4293      	cmp	r3, r2
 80188e8:	d043      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	4a4d      	ldr	r2, [pc, #308]	@ (8018a24 <TIM_Base_SetConfig+0x1c4>)
 80188ee:	4293      	cmp	r3, r2
 80188f0:	d03f      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80188f8:	d03b      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018900:	d037      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	4a48      	ldr	r2, [pc, #288]	@ (8018a28 <TIM_Base_SetConfig+0x1c8>)
 8018906:	4293      	cmp	r3, r2
 8018908:	d033      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	4a47      	ldr	r2, [pc, #284]	@ (8018a2c <TIM_Base_SetConfig+0x1cc>)
 801890e:	4293      	cmp	r3, r2
 8018910:	d02f      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	4a46      	ldr	r2, [pc, #280]	@ (8018a30 <TIM_Base_SetConfig+0x1d0>)
 8018916:	4293      	cmp	r3, r2
 8018918:	d02b      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	4a45      	ldr	r2, [pc, #276]	@ (8018a34 <TIM_Base_SetConfig+0x1d4>)
 801891e:	4293      	cmp	r3, r2
 8018920:	d027      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	4a44      	ldr	r2, [pc, #272]	@ (8018a38 <TIM_Base_SetConfig+0x1d8>)
 8018926:	4293      	cmp	r3, r2
 8018928:	d023      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	4a43      	ldr	r2, [pc, #268]	@ (8018a3c <TIM_Base_SetConfig+0x1dc>)
 801892e:	4293      	cmp	r3, r2
 8018930:	d01f      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	4a42      	ldr	r2, [pc, #264]	@ (8018a40 <TIM_Base_SetConfig+0x1e0>)
 8018936:	4293      	cmp	r3, r2
 8018938:	d01b      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	4a41      	ldr	r2, [pc, #260]	@ (8018a44 <TIM_Base_SetConfig+0x1e4>)
 801893e:	4293      	cmp	r3, r2
 8018940:	d017      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	4a40      	ldr	r2, [pc, #256]	@ (8018a48 <TIM_Base_SetConfig+0x1e8>)
 8018946:	4293      	cmp	r3, r2
 8018948:	d013      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	4a3f      	ldr	r2, [pc, #252]	@ (8018a4c <TIM_Base_SetConfig+0x1ec>)
 801894e:	4293      	cmp	r3, r2
 8018950:	d00f      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	4a3e      	ldr	r2, [pc, #248]	@ (8018a50 <TIM_Base_SetConfig+0x1f0>)
 8018956:	4293      	cmp	r3, r2
 8018958:	d00b      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	4a3d      	ldr	r2, [pc, #244]	@ (8018a54 <TIM_Base_SetConfig+0x1f4>)
 801895e:	4293      	cmp	r3, r2
 8018960:	d007      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	4a3c      	ldr	r2, [pc, #240]	@ (8018a58 <TIM_Base_SetConfig+0x1f8>)
 8018966:	4293      	cmp	r3, r2
 8018968:	d003      	beq.n	8018972 <TIM_Base_SetConfig+0x112>
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	4a3b      	ldr	r2, [pc, #236]	@ (8018a5c <TIM_Base_SetConfig+0x1fc>)
 801896e:	4293      	cmp	r3, r2
 8018970:	d108      	bne.n	8018984 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	68db      	ldr	r3, [r3, #12]
 801897e:	68fa      	ldr	r2, [r7, #12]
 8018980:	4313      	orrs	r3, r2
 8018982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	695b      	ldr	r3, [r3, #20]
 801898e:	4313      	orrs	r3, r2
 8018990:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	689a      	ldr	r2, [r3, #8]
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801899a:	683b      	ldr	r3, [r7, #0]
 801899c:	681a      	ldr	r2, [r3, #0]
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	4a1e      	ldr	r2, [pc, #120]	@ (8018a20 <TIM_Base_SetConfig+0x1c0>)
 80189a6:	4293      	cmp	r3, r2
 80189a8:	d023      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	4a1d      	ldr	r2, [pc, #116]	@ (8018a24 <TIM_Base_SetConfig+0x1c4>)
 80189ae:	4293      	cmp	r3, r2
 80189b0:	d01f      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	4a22      	ldr	r2, [pc, #136]	@ (8018a40 <TIM_Base_SetConfig+0x1e0>)
 80189b6:	4293      	cmp	r3, r2
 80189b8:	d01b      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	4a21      	ldr	r2, [pc, #132]	@ (8018a44 <TIM_Base_SetConfig+0x1e4>)
 80189be:	4293      	cmp	r3, r2
 80189c0:	d017      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	4a20      	ldr	r2, [pc, #128]	@ (8018a48 <TIM_Base_SetConfig+0x1e8>)
 80189c6:	4293      	cmp	r3, r2
 80189c8:	d013      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	4a1f      	ldr	r2, [pc, #124]	@ (8018a4c <TIM_Base_SetConfig+0x1ec>)
 80189ce:	4293      	cmp	r3, r2
 80189d0:	d00f      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	4a1e      	ldr	r2, [pc, #120]	@ (8018a50 <TIM_Base_SetConfig+0x1f0>)
 80189d6:	4293      	cmp	r3, r2
 80189d8:	d00b      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	4a1d      	ldr	r2, [pc, #116]	@ (8018a54 <TIM_Base_SetConfig+0x1f4>)
 80189de:	4293      	cmp	r3, r2
 80189e0:	d007      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	4a1c      	ldr	r2, [pc, #112]	@ (8018a58 <TIM_Base_SetConfig+0x1f8>)
 80189e6:	4293      	cmp	r3, r2
 80189e8:	d003      	beq.n	80189f2 <TIM_Base_SetConfig+0x192>
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	4a1b      	ldr	r2, [pc, #108]	@ (8018a5c <TIM_Base_SetConfig+0x1fc>)
 80189ee:	4293      	cmp	r3, r2
 80189f0:	d103      	bne.n	80189fa <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	691a      	ldr	r2, [r3, #16]
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	f043 0204 	orr.w	r2, r3, #4
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	2201      	movs	r2, #1
 8018a0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	68fa      	ldr	r2, [r7, #12]
 8018a10:	601a      	str	r2, [r3, #0]
}
 8018a12:	bf00      	nop
 8018a14:	3714      	adds	r7, #20
 8018a16:	46bd      	mov	sp, r7
 8018a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1c:	4770      	bx	lr
 8018a1e:	bf00      	nop
 8018a20:	40012c00 	.word	0x40012c00
 8018a24:	50012c00 	.word	0x50012c00
 8018a28:	40000400 	.word	0x40000400
 8018a2c:	50000400 	.word	0x50000400
 8018a30:	40000800 	.word	0x40000800
 8018a34:	50000800 	.word	0x50000800
 8018a38:	40000c00 	.word	0x40000c00
 8018a3c:	50000c00 	.word	0x50000c00
 8018a40:	40013400 	.word	0x40013400
 8018a44:	50013400 	.word	0x50013400
 8018a48:	40014000 	.word	0x40014000
 8018a4c:	50014000 	.word	0x50014000
 8018a50:	40014400 	.word	0x40014400
 8018a54:	50014400 	.word	0x50014400
 8018a58:	40014800 	.word	0x40014800
 8018a5c:	50014800 	.word	0x50014800

08018a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018a60:	b480      	push	{r7}
 8018a62:	b083      	sub	sp, #12
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018a68:	bf00      	nop
 8018a6a:	370c      	adds	r7, #12
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a72:	4770      	bx	lr

08018a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018a74:	b480      	push	{r7}
 8018a76:	b083      	sub	sp, #12
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018a7c:	bf00      	nop
 8018a7e:	370c      	adds	r7, #12
 8018a80:	46bd      	mov	sp, r7
 8018a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a86:	4770      	bx	lr

08018a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018a88:	b480      	push	{r7}
 8018a8a:	b083      	sub	sp, #12
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018a90:	bf00      	nop
 8018a92:	370c      	adds	r7, #12
 8018a94:	46bd      	mov	sp, r7
 8018a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9a:	4770      	bx	lr

08018a9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8018a9c:	b480      	push	{r7}
 8018a9e:	b083      	sub	sp, #12
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8018aa4:	bf00      	nop
 8018aa6:	370c      	adds	r7, #12
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aae:	4770      	bx	lr

08018ab0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8018ab0:	b480      	push	{r7}
 8018ab2:	b083      	sub	sp, #12
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8018ab8:	bf00      	nop
 8018aba:	370c      	adds	r7, #12
 8018abc:	46bd      	mov	sp, r7
 8018abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac2:	4770      	bx	lr

08018ac4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8018ac4:	b480      	push	{r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8018acc:	bf00      	nop
 8018ace:	370c      	adds	r7, #12
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad6:	4770      	bx	lr

08018ad8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8018ad8:	b480      	push	{r7}
 8018ada:	b083      	sub	sp, #12
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8018ae0:	bf00      	nop
 8018ae2:	370c      	adds	r7, #12
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aea:	4770      	bx	lr

08018aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b082      	sub	sp, #8
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d101      	bne.n	8018afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018afa:	2301      	movs	r3, #1
 8018afc:	e042      	b.n	8018b84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d106      	bne.n	8018b16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018b10:	6878      	ldr	r0, [r7, #4]
 8018b12:	f7f8 ff39 	bl	8011988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	2224      	movs	r2, #36	@ 0x24
 8018b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	681a      	ldr	r2, [r3, #0]
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	f022 0201 	bic.w	r2, r2, #1
 8018b2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d002      	beq.n	8018b3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f000 fae0 	bl	80190fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018b3c:	6878      	ldr	r0, [r7, #4]
 8018b3e:	f000 f93b 	bl	8018db8 <UART_SetConfig>
 8018b42:	4603      	mov	r3, r0
 8018b44:	2b01      	cmp	r3, #1
 8018b46:	d101      	bne.n	8018b4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8018b48:	2301      	movs	r3, #1
 8018b4a:	e01b      	b.n	8018b84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	685a      	ldr	r2, [r3, #4]
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8018b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	689a      	ldr	r2, [r3, #8]
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8018b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	f042 0201 	orr.w	r2, r2, #1
 8018b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018b7c:	6878      	ldr	r0, [r7, #4]
 8018b7e:	f000 fb5f 	bl	8019240 <UART_CheckIdleState>
 8018b82:	4603      	mov	r3, r0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3708      	adds	r7, #8
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}

08018b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b08a      	sub	sp, #40	@ 0x28
 8018b90:	af02      	add	r7, sp, #8
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	60b9      	str	r1, [r7, #8]
 8018b96:	603b      	str	r3, [r7, #0]
 8018b98:	4613      	mov	r3, r2
 8018b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ba2:	2b20      	cmp	r3, #32
 8018ba4:	f040 808b 	bne.w	8018cbe <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8018ba8:	68bb      	ldr	r3, [r7, #8]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d002      	beq.n	8018bb4 <HAL_UART_Transmit+0x28>
 8018bae:	88fb      	ldrh	r3, [r7, #6]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d101      	bne.n	8018bb8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8018bb4:	2301      	movs	r3, #1
 8018bb6:	e083      	b.n	8018cc0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	689b      	ldr	r3, [r3, #8]
 8018bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018bc2:	2b80      	cmp	r3, #128	@ 0x80
 8018bc4:	d107      	bne.n	8018bd6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	689a      	ldr	r2, [r3, #8]
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8018bd4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	2200      	movs	r2, #0
 8018bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	2221      	movs	r2, #33	@ 0x21
 8018be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018be6:	f7f9 fc3b 	bl	8012460 <HAL_GetTick>
 8018bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	88fa      	ldrh	r2, [r7, #6]
 8018bf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	88fa      	ldrh	r2, [r7, #6]
 8018bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	689b      	ldr	r3, [r3, #8]
 8018c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018c04:	d108      	bne.n	8018c18 <HAL_UART_Transmit+0x8c>
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	691b      	ldr	r3, [r3, #16]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d104      	bne.n	8018c18 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8018c0e:	2300      	movs	r3, #0
 8018c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8018c12:	68bb      	ldr	r3, [r7, #8]
 8018c14:	61bb      	str	r3, [r7, #24]
 8018c16:	e003      	b.n	8018c20 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8018c18:	68bb      	ldr	r3, [r7, #8]
 8018c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8018c20:	e030      	b.n	8018c84 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	9300      	str	r3, [sp, #0]
 8018c26:	697b      	ldr	r3, [r7, #20]
 8018c28:	2200      	movs	r2, #0
 8018c2a:	2180      	movs	r1, #128	@ 0x80
 8018c2c:	68f8      	ldr	r0, [r7, #12]
 8018c2e:	f000 fbb1 	bl	8019394 <UART_WaitOnFlagUntilTimeout>
 8018c32:	4603      	mov	r3, r0
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d005      	beq.n	8018c44 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	2220      	movs	r2, #32
 8018c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8018c40:	2303      	movs	r3, #3
 8018c42:	e03d      	b.n	8018cc0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8018c44:	69fb      	ldr	r3, [r7, #28]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d10b      	bne.n	8018c62 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018c4a:	69bb      	ldr	r3, [r7, #24]
 8018c4c:	881b      	ldrh	r3, [r3, #0]
 8018c4e:	461a      	mov	r2, r3
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018c58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8018c5a:	69bb      	ldr	r3, [r7, #24]
 8018c5c:	3302      	adds	r3, #2
 8018c5e:	61bb      	str	r3, [r7, #24]
 8018c60:	e007      	b.n	8018c72 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8018c62:	69fb      	ldr	r3, [r7, #28]
 8018c64:	781a      	ldrb	r2, [r3, #0]
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8018c6c:	69fb      	ldr	r3, [r7, #28]
 8018c6e:	3301      	adds	r3, #1
 8018c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018c78:	b29b      	uxth	r3, r3
 8018c7a:	3b01      	subs	r3, #1
 8018c7c:	b29a      	uxth	r2, r3
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d1c8      	bne.n	8018c22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018c90:	683b      	ldr	r3, [r7, #0]
 8018c92:	9300      	str	r3, [sp, #0]
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	2200      	movs	r2, #0
 8018c98:	2140      	movs	r1, #64	@ 0x40
 8018c9a:	68f8      	ldr	r0, [r7, #12]
 8018c9c:	f000 fb7a 	bl	8019394 <UART_WaitOnFlagUntilTimeout>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d005      	beq.n	8018cb2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	2220      	movs	r2, #32
 8018caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8018cae:	2303      	movs	r3, #3
 8018cb0:	e006      	b.n	8018cc0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	2220      	movs	r2, #32
 8018cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018cba:	2300      	movs	r3, #0
 8018cbc:	e000      	b.n	8018cc0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8018cbe:	2302      	movs	r3, #2
  }
}
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	3720      	adds	r7, #32
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd80      	pop	{r7, pc}

08018cc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b08a      	sub	sp, #40	@ 0x28
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	60f8      	str	r0, [r7, #12]
 8018cd0:	60b9      	str	r1, [r7, #8]
 8018cd2:	4613      	mov	r3, r2
 8018cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018cdc:	2b20      	cmp	r3, #32
 8018cde:	d14b      	bne.n	8018d78 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8018ce0:	68bb      	ldr	r3, [r7, #8]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d002      	beq.n	8018cec <HAL_UART_Receive_IT+0x24>
 8018ce6:	88fb      	ldrh	r3, [r7, #6]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d101      	bne.n	8018cf0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8018cec:	2301      	movs	r3, #1
 8018cee:	e044      	b.n	8018d7a <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	689b      	ldr	r3, [r3, #8]
 8018cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018d00:	2b40      	cmp	r3, #64	@ 0x40
 8018d02:	d107      	bne.n	8018d14 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	689a      	ldr	r2, [r3, #8]
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018d12:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	4a1a      	ldr	r2, [pc, #104]	@ (8018d84 <HAL_UART_Receive_IT+0xbc>)
 8018d1a:	4293      	cmp	r3, r2
 8018d1c:	d024      	beq.n	8018d68 <HAL_UART_Receive_IT+0xa0>
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	4a19      	ldr	r2, [pc, #100]	@ (8018d88 <HAL_UART_Receive_IT+0xc0>)
 8018d24:	4293      	cmp	r3, r2
 8018d26:	d01f      	beq.n	8018d68 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d018      	beq.n	8018d68 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018d3c:	697b      	ldr	r3, [r7, #20]
 8018d3e:	e853 3f00 	ldrex	r3, [r3]
 8018d42:	613b      	str	r3, [r7, #16]
   return(result);
 8018d44:	693b      	ldr	r3, [r7, #16]
 8018d46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	461a      	mov	r2, r3
 8018d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d54:	623b      	str	r3, [r7, #32]
 8018d56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018d58:	69f9      	ldr	r1, [r7, #28]
 8018d5a:	6a3a      	ldr	r2, [r7, #32]
 8018d5c:	e841 2300 	strex	r3, r2, [r1]
 8018d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8018d62:	69bb      	ldr	r3, [r7, #24]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d1e6      	bne.n	8018d36 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018d68:	88fb      	ldrh	r3, [r7, #6]
 8018d6a:	461a      	mov	r2, r3
 8018d6c:	68b9      	ldr	r1, [r7, #8]
 8018d6e:	68f8      	ldr	r0, [r7, #12]
 8018d70:	f000 fb7e 	bl	8019470 <UART_Start_Receive_IT>
 8018d74:	4603      	mov	r3, r0
 8018d76:	e000      	b.n	8018d7a <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8018d78:	2302      	movs	r3, #2
  }
}
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	3728      	adds	r7, #40	@ 0x28
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	bd80      	pop	{r7, pc}
 8018d82:	bf00      	nop
 8018d84:	46002400 	.word	0x46002400
 8018d88:	56002400 	.word	0x56002400

08018d8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018d8c:	b480      	push	{r7}
 8018d8e:	b083      	sub	sp, #12
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018d94:	bf00      	nop
 8018d96:	370c      	adds	r7, #12
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9e:	4770      	bx	lr

08018da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018da0:	b480      	push	{r7}
 8018da2:	b083      	sub	sp, #12
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
 8018da8:	460b      	mov	r3, r1
 8018daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018dac:	bf00      	nop
 8018dae:	370c      	adds	r7, #12
 8018db0:	46bd      	mov	sp, r7
 8018db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db6:	4770      	bx	lr

08018db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018dbc:	b094      	sub	sp, #80	@ 0x50
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8018dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dca:	681a      	ldr	r2, [r3, #0]
 8018dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8018fc8 <UART_SetConfig+0x210>)
 8018dce:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dd2:	689a      	ldr	r2, [r3, #8]
 8018dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dd6:	691b      	ldr	r3, [r3, #16]
 8018dd8:	431a      	orrs	r2, r3
 8018dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ddc:	695b      	ldr	r3, [r3, #20]
 8018dde:	431a      	orrs	r2, r3
 8018de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018de2:	69db      	ldr	r3, [r3, #28]
 8018de4:	4313      	orrs	r3, r2
 8018de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	4977      	ldr	r1, [pc, #476]	@ (8018fcc <UART_SetConfig+0x214>)
 8018df0:	4019      	ands	r1, r3
 8018df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018df4:	681a      	ldr	r2, [r3, #0]
 8018df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018df8:	430b      	orrs	r3, r1
 8018dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	685b      	ldr	r3, [r3, #4]
 8018e02:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8018e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e08:	68d9      	ldr	r1, [r3, #12]
 8018e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e0c:	681a      	ldr	r2, [r3, #0]
 8018e0e:	ea40 0301 	orr.w	r3, r0, r1
 8018e12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e16:	699b      	ldr	r3, [r3, #24]
 8018e18:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e1c:	681a      	ldr	r2, [r3, #0]
 8018e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8018fc8 <UART_SetConfig+0x210>)
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d009      	beq.n	8018e38 <UART_SetConfig+0x80>
 8018e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e26:	681a      	ldr	r2, [r3, #0]
 8018e28:	4b69      	ldr	r3, [pc, #420]	@ (8018fd0 <UART_SetConfig+0x218>)
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d004      	beq.n	8018e38 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e30:	6a1a      	ldr	r2, [r3, #32]
 8018e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e34:	4313      	orrs	r3, r2
 8018e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	689b      	ldr	r3, [r3, #8]
 8018e3e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8018e42:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8018e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e48:	681a      	ldr	r2, [r3, #0]
 8018e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e4c:	430b      	orrs	r3, r1
 8018e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e56:	f023 000f 	bic.w	r0, r3, #15
 8018e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8018e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e60:	681a      	ldr	r2, [r3, #0]
 8018e62:	ea40 0301 	orr.w	r3, r0, r1
 8018e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e6a:	681a      	ldr	r2, [r3, #0]
 8018e6c:	4b59      	ldr	r3, [pc, #356]	@ (8018fd4 <UART_SetConfig+0x21c>)
 8018e6e:	429a      	cmp	r2, r3
 8018e70:	d102      	bne.n	8018e78 <UART_SetConfig+0xc0>
 8018e72:	2301      	movs	r3, #1
 8018e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e76:	e029      	b.n	8018ecc <UART_SetConfig+0x114>
 8018e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e7a:	681a      	ldr	r2, [r3, #0]
 8018e7c:	4b56      	ldr	r3, [pc, #344]	@ (8018fd8 <UART_SetConfig+0x220>)
 8018e7e:	429a      	cmp	r2, r3
 8018e80:	d102      	bne.n	8018e88 <UART_SetConfig+0xd0>
 8018e82:	2302      	movs	r3, #2
 8018e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e86:	e021      	b.n	8018ecc <UART_SetConfig+0x114>
 8018e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e8a:	681a      	ldr	r2, [r3, #0]
 8018e8c:	4b53      	ldr	r3, [pc, #332]	@ (8018fdc <UART_SetConfig+0x224>)
 8018e8e:	429a      	cmp	r2, r3
 8018e90:	d102      	bne.n	8018e98 <UART_SetConfig+0xe0>
 8018e92:	2304      	movs	r3, #4
 8018e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e96:	e019      	b.n	8018ecc <UART_SetConfig+0x114>
 8018e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e9a:	681a      	ldr	r2, [r3, #0]
 8018e9c:	4b50      	ldr	r3, [pc, #320]	@ (8018fe0 <UART_SetConfig+0x228>)
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d102      	bne.n	8018ea8 <UART_SetConfig+0xf0>
 8018ea2:	2308      	movs	r3, #8
 8018ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018ea6:	e011      	b.n	8018ecc <UART_SetConfig+0x114>
 8018ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018eaa:	681a      	ldr	r2, [r3, #0]
 8018eac:	4b4d      	ldr	r3, [pc, #308]	@ (8018fe4 <UART_SetConfig+0x22c>)
 8018eae:	429a      	cmp	r2, r3
 8018eb0:	d102      	bne.n	8018eb8 <UART_SetConfig+0x100>
 8018eb2:	2310      	movs	r3, #16
 8018eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018eb6:	e009      	b.n	8018ecc <UART_SetConfig+0x114>
 8018eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018eba:	681a      	ldr	r2, [r3, #0]
 8018ebc:	4b42      	ldr	r3, [pc, #264]	@ (8018fc8 <UART_SetConfig+0x210>)
 8018ebe:	429a      	cmp	r2, r3
 8018ec0:	d102      	bne.n	8018ec8 <UART_SetConfig+0x110>
 8018ec2:	2320      	movs	r3, #32
 8018ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018ec6:	e001      	b.n	8018ecc <UART_SetConfig+0x114>
 8018ec8:	2300      	movs	r3, #0
 8018eca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ece:	681a      	ldr	r2, [r3, #0]
 8018ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8018fc8 <UART_SetConfig+0x210>)
 8018ed2:	429a      	cmp	r2, r3
 8018ed4:	d005      	beq.n	8018ee2 <UART_SetConfig+0x12a>
 8018ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ed8:	681a      	ldr	r2, [r3, #0]
 8018eda:	4b3d      	ldr	r3, [pc, #244]	@ (8018fd0 <UART_SetConfig+0x218>)
 8018edc:	429a      	cmp	r2, r3
 8018ede:	f040 8085 	bne.w	8018fec <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8018ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	623b      	str	r3, [r7, #32]
 8018ee8:	627a      	str	r2, [r7, #36]	@ 0x24
 8018eea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8018eee:	f7fd fb03 	bl	80164f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8018ef2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8018ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	f000 80e8 	beq.w	80190cc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f00:	4a39      	ldr	r2, [pc, #228]	@ (8018fe8 <UART_SetConfig+0x230>)
 8018f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f06:	461a      	mov	r2, r3
 8018f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018f0e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f12:	685a      	ldr	r2, [r3, #4]
 8018f14:	4613      	mov	r3, r2
 8018f16:	005b      	lsls	r3, r3, #1
 8018f18:	4413      	add	r3, r2
 8018f1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	d305      	bcc.n	8018f2c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f22:	685b      	ldr	r3, [r3, #4]
 8018f24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018f28:	429a      	cmp	r2, r3
 8018f2a:	d903      	bls.n	8018f34 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018f32:	e048      	b.n	8018fc6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f36:	2200      	movs	r2, #0
 8018f38:	61bb      	str	r3, [r7, #24]
 8018f3a:	61fa      	str	r2, [r7, #28]
 8018f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f40:	4a29      	ldr	r2, [pc, #164]	@ (8018fe8 <UART_SetConfig+0x230>)
 8018f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f46:	b29b      	uxth	r3, r3
 8018f48:	2200      	movs	r2, #0
 8018f4a:	613b      	str	r3, [r7, #16]
 8018f4c:	617a      	str	r2, [r7, #20]
 8018f4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018f52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8018f56:	f7e7 fecb 	bl	8000cf0 <__aeabi_uldivmod>
 8018f5a:	4602      	mov	r2, r0
 8018f5c:	460b      	mov	r3, r1
 8018f5e:	4610      	mov	r0, r2
 8018f60:	4619      	mov	r1, r3
 8018f62:	f04f 0200 	mov.w	r2, #0
 8018f66:	f04f 0300 	mov.w	r3, #0
 8018f6a:	020b      	lsls	r3, r1, #8
 8018f6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018f70:	0202      	lsls	r2, r0, #8
 8018f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018f74:	6849      	ldr	r1, [r1, #4]
 8018f76:	0849      	lsrs	r1, r1, #1
 8018f78:	2000      	movs	r0, #0
 8018f7a:	460c      	mov	r4, r1
 8018f7c:	4605      	mov	r5, r0
 8018f7e:	eb12 0804 	adds.w	r8, r2, r4
 8018f82:	eb43 0905 	adc.w	r9, r3, r5
 8018f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f88:	685b      	ldr	r3, [r3, #4]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	60bb      	str	r3, [r7, #8]
 8018f8e:	60fa      	str	r2, [r7, #12]
 8018f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018f94:	4640      	mov	r0, r8
 8018f96:	4649      	mov	r1, r9
 8018f98:	f7e7 feaa 	bl	8000cf0 <__aeabi_uldivmod>
 8018f9c:	4602      	mov	r2, r0
 8018f9e:	460b      	mov	r3, r1
 8018fa0:	4613      	mov	r3, r2
 8018fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018faa:	d308      	bcc.n	8018fbe <UART_SetConfig+0x206>
 8018fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018fb2:	d204      	bcs.n	8018fbe <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8018fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018fba:	60da      	str	r2, [r3, #12]
 8018fbc:	e003      	b.n	8018fc6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8018fbe:	2301      	movs	r3, #1
 8018fc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8018fc4:	e082      	b.n	80190cc <UART_SetConfig+0x314>
 8018fc6:	e081      	b.n	80190cc <UART_SetConfig+0x314>
 8018fc8:	46002400 	.word	0x46002400
 8018fcc:	cfff69f3 	.word	0xcfff69f3
 8018fd0:	56002400 	.word	0x56002400
 8018fd4:	40013800 	.word	0x40013800
 8018fd8:	40004400 	.word	0x40004400
 8018fdc:	40004800 	.word	0x40004800
 8018fe0:	40004c00 	.word	0x40004c00
 8018fe4:	40005000 	.word	0x40005000
 8018fe8:	0802557c 	.word	0x0802557c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018fee:	69db      	ldr	r3, [r3, #28]
 8018ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018ff4:	d13c      	bne.n	8019070 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8018ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	603b      	str	r3, [r7, #0]
 8018ffc:	607a      	str	r2, [r7, #4]
 8018ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019002:	f7fd fa79 	bl	80164f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8019006:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801900a:	2b00      	cmp	r3, #0
 801900c:	d05e      	beq.n	80190cc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801900e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019012:	4a39      	ldr	r2, [pc, #228]	@ (80190f8 <UART_SetConfig+0x340>)
 8019014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019018:	461a      	mov	r2, r3
 801901a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801901c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019020:	005a      	lsls	r2, r3, #1
 8019022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019024:	685b      	ldr	r3, [r3, #4]
 8019026:	085b      	lsrs	r3, r3, #1
 8019028:	441a      	add	r2, r3
 801902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801902c:	685b      	ldr	r3, [r3, #4]
 801902e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019032:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019036:	2b0f      	cmp	r3, #15
 8019038:	d916      	bls.n	8019068 <UART_SetConfig+0x2b0>
 801903a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801903c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019040:	d212      	bcs.n	8019068 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019044:	b29b      	uxth	r3, r3
 8019046:	f023 030f 	bic.w	r3, r3, #15
 801904a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801904c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801904e:	085b      	lsrs	r3, r3, #1
 8019050:	b29b      	uxth	r3, r3
 8019052:	f003 0307 	and.w	r3, r3, #7
 8019056:	b29a      	uxth	r2, r3
 8019058:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801905a:	4313      	orrs	r3, r2
 801905c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 801905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019064:	60da      	str	r2, [r3, #12]
 8019066:	e031      	b.n	80190cc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8019068:	2301      	movs	r3, #1
 801906a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801906e:	e02d      	b.n	80190cc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8019070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019072:	2200      	movs	r2, #0
 8019074:	469a      	mov	sl, r3
 8019076:	4693      	mov	fp, r2
 8019078:	4650      	mov	r0, sl
 801907a:	4659      	mov	r1, fp
 801907c:	f7fd fa3c 	bl	80164f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8019080:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8019082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019084:	2b00      	cmp	r3, #0
 8019086:	d021      	beq.n	80190cc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801908a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801908c:	4a1a      	ldr	r2, [pc, #104]	@ (80190f8 <UART_SetConfig+0x340>)
 801908e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019092:	461a      	mov	r2, r3
 8019094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019096:	fbb3 f2f2 	udiv	r2, r3, r2
 801909a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801909c:	685b      	ldr	r3, [r3, #4]
 801909e:	085b      	lsrs	r3, r3, #1
 80190a0:	441a      	add	r2, r3
 80190a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190a4:	685b      	ldr	r3, [r3, #4]
 80190a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80190aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80190ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190ae:	2b0f      	cmp	r3, #15
 80190b0:	d909      	bls.n	80190c6 <UART_SetConfig+0x30e>
 80190b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80190b8:	d205      	bcs.n	80190c6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80190ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190bc:	b29a      	uxth	r2, r3
 80190be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	60da      	str	r2, [r3, #12]
 80190c4:	e002      	b.n	80190cc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80190c6:	2301      	movs	r3, #1
 80190c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80190cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190ce:	2201      	movs	r2, #1
 80190d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80190d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190d6:	2201      	movs	r2, #1
 80190d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80190dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190de:	2200      	movs	r2, #0
 80190e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80190e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190e4:	2200      	movs	r2, #0
 80190e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80190e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80190ec:	4618      	mov	r0, r3
 80190ee:	3750      	adds	r7, #80	@ 0x50
 80190f0:	46bd      	mov	sp, r7
 80190f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80190f6:	bf00      	nop
 80190f8:	0802557c 	.word	0x0802557c

080190fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80190fc:	b480      	push	{r7}
 80190fe:	b083      	sub	sp, #12
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019108:	f003 0308 	and.w	r3, r3, #8
 801910c:	2b00      	cmp	r3, #0
 801910e:	d00a      	beq.n	8019126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	685b      	ldr	r3, [r3, #4]
 8019116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	430a      	orrs	r2, r1
 8019124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801912a:	f003 0301 	and.w	r3, r3, #1
 801912e:	2b00      	cmp	r3, #0
 8019130:	d00a      	beq.n	8019148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	685b      	ldr	r3, [r3, #4]
 8019138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	430a      	orrs	r2, r1
 8019146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801914c:	f003 0302 	and.w	r3, r3, #2
 8019150:	2b00      	cmp	r3, #0
 8019152:	d00a      	beq.n	801916a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	685b      	ldr	r3, [r3, #4]
 801915a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	430a      	orrs	r2, r1
 8019168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801916e:	f003 0304 	and.w	r3, r3, #4
 8019172:	2b00      	cmp	r3, #0
 8019174:	d00a      	beq.n	801918c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	685b      	ldr	r3, [r3, #4]
 801917c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	430a      	orrs	r2, r1
 801918a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019190:	f003 0310 	and.w	r3, r3, #16
 8019194:	2b00      	cmp	r3, #0
 8019196:	d00a      	beq.n	80191ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	689b      	ldr	r3, [r3, #8]
 801919e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	430a      	orrs	r2, r1
 80191ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191b2:	f003 0320 	and.w	r3, r3, #32
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d00a      	beq.n	80191d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	689b      	ldr	r3, [r3, #8]
 80191c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	430a      	orrs	r2, r1
 80191ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d01a      	beq.n	8019212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	685b      	ldr	r3, [r3, #4]
 80191e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	430a      	orrs	r2, r1
 80191f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80191f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80191fa:	d10a      	bne.n	8019212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	685b      	ldr	r3, [r3, #4]
 8019202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	430a      	orrs	r2, r1
 8019210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801921a:	2b00      	cmp	r3, #0
 801921c:	d00a      	beq.n	8019234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	685b      	ldr	r3, [r3, #4]
 8019224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	430a      	orrs	r2, r1
 8019232:	605a      	str	r2, [r3, #4]
  }
}
 8019234:	bf00      	nop
 8019236:	370c      	adds	r7, #12
 8019238:	46bd      	mov	sp, r7
 801923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923e:	4770      	bx	lr

08019240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b098      	sub	sp, #96	@ 0x60
 8019244:	af02      	add	r7, sp, #8
 8019246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	2200      	movs	r2, #0
 801924c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019250:	f7f9 f906 	bl	8012460 <HAL_GetTick>
 8019254:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	f003 0308 	and.w	r3, r3, #8
 8019260:	2b08      	cmp	r3, #8
 8019262:	d12f      	bne.n	80192c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019268:	9300      	str	r3, [sp, #0]
 801926a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801926c:	2200      	movs	r2, #0
 801926e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8019272:	6878      	ldr	r0, [r7, #4]
 8019274:	f000 f88e 	bl	8019394 <UART_WaitOnFlagUntilTimeout>
 8019278:	4603      	mov	r3, r0
 801927a:	2b00      	cmp	r3, #0
 801927c:	d022      	beq.n	80192c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019286:	e853 3f00 	ldrex	r3, [r3]
 801928a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801928c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801928e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019292:	653b      	str	r3, [r7, #80]	@ 0x50
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	461a      	mov	r2, r3
 801929a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801929c:	647b      	str	r3, [r7, #68]	@ 0x44
 801929e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80192a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80192a4:	e841 2300 	strex	r3, r2, [r1]
 80192a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80192aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d1e6      	bne.n	801927e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	2220      	movs	r2, #32
 80192b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	2200      	movs	r2, #0
 80192bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80192c0:	2303      	movs	r3, #3
 80192c2:	e063      	b.n	801938c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	f003 0304 	and.w	r3, r3, #4
 80192ce:	2b04      	cmp	r3, #4
 80192d0:	d149      	bne.n	8019366 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80192d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80192d6:	9300      	str	r3, [sp, #0]
 80192d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192da:	2200      	movs	r2, #0
 80192dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80192e0:	6878      	ldr	r0, [r7, #4]
 80192e2:	f000 f857 	bl	8019394 <UART_WaitOnFlagUntilTimeout>
 80192e6:	4603      	mov	r3, r0
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d03c      	beq.n	8019366 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192f4:	e853 3f00 	ldrex	r3, [r3]
 80192f8:	623b      	str	r3, [r7, #32]
   return(result);
 80192fa:	6a3b      	ldr	r3, [r7, #32]
 80192fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	461a      	mov	r2, r3
 8019308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801930a:	633b      	str	r3, [r7, #48]	@ 0x30
 801930c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801930e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019312:	e841 2300 	strex	r3, r2, [r1]
 8019316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801931a:	2b00      	cmp	r3, #0
 801931c:	d1e6      	bne.n	80192ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	3308      	adds	r3, #8
 8019324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019326:	693b      	ldr	r3, [r7, #16]
 8019328:	e853 3f00 	ldrex	r3, [r3]
 801932c:	60fb      	str	r3, [r7, #12]
   return(result);
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	f023 0301 	bic.w	r3, r3, #1
 8019334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	3308      	adds	r3, #8
 801933c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801933e:	61fa      	str	r2, [r7, #28]
 8019340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019342:	69b9      	ldr	r1, [r7, #24]
 8019344:	69fa      	ldr	r2, [r7, #28]
 8019346:	e841 2300 	strex	r3, r2, [r1]
 801934a:	617b      	str	r3, [r7, #20]
   return(result);
 801934c:	697b      	ldr	r3, [r7, #20]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d1e5      	bne.n	801931e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	2220      	movs	r2, #32
 8019356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	2200      	movs	r2, #0
 801935e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019362:	2303      	movs	r3, #3
 8019364:	e012      	b.n	801938c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	2220      	movs	r2, #32
 801936a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	2220      	movs	r2, #32
 8019372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2200      	movs	r2, #0
 801937a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	2200      	movs	r2, #0
 8019380:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2200      	movs	r2, #0
 8019386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801938a:	2300      	movs	r3, #0
}
 801938c:	4618      	mov	r0, r3
 801938e:	3758      	adds	r7, #88	@ 0x58
 8019390:	46bd      	mov	sp, r7
 8019392:	bd80      	pop	{r7, pc}

08019394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b084      	sub	sp, #16
 8019398:	af00      	add	r7, sp, #0
 801939a:	60f8      	str	r0, [r7, #12]
 801939c:	60b9      	str	r1, [r7, #8]
 801939e:	603b      	str	r3, [r7, #0]
 80193a0:	4613      	mov	r3, r2
 80193a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80193a4:	e04f      	b.n	8019446 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80193a6:	69bb      	ldr	r3, [r7, #24]
 80193a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193ac:	d04b      	beq.n	8019446 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80193ae:	f7f9 f857 	bl	8012460 <HAL_GetTick>
 80193b2:	4602      	mov	r2, r0
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	1ad3      	subs	r3, r2, r3
 80193b8:	69ba      	ldr	r2, [r7, #24]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d302      	bcc.n	80193c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80193be:	69bb      	ldr	r3, [r7, #24]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d101      	bne.n	80193c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80193c4:	2303      	movs	r3, #3
 80193c6:	e04e      	b.n	8019466 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	f003 0304 	and.w	r3, r3, #4
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d037      	beq.n	8019446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80193d6:	68bb      	ldr	r3, [r7, #8]
 80193d8:	2b80      	cmp	r3, #128	@ 0x80
 80193da:	d034      	beq.n	8019446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80193dc:	68bb      	ldr	r3, [r7, #8]
 80193de:	2b40      	cmp	r3, #64	@ 0x40
 80193e0:	d031      	beq.n	8019446 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	69db      	ldr	r3, [r3, #28]
 80193e8:	f003 0308 	and.w	r3, r3, #8
 80193ec:	2b08      	cmp	r3, #8
 80193ee:	d110      	bne.n	8019412 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	2208      	movs	r2, #8
 80193f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80193f8:	68f8      	ldr	r0, [r7, #12]
 80193fa:	f000 f95b 	bl	80196b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	2208      	movs	r2, #8
 8019402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	2200      	movs	r2, #0
 801940a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801940e:	2301      	movs	r3, #1
 8019410:	e029      	b.n	8019466 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	69db      	ldr	r3, [r3, #28]
 8019418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801941c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019420:	d111      	bne.n	8019446 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801942a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801942c:	68f8      	ldr	r0, [r7, #12]
 801942e:	f000 f941 	bl	80196b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	2220      	movs	r2, #32
 8019436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	2200      	movs	r2, #0
 801943e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8019442:	2303      	movs	r3, #3
 8019444:	e00f      	b.n	8019466 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	69da      	ldr	r2, [r3, #28]
 801944c:	68bb      	ldr	r3, [r7, #8]
 801944e:	4013      	ands	r3, r2
 8019450:	68ba      	ldr	r2, [r7, #8]
 8019452:	429a      	cmp	r2, r3
 8019454:	bf0c      	ite	eq
 8019456:	2301      	moveq	r3, #1
 8019458:	2300      	movne	r3, #0
 801945a:	b2db      	uxtb	r3, r3
 801945c:	461a      	mov	r2, r3
 801945e:	79fb      	ldrb	r3, [r7, #7]
 8019460:	429a      	cmp	r2, r3
 8019462:	d0a0      	beq.n	80193a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019464:	2300      	movs	r3, #0
}
 8019466:	4618      	mov	r0, r3
 8019468:	3710      	adds	r7, #16
 801946a:	46bd      	mov	sp, r7
 801946c:	bd80      	pop	{r7, pc}
	...

08019470 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019470:	b480      	push	{r7}
 8019472:	b0a3      	sub	sp, #140	@ 0x8c
 8019474:	af00      	add	r7, sp, #0
 8019476:	60f8      	str	r0, [r7, #12]
 8019478:	60b9      	str	r1, [r7, #8]
 801947a:	4613      	mov	r3, r2
 801947c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	68ba      	ldr	r2, [r7, #8]
 8019482:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	88fa      	ldrh	r2, [r7, #6]
 8019488:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	88fa      	ldrh	r2, [r7, #6]
 8019490:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	2200      	movs	r2, #0
 8019498:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	689b      	ldr	r3, [r3, #8]
 801949e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80194a2:	d10e      	bne.n	80194c2 <UART_Start_Receive_IT+0x52>
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	691b      	ldr	r3, [r3, #16]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d105      	bne.n	80194b8 <UART_Start_Receive_IT+0x48>
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80194b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80194b6:	e02d      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	22ff      	movs	r2, #255	@ 0xff
 80194bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80194c0:	e028      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	689b      	ldr	r3, [r3, #8]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d10d      	bne.n	80194e6 <UART_Start_Receive_IT+0x76>
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	691b      	ldr	r3, [r3, #16]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d104      	bne.n	80194dc <UART_Start_Receive_IT+0x6c>
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	22ff      	movs	r2, #255	@ 0xff
 80194d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80194da:	e01b      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	227f      	movs	r2, #127	@ 0x7f
 80194e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80194e4:	e016      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	689b      	ldr	r3, [r3, #8]
 80194ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80194ee:	d10d      	bne.n	801950c <UART_Start_Receive_IT+0x9c>
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	691b      	ldr	r3, [r3, #16]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d104      	bne.n	8019502 <UART_Start_Receive_IT+0x92>
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	227f      	movs	r2, #127	@ 0x7f
 80194fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019500:	e008      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	223f      	movs	r2, #63	@ 0x3f
 8019506:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801950a:	e003      	b.n	8019514 <UART_Start_Receive_IT+0xa4>
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	2200      	movs	r2, #0
 8019510:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	2200      	movs	r2, #0
 8019518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	2222      	movs	r2, #34	@ 0x22
 8019520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	3308      	adds	r3, #8
 801952a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801952c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801952e:	e853 3f00 	ldrex	r3, [r3]
 8019532:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019536:	f043 0301 	orr.w	r3, r3, #1
 801953a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	3308      	adds	r3, #8
 8019544:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019548:	673a      	str	r2, [r7, #112]	@ 0x70
 801954a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801954c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801954e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019550:	e841 2300 	strex	r3, r2, [r1]
 8019554:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019558:	2b00      	cmp	r3, #0
 801955a:	d1e3      	bne.n	8019524 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019564:	d14f      	bne.n	8019606 <UART_Start_Receive_IT+0x196>
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801956c:	88fa      	ldrh	r2, [r7, #6]
 801956e:	429a      	cmp	r2, r3
 8019570:	d349      	bcc.n	8019606 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	689b      	ldr	r3, [r3, #8]
 8019576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801957a:	d107      	bne.n	801958c <UART_Start_Receive_IT+0x11c>
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	691b      	ldr	r3, [r3, #16]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d103      	bne.n	801958c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	4a47      	ldr	r2, [pc, #284]	@ (80196a4 <UART_Start_Receive_IT+0x234>)
 8019588:	675a      	str	r2, [r3, #116]	@ 0x74
 801958a:	e002      	b.n	8019592 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	4a46      	ldr	r2, [pc, #280]	@ (80196a8 <UART_Start_Receive_IT+0x238>)
 8019590:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	691b      	ldr	r3, [r3, #16]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d01a      	beq.n	80195d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195a2:	e853 3f00 	ldrex	r3, [r3]
 80195a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80195a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80195ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	461a      	mov	r2, r3
 80195b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80195bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80195be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80195c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80195c4:	e841 2300 	strex	r3, r2, [r1]
 80195c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80195ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d1e4      	bne.n	801959a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	3308      	adds	r3, #8
 80195d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195da:	e853 3f00 	ldrex	r3, [r3]
 80195de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80195e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80195e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	3308      	adds	r3, #8
 80195ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80195f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80195f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80195f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80195f8:	e841 2300 	strex	r3, r2, [r1]
 80195fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80195fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019600:	2b00      	cmp	r3, #0
 8019602:	d1e5      	bne.n	80195d0 <UART_Start_Receive_IT+0x160>
 8019604:	e046      	b.n	8019694 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	689b      	ldr	r3, [r3, #8]
 801960a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801960e:	d107      	bne.n	8019620 <UART_Start_Receive_IT+0x1b0>
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	691b      	ldr	r3, [r3, #16]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d103      	bne.n	8019620 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	4a24      	ldr	r2, [pc, #144]	@ (80196ac <UART_Start_Receive_IT+0x23c>)
 801961c:	675a      	str	r2, [r3, #116]	@ 0x74
 801961e:	e002      	b.n	8019626 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	4a23      	ldr	r2, [pc, #140]	@ (80196b0 <UART_Start_Receive_IT+0x240>)
 8019624:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	691b      	ldr	r3, [r3, #16]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d019      	beq.n	8019662 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019636:	e853 3f00 	ldrex	r3, [r3]
 801963a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801963c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801963e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019642:	677b      	str	r3, [r7, #116]	@ 0x74
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	461a      	mov	r2, r3
 801964a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801964c:	637b      	str	r3, [r7, #52]	@ 0x34
 801964e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019650:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019652:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019654:	e841 2300 	strex	r3, r2, [r1]
 8019658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801965a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801965c:	2b00      	cmp	r3, #0
 801965e:	d1e6      	bne.n	801962e <UART_Start_Receive_IT+0x1be>
 8019660:	e018      	b.n	8019694 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019668:	697b      	ldr	r3, [r7, #20]
 801966a:	e853 3f00 	ldrex	r3, [r3]
 801966e:	613b      	str	r3, [r7, #16]
   return(result);
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	f043 0320 	orr.w	r3, r3, #32
 8019676:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	461a      	mov	r2, r3
 801967e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019680:	623b      	str	r3, [r7, #32]
 8019682:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019684:	69f9      	ldr	r1, [r7, #28]
 8019686:	6a3a      	ldr	r2, [r7, #32]
 8019688:	e841 2300 	strex	r3, r2, [r1]
 801968c:	61bb      	str	r3, [r7, #24]
   return(result);
 801968e:	69bb      	ldr	r3, [r7, #24]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d1e6      	bne.n	8019662 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019694:	2300      	movs	r3, #0
}
 8019696:	4618      	mov	r0, r3
 8019698:	378c      	adds	r7, #140	@ 0x8c
 801969a:	46bd      	mov	sp, r7
 801969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a0:	4770      	bx	lr
 80196a2:	bf00      	nop
 80196a4:	08019e79 	.word	0x08019e79
 80196a8:	08019b09 	.word	0x08019b09
 80196ac:	08019945 	.word	0x08019945
 80196b0:	08019781 	.word	0x08019781

080196b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80196b4:	b480      	push	{r7}
 80196b6:	b095      	sub	sp, #84	@ 0x54
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196c4:	e853 3f00 	ldrex	r3, [r3]
 80196c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80196ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80196d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	461a      	mov	r2, r3
 80196d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196da:	643b      	str	r3, [r7, #64]	@ 0x40
 80196dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80196e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80196e2:	e841 2300 	strex	r3, r2, [r1]
 80196e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80196e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d1e6      	bne.n	80196bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	3308      	adds	r3, #8
 80196f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196f6:	6a3b      	ldr	r3, [r7, #32]
 80196f8:	e853 3f00 	ldrex	r3, [r3]
 80196fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80196fe:	69fb      	ldr	r3, [r7, #28]
 8019700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019704:	f023 0301 	bic.w	r3, r3, #1
 8019708:	64bb      	str	r3, [r7, #72]	@ 0x48
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	3308      	adds	r3, #8
 8019710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801971a:	e841 2300 	strex	r3, r2, [r1]
 801971e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019722:	2b00      	cmp	r3, #0
 8019724:	d1e3      	bne.n	80196ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801972a:	2b01      	cmp	r3, #1
 801972c:	d118      	bne.n	8019760 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	e853 3f00 	ldrex	r3, [r3]
 801973a:	60bb      	str	r3, [r7, #8]
   return(result);
 801973c:	68bb      	ldr	r3, [r7, #8]
 801973e:	f023 0310 	bic.w	r3, r3, #16
 8019742:	647b      	str	r3, [r7, #68]	@ 0x44
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	461a      	mov	r2, r3
 801974a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801974c:	61bb      	str	r3, [r7, #24]
 801974e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019750:	6979      	ldr	r1, [r7, #20]
 8019752:	69ba      	ldr	r2, [r7, #24]
 8019754:	e841 2300 	strex	r3, r2, [r1]
 8019758:	613b      	str	r3, [r7, #16]
   return(result);
 801975a:	693b      	ldr	r3, [r7, #16]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d1e6      	bne.n	801972e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	2220      	movs	r2, #32
 8019764:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	2200      	movs	r2, #0
 801976c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	2200      	movs	r2, #0
 8019772:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019774:	bf00      	nop
 8019776:	3754      	adds	r7, #84	@ 0x54
 8019778:	46bd      	mov	sp, r7
 801977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977e:	4770      	bx	lr

08019780 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b09c      	sub	sp, #112	@ 0x70
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801978e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019798:	2b22      	cmp	r3, #34	@ 0x22
 801979a:	f040 80c3 	bne.w	8019924 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80197a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80197ac:	b2d9      	uxtb	r1, r3
 80197ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80197b2:	b2da      	uxtb	r2, r3
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80197b8:	400a      	ands	r2, r1
 80197ba:	b2d2      	uxtb	r2, r2
 80197bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80197c2:	1c5a      	adds	r2, r3, #1
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80197ce:	b29b      	uxth	r3, r3
 80197d0:	3b01      	subs	r3, #1
 80197d2:	b29a      	uxth	r2, r3
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80197e0:	b29b      	uxth	r3, r3
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	f040 80a6 	bne.w	8019934 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80197f0:	e853 3f00 	ldrex	r3, [r3]
 80197f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80197f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80197f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80197fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	461a      	mov	r2, r3
 8019804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019806:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019808:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801980a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801980c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801980e:	e841 2300 	strex	r3, r2, [r1]
 8019812:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8019814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019816:	2b00      	cmp	r3, #0
 8019818:	d1e6      	bne.n	80197e8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	3308      	adds	r3, #8
 8019820:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019824:	e853 3f00 	ldrex	r3, [r3]
 8019828:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801982a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801982c:	f023 0301 	bic.w	r3, r3, #1
 8019830:	667b      	str	r3, [r7, #100]	@ 0x64
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	3308      	adds	r3, #8
 8019838:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801983a:	647a      	str	r2, [r7, #68]	@ 0x44
 801983c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801983e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019840:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019842:	e841 2300 	strex	r3, r2, [r1]
 8019846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801984a:	2b00      	cmp	r3, #0
 801984c:	d1e5      	bne.n	801981a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	2220      	movs	r2, #32
 8019852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	2200      	movs	r2, #0
 801985a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	2200      	movs	r2, #0
 8019860:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	4a35      	ldr	r2, [pc, #212]	@ (801993c <UART_RxISR_8BIT+0x1bc>)
 8019868:	4293      	cmp	r3, r2
 801986a:	d024      	beq.n	80198b6 <UART_RxISR_8BIT+0x136>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	4a33      	ldr	r2, [pc, #204]	@ (8019940 <UART_RxISR_8BIT+0x1c0>)
 8019872:	4293      	cmp	r3, r2
 8019874:	d01f      	beq.n	80198b6 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	685b      	ldr	r3, [r3, #4]
 801987c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019880:	2b00      	cmp	r3, #0
 8019882:	d018      	beq.n	80198b6 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801988a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801988c:	e853 3f00 	ldrex	r3, [r3]
 8019890:	623b      	str	r3, [r7, #32]
   return(result);
 8019892:	6a3b      	ldr	r3, [r7, #32]
 8019894:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019898:	663b      	str	r3, [r7, #96]	@ 0x60
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	681b      	ldr	r3, [r3, #0]
 801989e:	461a      	mov	r2, r3
 80198a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80198a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80198a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80198a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80198aa:	e841 2300 	strex	r3, r2, [r1]
 80198ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80198b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d1e6      	bne.n	8019884 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198ba:	2b01      	cmp	r3, #1
 80198bc:	d12e      	bne.n	801991c <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	2200      	movs	r2, #0
 80198c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198ca:	693b      	ldr	r3, [r7, #16]
 80198cc:	e853 3f00 	ldrex	r3, [r3]
 80198d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	f023 0310 	bic.w	r3, r3, #16
 80198d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	461a      	mov	r2, r3
 80198e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80198e2:	61fb      	str	r3, [r7, #28]
 80198e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198e6:	69b9      	ldr	r1, [r7, #24]
 80198e8:	69fa      	ldr	r2, [r7, #28]
 80198ea:	e841 2300 	strex	r3, r2, [r1]
 80198ee:	617b      	str	r3, [r7, #20]
   return(result);
 80198f0:	697b      	ldr	r3, [r7, #20]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d1e6      	bne.n	80198c4 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	69db      	ldr	r3, [r3, #28]
 80198fc:	f003 0310 	and.w	r3, r3, #16
 8019900:	2b10      	cmp	r3, #16
 8019902:	d103      	bne.n	801990c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	2210      	movs	r2, #16
 801990a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019912:	4619      	mov	r1, r3
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f7ff fa43 	bl	8018da0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801991a:	e00b      	b.n	8019934 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 801991c:	6878      	ldr	r0, [r7, #4]
 801991e:	f7f6 fc6f 	bl	8010200 <HAL_UART_RxCpltCallback>
}
 8019922:	e007      	b.n	8019934 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	699a      	ldr	r2, [r3, #24]
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	f042 0208 	orr.w	r2, r2, #8
 8019932:	619a      	str	r2, [r3, #24]
}
 8019934:	bf00      	nop
 8019936:	3770      	adds	r7, #112	@ 0x70
 8019938:	46bd      	mov	sp, r7
 801993a:	bd80      	pop	{r7, pc}
 801993c:	46002400 	.word	0x46002400
 8019940:	56002400 	.word	0x56002400

08019944 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019944:	b580      	push	{r7, lr}
 8019946:	b09c      	sub	sp, #112	@ 0x70
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019952:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801995c:	2b22      	cmp	r3, #34	@ 0x22
 801995e:	f040 80c3 	bne.w	8019ae8 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019968:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019970:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8019972:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019976:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801997a:	4013      	ands	r3, r2
 801997c:	b29a      	uxth	r2, r3
 801997e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019980:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019986:	1c9a      	adds	r2, r3, #2
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019992:	b29b      	uxth	r3, r3
 8019994:	3b01      	subs	r3, #1
 8019996:	b29a      	uxth	r2, r3
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	f040 80a6 	bne.w	8019af8 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80199b4:	e853 3f00 	ldrex	r3, [r3]
 80199b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80199ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80199bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80199c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	461a      	mov	r2, r3
 80199c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80199ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80199cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80199ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80199d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80199d2:	e841 2300 	strex	r3, r2, [r1]
 80199d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80199d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d1e6      	bne.n	80199ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	3308      	adds	r3, #8
 80199e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80199e8:	e853 3f00 	ldrex	r3, [r3]
 80199ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80199ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199f0:	f023 0301 	bic.w	r3, r3, #1
 80199f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	3308      	adds	r3, #8
 80199fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80199fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8019a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019a04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019a06:	e841 2300 	strex	r3, r2, [r1]
 8019a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d1e5      	bne.n	80199de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	2220      	movs	r2, #32
 8019a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	2200      	movs	r2, #0
 8019a24:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	4a35      	ldr	r2, [pc, #212]	@ (8019b00 <UART_RxISR_16BIT+0x1bc>)
 8019a2c:	4293      	cmp	r3, r2
 8019a2e:	d024      	beq.n	8019a7a <UART_RxISR_16BIT+0x136>
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	4a33      	ldr	r2, [pc, #204]	@ (8019b04 <UART_RxISR_16BIT+0x1c0>)
 8019a36:	4293      	cmp	r3, r2
 8019a38:	d01f      	beq.n	8019a7a <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d018      	beq.n	8019a7a <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a4e:	6a3b      	ldr	r3, [r7, #32]
 8019a50:	e853 3f00 	ldrex	r3, [r3]
 8019a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8019a56:	69fb      	ldr	r3, [r7, #28]
 8019a58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	461a      	mov	r2, r3
 8019a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019a68:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019a6e:	e841 2300 	strex	r3, r2, [r1]
 8019a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d1e6      	bne.n	8019a48 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a7e:	2b01      	cmp	r3, #1
 8019a80:	d12e      	bne.n	8019ae0 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	2200      	movs	r2, #0
 8019a86:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	e853 3f00 	ldrex	r3, [r3]
 8019a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8019a96:	68bb      	ldr	r3, [r7, #8]
 8019a98:	f023 0310 	bic.w	r3, r3, #16
 8019a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	461a      	mov	r2, r3
 8019aa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019aa6:	61bb      	str	r3, [r7, #24]
 8019aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019aaa:	6979      	ldr	r1, [r7, #20]
 8019aac:	69ba      	ldr	r2, [r7, #24]
 8019aae:	e841 2300 	strex	r3, r2, [r1]
 8019ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8019ab4:	693b      	ldr	r3, [r7, #16]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d1e6      	bne.n	8019a88 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	69db      	ldr	r3, [r3, #28]
 8019ac0:	f003 0310 	and.w	r3, r3, #16
 8019ac4:	2b10      	cmp	r3, #16
 8019ac6:	d103      	bne.n	8019ad0 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	2210      	movs	r2, #16
 8019ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019ad6:	4619      	mov	r1, r3
 8019ad8:	6878      	ldr	r0, [r7, #4]
 8019ada:	f7ff f961 	bl	8018da0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019ade:	e00b      	b.n	8019af8 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	f7f6 fb8d 	bl	8010200 <HAL_UART_RxCpltCallback>
}
 8019ae6:	e007      	b.n	8019af8 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	699a      	ldr	r2, [r3, #24]
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	f042 0208 	orr.w	r2, r2, #8
 8019af6:	619a      	str	r2, [r3, #24]
}
 8019af8:	bf00      	nop
 8019afa:	3770      	adds	r7, #112	@ 0x70
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}
 8019b00:	46002400 	.word	0x46002400
 8019b04:	56002400 	.word	0x56002400

08019b08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b0ac      	sub	sp, #176	@ 0xb0
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019b16:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	69db      	ldr	r3, [r3, #28]
 8019b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	689b      	ldr	r3, [r3, #8]
 8019b34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019b3e:	2b22      	cmp	r3, #34	@ 0x22
 8019b40:	f040 8188 	bne.w	8019e54 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b4a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019b4e:	e12b      	b.n	8019da8 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b56:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019b5a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8019b5e:	b2d9      	uxtb	r1, r3
 8019b60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8019b64:	b2da      	uxtb	r2, r3
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019b6a:	400a      	ands	r2, r1
 8019b6c:	b2d2      	uxtb	r2, r2
 8019b6e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019b74:	1c5a      	adds	r2, r3, #1
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	3b01      	subs	r3, #1
 8019b84:	b29a      	uxth	r2, r3
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	69db      	ldr	r3, [r3, #28]
 8019b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019b9a:	f003 0307 	and.w	r3, r3, #7
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d053      	beq.n	8019c4a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019ba6:	f003 0301 	and.w	r3, r3, #1
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d011      	beq.n	8019bd2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8019bae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d00b      	beq.n	8019bd2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	2201      	movs	r2, #1
 8019bc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019bc8:	f043 0201 	orr.w	r2, r3, #1
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019bd6:	f003 0302 	and.w	r3, r3, #2
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d011      	beq.n	8019c02 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8019bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019be2:	f003 0301 	and.w	r3, r3, #1
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d00b      	beq.n	8019c02 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	2202      	movs	r2, #2
 8019bf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019bf8:	f043 0204 	orr.w	r2, r3, #4
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c06:	f003 0304 	and.w	r3, r3, #4
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d011      	beq.n	8019c32 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8019c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019c12:	f003 0301 	and.w	r3, r3, #1
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d00b      	beq.n	8019c32 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	2204      	movs	r2, #4
 8019c20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c28:	f043 0202 	orr.w	r2, r3, #2
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d006      	beq.n	8019c4a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019c3c:	6878      	ldr	r0, [r7, #4]
 8019c3e:	f7ff f8a5 	bl	8018d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	2200      	movs	r2, #0
 8019c46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019c50:	b29b      	uxth	r3, r3
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	f040 80a8 	bne.w	8019da8 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019c60:	e853 3f00 	ldrex	r3, [r3]
 8019c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8019c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	461a      	mov	r2, r3
 8019c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019c7c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c7e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8019c80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019c82:	e841 2300 	strex	r3, r2, [r1]
 8019c86:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8019c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d1e4      	bne.n	8019c58 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	3308      	adds	r3, #8
 8019c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c98:	e853 3f00 	ldrex	r3, [r3]
 8019c9c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8019c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019ca4:	f023 0301 	bic.w	r3, r3, #1
 8019ca8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	3308      	adds	r3, #8
 8019cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019cb6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8019cb8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019cbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8019cbe:	e841 2300 	strex	r3, r2, [r1]
 8019cc2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019cc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d1e1      	bne.n	8019c8e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	2220      	movs	r2, #32
 8019cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	2200      	movs	r2, #0
 8019cdc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	4a62      	ldr	r2, [pc, #392]	@ (8019e6c <UART_RxISR_8BIT_FIFOEN+0x364>)
 8019ce4:	4293      	cmp	r3, r2
 8019ce6:	d026      	beq.n	8019d36 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	4a60      	ldr	r2, [pc, #384]	@ (8019e70 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8019cee:	4293      	cmp	r3, r2
 8019cf0:	d021      	beq.n	8019d36 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d01a      	beq.n	8019d36 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d08:	e853 3f00 	ldrex	r3, [r3]
 8019d0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019d14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8019d24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019d28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019d2a:	e841 2300 	strex	r3, r2, [r1]
 8019d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d1e4      	bne.n	8019d00 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d3a:	2b01      	cmp	r3, #1
 8019d3c:	d130      	bne.n	8019da0 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	2200      	movs	r2, #0
 8019d42:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d4c:	e853 3f00 	ldrex	r3, [r3]
 8019d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d54:	f023 0310 	bic.w	r3, r3, #16
 8019d58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	461a      	mov	r2, r3
 8019d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019d66:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019d6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019d6e:	e841 2300 	strex	r3, r2, [r1]
 8019d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d1e4      	bne.n	8019d44 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	69db      	ldr	r3, [r3, #28]
 8019d80:	f003 0310 	and.w	r3, r3, #16
 8019d84:	2b10      	cmp	r3, #16
 8019d86:	d103      	bne.n	8019d90 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	2210      	movs	r2, #16
 8019d8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019d96:	4619      	mov	r1, r3
 8019d98:	6878      	ldr	r0, [r7, #4]
 8019d9a:	f7ff f801 	bl	8018da0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8019d9e:	e00e      	b.n	8019dbe <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 8019da0:	6878      	ldr	r0, [r7, #4]
 8019da2:	f7f6 fa2d 	bl	8010200 <HAL_UART_RxCpltCallback>
        break;
 8019da6:	e00a      	b.n	8019dbe <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019da8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d006      	beq.n	8019dbe <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8019db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019db4:	f003 0320 	and.w	r3, r3, #32
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	f47f aec9 	bne.w	8019b50 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019dc4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8019dc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d049      	beq.n	8019e64 <UART_RxISR_8BIT_FIFOEN+0x35c>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019dd6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	d242      	bcs.n	8019e64 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	3308      	adds	r3, #8
 8019de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019de6:	6a3b      	ldr	r3, [r7, #32]
 8019de8:	e853 3f00 	ldrex	r3, [r3]
 8019dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8019dee:	69fb      	ldr	r3, [r7, #28]
 8019df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019df4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	3308      	adds	r3, #8
 8019dfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019e04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019e0a:	e841 2300 	strex	r3, r2, [r1]
 8019e0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d1e3      	bne.n	8019dde <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	4a16      	ldr	r2, [pc, #88]	@ (8019e74 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8019e1a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	e853 3f00 	ldrex	r3, [r3]
 8019e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e2a:	68bb      	ldr	r3, [r7, #8]
 8019e2c:	f043 0320 	orr.w	r3, r3, #32
 8019e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	461a      	mov	r2, r3
 8019e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019e3e:	61bb      	str	r3, [r7, #24]
 8019e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e42:	6979      	ldr	r1, [r7, #20]
 8019e44:	69ba      	ldr	r2, [r7, #24]
 8019e46:	e841 2300 	strex	r3, r2, [r1]
 8019e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8019e4c:	693b      	ldr	r3, [r7, #16]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d1e4      	bne.n	8019e1c <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019e52:	e007      	b.n	8019e64 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	699a      	ldr	r2, [r3, #24]
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	f042 0208 	orr.w	r2, r2, #8
 8019e62:	619a      	str	r2, [r3, #24]
}
 8019e64:	bf00      	nop
 8019e66:	37b0      	adds	r7, #176	@ 0xb0
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	bd80      	pop	{r7, pc}
 8019e6c:	46002400 	.word	0x46002400
 8019e70:	56002400 	.word	0x56002400
 8019e74:	08019781 	.word	0x08019781

08019e78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b0ae      	sub	sp, #184	@ 0xb8
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019e86:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	69db      	ldr	r3, [r3, #28]
 8019e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	689b      	ldr	r3, [r3, #8]
 8019ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019eae:	2b22      	cmp	r3, #34	@ 0x22
 8019eb0:	f040 818c 	bne.w	801a1cc <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019eba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019ebe:	e12f      	b.n	801a120 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ec6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8019ed2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8019ed6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8019eda:	4013      	ands	r3, r2
 8019edc:	b29a      	uxth	r2, r3
 8019ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019ee2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ee8:	1c9a      	adds	r2, r3, #2
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ef4:	b29b      	uxth	r3, r3
 8019ef6:	3b01      	subs	r3, #1
 8019ef8:	b29a      	uxth	r2, r3
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	69db      	ldr	r3, [r3, #28]
 8019f06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019f0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f0e:	f003 0307 	and.w	r3, r3, #7
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d053      	beq.n	8019fbe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019f16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f1a:	f003 0301 	and.w	r3, r3, #1
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d011      	beq.n	8019f46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8019f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d00b      	beq.n	8019f46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	2201      	movs	r2, #1
 8019f34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f3c:	f043 0201 	orr.w	r2, r3, #1
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f4a:	f003 0302 	and.w	r3, r3, #2
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d011      	beq.n	8019f76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8019f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019f56:	f003 0301 	and.w	r3, r3, #1
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d00b      	beq.n	8019f76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	2202      	movs	r2, #2
 8019f64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f6c:	f043 0204 	orr.w	r2, r3, #4
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019f76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f7a:	f003 0304 	and.w	r3, r3, #4
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d011      	beq.n	8019fa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8019f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019f86:	f003 0301 	and.w	r3, r3, #1
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d00b      	beq.n	8019fa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	2204      	movs	r2, #4
 8019f94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f9c:	f043 0202 	orr.w	r2, r3, #2
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d006      	beq.n	8019fbe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019fb0:	6878      	ldr	r0, [r7, #4]
 8019fb2:	f7fe feeb 	bl	8018d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	2200      	movs	r2, #0
 8019fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019fc4:	b29b      	uxth	r3, r3
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	f040 80aa 	bne.w	801a120 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019fd4:	e853 3f00 	ldrex	r3, [r3]
 8019fd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8019fda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019fe0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	461a      	mov	r2, r3
 8019fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019fee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019ff2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ff4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8019ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8019ffa:	e841 2300 	strex	r3, r2, [r1]
 8019ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a002:	2b00      	cmp	r3, #0
 801a004:	d1e2      	bne.n	8019fcc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	3308      	adds	r3, #8
 801a00c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a00e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a010:	e853 3f00 	ldrex	r3, [r3]
 801a014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a01c:	f023 0301 	bic.w	r3, r3, #1
 801a020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	3308      	adds	r3, #8
 801a02a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a02e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a030:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a032:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a036:	e841 2300 	strex	r3, r2, [r1]
 801a03a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a03c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d1e1      	bne.n	801a006 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	2220      	movs	r2, #32
 801a046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	2200      	movs	r2, #0
 801a04e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	2200      	movs	r2, #0
 801a054:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	4a62      	ldr	r2, [pc, #392]	@ (801a1e4 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 801a05c:	4293      	cmp	r3, r2
 801a05e:	d026      	beq.n	801a0ae <UART_RxISR_16BIT_FIFOEN+0x236>
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	4a60      	ldr	r2, [pc, #384]	@ (801a1e8 <UART_RxISR_16BIT_FIFOEN+0x370>)
 801a066:	4293      	cmp	r3, r2
 801a068:	d021      	beq.n	801a0ae <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	685b      	ldr	r3, [r3, #4]
 801a070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a074:	2b00      	cmp	r3, #0
 801a076:	d01a      	beq.n	801a0ae <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a07e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a080:	e853 3f00 	ldrex	r3, [r3]
 801a084:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a088:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a08c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	461a      	mov	r2, r3
 801a096:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a09a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a09c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a09e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a0a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a0a2:	e841 2300 	strex	r3, r2, [r1]
 801a0a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a0a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d1e4      	bne.n	801a078 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0b2:	2b01      	cmp	r3, #1
 801a0b4:	d130      	bne.n	801a118 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0c4:	e853 3f00 	ldrex	r3, [r3]
 801a0c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0cc:	f023 0310 	bic.w	r3, r3, #16
 801a0d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	461a      	mov	r2, r3
 801a0da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a0de:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a0e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a0e6:	e841 2300 	strex	r3, r2, [r1]
 801a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d1e4      	bne.n	801a0bc <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	69db      	ldr	r3, [r3, #28]
 801a0f8:	f003 0310 	and.w	r3, r3, #16
 801a0fc:	2b10      	cmp	r3, #16
 801a0fe:	d103      	bne.n	801a108 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	2210      	movs	r2, #16
 801a106:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a10e:	4619      	mov	r1, r3
 801a110:	6878      	ldr	r0, [r7, #4]
 801a112:	f7fe fe45 	bl	8018da0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a116:	e00e      	b.n	801a136 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 801a118:	6878      	ldr	r0, [r7, #4]
 801a11a:	f7f6 f871 	bl	8010200 <HAL_UART_RxCpltCallback>
        break;
 801a11e:	e00a      	b.n	801a136 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a120:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a124:	2b00      	cmp	r3, #0
 801a126:	d006      	beq.n	801a136 <UART_RxISR_16BIT_FIFOEN+0x2be>
 801a128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a12c:	f003 0320 	and.w	r3, r3, #32
 801a130:	2b00      	cmp	r3, #0
 801a132:	f47f aec5 	bne.w	8019ec0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a13c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a140:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a144:	2b00      	cmp	r3, #0
 801a146:	d049      	beq.n	801a1dc <UART_RxISR_16BIT_FIFOEN+0x364>
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a14e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a152:	429a      	cmp	r2, r3
 801a154:	d242      	bcs.n	801a1dc <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	3308      	adds	r3, #8
 801a15c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a160:	e853 3f00 	ldrex	r3, [r3]
 801a164:	623b      	str	r3, [r7, #32]
   return(result);
 801a166:	6a3b      	ldr	r3, [r7, #32]
 801a168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a16c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	3308      	adds	r3, #8
 801a176:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a17a:	633a      	str	r2, [r7, #48]	@ 0x30
 801a17c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a17e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a182:	e841 2300 	strex	r3, r2, [r1]
 801a186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d1e3      	bne.n	801a156 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	4a16      	ldr	r2, [pc, #88]	@ (801a1ec <UART_RxISR_16BIT_FIFOEN+0x374>)
 801a192:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a19a:	693b      	ldr	r3, [r7, #16]
 801a19c:	e853 3f00 	ldrex	r3, [r3]
 801a1a0:	60fb      	str	r3, [r7, #12]
   return(result);
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	f043 0320 	orr.w	r3, r3, #32
 801a1a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	461a      	mov	r2, r3
 801a1b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a1b6:	61fb      	str	r3, [r7, #28]
 801a1b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1ba:	69b9      	ldr	r1, [r7, #24]
 801a1bc:	69fa      	ldr	r2, [r7, #28]
 801a1be:	e841 2300 	strex	r3, r2, [r1]
 801a1c2:	617b      	str	r3, [r7, #20]
   return(result);
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d1e4      	bne.n	801a194 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a1ca:	e007      	b.n	801a1dc <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	699a      	ldr	r2, [r3, #24]
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	f042 0208 	orr.w	r2, r2, #8
 801a1da:	619a      	str	r2, [r3, #24]
}
 801a1dc:	bf00      	nop
 801a1de:	37b8      	adds	r7, #184	@ 0xb8
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	46002400 	.word	0x46002400
 801a1e8:	56002400 	.word	0x56002400
 801a1ec:	08019945 	.word	0x08019945

0801a1f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a1f0:	b480      	push	{r7}
 801a1f2:	b085      	sub	sp, #20
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a1fe:	2b01      	cmp	r3, #1
 801a200:	d101      	bne.n	801a206 <HAL_UARTEx_DisableFifoMode+0x16>
 801a202:	2302      	movs	r3, #2
 801a204:	e027      	b.n	801a256 <HAL_UARTEx_DisableFifoMode+0x66>
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2201      	movs	r2, #1
 801a20a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	2224      	movs	r2, #36	@ 0x24
 801a212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	681a      	ldr	r2, [r3, #0]
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	f022 0201 	bic.w	r2, r2, #1
 801a22c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a234:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	2200      	movs	r2, #0
 801a23a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	68fa      	ldr	r2, [r7, #12]
 801a242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	2220      	movs	r2, #32
 801a248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2200      	movs	r2, #0
 801a250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a254:	2300      	movs	r3, #0
}
 801a256:	4618      	mov	r0, r3
 801a258:	3714      	adds	r7, #20
 801a25a:	46bd      	mov	sp, r7
 801a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a260:	4770      	bx	lr

0801a262 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a262:	b580      	push	{r7, lr}
 801a264:	b084      	sub	sp, #16
 801a266:	af00      	add	r7, sp, #0
 801a268:	6078      	str	r0, [r7, #4]
 801a26a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a272:	2b01      	cmp	r3, #1
 801a274:	d101      	bne.n	801a27a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a276:	2302      	movs	r3, #2
 801a278:	e02d      	b.n	801a2d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	2201      	movs	r2, #1
 801a27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	2224      	movs	r2, #36	@ 0x24
 801a286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	681a      	ldr	r2, [r3, #0]
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	f022 0201 	bic.w	r2, r2, #1
 801a2a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	689b      	ldr	r3, [r3, #8]
 801a2a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	683a      	ldr	r2, [r7, #0]
 801a2b2:	430a      	orrs	r2, r1
 801a2b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a2b6:	6878      	ldr	r0, [r7, #4]
 801a2b8:	f000 f850 	bl	801a35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	68fa      	ldr	r2, [r7, #12]
 801a2c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	2220      	movs	r2, #32
 801a2c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a2d4:	2300      	movs	r3, #0
}
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	3710      	adds	r7, #16
 801a2da:	46bd      	mov	sp, r7
 801a2dc:	bd80      	pop	{r7, pc}

0801a2de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a2de:	b580      	push	{r7, lr}
 801a2e0:	b084      	sub	sp, #16
 801a2e2:	af00      	add	r7, sp, #0
 801a2e4:	6078      	str	r0, [r7, #4]
 801a2e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a2ee:	2b01      	cmp	r3, #1
 801a2f0:	d101      	bne.n	801a2f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a2f2:	2302      	movs	r3, #2
 801a2f4:	e02d      	b.n	801a352 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	2201      	movs	r2, #1
 801a2fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	2224      	movs	r2, #36	@ 0x24
 801a302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	681a      	ldr	r2, [r3, #0]
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	f022 0201 	bic.w	r2, r2, #1
 801a31c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	689b      	ldr	r3, [r3, #8]
 801a324:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	683a      	ldr	r2, [r7, #0]
 801a32e:	430a      	orrs	r2, r1
 801a330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a332:	6878      	ldr	r0, [r7, #4]
 801a334:	f000 f812 	bl	801a35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	68fa      	ldr	r2, [r7, #12]
 801a33e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	2220      	movs	r2, #32
 801a344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	2200      	movs	r2, #0
 801a34c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a350:	2300      	movs	r3, #0
}
 801a352:	4618      	mov	r0, r3
 801a354:	3710      	adds	r7, #16
 801a356:	46bd      	mov	sp, r7
 801a358:	bd80      	pop	{r7, pc}
	...

0801a35c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a35c:	b480      	push	{r7}
 801a35e:	b085      	sub	sp, #20
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d108      	bne.n	801a37e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	2201      	movs	r2, #1
 801a370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2201      	movs	r2, #1
 801a378:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a37c:	e031      	b.n	801a3e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a37e:	2308      	movs	r3, #8
 801a380:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a382:	2308      	movs	r3, #8
 801a384:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	689b      	ldr	r3, [r3, #8]
 801a38c:	0e5b      	lsrs	r3, r3, #25
 801a38e:	b2db      	uxtb	r3, r3
 801a390:	f003 0307 	and.w	r3, r3, #7
 801a394:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	689b      	ldr	r3, [r3, #8]
 801a39c:	0f5b      	lsrs	r3, r3, #29
 801a39e:	b2db      	uxtb	r3, r3
 801a3a0:	f003 0307 	and.w	r3, r3, #7
 801a3a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a3a6:	7bbb      	ldrb	r3, [r7, #14]
 801a3a8:	7b3a      	ldrb	r2, [r7, #12]
 801a3aa:	4911      	ldr	r1, [pc, #68]	@ (801a3f0 <UARTEx_SetNbDataToProcess+0x94>)
 801a3ac:	5c8a      	ldrb	r2, [r1, r2]
 801a3ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a3b2:	7b3a      	ldrb	r2, [r7, #12]
 801a3b4:	490f      	ldr	r1, [pc, #60]	@ (801a3f4 <UARTEx_SetNbDataToProcess+0x98>)
 801a3b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a3b8:	fb93 f3f2 	sdiv	r3, r3, r2
 801a3bc:	b29a      	uxth	r2, r3
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a3c4:	7bfb      	ldrb	r3, [r7, #15]
 801a3c6:	7b7a      	ldrb	r2, [r7, #13]
 801a3c8:	4909      	ldr	r1, [pc, #36]	@ (801a3f0 <UARTEx_SetNbDataToProcess+0x94>)
 801a3ca:	5c8a      	ldrb	r2, [r1, r2]
 801a3cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a3d0:	7b7a      	ldrb	r2, [r7, #13]
 801a3d2:	4908      	ldr	r1, [pc, #32]	@ (801a3f4 <UARTEx_SetNbDataToProcess+0x98>)
 801a3d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a3d6:	fb93 f3f2 	sdiv	r3, r3, r2
 801a3da:	b29a      	uxth	r2, r3
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a3e2:	bf00      	nop
 801a3e4:	3714      	adds	r7, #20
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ec:	4770      	bx	lr
 801a3ee:	bf00      	nop
 801a3f0:	08025594 	.word	0x08025594
 801a3f4:	0802559c 	.word	0x0802559c

0801a3f8 <__cvt>:
 801a3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3fc:	ec57 6b10 	vmov	r6, r7, d0
 801a400:	2f00      	cmp	r7, #0
 801a402:	460c      	mov	r4, r1
 801a404:	4619      	mov	r1, r3
 801a406:	463b      	mov	r3, r7
 801a408:	bfb4      	ite	lt
 801a40a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a40e:	2300      	movge	r3, #0
 801a410:	4691      	mov	r9, r2
 801a412:	bfbf      	itttt	lt
 801a414:	4632      	movlt	r2, r6
 801a416:	461f      	movlt	r7, r3
 801a418:	232d      	movlt	r3, #45	@ 0x2d
 801a41a:	4616      	movlt	r6, r2
 801a41c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a420:	700b      	strb	r3, [r1, #0]
 801a422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a424:	f023 0820 	bic.w	r8, r3, #32
 801a428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a42c:	d005      	beq.n	801a43a <__cvt+0x42>
 801a42e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a432:	d100      	bne.n	801a436 <__cvt+0x3e>
 801a434:	3401      	adds	r4, #1
 801a436:	2102      	movs	r1, #2
 801a438:	e000      	b.n	801a43c <__cvt+0x44>
 801a43a:	2103      	movs	r1, #3
 801a43c:	ab03      	add	r3, sp, #12
 801a43e:	4622      	mov	r2, r4
 801a440:	9301      	str	r3, [sp, #4]
 801a442:	ab02      	add	r3, sp, #8
 801a444:	ec47 6b10 	vmov	d0, r6, r7
 801a448:	9300      	str	r3, [sp, #0]
 801a44a:	4653      	mov	r3, sl
 801a44c:	f000 ffa8 	bl	801b3a0 <_dtoa_r>
 801a450:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a454:	4605      	mov	r5, r0
 801a456:	d119      	bne.n	801a48c <__cvt+0x94>
 801a458:	f019 0f01 	tst.w	r9, #1
 801a45c:	d00e      	beq.n	801a47c <__cvt+0x84>
 801a45e:	eb00 0904 	add.w	r9, r0, r4
 801a462:	2200      	movs	r2, #0
 801a464:	2300      	movs	r3, #0
 801a466:	4630      	mov	r0, r6
 801a468:	4639      	mov	r1, r7
 801a46a:	f7e6 fb31 	bl	8000ad0 <__aeabi_dcmpeq>
 801a46e:	b108      	cbz	r0, 801a474 <__cvt+0x7c>
 801a470:	f8cd 900c 	str.w	r9, [sp, #12]
 801a474:	2230      	movs	r2, #48	@ 0x30
 801a476:	9b03      	ldr	r3, [sp, #12]
 801a478:	454b      	cmp	r3, r9
 801a47a:	d31e      	bcc.n	801a4ba <__cvt+0xc2>
 801a47c:	9b03      	ldr	r3, [sp, #12]
 801a47e:	4628      	mov	r0, r5
 801a480:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a482:	1b5b      	subs	r3, r3, r5
 801a484:	6013      	str	r3, [r2, #0]
 801a486:	b004      	add	sp, #16
 801a488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a48c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a490:	eb00 0904 	add.w	r9, r0, r4
 801a494:	d1e5      	bne.n	801a462 <__cvt+0x6a>
 801a496:	7803      	ldrb	r3, [r0, #0]
 801a498:	2b30      	cmp	r3, #48	@ 0x30
 801a49a:	d10a      	bne.n	801a4b2 <__cvt+0xba>
 801a49c:	2200      	movs	r2, #0
 801a49e:	2300      	movs	r3, #0
 801a4a0:	4630      	mov	r0, r6
 801a4a2:	4639      	mov	r1, r7
 801a4a4:	f7e6 fb14 	bl	8000ad0 <__aeabi_dcmpeq>
 801a4a8:	b918      	cbnz	r0, 801a4b2 <__cvt+0xba>
 801a4aa:	f1c4 0401 	rsb	r4, r4, #1
 801a4ae:	f8ca 4000 	str.w	r4, [sl]
 801a4b2:	f8da 3000 	ldr.w	r3, [sl]
 801a4b6:	4499      	add	r9, r3
 801a4b8:	e7d3      	b.n	801a462 <__cvt+0x6a>
 801a4ba:	1c59      	adds	r1, r3, #1
 801a4bc:	9103      	str	r1, [sp, #12]
 801a4be:	701a      	strb	r2, [r3, #0]
 801a4c0:	e7d9      	b.n	801a476 <__cvt+0x7e>

0801a4c2 <__exponent>:
 801a4c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a4c4:	2900      	cmp	r1, #0
 801a4c6:	7002      	strb	r2, [r0, #0]
 801a4c8:	bfba      	itte	lt
 801a4ca:	4249      	neglt	r1, r1
 801a4cc:	232d      	movlt	r3, #45	@ 0x2d
 801a4ce:	232b      	movge	r3, #43	@ 0x2b
 801a4d0:	2909      	cmp	r1, #9
 801a4d2:	7043      	strb	r3, [r0, #1]
 801a4d4:	dd28      	ble.n	801a528 <__exponent+0x66>
 801a4d6:	f10d 0307 	add.w	r3, sp, #7
 801a4da:	270a      	movs	r7, #10
 801a4dc:	461d      	mov	r5, r3
 801a4de:	461a      	mov	r2, r3
 801a4e0:	3b01      	subs	r3, #1
 801a4e2:	fbb1 f6f7 	udiv	r6, r1, r7
 801a4e6:	fb07 1416 	mls	r4, r7, r6, r1
 801a4ea:	3430      	adds	r4, #48	@ 0x30
 801a4ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a4f0:	460c      	mov	r4, r1
 801a4f2:	4631      	mov	r1, r6
 801a4f4:	2c63      	cmp	r4, #99	@ 0x63
 801a4f6:	dcf2      	bgt.n	801a4de <__exponent+0x1c>
 801a4f8:	3130      	adds	r1, #48	@ 0x30
 801a4fa:	1e94      	subs	r4, r2, #2
 801a4fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a500:	1c41      	adds	r1, r0, #1
 801a502:	4623      	mov	r3, r4
 801a504:	42ab      	cmp	r3, r5
 801a506:	d30a      	bcc.n	801a51e <__exponent+0x5c>
 801a508:	f10d 0309 	add.w	r3, sp, #9
 801a50c:	1a9b      	subs	r3, r3, r2
 801a50e:	42ac      	cmp	r4, r5
 801a510:	bf88      	it	hi
 801a512:	2300      	movhi	r3, #0
 801a514:	3302      	adds	r3, #2
 801a516:	4403      	add	r3, r0
 801a518:	1a18      	subs	r0, r3, r0
 801a51a:	b003      	add	sp, #12
 801a51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a51e:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a522:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a526:	e7ed      	b.n	801a504 <__exponent+0x42>
 801a528:	2330      	movs	r3, #48	@ 0x30
 801a52a:	3130      	adds	r1, #48	@ 0x30
 801a52c:	7083      	strb	r3, [r0, #2]
 801a52e:	1d03      	adds	r3, r0, #4
 801a530:	70c1      	strb	r1, [r0, #3]
 801a532:	e7f1      	b.n	801a518 <__exponent+0x56>

0801a534 <_printf_float>:
 801a534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a538:	b08d      	sub	sp, #52	@ 0x34
 801a53a:	460c      	mov	r4, r1
 801a53c:	4616      	mov	r6, r2
 801a53e:	461f      	mov	r7, r3
 801a540:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a544:	4605      	mov	r5, r0
 801a546:	f000 fe0b 	bl	801b160 <_localeconv_r>
 801a54a:	6803      	ldr	r3, [r0, #0]
 801a54c:	4618      	mov	r0, r3
 801a54e:	9304      	str	r3, [sp, #16]
 801a550:	f7e5 fe92 	bl	8000278 <strlen>
 801a554:	2300      	movs	r3, #0
 801a556:	9005      	str	r0, [sp, #20]
 801a558:	930a      	str	r3, [sp, #40]	@ 0x28
 801a55a:	f8d8 3000 	ldr.w	r3, [r8]
 801a55e:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a562:	3307      	adds	r3, #7
 801a564:	f8d4 b000 	ldr.w	fp, [r4]
 801a568:	f023 0307 	bic.w	r3, r3, #7
 801a56c:	f103 0208 	add.w	r2, r3, #8
 801a570:	f8c8 2000 	str.w	r2, [r8]
 801a574:	f04f 32ff 	mov.w	r2, #4294967295
 801a578:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a57c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a580:	f8cd 8018 	str.w	r8, [sp, #24]
 801a584:	9307      	str	r3, [sp, #28]
 801a586:	4b9d      	ldr	r3, [pc, #628]	@ (801a7fc <_printf_float+0x2c8>)
 801a588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a58c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a590:	f7e6 fad0 	bl	8000b34 <__aeabi_dcmpun>
 801a594:	bb70      	cbnz	r0, 801a5f4 <_printf_float+0xc0>
 801a596:	f04f 32ff 	mov.w	r2, #4294967295
 801a59a:	4b98      	ldr	r3, [pc, #608]	@ (801a7fc <_printf_float+0x2c8>)
 801a59c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a5a0:	f7e6 faaa 	bl	8000af8 <__aeabi_dcmple>
 801a5a4:	bb30      	cbnz	r0, 801a5f4 <_printf_float+0xc0>
 801a5a6:	2200      	movs	r2, #0
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	4640      	mov	r0, r8
 801a5ac:	4649      	mov	r1, r9
 801a5ae:	f7e6 fa99 	bl	8000ae4 <__aeabi_dcmplt>
 801a5b2:	b110      	cbz	r0, 801a5ba <_printf_float+0x86>
 801a5b4:	232d      	movs	r3, #45	@ 0x2d
 801a5b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a5ba:	4a91      	ldr	r2, [pc, #580]	@ (801a800 <_printf_float+0x2cc>)
 801a5bc:	4b91      	ldr	r3, [pc, #580]	@ (801a804 <_printf_float+0x2d0>)
 801a5be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a5c2:	bf94      	ite	ls
 801a5c4:	4690      	movls	r8, r2
 801a5c6:	4698      	movhi	r8, r3
 801a5c8:	2303      	movs	r3, #3
 801a5ca:	f04f 0900 	mov.w	r9, #0
 801a5ce:	6123      	str	r3, [r4, #16]
 801a5d0:	f02b 0304 	bic.w	r3, fp, #4
 801a5d4:	6023      	str	r3, [r4, #0]
 801a5d6:	4633      	mov	r3, r6
 801a5d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a5da:	4621      	mov	r1, r4
 801a5dc:	4628      	mov	r0, r5
 801a5de:	9700      	str	r7, [sp, #0]
 801a5e0:	f000 f9d2 	bl	801a988 <_printf_common>
 801a5e4:	3001      	adds	r0, #1
 801a5e6:	f040 808d 	bne.w	801a704 <_printf_float+0x1d0>
 801a5ea:	f04f 30ff 	mov.w	r0, #4294967295
 801a5ee:	b00d      	add	sp, #52	@ 0x34
 801a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5f4:	4642      	mov	r2, r8
 801a5f6:	464b      	mov	r3, r9
 801a5f8:	4640      	mov	r0, r8
 801a5fa:	4649      	mov	r1, r9
 801a5fc:	f7e6 fa9a 	bl	8000b34 <__aeabi_dcmpun>
 801a600:	b140      	cbz	r0, 801a614 <_printf_float+0xe0>
 801a602:	464b      	mov	r3, r9
 801a604:	4a80      	ldr	r2, [pc, #512]	@ (801a808 <_printf_float+0x2d4>)
 801a606:	2b00      	cmp	r3, #0
 801a608:	bfbc      	itt	lt
 801a60a:	232d      	movlt	r3, #45	@ 0x2d
 801a60c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a610:	4b7e      	ldr	r3, [pc, #504]	@ (801a80c <_printf_float+0x2d8>)
 801a612:	e7d4      	b.n	801a5be <_printf_float+0x8a>
 801a614:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a618:	6863      	ldr	r3, [r4, #4]
 801a61a:	9206      	str	r2, [sp, #24]
 801a61c:	1c5a      	adds	r2, r3, #1
 801a61e:	d13b      	bne.n	801a698 <_printf_float+0x164>
 801a620:	2306      	movs	r3, #6
 801a622:	6063      	str	r3, [r4, #4]
 801a624:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a628:	2300      	movs	r3, #0
 801a62a:	4628      	mov	r0, r5
 801a62c:	6022      	str	r2, [r4, #0]
 801a62e:	9303      	str	r3, [sp, #12]
 801a630:	ab0a      	add	r3, sp, #40	@ 0x28
 801a632:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a636:	ab09      	add	r3, sp, #36	@ 0x24
 801a638:	ec49 8b10 	vmov	d0, r8, r9
 801a63c:	9300      	str	r3, [sp, #0]
 801a63e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a642:	6861      	ldr	r1, [r4, #4]
 801a644:	f7ff fed8 	bl	801a3f8 <__cvt>
 801a648:	9b06      	ldr	r3, [sp, #24]
 801a64a:	4680      	mov	r8, r0
 801a64c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a64e:	2b47      	cmp	r3, #71	@ 0x47
 801a650:	d129      	bne.n	801a6a6 <_printf_float+0x172>
 801a652:	1cc8      	adds	r0, r1, #3
 801a654:	db02      	blt.n	801a65c <_printf_float+0x128>
 801a656:	6863      	ldr	r3, [r4, #4]
 801a658:	4299      	cmp	r1, r3
 801a65a:	dd41      	ble.n	801a6e0 <_printf_float+0x1ac>
 801a65c:	f1aa 0a02 	sub.w	sl, sl, #2
 801a660:	fa5f fa8a 	uxtb.w	sl, sl
 801a664:	3901      	subs	r1, #1
 801a666:	4652      	mov	r2, sl
 801a668:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a66c:	9109      	str	r1, [sp, #36]	@ 0x24
 801a66e:	f7ff ff28 	bl	801a4c2 <__exponent>
 801a672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a674:	4681      	mov	r9, r0
 801a676:	1813      	adds	r3, r2, r0
 801a678:	2a01      	cmp	r2, #1
 801a67a:	6123      	str	r3, [r4, #16]
 801a67c:	dc02      	bgt.n	801a684 <_printf_float+0x150>
 801a67e:	6822      	ldr	r2, [r4, #0]
 801a680:	07d2      	lsls	r2, r2, #31
 801a682:	d501      	bpl.n	801a688 <_printf_float+0x154>
 801a684:	3301      	adds	r3, #1
 801a686:	6123      	str	r3, [r4, #16]
 801a688:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d0a2      	beq.n	801a5d6 <_printf_float+0xa2>
 801a690:	232d      	movs	r3, #45	@ 0x2d
 801a692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a696:	e79e      	b.n	801a5d6 <_printf_float+0xa2>
 801a698:	9a06      	ldr	r2, [sp, #24]
 801a69a:	2a47      	cmp	r2, #71	@ 0x47
 801a69c:	d1c2      	bne.n	801a624 <_printf_float+0xf0>
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d1c0      	bne.n	801a624 <_printf_float+0xf0>
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	e7bd      	b.n	801a622 <_printf_float+0xee>
 801a6a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a6aa:	d9db      	bls.n	801a664 <_printf_float+0x130>
 801a6ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a6b0:	d118      	bne.n	801a6e4 <_printf_float+0x1b0>
 801a6b2:	2900      	cmp	r1, #0
 801a6b4:	6863      	ldr	r3, [r4, #4]
 801a6b6:	dd0b      	ble.n	801a6d0 <_printf_float+0x19c>
 801a6b8:	6121      	str	r1, [r4, #16]
 801a6ba:	b913      	cbnz	r3, 801a6c2 <_printf_float+0x18e>
 801a6bc:	6822      	ldr	r2, [r4, #0]
 801a6be:	07d0      	lsls	r0, r2, #31
 801a6c0:	d502      	bpl.n	801a6c8 <_printf_float+0x194>
 801a6c2:	3301      	adds	r3, #1
 801a6c4:	440b      	add	r3, r1
 801a6c6:	6123      	str	r3, [r4, #16]
 801a6c8:	f04f 0900 	mov.w	r9, #0
 801a6cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a6ce:	e7db      	b.n	801a688 <_printf_float+0x154>
 801a6d0:	b913      	cbnz	r3, 801a6d8 <_printf_float+0x1a4>
 801a6d2:	6822      	ldr	r2, [r4, #0]
 801a6d4:	07d2      	lsls	r2, r2, #31
 801a6d6:	d501      	bpl.n	801a6dc <_printf_float+0x1a8>
 801a6d8:	3302      	adds	r3, #2
 801a6da:	e7f4      	b.n	801a6c6 <_printf_float+0x192>
 801a6dc:	2301      	movs	r3, #1
 801a6de:	e7f2      	b.n	801a6c6 <_printf_float+0x192>
 801a6e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a6e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a6e6:	4299      	cmp	r1, r3
 801a6e8:	db05      	blt.n	801a6f6 <_printf_float+0x1c2>
 801a6ea:	6823      	ldr	r3, [r4, #0]
 801a6ec:	6121      	str	r1, [r4, #16]
 801a6ee:	07d8      	lsls	r0, r3, #31
 801a6f0:	d5ea      	bpl.n	801a6c8 <_printf_float+0x194>
 801a6f2:	1c4b      	adds	r3, r1, #1
 801a6f4:	e7e7      	b.n	801a6c6 <_printf_float+0x192>
 801a6f6:	2900      	cmp	r1, #0
 801a6f8:	bfd4      	ite	le
 801a6fa:	f1c1 0202 	rsble	r2, r1, #2
 801a6fe:	2201      	movgt	r2, #1
 801a700:	4413      	add	r3, r2
 801a702:	e7e0      	b.n	801a6c6 <_printf_float+0x192>
 801a704:	6823      	ldr	r3, [r4, #0]
 801a706:	055a      	lsls	r2, r3, #21
 801a708:	d407      	bmi.n	801a71a <_printf_float+0x1e6>
 801a70a:	6923      	ldr	r3, [r4, #16]
 801a70c:	4642      	mov	r2, r8
 801a70e:	4631      	mov	r1, r6
 801a710:	4628      	mov	r0, r5
 801a712:	47b8      	blx	r7
 801a714:	3001      	adds	r0, #1
 801a716:	d12b      	bne.n	801a770 <_printf_float+0x23c>
 801a718:	e767      	b.n	801a5ea <_printf_float+0xb6>
 801a71a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a71e:	f240 80dd 	bls.w	801a8dc <_printf_float+0x3a8>
 801a722:	2200      	movs	r2, #0
 801a724:	2300      	movs	r3, #0
 801a726:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a72a:	f7e6 f9d1 	bl	8000ad0 <__aeabi_dcmpeq>
 801a72e:	2800      	cmp	r0, #0
 801a730:	d033      	beq.n	801a79a <_printf_float+0x266>
 801a732:	2301      	movs	r3, #1
 801a734:	4a36      	ldr	r2, [pc, #216]	@ (801a810 <_printf_float+0x2dc>)
 801a736:	4631      	mov	r1, r6
 801a738:	4628      	mov	r0, r5
 801a73a:	47b8      	blx	r7
 801a73c:	3001      	adds	r0, #1
 801a73e:	f43f af54 	beq.w	801a5ea <_printf_float+0xb6>
 801a742:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a746:	4543      	cmp	r3, r8
 801a748:	db02      	blt.n	801a750 <_printf_float+0x21c>
 801a74a:	6823      	ldr	r3, [r4, #0]
 801a74c:	07d8      	lsls	r0, r3, #31
 801a74e:	d50f      	bpl.n	801a770 <_printf_float+0x23c>
 801a750:	4631      	mov	r1, r6
 801a752:	4628      	mov	r0, r5
 801a754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a758:	47b8      	blx	r7
 801a75a:	3001      	adds	r0, #1
 801a75c:	f43f af45 	beq.w	801a5ea <_printf_float+0xb6>
 801a760:	f04f 0900 	mov.w	r9, #0
 801a764:	f108 38ff 	add.w	r8, r8, #4294967295
 801a768:	f104 0a1a 	add.w	sl, r4, #26
 801a76c:	45c8      	cmp	r8, r9
 801a76e:	dc09      	bgt.n	801a784 <_printf_float+0x250>
 801a770:	6823      	ldr	r3, [r4, #0]
 801a772:	079b      	lsls	r3, r3, #30
 801a774:	f100 8103 	bmi.w	801a97e <_printf_float+0x44a>
 801a778:	68e0      	ldr	r0, [r4, #12]
 801a77a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a77c:	4298      	cmp	r0, r3
 801a77e:	bfb8      	it	lt
 801a780:	4618      	movlt	r0, r3
 801a782:	e734      	b.n	801a5ee <_printf_float+0xba>
 801a784:	2301      	movs	r3, #1
 801a786:	4652      	mov	r2, sl
 801a788:	4631      	mov	r1, r6
 801a78a:	4628      	mov	r0, r5
 801a78c:	47b8      	blx	r7
 801a78e:	3001      	adds	r0, #1
 801a790:	f43f af2b 	beq.w	801a5ea <_printf_float+0xb6>
 801a794:	f109 0901 	add.w	r9, r9, #1
 801a798:	e7e8      	b.n	801a76c <_printf_float+0x238>
 801a79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	dc39      	bgt.n	801a814 <_printf_float+0x2e0>
 801a7a0:	2301      	movs	r3, #1
 801a7a2:	4a1b      	ldr	r2, [pc, #108]	@ (801a810 <_printf_float+0x2dc>)
 801a7a4:	4631      	mov	r1, r6
 801a7a6:	4628      	mov	r0, r5
 801a7a8:	47b8      	blx	r7
 801a7aa:	3001      	adds	r0, #1
 801a7ac:	f43f af1d 	beq.w	801a5ea <_printf_float+0xb6>
 801a7b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a7b4:	ea59 0303 	orrs.w	r3, r9, r3
 801a7b8:	d102      	bne.n	801a7c0 <_printf_float+0x28c>
 801a7ba:	6823      	ldr	r3, [r4, #0]
 801a7bc:	07d9      	lsls	r1, r3, #31
 801a7be:	d5d7      	bpl.n	801a770 <_printf_float+0x23c>
 801a7c0:	4631      	mov	r1, r6
 801a7c2:	4628      	mov	r0, r5
 801a7c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a7c8:	47b8      	blx	r7
 801a7ca:	3001      	adds	r0, #1
 801a7cc:	f43f af0d 	beq.w	801a5ea <_printf_float+0xb6>
 801a7d0:	f04f 0a00 	mov.w	sl, #0
 801a7d4:	f104 0b1a 	add.w	fp, r4, #26
 801a7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7da:	425b      	negs	r3, r3
 801a7dc:	4553      	cmp	r3, sl
 801a7de:	dc01      	bgt.n	801a7e4 <_printf_float+0x2b0>
 801a7e0:	464b      	mov	r3, r9
 801a7e2:	e793      	b.n	801a70c <_printf_float+0x1d8>
 801a7e4:	2301      	movs	r3, #1
 801a7e6:	465a      	mov	r2, fp
 801a7e8:	4631      	mov	r1, r6
 801a7ea:	4628      	mov	r0, r5
 801a7ec:	47b8      	blx	r7
 801a7ee:	3001      	adds	r0, #1
 801a7f0:	f43f aefb 	beq.w	801a5ea <_printf_float+0xb6>
 801a7f4:	f10a 0a01 	add.w	sl, sl, #1
 801a7f8:	e7ee      	b.n	801a7d8 <_printf_float+0x2a4>
 801a7fa:	bf00      	nop
 801a7fc:	7fefffff 	.word	0x7fefffff
 801a800:	080255a4 	.word	0x080255a4
 801a804:	080255a8 	.word	0x080255a8
 801a808:	080255ac 	.word	0x080255ac
 801a80c:	080255b0 	.word	0x080255b0
 801a810:	080255b4 	.word	0x080255b4
 801a814:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a816:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a81a:	4553      	cmp	r3, sl
 801a81c:	bfa8      	it	ge
 801a81e:	4653      	movge	r3, sl
 801a820:	2b00      	cmp	r3, #0
 801a822:	4699      	mov	r9, r3
 801a824:	dc36      	bgt.n	801a894 <_printf_float+0x360>
 801a826:	f04f 0b00 	mov.w	fp, #0
 801a82a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a82e:	f104 021a 	add.w	r2, r4, #26
 801a832:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a834:	9306      	str	r3, [sp, #24]
 801a836:	eba3 0309 	sub.w	r3, r3, r9
 801a83a:	455b      	cmp	r3, fp
 801a83c:	dc31      	bgt.n	801a8a2 <_printf_float+0x36e>
 801a83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a840:	459a      	cmp	sl, r3
 801a842:	dc3a      	bgt.n	801a8ba <_printf_float+0x386>
 801a844:	6823      	ldr	r3, [r4, #0]
 801a846:	07da      	lsls	r2, r3, #31
 801a848:	d437      	bmi.n	801a8ba <_printf_float+0x386>
 801a84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a84c:	ebaa 0903 	sub.w	r9, sl, r3
 801a850:	9b06      	ldr	r3, [sp, #24]
 801a852:	ebaa 0303 	sub.w	r3, sl, r3
 801a856:	4599      	cmp	r9, r3
 801a858:	bfa8      	it	ge
 801a85a:	4699      	movge	r9, r3
 801a85c:	f1b9 0f00 	cmp.w	r9, #0
 801a860:	dc33      	bgt.n	801a8ca <_printf_float+0x396>
 801a862:	f04f 0800 	mov.w	r8, #0
 801a866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a86a:	f104 0b1a 	add.w	fp, r4, #26
 801a86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a870:	ebaa 0303 	sub.w	r3, sl, r3
 801a874:	eba3 0309 	sub.w	r3, r3, r9
 801a878:	4543      	cmp	r3, r8
 801a87a:	f77f af79 	ble.w	801a770 <_printf_float+0x23c>
 801a87e:	2301      	movs	r3, #1
 801a880:	465a      	mov	r2, fp
 801a882:	4631      	mov	r1, r6
 801a884:	4628      	mov	r0, r5
 801a886:	47b8      	blx	r7
 801a888:	3001      	adds	r0, #1
 801a88a:	f43f aeae 	beq.w	801a5ea <_printf_float+0xb6>
 801a88e:	f108 0801 	add.w	r8, r8, #1
 801a892:	e7ec      	b.n	801a86e <_printf_float+0x33a>
 801a894:	4642      	mov	r2, r8
 801a896:	4631      	mov	r1, r6
 801a898:	4628      	mov	r0, r5
 801a89a:	47b8      	blx	r7
 801a89c:	3001      	adds	r0, #1
 801a89e:	d1c2      	bne.n	801a826 <_printf_float+0x2f2>
 801a8a0:	e6a3      	b.n	801a5ea <_printf_float+0xb6>
 801a8a2:	2301      	movs	r3, #1
 801a8a4:	4631      	mov	r1, r6
 801a8a6:	4628      	mov	r0, r5
 801a8a8:	9206      	str	r2, [sp, #24]
 801a8aa:	47b8      	blx	r7
 801a8ac:	3001      	adds	r0, #1
 801a8ae:	f43f ae9c 	beq.w	801a5ea <_printf_float+0xb6>
 801a8b2:	f10b 0b01 	add.w	fp, fp, #1
 801a8b6:	9a06      	ldr	r2, [sp, #24]
 801a8b8:	e7bb      	b.n	801a832 <_printf_float+0x2fe>
 801a8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8be:	4631      	mov	r1, r6
 801a8c0:	4628      	mov	r0, r5
 801a8c2:	47b8      	blx	r7
 801a8c4:	3001      	adds	r0, #1
 801a8c6:	d1c0      	bne.n	801a84a <_printf_float+0x316>
 801a8c8:	e68f      	b.n	801a5ea <_printf_float+0xb6>
 801a8ca:	9a06      	ldr	r2, [sp, #24]
 801a8cc:	464b      	mov	r3, r9
 801a8ce:	4631      	mov	r1, r6
 801a8d0:	4628      	mov	r0, r5
 801a8d2:	4442      	add	r2, r8
 801a8d4:	47b8      	blx	r7
 801a8d6:	3001      	adds	r0, #1
 801a8d8:	d1c3      	bne.n	801a862 <_printf_float+0x32e>
 801a8da:	e686      	b.n	801a5ea <_printf_float+0xb6>
 801a8dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a8e0:	f1ba 0f01 	cmp.w	sl, #1
 801a8e4:	dc01      	bgt.n	801a8ea <_printf_float+0x3b6>
 801a8e6:	07db      	lsls	r3, r3, #31
 801a8e8:	d536      	bpl.n	801a958 <_printf_float+0x424>
 801a8ea:	2301      	movs	r3, #1
 801a8ec:	4642      	mov	r2, r8
 801a8ee:	4631      	mov	r1, r6
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	47b8      	blx	r7
 801a8f4:	3001      	adds	r0, #1
 801a8f6:	f43f ae78 	beq.w	801a5ea <_printf_float+0xb6>
 801a8fa:	4631      	mov	r1, r6
 801a8fc:	4628      	mov	r0, r5
 801a8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a902:	47b8      	blx	r7
 801a904:	3001      	adds	r0, #1
 801a906:	f43f ae70 	beq.w	801a5ea <_printf_float+0xb6>
 801a90a:	2200      	movs	r2, #0
 801a90c:	2300      	movs	r3, #0
 801a90e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a912:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a916:	f7e6 f8db 	bl	8000ad0 <__aeabi_dcmpeq>
 801a91a:	b9c0      	cbnz	r0, 801a94e <_printf_float+0x41a>
 801a91c:	4653      	mov	r3, sl
 801a91e:	f108 0201 	add.w	r2, r8, #1
 801a922:	4631      	mov	r1, r6
 801a924:	4628      	mov	r0, r5
 801a926:	47b8      	blx	r7
 801a928:	3001      	adds	r0, #1
 801a92a:	d10c      	bne.n	801a946 <_printf_float+0x412>
 801a92c:	e65d      	b.n	801a5ea <_printf_float+0xb6>
 801a92e:	2301      	movs	r3, #1
 801a930:	465a      	mov	r2, fp
 801a932:	4631      	mov	r1, r6
 801a934:	4628      	mov	r0, r5
 801a936:	47b8      	blx	r7
 801a938:	3001      	adds	r0, #1
 801a93a:	f43f ae56 	beq.w	801a5ea <_printf_float+0xb6>
 801a93e:	f108 0801 	add.w	r8, r8, #1
 801a942:	45d0      	cmp	r8, sl
 801a944:	dbf3      	blt.n	801a92e <_printf_float+0x3fa>
 801a946:	464b      	mov	r3, r9
 801a948:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a94c:	e6df      	b.n	801a70e <_printf_float+0x1da>
 801a94e:	f04f 0800 	mov.w	r8, #0
 801a952:	f104 0b1a 	add.w	fp, r4, #26
 801a956:	e7f4      	b.n	801a942 <_printf_float+0x40e>
 801a958:	2301      	movs	r3, #1
 801a95a:	4642      	mov	r2, r8
 801a95c:	e7e1      	b.n	801a922 <_printf_float+0x3ee>
 801a95e:	2301      	movs	r3, #1
 801a960:	464a      	mov	r2, r9
 801a962:	4631      	mov	r1, r6
 801a964:	4628      	mov	r0, r5
 801a966:	47b8      	blx	r7
 801a968:	3001      	adds	r0, #1
 801a96a:	f43f ae3e 	beq.w	801a5ea <_printf_float+0xb6>
 801a96e:	f108 0801 	add.w	r8, r8, #1
 801a972:	68e3      	ldr	r3, [r4, #12]
 801a974:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a976:	1a5b      	subs	r3, r3, r1
 801a978:	4543      	cmp	r3, r8
 801a97a:	dcf0      	bgt.n	801a95e <_printf_float+0x42a>
 801a97c:	e6fc      	b.n	801a778 <_printf_float+0x244>
 801a97e:	f04f 0800 	mov.w	r8, #0
 801a982:	f104 0919 	add.w	r9, r4, #25
 801a986:	e7f4      	b.n	801a972 <_printf_float+0x43e>

0801a988 <_printf_common>:
 801a988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a98c:	4616      	mov	r6, r2
 801a98e:	4698      	mov	r8, r3
 801a990:	688a      	ldr	r2, [r1, #8]
 801a992:	4607      	mov	r7, r0
 801a994:	690b      	ldr	r3, [r1, #16]
 801a996:	460c      	mov	r4, r1
 801a998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a99c:	4293      	cmp	r3, r2
 801a99e:	bfb8      	it	lt
 801a9a0:	4613      	movlt	r3, r2
 801a9a2:	6033      	str	r3, [r6, #0]
 801a9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a9a8:	b10a      	cbz	r2, 801a9ae <_printf_common+0x26>
 801a9aa:	3301      	adds	r3, #1
 801a9ac:	6033      	str	r3, [r6, #0]
 801a9ae:	6823      	ldr	r3, [r4, #0]
 801a9b0:	0699      	lsls	r1, r3, #26
 801a9b2:	bf42      	ittt	mi
 801a9b4:	6833      	ldrmi	r3, [r6, #0]
 801a9b6:	3302      	addmi	r3, #2
 801a9b8:	6033      	strmi	r3, [r6, #0]
 801a9ba:	6825      	ldr	r5, [r4, #0]
 801a9bc:	f015 0506 	ands.w	r5, r5, #6
 801a9c0:	d106      	bne.n	801a9d0 <_printf_common+0x48>
 801a9c2:	f104 0a19 	add.w	sl, r4, #25
 801a9c6:	68e3      	ldr	r3, [r4, #12]
 801a9c8:	6832      	ldr	r2, [r6, #0]
 801a9ca:	1a9b      	subs	r3, r3, r2
 801a9cc:	42ab      	cmp	r3, r5
 801a9ce:	dc2b      	bgt.n	801aa28 <_printf_common+0xa0>
 801a9d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a9d4:	6822      	ldr	r2, [r4, #0]
 801a9d6:	3b00      	subs	r3, #0
 801a9d8:	bf18      	it	ne
 801a9da:	2301      	movne	r3, #1
 801a9dc:	0692      	lsls	r2, r2, #26
 801a9de:	d430      	bmi.n	801aa42 <_printf_common+0xba>
 801a9e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a9e4:	4641      	mov	r1, r8
 801a9e6:	4638      	mov	r0, r7
 801a9e8:	47c8      	blx	r9
 801a9ea:	3001      	adds	r0, #1
 801a9ec:	d023      	beq.n	801aa36 <_printf_common+0xae>
 801a9ee:	6823      	ldr	r3, [r4, #0]
 801a9f0:	341a      	adds	r4, #26
 801a9f2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801a9f6:	f003 0306 	and.w	r3, r3, #6
 801a9fa:	2b04      	cmp	r3, #4
 801a9fc:	bf0a      	itet	eq
 801a9fe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801aa02:	2500      	movne	r5, #0
 801aa04:	6833      	ldreq	r3, [r6, #0]
 801aa06:	f04f 0600 	mov.w	r6, #0
 801aa0a:	bf08      	it	eq
 801aa0c:	1aed      	subeq	r5, r5, r3
 801aa0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801aa12:	bf08      	it	eq
 801aa14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa18:	4293      	cmp	r3, r2
 801aa1a:	bfc4      	itt	gt
 801aa1c:	1a9b      	subgt	r3, r3, r2
 801aa1e:	18ed      	addgt	r5, r5, r3
 801aa20:	42b5      	cmp	r5, r6
 801aa22:	d11a      	bne.n	801aa5a <_printf_common+0xd2>
 801aa24:	2000      	movs	r0, #0
 801aa26:	e008      	b.n	801aa3a <_printf_common+0xb2>
 801aa28:	2301      	movs	r3, #1
 801aa2a:	4652      	mov	r2, sl
 801aa2c:	4641      	mov	r1, r8
 801aa2e:	4638      	mov	r0, r7
 801aa30:	47c8      	blx	r9
 801aa32:	3001      	adds	r0, #1
 801aa34:	d103      	bne.n	801aa3e <_printf_common+0xb6>
 801aa36:	f04f 30ff 	mov.w	r0, #4294967295
 801aa3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa3e:	3501      	adds	r5, #1
 801aa40:	e7c1      	b.n	801a9c6 <_printf_common+0x3e>
 801aa42:	18e1      	adds	r1, r4, r3
 801aa44:	1c5a      	adds	r2, r3, #1
 801aa46:	2030      	movs	r0, #48	@ 0x30
 801aa48:	3302      	adds	r3, #2
 801aa4a:	4422      	add	r2, r4
 801aa4c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801aa50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801aa54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aa58:	e7c2      	b.n	801a9e0 <_printf_common+0x58>
 801aa5a:	2301      	movs	r3, #1
 801aa5c:	4622      	mov	r2, r4
 801aa5e:	4641      	mov	r1, r8
 801aa60:	4638      	mov	r0, r7
 801aa62:	47c8      	blx	r9
 801aa64:	3001      	adds	r0, #1
 801aa66:	d0e6      	beq.n	801aa36 <_printf_common+0xae>
 801aa68:	3601      	adds	r6, #1
 801aa6a:	e7d9      	b.n	801aa20 <_printf_common+0x98>

0801aa6c <_printf_i>:
 801aa6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa70:	7e0f      	ldrb	r7, [r1, #24]
 801aa72:	4691      	mov	r9, r2
 801aa74:	4680      	mov	r8, r0
 801aa76:	460c      	mov	r4, r1
 801aa78:	2f78      	cmp	r7, #120	@ 0x78
 801aa7a:	469a      	mov	sl, r3
 801aa7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aa7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aa82:	d807      	bhi.n	801aa94 <_printf_i+0x28>
 801aa84:	2f62      	cmp	r7, #98	@ 0x62
 801aa86:	d80a      	bhi.n	801aa9e <_printf_i+0x32>
 801aa88:	2f00      	cmp	r7, #0
 801aa8a:	f000 80d2 	beq.w	801ac32 <_printf_i+0x1c6>
 801aa8e:	2f58      	cmp	r7, #88	@ 0x58
 801aa90:	f000 80b9 	beq.w	801ac06 <_printf_i+0x19a>
 801aa94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aa98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aa9c:	e03a      	b.n	801ab14 <_printf_i+0xa8>
 801aa9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aaa2:	2b15      	cmp	r3, #21
 801aaa4:	d8f6      	bhi.n	801aa94 <_printf_i+0x28>
 801aaa6:	a101      	add	r1, pc, #4	@ (adr r1, 801aaac <_printf_i+0x40>)
 801aaa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aaac:	0801ab05 	.word	0x0801ab05
 801aab0:	0801ab19 	.word	0x0801ab19
 801aab4:	0801aa95 	.word	0x0801aa95
 801aab8:	0801aa95 	.word	0x0801aa95
 801aabc:	0801aa95 	.word	0x0801aa95
 801aac0:	0801aa95 	.word	0x0801aa95
 801aac4:	0801ab19 	.word	0x0801ab19
 801aac8:	0801aa95 	.word	0x0801aa95
 801aacc:	0801aa95 	.word	0x0801aa95
 801aad0:	0801aa95 	.word	0x0801aa95
 801aad4:	0801aa95 	.word	0x0801aa95
 801aad8:	0801ac19 	.word	0x0801ac19
 801aadc:	0801ab43 	.word	0x0801ab43
 801aae0:	0801abd3 	.word	0x0801abd3
 801aae4:	0801aa95 	.word	0x0801aa95
 801aae8:	0801aa95 	.word	0x0801aa95
 801aaec:	0801ac3b 	.word	0x0801ac3b
 801aaf0:	0801aa95 	.word	0x0801aa95
 801aaf4:	0801ab43 	.word	0x0801ab43
 801aaf8:	0801aa95 	.word	0x0801aa95
 801aafc:	0801aa95 	.word	0x0801aa95
 801ab00:	0801abdb 	.word	0x0801abdb
 801ab04:	6833      	ldr	r3, [r6, #0]
 801ab06:	1d1a      	adds	r2, r3, #4
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	6032      	str	r2, [r6, #0]
 801ab0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ab10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ab14:	2301      	movs	r3, #1
 801ab16:	e09d      	b.n	801ac54 <_printf_i+0x1e8>
 801ab18:	6833      	ldr	r3, [r6, #0]
 801ab1a:	6820      	ldr	r0, [r4, #0]
 801ab1c:	1d19      	adds	r1, r3, #4
 801ab1e:	6031      	str	r1, [r6, #0]
 801ab20:	0606      	lsls	r6, r0, #24
 801ab22:	d501      	bpl.n	801ab28 <_printf_i+0xbc>
 801ab24:	681d      	ldr	r5, [r3, #0]
 801ab26:	e003      	b.n	801ab30 <_printf_i+0xc4>
 801ab28:	0645      	lsls	r5, r0, #25
 801ab2a:	d5fb      	bpl.n	801ab24 <_printf_i+0xb8>
 801ab2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ab30:	2d00      	cmp	r5, #0
 801ab32:	da03      	bge.n	801ab3c <_printf_i+0xd0>
 801ab34:	232d      	movs	r3, #45	@ 0x2d
 801ab36:	426d      	negs	r5, r5
 801ab38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ab3c:	4859      	ldr	r0, [pc, #356]	@ (801aca4 <_printf_i+0x238>)
 801ab3e:	230a      	movs	r3, #10
 801ab40:	e011      	b.n	801ab66 <_printf_i+0xfa>
 801ab42:	6821      	ldr	r1, [r4, #0]
 801ab44:	6833      	ldr	r3, [r6, #0]
 801ab46:	0608      	lsls	r0, r1, #24
 801ab48:	f853 5b04 	ldr.w	r5, [r3], #4
 801ab4c:	d402      	bmi.n	801ab54 <_printf_i+0xe8>
 801ab4e:	0649      	lsls	r1, r1, #25
 801ab50:	bf48      	it	mi
 801ab52:	b2ad      	uxthmi	r5, r5
 801ab54:	2f6f      	cmp	r7, #111	@ 0x6f
 801ab56:	6033      	str	r3, [r6, #0]
 801ab58:	4852      	ldr	r0, [pc, #328]	@ (801aca4 <_printf_i+0x238>)
 801ab5a:	bf14      	ite	ne
 801ab5c:	230a      	movne	r3, #10
 801ab5e:	2308      	moveq	r3, #8
 801ab60:	2100      	movs	r1, #0
 801ab62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ab66:	6866      	ldr	r6, [r4, #4]
 801ab68:	2e00      	cmp	r6, #0
 801ab6a:	60a6      	str	r6, [r4, #8]
 801ab6c:	bfa2      	ittt	ge
 801ab6e:	6821      	ldrge	r1, [r4, #0]
 801ab70:	f021 0104 	bicge.w	r1, r1, #4
 801ab74:	6021      	strge	r1, [r4, #0]
 801ab76:	b90d      	cbnz	r5, 801ab7c <_printf_i+0x110>
 801ab78:	2e00      	cmp	r6, #0
 801ab7a:	d04b      	beq.n	801ac14 <_printf_i+0x1a8>
 801ab7c:	4616      	mov	r6, r2
 801ab7e:	fbb5 f1f3 	udiv	r1, r5, r3
 801ab82:	fb03 5711 	mls	r7, r3, r1, r5
 801ab86:	5dc7      	ldrb	r7, [r0, r7]
 801ab88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ab8c:	462f      	mov	r7, r5
 801ab8e:	460d      	mov	r5, r1
 801ab90:	42bb      	cmp	r3, r7
 801ab92:	d9f4      	bls.n	801ab7e <_printf_i+0x112>
 801ab94:	2b08      	cmp	r3, #8
 801ab96:	d10b      	bne.n	801abb0 <_printf_i+0x144>
 801ab98:	6823      	ldr	r3, [r4, #0]
 801ab9a:	07df      	lsls	r7, r3, #31
 801ab9c:	d508      	bpl.n	801abb0 <_printf_i+0x144>
 801ab9e:	6923      	ldr	r3, [r4, #16]
 801aba0:	6861      	ldr	r1, [r4, #4]
 801aba2:	4299      	cmp	r1, r3
 801aba4:	bfde      	ittt	le
 801aba6:	2330      	movle	r3, #48	@ 0x30
 801aba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801abac:	f106 36ff 	addle.w	r6, r6, #4294967295
 801abb0:	1b92      	subs	r2, r2, r6
 801abb2:	6122      	str	r2, [r4, #16]
 801abb4:	464b      	mov	r3, r9
 801abb6:	aa03      	add	r2, sp, #12
 801abb8:	4621      	mov	r1, r4
 801abba:	4640      	mov	r0, r8
 801abbc:	f8cd a000 	str.w	sl, [sp]
 801abc0:	f7ff fee2 	bl	801a988 <_printf_common>
 801abc4:	3001      	adds	r0, #1
 801abc6:	d14a      	bne.n	801ac5e <_printf_i+0x1f2>
 801abc8:	f04f 30ff 	mov.w	r0, #4294967295
 801abcc:	b004      	add	sp, #16
 801abce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abd2:	6823      	ldr	r3, [r4, #0]
 801abd4:	f043 0320 	orr.w	r3, r3, #32
 801abd8:	6023      	str	r3, [r4, #0]
 801abda:	2778      	movs	r7, #120	@ 0x78
 801abdc:	4832      	ldr	r0, [pc, #200]	@ (801aca8 <_printf_i+0x23c>)
 801abde:	6823      	ldr	r3, [r4, #0]
 801abe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801abe4:	061f      	lsls	r7, r3, #24
 801abe6:	6831      	ldr	r1, [r6, #0]
 801abe8:	f851 5b04 	ldr.w	r5, [r1], #4
 801abec:	d402      	bmi.n	801abf4 <_printf_i+0x188>
 801abee:	065f      	lsls	r7, r3, #25
 801abf0:	bf48      	it	mi
 801abf2:	b2ad      	uxthmi	r5, r5
 801abf4:	6031      	str	r1, [r6, #0]
 801abf6:	07d9      	lsls	r1, r3, #31
 801abf8:	bf44      	itt	mi
 801abfa:	f043 0320 	orrmi.w	r3, r3, #32
 801abfe:	6023      	strmi	r3, [r4, #0]
 801ac00:	b11d      	cbz	r5, 801ac0a <_printf_i+0x19e>
 801ac02:	2310      	movs	r3, #16
 801ac04:	e7ac      	b.n	801ab60 <_printf_i+0xf4>
 801ac06:	4827      	ldr	r0, [pc, #156]	@ (801aca4 <_printf_i+0x238>)
 801ac08:	e7e9      	b.n	801abde <_printf_i+0x172>
 801ac0a:	6823      	ldr	r3, [r4, #0]
 801ac0c:	f023 0320 	bic.w	r3, r3, #32
 801ac10:	6023      	str	r3, [r4, #0]
 801ac12:	e7f6      	b.n	801ac02 <_printf_i+0x196>
 801ac14:	4616      	mov	r6, r2
 801ac16:	e7bd      	b.n	801ab94 <_printf_i+0x128>
 801ac18:	6833      	ldr	r3, [r6, #0]
 801ac1a:	6825      	ldr	r5, [r4, #0]
 801ac1c:	1d18      	adds	r0, r3, #4
 801ac1e:	6961      	ldr	r1, [r4, #20]
 801ac20:	6030      	str	r0, [r6, #0]
 801ac22:	062e      	lsls	r6, r5, #24
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	d501      	bpl.n	801ac2c <_printf_i+0x1c0>
 801ac28:	6019      	str	r1, [r3, #0]
 801ac2a:	e002      	b.n	801ac32 <_printf_i+0x1c6>
 801ac2c:	0668      	lsls	r0, r5, #25
 801ac2e:	d5fb      	bpl.n	801ac28 <_printf_i+0x1bc>
 801ac30:	8019      	strh	r1, [r3, #0]
 801ac32:	2300      	movs	r3, #0
 801ac34:	4616      	mov	r6, r2
 801ac36:	6123      	str	r3, [r4, #16]
 801ac38:	e7bc      	b.n	801abb4 <_printf_i+0x148>
 801ac3a:	6833      	ldr	r3, [r6, #0]
 801ac3c:	2100      	movs	r1, #0
 801ac3e:	1d1a      	adds	r2, r3, #4
 801ac40:	6032      	str	r2, [r6, #0]
 801ac42:	681e      	ldr	r6, [r3, #0]
 801ac44:	6862      	ldr	r2, [r4, #4]
 801ac46:	4630      	mov	r0, r6
 801ac48:	f000 fb01 	bl	801b24e <memchr>
 801ac4c:	b108      	cbz	r0, 801ac52 <_printf_i+0x1e6>
 801ac4e:	1b80      	subs	r0, r0, r6
 801ac50:	6060      	str	r0, [r4, #4]
 801ac52:	6863      	ldr	r3, [r4, #4]
 801ac54:	6123      	str	r3, [r4, #16]
 801ac56:	2300      	movs	r3, #0
 801ac58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ac5c:	e7aa      	b.n	801abb4 <_printf_i+0x148>
 801ac5e:	6923      	ldr	r3, [r4, #16]
 801ac60:	4632      	mov	r2, r6
 801ac62:	4649      	mov	r1, r9
 801ac64:	4640      	mov	r0, r8
 801ac66:	47d0      	blx	sl
 801ac68:	3001      	adds	r0, #1
 801ac6a:	d0ad      	beq.n	801abc8 <_printf_i+0x15c>
 801ac6c:	6823      	ldr	r3, [r4, #0]
 801ac6e:	079b      	lsls	r3, r3, #30
 801ac70:	d413      	bmi.n	801ac9a <_printf_i+0x22e>
 801ac72:	68e0      	ldr	r0, [r4, #12]
 801ac74:	9b03      	ldr	r3, [sp, #12]
 801ac76:	4298      	cmp	r0, r3
 801ac78:	bfb8      	it	lt
 801ac7a:	4618      	movlt	r0, r3
 801ac7c:	e7a6      	b.n	801abcc <_printf_i+0x160>
 801ac7e:	2301      	movs	r3, #1
 801ac80:	4632      	mov	r2, r6
 801ac82:	4649      	mov	r1, r9
 801ac84:	4640      	mov	r0, r8
 801ac86:	47d0      	blx	sl
 801ac88:	3001      	adds	r0, #1
 801ac8a:	d09d      	beq.n	801abc8 <_printf_i+0x15c>
 801ac8c:	3501      	adds	r5, #1
 801ac8e:	68e3      	ldr	r3, [r4, #12]
 801ac90:	9903      	ldr	r1, [sp, #12]
 801ac92:	1a5b      	subs	r3, r3, r1
 801ac94:	42ab      	cmp	r3, r5
 801ac96:	dcf2      	bgt.n	801ac7e <_printf_i+0x212>
 801ac98:	e7eb      	b.n	801ac72 <_printf_i+0x206>
 801ac9a:	2500      	movs	r5, #0
 801ac9c:	f104 0619 	add.w	r6, r4, #25
 801aca0:	e7f5      	b.n	801ac8e <_printf_i+0x222>
 801aca2:	bf00      	nop
 801aca4:	080255b6 	.word	0x080255b6
 801aca8:	080255c7 	.word	0x080255c7

0801acac <std>:
 801acac:	2300      	movs	r3, #0
 801acae:	b510      	push	{r4, lr}
 801acb0:	4604      	mov	r4, r0
 801acb2:	6083      	str	r3, [r0, #8]
 801acb4:	8181      	strh	r1, [r0, #12]
 801acb6:	4619      	mov	r1, r3
 801acb8:	6643      	str	r3, [r0, #100]	@ 0x64
 801acba:	81c2      	strh	r2, [r0, #14]
 801acbc:	2208      	movs	r2, #8
 801acbe:	6183      	str	r3, [r0, #24]
 801acc0:	e9c0 3300 	strd	r3, r3, [r0]
 801acc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801acc8:	305c      	adds	r0, #92	@ 0x5c
 801acca:	f000 fa2d 	bl	801b128 <memset>
 801acce:	4b0d      	ldr	r3, [pc, #52]	@ (801ad04 <std+0x58>)
 801acd0:	6224      	str	r4, [r4, #32]
 801acd2:	6263      	str	r3, [r4, #36]	@ 0x24
 801acd4:	4b0c      	ldr	r3, [pc, #48]	@ (801ad08 <std+0x5c>)
 801acd6:	62a3      	str	r3, [r4, #40]	@ 0x28
 801acd8:	4b0c      	ldr	r3, [pc, #48]	@ (801ad0c <std+0x60>)
 801acda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801acdc:	4b0c      	ldr	r3, [pc, #48]	@ (801ad10 <std+0x64>)
 801acde:	6323      	str	r3, [r4, #48]	@ 0x30
 801ace0:	4b0c      	ldr	r3, [pc, #48]	@ (801ad14 <std+0x68>)
 801ace2:	429c      	cmp	r4, r3
 801ace4:	d006      	beq.n	801acf4 <std+0x48>
 801ace6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801acea:	4294      	cmp	r4, r2
 801acec:	d002      	beq.n	801acf4 <std+0x48>
 801acee:	33d0      	adds	r3, #208	@ 0xd0
 801acf0:	429c      	cmp	r4, r3
 801acf2:	d105      	bne.n	801ad00 <std+0x54>
 801acf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801acf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acfc:	f000 baa4 	b.w	801b248 <__retarget_lock_init_recursive>
 801ad00:	bd10      	pop	{r4, pc}
 801ad02:	bf00      	nop
 801ad04:	0801af79 	.word	0x0801af79
 801ad08:	0801af9b 	.word	0x0801af9b
 801ad0c:	0801afd3 	.word	0x0801afd3
 801ad10:	0801aff7 	.word	0x0801aff7
 801ad14:	20005ae0 	.word	0x20005ae0

0801ad18 <stdio_exit_handler>:
 801ad18:	4a02      	ldr	r2, [pc, #8]	@ (801ad24 <stdio_exit_handler+0xc>)
 801ad1a:	4903      	ldr	r1, [pc, #12]	@ (801ad28 <stdio_exit_handler+0x10>)
 801ad1c:	4803      	ldr	r0, [pc, #12]	@ (801ad2c <stdio_exit_handler+0x14>)
 801ad1e:	f000 b869 	b.w	801adf4 <_fwalk_sglue>
 801ad22:	bf00      	nop
 801ad24:	20000040 	.word	0x20000040
 801ad28:	0801ce75 	.word	0x0801ce75
 801ad2c:	20000050 	.word	0x20000050

0801ad30 <cleanup_stdio>:
 801ad30:	6841      	ldr	r1, [r0, #4]
 801ad32:	4b0c      	ldr	r3, [pc, #48]	@ (801ad64 <cleanup_stdio+0x34>)
 801ad34:	4299      	cmp	r1, r3
 801ad36:	b510      	push	{r4, lr}
 801ad38:	4604      	mov	r4, r0
 801ad3a:	d001      	beq.n	801ad40 <cleanup_stdio+0x10>
 801ad3c:	f002 f89a 	bl	801ce74 <_fflush_r>
 801ad40:	68a1      	ldr	r1, [r4, #8]
 801ad42:	4b09      	ldr	r3, [pc, #36]	@ (801ad68 <cleanup_stdio+0x38>)
 801ad44:	4299      	cmp	r1, r3
 801ad46:	d002      	beq.n	801ad4e <cleanup_stdio+0x1e>
 801ad48:	4620      	mov	r0, r4
 801ad4a:	f002 f893 	bl	801ce74 <_fflush_r>
 801ad4e:	68e1      	ldr	r1, [r4, #12]
 801ad50:	4b06      	ldr	r3, [pc, #24]	@ (801ad6c <cleanup_stdio+0x3c>)
 801ad52:	4299      	cmp	r1, r3
 801ad54:	d004      	beq.n	801ad60 <cleanup_stdio+0x30>
 801ad56:	4620      	mov	r0, r4
 801ad58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad5c:	f002 b88a 	b.w	801ce74 <_fflush_r>
 801ad60:	bd10      	pop	{r4, pc}
 801ad62:	bf00      	nop
 801ad64:	20005ae0 	.word	0x20005ae0
 801ad68:	20005b48 	.word	0x20005b48
 801ad6c:	20005bb0 	.word	0x20005bb0

0801ad70 <global_stdio_init.part.0>:
 801ad70:	b510      	push	{r4, lr}
 801ad72:	4b0b      	ldr	r3, [pc, #44]	@ (801ada0 <global_stdio_init.part.0+0x30>)
 801ad74:	2104      	movs	r1, #4
 801ad76:	4c0b      	ldr	r4, [pc, #44]	@ (801ada4 <global_stdio_init.part.0+0x34>)
 801ad78:	4a0b      	ldr	r2, [pc, #44]	@ (801ada8 <global_stdio_init.part.0+0x38>)
 801ad7a:	4620      	mov	r0, r4
 801ad7c:	601a      	str	r2, [r3, #0]
 801ad7e:	2200      	movs	r2, #0
 801ad80:	f7ff ff94 	bl	801acac <std>
 801ad84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ad88:	2201      	movs	r2, #1
 801ad8a:	2109      	movs	r1, #9
 801ad8c:	f7ff ff8e 	bl	801acac <std>
 801ad90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ad94:	2202      	movs	r2, #2
 801ad96:	2112      	movs	r1, #18
 801ad98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad9c:	f7ff bf86 	b.w	801acac <std>
 801ada0:	20005c18 	.word	0x20005c18
 801ada4:	20005ae0 	.word	0x20005ae0
 801ada8:	0801ad19 	.word	0x0801ad19

0801adac <__sfp_lock_acquire>:
 801adac:	4801      	ldr	r0, [pc, #4]	@ (801adb4 <__sfp_lock_acquire+0x8>)
 801adae:	f000 ba4c 	b.w	801b24a <__retarget_lock_acquire_recursive>
 801adb2:	bf00      	nop
 801adb4:	20005c21 	.word	0x20005c21

0801adb8 <__sfp_lock_release>:
 801adb8:	4801      	ldr	r0, [pc, #4]	@ (801adc0 <__sfp_lock_release+0x8>)
 801adba:	f000 ba47 	b.w	801b24c <__retarget_lock_release_recursive>
 801adbe:	bf00      	nop
 801adc0:	20005c21 	.word	0x20005c21

0801adc4 <__sinit>:
 801adc4:	b510      	push	{r4, lr}
 801adc6:	4604      	mov	r4, r0
 801adc8:	f7ff fff0 	bl	801adac <__sfp_lock_acquire>
 801adcc:	6a23      	ldr	r3, [r4, #32]
 801adce:	b11b      	cbz	r3, 801add8 <__sinit+0x14>
 801add0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801add4:	f7ff bff0 	b.w	801adb8 <__sfp_lock_release>
 801add8:	4b04      	ldr	r3, [pc, #16]	@ (801adec <__sinit+0x28>)
 801adda:	6223      	str	r3, [r4, #32]
 801addc:	4b04      	ldr	r3, [pc, #16]	@ (801adf0 <__sinit+0x2c>)
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d1f5      	bne.n	801add0 <__sinit+0xc>
 801ade4:	f7ff ffc4 	bl	801ad70 <global_stdio_init.part.0>
 801ade8:	e7f2      	b.n	801add0 <__sinit+0xc>
 801adea:	bf00      	nop
 801adec:	0801ad31 	.word	0x0801ad31
 801adf0:	20005c18 	.word	0x20005c18

0801adf4 <_fwalk_sglue>:
 801adf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801adf8:	4607      	mov	r7, r0
 801adfa:	4688      	mov	r8, r1
 801adfc:	4614      	mov	r4, r2
 801adfe:	2600      	movs	r6, #0
 801ae00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ae04:	f1b9 0901 	subs.w	r9, r9, #1
 801ae08:	d505      	bpl.n	801ae16 <_fwalk_sglue+0x22>
 801ae0a:	6824      	ldr	r4, [r4, #0]
 801ae0c:	2c00      	cmp	r4, #0
 801ae0e:	d1f7      	bne.n	801ae00 <_fwalk_sglue+0xc>
 801ae10:	4630      	mov	r0, r6
 801ae12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae16:	89ab      	ldrh	r3, [r5, #12]
 801ae18:	2b01      	cmp	r3, #1
 801ae1a:	d907      	bls.n	801ae2c <_fwalk_sglue+0x38>
 801ae1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ae20:	3301      	adds	r3, #1
 801ae22:	d003      	beq.n	801ae2c <_fwalk_sglue+0x38>
 801ae24:	4629      	mov	r1, r5
 801ae26:	4638      	mov	r0, r7
 801ae28:	47c0      	blx	r8
 801ae2a:	4306      	orrs	r6, r0
 801ae2c:	3568      	adds	r5, #104	@ 0x68
 801ae2e:	e7e9      	b.n	801ae04 <_fwalk_sglue+0x10>

0801ae30 <iprintf>:
 801ae30:	b40f      	push	{r0, r1, r2, r3}
 801ae32:	b507      	push	{r0, r1, r2, lr}
 801ae34:	4906      	ldr	r1, [pc, #24]	@ (801ae50 <iprintf+0x20>)
 801ae36:	ab04      	add	r3, sp, #16
 801ae38:	6808      	ldr	r0, [r1, #0]
 801ae3a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae3e:	6881      	ldr	r1, [r0, #8]
 801ae40:	9301      	str	r3, [sp, #4]
 801ae42:	f001 fe7b 	bl	801cb3c <_vfiprintf_r>
 801ae46:	b003      	add	sp, #12
 801ae48:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae4c:	b004      	add	sp, #16
 801ae4e:	4770      	bx	lr
 801ae50:	2000004c 	.word	0x2000004c

0801ae54 <_puts_r>:
 801ae54:	6a03      	ldr	r3, [r0, #32]
 801ae56:	b570      	push	{r4, r5, r6, lr}
 801ae58:	4605      	mov	r5, r0
 801ae5a:	460e      	mov	r6, r1
 801ae5c:	6884      	ldr	r4, [r0, #8]
 801ae5e:	b90b      	cbnz	r3, 801ae64 <_puts_r+0x10>
 801ae60:	f7ff ffb0 	bl	801adc4 <__sinit>
 801ae64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ae66:	07db      	lsls	r3, r3, #31
 801ae68:	d405      	bmi.n	801ae76 <_puts_r+0x22>
 801ae6a:	89a3      	ldrh	r3, [r4, #12]
 801ae6c:	0598      	lsls	r0, r3, #22
 801ae6e:	d402      	bmi.n	801ae76 <_puts_r+0x22>
 801ae70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ae72:	f000 f9ea 	bl	801b24a <__retarget_lock_acquire_recursive>
 801ae76:	89a3      	ldrh	r3, [r4, #12]
 801ae78:	0719      	lsls	r1, r3, #28
 801ae7a:	d502      	bpl.n	801ae82 <_puts_r+0x2e>
 801ae7c:	6923      	ldr	r3, [r4, #16]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d135      	bne.n	801aeee <_puts_r+0x9a>
 801ae82:	4621      	mov	r1, r4
 801ae84:	4628      	mov	r0, r5
 801ae86:	f000 f8f9 	bl	801b07c <__swsetup_r>
 801ae8a:	b380      	cbz	r0, 801aeee <_puts_r+0x9a>
 801ae8c:	f04f 35ff 	mov.w	r5, #4294967295
 801ae90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ae92:	07da      	lsls	r2, r3, #31
 801ae94:	d405      	bmi.n	801aea2 <_puts_r+0x4e>
 801ae96:	89a3      	ldrh	r3, [r4, #12]
 801ae98:	059b      	lsls	r3, r3, #22
 801ae9a:	d402      	bmi.n	801aea2 <_puts_r+0x4e>
 801ae9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ae9e:	f000 f9d5 	bl	801b24c <__retarget_lock_release_recursive>
 801aea2:	4628      	mov	r0, r5
 801aea4:	bd70      	pop	{r4, r5, r6, pc}
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	da04      	bge.n	801aeb4 <_puts_r+0x60>
 801aeaa:	69a2      	ldr	r2, [r4, #24]
 801aeac:	429a      	cmp	r2, r3
 801aeae:	dc17      	bgt.n	801aee0 <_puts_r+0x8c>
 801aeb0:	290a      	cmp	r1, #10
 801aeb2:	d015      	beq.n	801aee0 <_puts_r+0x8c>
 801aeb4:	6823      	ldr	r3, [r4, #0]
 801aeb6:	1c5a      	adds	r2, r3, #1
 801aeb8:	6022      	str	r2, [r4, #0]
 801aeba:	7019      	strb	r1, [r3, #0]
 801aebc:	68a3      	ldr	r3, [r4, #8]
 801aebe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801aec2:	3b01      	subs	r3, #1
 801aec4:	60a3      	str	r3, [r4, #8]
 801aec6:	2900      	cmp	r1, #0
 801aec8:	d1ed      	bne.n	801aea6 <_puts_r+0x52>
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	da11      	bge.n	801aef2 <_puts_r+0x9e>
 801aece:	4622      	mov	r2, r4
 801aed0:	210a      	movs	r1, #10
 801aed2:	4628      	mov	r0, r5
 801aed4:	f000 f893 	bl	801affe <__swbuf_r>
 801aed8:	3001      	adds	r0, #1
 801aeda:	d0d7      	beq.n	801ae8c <_puts_r+0x38>
 801aedc:	250a      	movs	r5, #10
 801aede:	e7d7      	b.n	801ae90 <_puts_r+0x3c>
 801aee0:	4622      	mov	r2, r4
 801aee2:	4628      	mov	r0, r5
 801aee4:	f000 f88b 	bl	801affe <__swbuf_r>
 801aee8:	3001      	adds	r0, #1
 801aeea:	d1e7      	bne.n	801aebc <_puts_r+0x68>
 801aeec:	e7ce      	b.n	801ae8c <_puts_r+0x38>
 801aeee:	3e01      	subs	r6, #1
 801aef0:	e7e4      	b.n	801aebc <_puts_r+0x68>
 801aef2:	6823      	ldr	r3, [r4, #0]
 801aef4:	1c5a      	adds	r2, r3, #1
 801aef6:	6022      	str	r2, [r4, #0]
 801aef8:	220a      	movs	r2, #10
 801aefa:	701a      	strb	r2, [r3, #0]
 801aefc:	e7ee      	b.n	801aedc <_puts_r+0x88>
	...

0801af00 <puts>:
 801af00:	4b02      	ldr	r3, [pc, #8]	@ (801af0c <puts+0xc>)
 801af02:	4601      	mov	r1, r0
 801af04:	6818      	ldr	r0, [r3, #0]
 801af06:	f7ff bfa5 	b.w	801ae54 <_puts_r>
 801af0a:	bf00      	nop
 801af0c:	2000004c 	.word	0x2000004c

0801af10 <sniprintf>:
 801af10:	b40c      	push	{r2, r3}
 801af12:	4b18      	ldr	r3, [pc, #96]	@ (801af74 <sniprintf+0x64>)
 801af14:	b530      	push	{r4, r5, lr}
 801af16:	1e0c      	subs	r4, r1, #0
 801af18:	b09d      	sub	sp, #116	@ 0x74
 801af1a:	681d      	ldr	r5, [r3, #0]
 801af1c:	da08      	bge.n	801af30 <sniprintf+0x20>
 801af1e:	238b      	movs	r3, #139	@ 0x8b
 801af20:	f04f 30ff 	mov.w	r0, #4294967295
 801af24:	602b      	str	r3, [r5, #0]
 801af26:	b01d      	add	sp, #116	@ 0x74
 801af28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801af2c:	b002      	add	sp, #8
 801af2e:	4770      	bx	lr
 801af30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801af34:	9002      	str	r0, [sp, #8]
 801af36:	9006      	str	r0, [sp, #24]
 801af38:	a902      	add	r1, sp, #8
 801af3a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801af3e:	bf14      	ite	ne
 801af40:	f104 33ff 	addne.w	r3, r4, #4294967295
 801af44:	4623      	moveq	r3, r4
 801af46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801af48:	4628      	mov	r0, r5
 801af4a:	9304      	str	r3, [sp, #16]
 801af4c:	9307      	str	r3, [sp, #28]
 801af4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801af52:	f8ad 3016 	strh.w	r3, [sp, #22]
 801af56:	ab21      	add	r3, sp, #132	@ 0x84
 801af58:	9301      	str	r3, [sp, #4]
 801af5a:	f001 fcc9 	bl	801c8f0 <_svfiprintf_r>
 801af5e:	1c43      	adds	r3, r0, #1
 801af60:	bfbc      	itt	lt
 801af62:	238b      	movlt	r3, #139	@ 0x8b
 801af64:	602b      	strlt	r3, [r5, #0]
 801af66:	2c00      	cmp	r4, #0
 801af68:	d0dd      	beq.n	801af26 <sniprintf+0x16>
 801af6a:	9b02      	ldr	r3, [sp, #8]
 801af6c:	2200      	movs	r2, #0
 801af6e:	701a      	strb	r2, [r3, #0]
 801af70:	e7d9      	b.n	801af26 <sniprintf+0x16>
 801af72:	bf00      	nop
 801af74:	2000004c 	.word	0x2000004c

0801af78 <__sread>:
 801af78:	b510      	push	{r4, lr}
 801af7a:	460c      	mov	r4, r1
 801af7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af80:	f000 f914 	bl	801b1ac <_read_r>
 801af84:	2800      	cmp	r0, #0
 801af86:	bfab      	itete	ge
 801af88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801af8a:	89a3      	ldrhlt	r3, [r4, #12]
 801af8c:	181b      	addge	r3, r3, r0
 801af8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801af92:	bfac      	ite	ge
 801af94:	6563      	strge	r3, [r4, #84]	@ 0x54
 801af96:	81a3      	strhlt	r3, [r4, #12]
 801af98:	bd10      	pop	{r4, pc}

0801af9a <__swrite>:
 801af9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af9e:	461f      	mov	r7, r3
 801afa0:	898b      	ldrh	r3, [r1, #12]
 801afa2:	4605      	mov	r5, r0
 801afa4:	460c      	mov	r4, r1
 801afa6:	05db      	lsls	r3, r3, #23
 801afa8:	4616      	mov	r6, r2
 801afaa:	d505      	bpl.n	801afb8 <__swrite+0x1e>
 801afac:	2302      	movs	r3, #2
 801afae:	2200      	movs	r2, #0
 801afb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afb4:	f000 f8e8 	bl	801b188 <_lseek_r>
 801afb8:	89a3      	ldrh	r3, [r4, #12]
 801afba:	4632      	mov	r2, r6
 801afbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801afc0:	4628      	mov	r0, r5
 801afc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801afc6:	81a3      	strh	r3, [r4, #12]
 801afc8:	463b      	mov	r3, r7
 801afca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801afce:	f000 b8ff 	b.w	801b1d0 <_write_r>

0801afd2 <__sseek>:
 801afd2:	b510      	push	{r4, lr}
 801afd4:	460c      	mov	r4, r1
 801afd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afda:	f000 f8d5 	bl	801b188 <_lseek_r>
 801afde:	1c43      	adds	r3, r0, #1
 801afe0:	89a3      	ldrh	r3, [r4, #12]
 801afe2:	bf15      	itete	ne
 801afe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801afe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801afea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801afee:	81a3      	strheq	r3, [r4, #12]
 801aff0:	bf18      	it	ne
 801aff2:	81a3      	strhne	r3, [r4, #12]
 801aff4:	bd10      	pop	{r4, pc}

0801aff6 <__sclose>:
 801aff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801affa:	f000 b8b5 	b.w	801b168 <_close_r>

0801affe <__swbuf_r>:
 801affe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b000:	460e      	mov	r6, r1
 801b002:	4614      	mov	r4, r2
 801b004:	4605      	mov	r5, r0
 801b006:	b118      	cbz	r0, 801b010 <__swbuf_r+0x12>
 801b008:	6a03      	ldr	r3, [r0, #32]
 801b00a:	b90b      	cbnz	r3, 801b010 <__swbuf_r+0x12>
 801b00c:	f7ff feda 	bl	801adc4 <__sinit>
 801b010:	69a3      	ldr	r3, [r4, #24]
 801b012:	60a3      	str	r3, [r4, #8]
 801b014:	89a3      	ldrh	r3, [r4, #12]
 801b016:	071a      	lsls	r2, r3, #28
 801b018:	d501      	bpl.n	801b01e <__swbuf_r+0x20>
 801b01a:	6923      	ldr	r3, [r4, #16]
 801b01c:	b943      	cbnz	r3, 801b030 <__swbuf_r+0x32>
 801b01e:	4621      	mov	r1, r4
 801b020:	4628      	mov	r0, r5
 801b022:	f000 f82b 	bl	801b07c <__swsetup_r>
 801b026:	b118      	cbz	r0, 801b030 <__swbuf_r+0x32>
 801b028:	f04f 37ff 	mov.w	r7, #4294967295
 801b02c:	4638      	mov	r0, r7
 801b02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b030:	6823      	ldr	r3, [r4, #0]
 801b032:	b2f6      	uxtb	r6, r6
 801b034:	6922      	ldr	r2, [r4, #16]
 801b036:	4637      	mov	r7, r6
 801b038:	1a98      	subs	r0, r3, r2
 801b03a:	6963      	ldr	r3, [r4, #20]
 801b03c:	4283      	cmp	r3, r0
 801b03e:	dc05      	bgt.n	801b04c <__swbuf_r+0x4e>
 801b040:	4621      	mov	r1, r4
 801b042:	4628      	mov	r0, r5
 801b044:	f001 ff16 	bl	801ce74 <_fflush_r>
 801b048:	2800      	cmp	r0, #0
 801b04a:	d1ed      	bne.n	801b028 <__swbuf_r+0x2a>
 801b04c:	68a3      	ldr	r3, [r4, #8]
 801b04e:	3b01      	subs	r3, #1
 801b050:	60a3      	str	r3, [r4, #8]
 801b052:	6823      	ldr	r3, [r4, #0]
 801b054:	1c5a      	adds	r2, r3, #1
 801b056:	6022      	str	r2, [r4, #0]
 801b058:	701e      	strb	r6, [r3, #0]
 801b05a:	1c43      	adds	r3, r0, #1
 801b05c:	6962      	ldr	r2, [r4, #20]
 801b05e:	429a      	cmp	r2, r3
 801b060:	d004      	beq.n	801b06c <__swbuf_r+0x6e>
 801b062:	89a3      	ldrh	r3, [r4, #12]
 801b064:	07db      	lsls	r3, r3, #31
 801b066:	d5e1      	bpl.n	801b02c <__swbuf_r+0x2e>
 801b068:	2e0a      	cmp	r6, #10
 801b06a:	d1df      	bne.n	801b02c <__swbuf_r+0x2e>
 801b06c:	4621      	mov	r1, r4
 801b06e:	4628      	mov	r0, r5
 801b070:	f001 ff00 	bl	801ce74 <_fflush_r>
 801b074:	2800      	cmp	r0, #0
 801b076:	d0d9      	beq.n	801b02c <__swbuf_r+0x2e>
 801b078:	e7d6      	b.n	801b028 <__swbuf_r+0x2a>
	...

0801b07c <__swsetup_r>:
 801b07c:	b538      	push	{r3, r4, r5, lr}
 801b07e:	4b29      	ldr	r3, [pc, #164]	@ (801b124 <__swsetup_r+0xa8>)
 801b080:	4605      	mov	r5, r0
 801b082:	460c      	mov	r4, r1
 801b084:	6818      	ldr	r0, [r3, #0]
 801b086:	b118      	cbz	r0, 801b090 <__swsetup_r+0x14>
 801b088:	6a03      	ldr	r3, [r0, #32]
 801b08a:	b90b      	cbnz	r3, 801b090 <__swsetup_r+0x14>
 801b08c:	f7ff fe9a 	bl	801adc4 <__sinit>
 801b090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b094:	0719      	lsls	r1, r3, #28
 801b096:	d422      	bmi.n	801b0de <__swsetup_r+0x62>
 801b098:	06da      	lsls	r2, r3, #27
 801b09a:	d407      	bmi.n	801b0ac <__swsetup_r+0x30>
 801b09c:	2209      	movs	r2, #9
 801b09e:	602a      	str	r2, [r5, #0]
 801b0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b0a8:	81a3      	strh	r3, [r4, #12]
 801b0aa:	e033      	b.n	801b114 <__swsetup_r+0x98>
 801b0ac:	0758      	lsls	r0, r3, #29
 801b0ae:	d512      	bpl.n	801b0d6 <__swsetup_r+0x5a>
 801b0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b0b2:	b141      	cbz	r1, 801b0c6 <__swsetup_r+0x4a>
 801b0b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b0b8:	4299      	cmp	r1, r3
 801b0ba:	d002      	beq.n	801b0c2 <__swsetup_r+0x46>
 801b0bc:	4628      	mov	r0, r5
 801b0be:	f000 ff33 	bl	801bf28 <_free_r>
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	6363      	str	r3, [r4, #52]	@ 0x34
 801b0c6:	89a3      	ldrh	r3, [r4, #12]
 801b0c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b0cc:	81a3      	strh	r3, [r4, #12]
 801b0ce:	2300      	movs	r3, #0
 801b0d0:	6063      	str	r3, [r4, #4]
 801b0d2:	6923      	ldr	r3, [r4, #16]
 801b0d4:	6023      	str	r3, [r4, #0]
 801b0d6:	89a3      	ldrh	r3, [r4, #12]
 801b0d8:	f043 0308 	orr.w	r3, r3, #8
 801b0dc:	81a3      	strh	r3, [r4, #12]
 801b0de:	6923      	ldr	r3, [r4, #16]
 801b0e0:	b94b      	cbnz	r3, 801b0f6 <__swsetup_r+0x7a>
 801b0e2:	89a3      	ldrh	r3, [r4, #12]
 801b0e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b0e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b0ec:	d003      	beq.n	801b0f6 <__swsetup_r+0x7a>
 801b0ee:	4621      	mov	r1, r4
 801b0f0:	4628      	mov	r0, r5
 801b0f2:	f001 ff0c 	bl	801cf0e <__smakebuf_r>
 801b0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0fa:	f013 0201 	ands.w	r2, r3, #1
 801b0fe:	d00a      	beq.n	801b116 <__swsetup_r+0x9a>
 801b100:	2200      	movs	r2, #0
 801b102:	60a2      	str	r2, [r4, #8]
 801b104:	6962      	ldr	r2, [r4, #20]
 801b106:	4252      	negs	r2, r2
 801b108:	61a2      	str	r2, [r4, #24]
 801b10a:	6922      	ldr	r2, [r4, #16]
 801b10c:	b942      	cbnz	r2, 801b120 <__swsetup_r+0xa4>
 801b10e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b112:	d1c5      	bne.n	801b0a0 <__swsetup_r+0x24>
 801b114:	bd38      	pop	{r3, r4, r5, pc}
 801b116:	0799      	lsls	r1, r3, #30
 801b118:	bf58      	it	pl
 801b11a:	6962      	ldrpl	r2, [r4, #20]
 801b11c:	60a2      	str	r2, [r4, #8]
 801b11e:	e7f4      	b.n	801b10a <__swsetup_r+0x8e>
 801b120:	2000      	movs	r0, #0
 801b122:	e7f7      	b.n	801b114 <__swsetup_r+0x98>
 801b124:	2000004c 	.word	0x2000004c

0801b128 <memset>:
 801b128:	4402      	add	r2, r0
 801b12a:	4603      	mov	r3, r0
 801b12c:	4293      	cmp	r3, r2
 801b12e:	d100      	bne.n	801b132 <memset+0xa>
 801b130:	4770      	bx	lr
 801b132:	f803 1b01 	strb.w	r1, [r3], #1
 801b136:	e7f9      	b.n	801b12c <memset+0x4>

0801b138 <strncpy>:
 801b138:	3901      	subs	r1, #1
 801b13a:	4603      	mov	r3, r0
 801b13c:	b510      	push	{r4, lr}
 801b13e:	b132      	cbz	r2, 801b14e <strncpy+0x16>
 801b140:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b144:	3a01      	subs	r2, #1
 801b146:	f803 4b01 	strb.w	r4, [r3], #1
 801b14a:	2c00      	cmp	r4, #0
 801b14c:	d1f7      	bne.n	801b13e <strncpy+0x6>
 801b14e:	441a      	add	r2, r3
 801b150:	2100      	movs	r1, #0
 801b152:	4293      	cmp	r3, r2
 801b154:	d100      	bne.n	801b158 <strncpy+0x20>
 801b156:	bd10      	pop	{r4, pc}
 801b158:	f803 1b01 	strb.w	r1, [r3], #1
 801b15c:	e7f9      	b.n	801b152 <strncpy+0x1a>
	...

0801b160 <_localeconv_r>:
 801b160:	4800      	ldr	r0, [pc, #0]	@ (801b164 <_localeconv_r+0x4>)
 801b162:	4770      	bx	lr
 801b164:	2000018c 	.word	0x2000018c

0801b168 <_close_r>:
 801b168:	b538      	push	{r3, r4, r5, lr}
 801b16a:	2300      	movs	r3, #0
 801b16c:	4d05      	ldr	r5, [pc, #20]	@ (801b184 <_close_r+0x1c>)
 801b16e:	4604      	mov	r4, r0
 801b170:	4608      	mov	r0, r1
 801b172:	602b      	str	r3, [r5, #0]
 801b174:	f7f6 fdc4 	bl	8011d00 <_close>
 801b178:	1c43      	adds	r3, r0, #1
 801b17a:	d102      	bne.n	801b182 <_close_r+0x1a>
 801b17c:	682b      	ldr	r3, [r5, #0]
 801b17e:	b103      	cbz	r3, 801b182 <_close_r+0x1a>
 801b180:	6023      	str	r3, [r4, #0]
 801b182:	bd38      	pop	{r3, r4, r5, pc}
 801b184:	20005c1c 	.word	0x20005c1c

0801b188 <_lseek_r>:
 801b188:	b538      	push	{r3, r4, r5, lr}
 801b18a:	4604      	mov	r4, r0
 801b18c:	4d06      	ldr	r5, [pc, #24]	@ (801b1a8 <_lseek_r+0x20>)
 801b18e:	4608      	mov	r0, r1
 801b190:	4611      	mov	r1, r2
 801b192:	2200      	movs	r2, #0
 801b194:	602a      	str	r2, [r5, #0]
 801b196:	461a      	mov	r2, r3
 801b198:	f7f6 fdd9 	bl	8011d4e <_lseek>
 801b19c:	1c43      	adds	r3, r0, #1
 801b19e:	d102      	bne.n	801b1a6 <_lseek_r+0x1e>
 801b1a0:	682b      	ldr	r3, [r5, #0]
 801b1a2:	b103      	cbz	r3, 801b1a6 <_lseek_r+0x1e>
 801b1a4:	6023      	str	r3, [r4, #0]
 801b1a6:	bd38      	pop	{r3, r4, r5, pc}
 801b1a8:	20005c1c 	.word	0x20005c1c

0801b1ac <_read_r>:
 801b1ac:	b538      	push	{r3, r4, r5, lr}
 801b1ae:	4604      	mov	r4, r0
 801b1b0:	4d06      	ldr	r5, [pc, #24]	@ (801b1cc <_read_r+0x20>)
 801b1b2:	4608      	mov	r0, r1
 801b1b4:	4611      	mov	r1, r2
 801b1b6:	2200      	movs	r2, #0
 801b1b8:	602a      	str	r2, [r5, #0]
 801b1ba:	461a      	mov	r2, r3
 801b1bc:	f7f6 fd67 	bl	8011c8e <_read>
 801b1c0:	1c43      	adds	r3, r0, #1
 801b1c2:	d102      	bne.n	801b1ca <_read_r+0x1e>
 801b1c4:	682b      	ldr	r3, [r5, #0]
 801b1c6:	b103      	cbz	r3, 801b1ca <_read_r+0x1e>
 801b1c8:	6023      	str	r3, [r4, #0]
 801b1ca:	bd38      	pop	{r3, r4, r5, pc}
 801b1cc:	20005c1c 	.word	0x20005c1c

0801b1d0 <_write_r>:
 801b1d0:	b538      	push	{r3, r4, r5, lr}
 801b1d2:	4604      	mov	r4, r0
 801b1d4:	4d06      	ldr	r5, [pc, #24]	@ (801b1f0 <_write_r+0x20>)
 801b1d6:	4608      	mov	r0, r1
 801b1d8:	4611      	mov	r1, r2
 801b1da:	2200      	movs	r2, #0
 801b1dc:	602a      	str	r2, [r5, #0]
 801b1de:	461a      	mov	r2, r3
 801b1e0:	f7f6 fd72 	bl	8011cc8 <_write>
 801b1e4:	1c43      	adds	r3, r0, #1
 801b1e6:	d102      	bne.n	801b1ee <_write_r+0x1e>
 801b1e8:	682b      	ldr	r3, [r5, #0]
 801b1ea:	b103      	cbz	r3, 801b1ee <_write_r+0x1e>
 801b1ec:	6023      	str	r3, [r4, #0]
 801b1ee:	bd38      	pop	{r3, r4, r5, pc}
 801b1f0:	20005c1c 	.word	0x20005c1c

0801b1f4 <__errno>:
 801b1f4:	4b01      	ldr	r3, [pc, #4]	@ (801b1fc <__errno+0x8>)
 801b1f6:	6818      	ldr	r0, [r3, #0]
 801b1f8:	4770      	bx	lr
 801b1fa:	bf00      	nop
 801b1fc:	2000004c 	.word	0x2000004c

0801b200 <__libc_init_array>:
 801b200:	b570      	push	{r4, r5, r6, lr}
 801b202:	4d0d      	ldr	r5, [pc, #52]	@ (801b238 <__libc_init_array+0x38>)
 801b204:	2600      	movs	r6, #0
 801b206:	4c0d      	ldr	r4, [pc, #52]	@ (801b23c <__libc_init_array+0x3c>)
 801b208:	1b64      	subs	r4, r4, r5
 801b20a:	10a4      	asrs	r4, r4, #2
 801b20c:	42a6      	cmp	r6, r4
 801b20e:	d109      	bne.n	801b224 <__libc_init_array+0x24>
 801b210:	4d0b      	ldr	r5, [pc, #44]	@ (801b240 <__libc_init_array+0x40>)
 801b212:	2600      	movs	r6, #0
 801b214:	4c0b      	ldr	r4, [pc, #44]	@ (801b244 <__libc_init_array+0x44>)
 801b216:	f001 ffe9 	bl	801d1ec <_init>
 801b21a:	1b64      	subs	r4, r4, r5
 801b21c:	10a4      	asrs	r4, r4, #2
 801b21e:	42a6      	cmp	r6, r4
 801b220:	d105      	bne.n	801b22e <__libc_init_array+0x2e>
 801b222:	bd70      	pop	{r4, r5, r6, pc}
 801b224:	f855 3b04 	ldr.w	r3, [r5], #4
 801b228:	3601      	adds	r6, #1
 801b22a:	4798      	blx	r3
 801b22c:	e7ee      	b.n	801b20c <__libc_init_array+0xc>
 801b22e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b232:	3601      	adds	r6, #1
 801b234:	4798      	blx	r3
 801b236:	e7f2      	b.n	801b21e <__libc_init_array+0x1e>
 801b238:	08025920 	.word	0x08025920
 801b23c:	08025920 	.word	0x08025920
 801b240:	08025920 	.word	0x08025920
 801b244:	08025924 	.word	0x08025924

0801b248 <__retarget_lock_init_recursive>:
 801b248:	4770      	bx	lr

0801b24a <__retarget_lock_acquire_recursive>:
 801b24a:	4770      	bx	lr

0801b24c <__retarget_lock_release_recursive>:
 801b24c:	4770      	bx	lr

0801b24e <memchr>:
 801b24e:	b2c9      	uxtb	r1, r1
 801b250:	4603      	mov	r3, r0
 801b252:	4402      	add	r2, r0
 801b254:	b510      	push	{r4, lr}
 801b256:	4293      	cmp	r3, r2
 801b258:	4618      	mov	r0, r3
 801b25a:	d101      	bne.n	801b260 <memchr+0x12>
 801b25c:	2000      	movs	r0, #0
 801b25e:	e003      	b.n	801b268 <memchr+0x1a>
 801b260:	7804      	ldrb	r4, [r0, #0]
 801b262:	3301      	adds	r3, #1
 801b264:	428c      	cmp	r4, r1
 801b266:	d1f6      	bne.n	801b256 <memchr+0x8>
 801b268:	bd10      	pop	{r4, pc}

0801b26a <memcpy>:
 801b26a:	440a      	add	r2, r1
 801b26c:	1e43      	subs	r3, r0, #1
 801b26e:	4291      	cmp	r1, r2
 801b270:	d100      	bne.n	801b274 <memcpy+0xa>
 801b272:	4770      	bx	lr
 801b274:	b510      	push	{r4, lr}
 801b276:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b27a:	4291      	cmp	r1, r2
 801b27c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b280:	d1f9      	bne.n	801b276 <memcpy+0xc>
 801b282:	bd10      	pop	{r4, pc}

0801b284 <quorem>:
 801b284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b288:	6903      	ldr	r3, [r0, #16]
 801b28a:	4607      	mov	r7, r0
 801b28c:	690c      	ldr	r4, [r1, #16]
 801b28e:	42a3      	cmp	r3, r4
 801b290:	f2c0 8083 	blt.w	801b39a <quorem+0x116>
 801b294:	3c01      	subs	r4, #1
 801b296:	f100 0514 	add.w	r5, r0, #20
 801b29a:	f101 0814 	add.w	r8, r1, #20
 801b29e:	00a3      	lsls	r3, r4, #2
 801b2a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b2a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b2a8:	9300      	str	r3, [sp, #0]
 801b2aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b2ae:	9301      	str	r3, [sp, #4]
 801b2b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b2b4:	3301      	adds	r3, #1
 801b2b6:	429a      	cmp	r2, r3
 801b2b8:	fbb2 f6f3 	udiv	r6, r2, r3
 801b2bc:	d331      	bcc.n	801b322 <quorem+0x9e>
 801b2be:	f04f 0a00 	mov.w	sl, #0
 801b2c2:	46c4      	mov	ip, r8
 801b2c4:	46ae      	mov	lr, r5
 801b2c6:	46d3      	mov	fp, sl
 801b2c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b2cc:	b298      	uxth	r0, r3
 801b2ce:	45e1      	cmp	r9, ip
 801b2d0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801b2d4:	fb06 a000 	mla	r0, r6, r0, sl
 801b2d8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801b2dc:	b280      	uxth	r0, r0
 801b2de:	fb06 2303 	mla	r3, r6, r3, r2
 801b2e2:	f8de 2000 	ldr.w	r2, [lr]
 801b2e6:	b292      	uxth	r2, r2
 801b2e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b2ec:	eba2 0200 	sub.w	r2, r2, r0
 801b2f0:	b29b      	uxth	r3, r3
 801b2f2:	f8de 0000 	ldr.w	r0, [lr]
 801b2f6:	445a      	add	r2, fp
 801b2f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b2fc:	b292      	uxth	r2, r2
 801b2fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b302:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b306:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b30a:	f84e 2b04 	str.w	r2, [lr], #4
 801b30e:	d2db      	bcs.n	801b2c8 <quorem+0x44>
 801b310:	9b00      	ldr	r3, [sp, #0]
 801b312:	58eb      	ldr	r3, [r5, r3]
 801b314:	b92b      	cbnz	r3, 801b322 <quorem+0x9e>
 801b316:	9b01      	ldr	r3, [sp, #4]
 801b318:	3b04      	subs	r3, #4
 801b31a:	429d      	cmp	r5, r3
 801b31c:	461a      	mov	r2, r3
 801b31e:	d330      	bcc.n	801b382 <quorem+0xfe>
 801b320:	613c      	str	r4, [r7, #16]
 801b322:	4638      	mov	r0, r7
 801b324:	f001 f97c 	bl	801c620 <__mcmp>
 801b328:	2800      	cmp	r0, #0
 801b32a:	db26      	blt.n	801b37a <quorem+0xf6>
 801b32c:	4629      	mov	r1, r5
 801b32e:	2000      	movs	r0, #0
 801b330:	f858 2b04 	ldr.w	r2, [r8], #4
 801b334:	f8d1 c000 	ldr.w	ip, [r1]
 801b338:	fa1f fe82 	uxth.w	lr, r2
 801b33c:	45c1      	cmp	r9, r8
 801b33e:	fa1f f38c 	uxth.w	r3, ip
 801b342:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801b346:	eba3 030e 	sub.w	r3, r3, lr
 801b34a:	4403      	add	r3, r0
 801b34c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b350:	b29b      	uxth	r3, r3
 801b352:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b35a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b35e:	f841 3b04 	str.w	r3, [r1], #4
 801b362:	d2e5      	bcs.n	801b330 <quorem+0xac>
 801b364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b368:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b36c:	b922      	cbnz	r2, 801b378 <quorem+0xf4>
 801b36e:	3b04      	subs	r3, #4
 801b370:	429d      	cmp	r5, r3
 801b372:	461a      	mov	r2, r3
 801b374:	d30b      	bcc.n	801b38e <quorem+0x10a>
 801b376:	613c      	str	r4, [r7, #16]
 801b378:	3601      	adds	r6, #1
 801b37a:	4630      	mov	r0, r6
 801b37c:	b003      	add	sp, #12
 801b37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b382:	6812      	ldr	r2, [r2, #0]
 801b384:	3b04      	subs	r3, #4
 801b386:	2a00      	cmp	r2, #0
 801b388:	d1ca      	bne.n	801b320 <quorem+0x9c>
 801b38a:	3c01      	subs	r4, #1
 801b38c:	e7c5      	b.n	801b31a <quorem+0x96>
 801b38e:	6812      	ldr	r2, [r2, #0]
 801b390:	3b04      	subs	r3, #4
 801b392:	2a00      	cmp	r2, #0
 801b394:	d1ef      	bne.n	801b376 <quorem+0xf2>
 801b396:	3c01      	subs	r4, #1
 801b398:	e7ea      	b.n	801b370 <quorem+0xec>
 801b39a:	2000      	movs	r0, #0
 801b39c:	e7ee      	b.n	801b37c <quorem+0xf8>
	...

0801b3a0 <_dtoa_r>:
 801b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3a4:	69c7      	ldr	r7, [r0, #28]
 801b3a6:	b099      	sub	sp, #100	@ 0x64
 801b3a8:	4683      	mov	fp, r0
 801b3aa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b3ac:	9109      	str	r1, [sp, #36]	@ 0x24
 801b3ae:	920e      	str	r2, [sp, #56]	@ 0x38
 801b3b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b3b2:	ec55 4b10 	vmov	r4, r5, d0
 801b3b6:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b3ba:	b97f      	cbnz	r7, 801b3dc <_dtoa_r+0x3c>
 801b3bc:	2010      	movs	r0, #16
 801b3be:	f000 fdfd 	bl	801bfbc <malloc>
 801b3c2:	4602      	mov	r2, r0
 801b3c4:	f8cb 001c 	str.w	r0, [fp, #28]
 801b3c8:	b920      	cbnz	r0, 801b3d4 <_dtoa_r+0x34>
 801b3ca:	4ba7      	ldr	r3, [pc, #668]	@ (801b668 <_dtoa_r+0x2c8>)
 801b3cc:	21ef      	movs	r1, #239	@ 0xef
 801b3ce:	48a7      	ldr	r0, [pc, #668]	@ (801b66c <_dtoa_r+0x2cc>)
 801b3d0:	f001 fe26 	bl	801d020 <__assert_func>
 801b3d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b3d8:	6007      	str	r7, [r0, #0]
 801b3da:	60c7      	str	r7, [r0, #12]
 801b3dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b3e0:	6819      	ldr	r1, [r3, #0]
 801b3e2:	b159      	cbz	r1, 801b3fc <_dtoa_r+0x5c>
 801b3e4:	685a      	ldr	r2, [r3, #4]
 801b3e6:	2301      	movs	r3, #1
 801b3e8:	4658      	mov	r0, fp
 801b3ea:	4093      	lsls	r3, r2
 801b3ec:	604a      	str	r2, [r1, #4]
 801b3ee:	608b      	str	r3, [r1, #8]
 801b3f0:	f000 feda 	bl	801c1a8 <_Bfree>
 801b3f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	601a      	str	r2, [r3, #0]
 801b3fc:	1e2b      	subs	r3, r5, #0
 801b3fe:	bfb7      	itett	lt
 801b400:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b404:	2300      	movge	r3, #0
 801b406:	2201      	movlt	r2, #1
 801b408:	9303      	strlt	r3, [sp, #12]
 801b40a:	bfa8      	it	ge
 801b40c:	6033      	strge	r3, [r6, #0]
 801b40e:	9f03      	ldr	r7, [sp, #12]
 801b410:	4b97      	ldr	r3, [pc, #604]	@ (801b670 <_dtoa_r+0x2d0>)
 801b412:	bfb8      	it	lt
 801b414:	6032      	strlt	r2, [r6, #0]
 801b416:	43bb      	bics	r3, r7
 801b418:	d112      	bne.n	801b440 <_dtoa_r+0xa0>
 801b41a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b41e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b420:	6013      	str	r3, [r2, #0]
 801b422:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b426:	4323      	orrs	r3, r4
 801b428:	f000 854c 	beq.w	801bec4 <_dtoa_r+0xb24>
 801b42c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b42e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801b684 <_dtoa_r+0x2e4>
 801b432:	2b00      	cmp	r3, #0
 801b434:	f000 854e 	beq.w	801bed4 <_dtoa_r+0xb34>
 801b438:	f10a 0303 	add.w	r3, sl, #3
 801b43c:	f000 bd48 	b.w	801bed0 <_dtoa_r+0xb30>
 801b440:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b444:	2200      	movs	r2, #0
 801b446:	2300      	movs	r3, #0
 801b448:	ec51 0b17 	vmov	r0, r1, d7
 801b44c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b450:	f7e5 fb3e 	bl	8000ad0 <__aeabi_dcmpeq>
 801b454:	4680      	mov	r8, r0
 801b456:	b158      	cbz	r0, 801b470 <_dtoa_r+0xd0>
 801b458:	2301      	movs	r3, #1
 801b45a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b45c:	6013      	str	r3, [r2, #0]
 801b45e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b460:	b113      	cbz	r3, 801b468 <_dtoa_r+0xc8>
 801b462:	4b84      	ldr	r3, [pc, #528]	@ (801b674 <_dtoa_r+0x2d4>)
 801b464:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b466:	6013      	str	r3, [r2, #0]
 801b468:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801b688 <_dtoa_r+0x2e8>
 801b46c:	f000 bd32 	b.w	801bed4 <_dtoa_r+0xb34>
 801b470:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b474:	aa16      	add	r2, sp, #88	@ 0x58
 801b476:	a917      	add	r1, sp, #92	@ 0x5c
 801b478:	4658      	mov	r0, fp
 801b47a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b47e:	f001 f983 	bl	801c788 <__d2b>
 801b482:	4681      	mov	r9, r0
 801b484:	2e00      	cmp	r6, #0
 801b486:	d075      	beq.n	801b574 <_dtoa_r+0x1d4>
 801b488:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b48a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b48e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b496:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b49a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b49e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b4a2:	4619      	mov	r1, r3
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	4b74      	ldr	r3, [pc, #464]	@ (801b678 <_dtoa_r+0x2d8>)
 801b4a8:	f7e4 fef2 	bl	8000290 <__aeabi_dsub>
 801b4ac:	a368      	add	r3, pc, #416	@ (adr r3, 801b650 <_dtoa_r+0x2b0>)
 801b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b2:	f7e5 f8a5 	bl	8000600 <__aeabi_dmul>
 801b4b6:	a368      	add	r3, pc, #416	@ (adr r3, 801b658 <_dtoa_r+0x2b8>)
 801b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4bc:	f7e4 feea 	bl	8000294 <__adddf3>
 801b4c0:	4604      	mov	r4, r0
 801b4c2:	460d      	mov	r5, r1
 801b4c4:	4630      	mov	r0, r6
 801b4c6:	f7e5 f831 	bl	800052c <__aeabi_i2d>
 801b4ca:	a365      	add	r3, pc, #404	@ (adr r3, 801b660 <_dtoa_r+0x2c0>)
 801b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d0:	f7e5 f896 	bl	8000600 <__aeabi_dmul>
 801b4d4:	4602      	mov	r2, r0
 801b4d6:	460b      	mov	r3, r1
 801b4d8:	4620      	mov	r0, r4
 801b4da:	4629      	mov	r1, r5
 801b4dc:	f7e4 feda 	bl	8000294 <__adddf3>
 801b4e0:	4604      	mov	r4, r0
 801b4e2:	460d      	mov	r5, r1
 801b4e4:	f7e5 fb3c 	bl	8000b60 <__aeabi_d2iz>
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	4607      	mov	r7, r0
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	4620      	mov	r0, r4
 801b4f0:	4629      	mov	r1, r5
 801b4f2:	f7e5 faf7 	bl	8000ae4 <__aeabi_dcmplt>
 801b4f6:	b140      	cbz	r0, 801b50a <_dtoa_r+0x16a>
 801b4f8:	4638      	mov	r0, r7
 801b4fa:	f7e5 f817 	bl	800052c <__aeabi_i2d>
 801b4fe:	4622      	mov	r2, r4
 801b500:	462b      	mov	r3, r5
 801b502:	f7e5 fae5 	bl	8000ad0 <__aeabi_dcmpeq>
 801b506:	b900      	cbnz	r0, 801b50a <_dtoa_r+0x16a>
 801b508:	3f01      	subs	r7, #1
 801b50a:	2f16      	cmp	r7, #22
 801b50c:	d851      	bhi.n	801b5b2 <_dtoa_r+0x212>
 801b50e:	4b5b      	ldr	r3, [pc, #364]	@ (801b67c <_dtoa_r+0x2dc>)
 801b510:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b51c:	f7e5 fae2 	bl	8000ae4 <__aeabi_dcmplt>
 801b520:	2800      	cmp	r0, #0
 801b522:	d048      	beq.n	801b5b6 <_dtoa_r+0x216>
 801b524:	3f01      	subs	r7, #1
 801b526:	2300      	movs	r3, #0
 801b528:	9312      	str	r3, [sp, #72]	@ 0x48
 801b52a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b52c:	1b9b      	subs	r3, r3, r6
 801b52e:	1e5a      	subs	r2, r3, #1
 801b530:	bf46      	itte	mi
 801b532:	f1c3 0801 	rsbmi	r8, r3, #1
 801b536:	2300      	movmi	r3, #0
 801b538:	f04f 0800 	movpl.w	r8, #0
 801b53c:	9208      	str	r2, [sp, #32]
 801b53e:	bf48      	it	mi
 801b540:	9308      	strmi	r3, [sp, #32]
 801b542:	2f00      	cmp	r7, #0
 801b544:	db39      	blt.n	801b5ba <_dtoa_r+0x21a>
 801b546:	9b08      	ldr	r3, [sp, #32]
 801b548:	970f      	str	r7, [sp, #60]	@ 0x3c
 801b54a:	443b      	add	r3, r7
 801b54c:	9308      	str	r3, [sp, #32]
 801b54e:	2300      	movs	r3, #0
 801b550:	930a      	str	r3, [sp, #40]	@ 0x28
 801b552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b554:	2b09      	cmp	r3, #9
 801b556:	d864      	bhi.n	801b622 <_dtoa_r+0x282>
 801b558:	2b05      	cmp	r3, #5
 801b55a:	bfc5      	ittet	gt
 801b55c:	3b04      	subgt	r3, #4
 801b55e:	2400      	movgt	r4, #0
 801b560:	2401      	movle	r4, #1
 801b562:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801b564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b566:	3b02      	subs	r3, #2
 801b568:	2b03      	cmp	r3, #3
 801b56a:	d865      	bhi.n	801b638 <_dtoa_r+0x298>
 801b56c:	e8df f003 	tbb	[pc, r3]
 801b570:	5737392c 	.word	0x5737392c
 801b574:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801b578:	441e      	add	r6, r3
 801b57a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b57e:	2b20      	cmp	r3, #32
 801b580:	bfc9      	itett	gt
 801b582:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b586:	f1c3 0320 	rsble	r3, r3, #32
 801b58a:	409f      	lslgt	r7, r3
 801b58c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b590:	bfd8      	it	le
 801b592:	fa04 f003 	lslle.w	r0, r4, r3
 801b596:	f106 36ff 	add.w	r6, r6, #4294967295
 801b59a:	bfc4      	itt	gt
 801b59c:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b5a0:	ea47 0003 	orrgt.w	r0, r7, r3
 801b5a4:	f7e4 ffb2 	bl	800050c <__aeabi_ui2d>
 801b5a8:	2201      	movs	r2, #1
 801b5aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b5ae:	9214      	str	r2, [sp, #80]	@ 0x50
 801b5b0:	e777      	b.n	801b4a2 <_dtoa_r+0x102>
 801b5b2:	2301      	movs	r3, #1
 801b5b4:	e7b8      	b.n	801b528 <_dtoa_r+0x188>
 801b5b6:	9012      	str	r0, [sp, #72]	@ 0x48
 801b5b8:	e7b7      	b.n	801b52a <_dtoa_r+0x18a>
 801b5ba:	427b      	negs	r3, r7
 801b5bc:	eba8 0807 	sub.w	r8, r8, r7
 801b5c0:	930a      	str	r3, [sp, #40]	@ 0x28
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b5c6:	e7c4      	b.n	801b552 <_dtoa_r+0x1b2>
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	dc35      	bgt.n	801b63e <_dtoa_r+0x29e>
 801b5d2:	2301      	movs	r3, #1
 801b5d4:	461a      	mov	r2, r3
 801b5d6:	9300      	str	r3, [sp, #0]
 801b5d8:	9307      	str	r3, [sp, #28]
 801b5da:	920e      	str	r2, [sp, #56]	@ 0x38
 801b5dc:	e00b      	b.n	801b5f6 <_dtoa_r+0x256>
 801b5de:	2301      	movs	r3, #1
 801b5e0:	e7f3      	b.n	801b5ca <_dtoa_r+0x22a>
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b5e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5e8:	18fb      	adds	r3, r7, r3
 801b5ea:	9300      	str	r3, [sp, #0]
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	2b01      	cmp	r3, #1
 801b5f0:	9307      	str	r3, [sp, #28]
 801b5f2:	bfb8      	it	lt
 801b5f4:	2301      	movlt	r3, #1
 801b5f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 801b5fa:	2100      	movs	r1, #0
 801b5fc:	2204      	movs	r2, #4
 801b5fe:	f102 0514 	add.w	r5, r2, #20
 801b602:	429d      	cmp	r5, r3
 801b604:	d91f      	bls.n	801b646 <_dtoa_r+0x2a6>
 801b606:	6041      	str	r1, [r0, #4]
 801b608:	4658      	mov	r0, fp
 801b60a:	f000 fd8d 	bl	801c128 <_Balloc>
 801b60e:	4682      	mov	sl, r0
 801b610:	2800      	cmp	r0, #0
 801b612:	d13b      	bne.n	801b68c <_dtoa_r+0x2ec>
 801b614:	4b1a      	ldr	r3, [pc, #104]	@ (801b680 <_dtoa_r+0x2e0>)
 801b616:	4602      	mov	r2, r0
 801b618:	f240 11af 	movw	r1, #431	@ 0x1af
 801b61c:	e6d7      	b.n	801b3ce <_dtoa_r+0x2e>
 801b61e:	2301      	movs	r3, #1
 801b620:	e7e0      	b.n	801b5e4 <_dtoa_r+0x244>
 801b622:	2401      	movs	r4, #1
 801b624:	2300      	movs	r3, #0
 801b626:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b628:	9309      	str	r3, [sp, #36]	@ 0x24
 801b62a:	f04f 33ff 	mov.w	r3, #4294967295
 801b62e:	2200      	movs	r2, #0
 801b630:	9300      	str	r3, [sp, #0]
 801b632:	9307      	str	r3, [sp, #28]
 801b634:	2312      	movs	r3, #18
 801b636:	e7d0      	b.n	801b5da <_dtoa_r+0x23a>
 801b638:	2301      	movs	r3, #1
 801b63a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b63c:	e7f5      	b.n	801b62a <_dtoa_r+0x28a>
 801b63e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b640:	9300      	str	r3, [sp, #0]
 801b642:	9307      	str	r3, [sp, #28]
 801b644:	e7d7      	b.n	801b5f6 <_dtoa_r+0x256>
 801b646:	3101      	adds	r1, #1
 801b648:	0052      	lsls	r2, r2, #1
 801b64a:	e7d8      	b.n	801b5fe <_dtoa_r+0x25e>
 801b64c:	f3af 8000 	nop.w
 801b650:	636f4361 	.word	0x636f4361
 801b654:	3fd287a7 	.word	0x3fd287a7
 801b658:	8b60c8b3 	.word	0x8b60c8b3
 801b65c:	3fc68a28 	.word	0x3fc68a28
 801b660:	509f79fb 	.word	0x509f79fb
 801b664:	3fd34413 	.word	0x3fd34413
 801b668:	080255e5 	.word	0x080255e5
 801b66c:	080255fc 	.word	0x080255fc
 801b670:	7ff00000 	.word	0x7ff00000
 801b674:	080255b5 	.word	0x080255b5
 801b678:	3ff80000 	.word	0x3ff80000
 801b67c:	080256f8 	.word	0x080256f8
 801b680:	08025654 	.word	0x08025654
 801b684:	080255e1 	.word	0x080255e1
 801b688:	080255b4 	.word	0x080255b4
 801b68c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b690:	6018      	str	r0, [r3, #0]
 801b692:	9b07      	ldr	r3, [sp, #28]
 801b694:	2b0e      	cmp	r3, #14
 801b696:	f200 80a4 	bhi.w	801b7e2 <_dtoa_r+0x442>
 801b69a:	2c00      	cmp	r4, #0
 801b69c:	f000 80a1 	beq.w	801b7e2 <_dtoa_r+0x442>
 801b6a0:	2f00      	cmp	r7, #0
 801b6a2:	dd33      	ble.n	801b70c <_dtoa_r+0x36c>
 801b6a4:	f007 020f 	and.w	r2, r7, #15
 801b6a8:	4bac      	ldr	r3, [pc, #688]	@ (801b95c <_dtoa_r+0x5bc>)
 801b6aa:	05f8      	lsls	r0, r7, #23
 801b6ac:	ea4f 1427 	mov.w	r4, r7, asr #4
 801b6b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b6b4:	ed93 7b00 	vldr	d7, [r3]
 801b6b8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b6bc:	d516      	bpl.n	801b6ec <_dtoa_r+0x34c>
 801b6be:	4ba8      	ldr	r3, [pc, #672]	@ (801b960 <_dtoa_r+0x5c0>)
 801b6c0:	f004 040f 	and.w	r4, r4, #15
 801b6c4:	2603      	movs	r6, #3
 801b6c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b6ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b6ce:	f7e5 f8c1 	bl	8000854 <__aeabi_ddiv>
 801b6d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b6d6:	4da2      	ldr	r5, [pc, #648]	@ (801b960 <_dtoa_r+0x5c0>)
 801b6d8:	b954      	cbnz	r4, 801b6f0 <_dtoa_r+0x350>
 801b6da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b6e2:	f7e5 f8b7 	bl	8000854 <__aeabi_ddiv>
 801b6e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b6ea:	e028      	b.n	801b73e <_dtoa_r+0x39e>
 801b6ec:	2602      	movs	r6, #2
 801b6ee:	e7f2      	b.n	801b6d6 <_dtoa_r+0x336>
 801b6f0:	07e1      	lsls	r1, r4, #31
 801b6f2:	d508      	bpl.n	801b706 <_dtoa_r+0x366>
 801b6f4:	3601      	adds	r6, #1
 801b6f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b6fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b6fe:	f7e4 ff7f 	bl	8000600 <__aeabi_dmul>
 801b702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b706:	1064      	asrs	r4, r4, #1
 801b708:	3508      	adds	r5, #8
 801b70a:	e7e5      	b.n	801b6d8 <_dtoa_r+0x338>
 801b70c:	f000 80d2 	beq.w	801b8b4 <_dtoa_r+0x514>
 801b710:	427c      	negs	r4, r7
 801b712:	4b92      	ldr	r3, [pc, #584]	@ (801b95c <_dtoa_r+0x5bc>)
 801b714:	4d92      	ldr	r5, [pc, #584]	@ (801b960 <_dtoa_r+0x5c0>)
 801b716:	2602      	movs	r6, #2
 801b718:	f004 020f 	and.w	r2, r4, #15
 801b71c:	1124      	asrs	r4, r4, #4
 801b71e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b72a:	f7e4 ff69 	bl	8000600 <__aeabi_dmul>
 801b72e:	2300      	movs	r3, #0
 801b730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b734:	2c00      	cmp	r4, #0
 801b736:	f040 80b2 	bne.w	801b89e <_dtoa_r+0x4fe>
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d1d3      	bne.n	801b6e6 <_dtoa_r+0x346>
 801b73e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b740:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801b744:	2b00      	cmp	r3, #0
 801b746:	f000 80b7 	beq.w	801b8b8 <_dtoa_r+0x518>
 801b74a:	2200      	movs	r2, #0
 801b74c:	4b85      	ldr	r3, [pc, #532]	@ (801b964 <_dtoa_r+0x5c4>)
 801b74e:	4620      	mov	r0, r4
 801b750:	4629      	mov	r1, r5
 801b752:	f7e5 f9c7 	bl	8000ae4 <__aeabi_dcmplt>
 801b756:	2800      	cmp	r0, #0
 801b758:	f000 80ae 	beq.w	801b8b8 <_dtoa_r+0x518>
 801b75c:	9b07      	ldr	r3, [sp, #28]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	f000 80aa 	beq.w	801b8b8 <_dtoa_r+0x518>
 801b764:	9b00      	ldr	r3, [sp, #0]
 801b766:	2b00      	cmp	r3, #0
 801b768:	dd37      	ble.n	801b7da <_dtoa_r+0x43a>
 801b76a:	1e7b      	subs	r3, r7, #1
 801b76c:	4620      	mov	r0, r4
 801b76e:	2200      	movs	r2, #0
 801b770:	4629      	mov	r1, r5
 801b772:	9304      	str	r3, [sp, #16]
 801b774:	3601      	adds	r6, #1
 801b776:	4b7c      	ldr	r3, [pc, #496]	@ (801b968 <_dtoa_r+0x5c8>)
 801b778:	f7e4 ff42 	bl	8000600 <__aeabi_dmul>
 801b77c:	9c00      	ldr	r4, [sp, #0]
 801b77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b782:	4630      	mov	r0, r6
 801b784:	f7e4 fed2 	bl	800052c <__aeabi_i2d>
 801b788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b78c:	f7e4 ff38 	bl	8000600 <__aeabi_dmul>
 801b790:	2200      	movs	r2, #0
 801b792:	4b76      	ldr	r3, [pc, #472]	@ (801b96c <_dtoa_r+0x5cc>)
 801b794:	f7e4 fd7e 	bl	8000294 <__adddf3>
 801b798:	4605      	mov	r5, r0
 801b79a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801b79e:	2c00      	cmp	r4, #0
 801b7a0:	f040 808d 	bne.w	801b8be <_dtoa_r+0x51e>
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	4b72      	ldr	r3, [pc, #456]	@ (801b970 <_dtoa_r+0x5d0>)
 801b7a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b7ac:	f7e4 fd70 	bl	8000290 <__aeabi_dsub>
 801b7b0:	4602      	mov	r2, r0
 801b7b2:	460b      	mov	r3, r1
 801b7b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b7b8:	462a      	mov	r2, r5
 801b7ba:	4633      	mov	r3, r6
 801b7bc:	f7e5 f9b0 	bl	8000b20 <__aeabi_dcmpgt>
 801b7c0:	2800      	cmp	r0, #0
 801b7c2:	f040 828b 	bne.w	801bcdc <_dtoa_r+0x93c>
 801b7c6:	462a      	mov	r2, r5
 801b7c8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801b7cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b7d0:	f7e5 f988 	bl	8000ae4 <__aeabi_dcmplt>
 801b7d4:	2800      	cmp	r0, #0
 801b7d6:	f040 8128 	bne.w	801ba2a <_dtoa_r+0x68a>
 801b7da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801b7de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801b7e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	f2c0 815a 	blt.w	801ba9e <_dtoa_r+0x6fe>
 801b7ea:	2f0e      	cmp	r7, #14
 801b7ec:	f300 8157 	bgt.w	801ba9e <_dtoa_r+0x6fe>
 801b7f0:	4b5a      	ldr	r3, [pc, #360]	@ (801b95c <_dtoa_r+0x5bc>)
 801b7f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b7f6:	ed93 7b00 	vldr	d7, [r3]
 801b7fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	ed8d 7b00 	vstr	d7, [sp]
 801b802:	da03      	bge.n	801b80c <_dtoa_r+0x46c>
 801b804:	9b07      	ldr	r3, [sp, #28]
 801b806:	2b00      	cmp	r3, #0
 801b808:	f340 8101 	ble.w	801ba0e <_dtoa_r+0x66e>
 801b80c:	4656      	mov	r6, sl
 801b80e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801b812:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b816:	4620      	mov	r0, r4
 801b818:	4629      	mov	r1, r5
 801b81a:	f7e5 f81b 	bl	8000854 <__aeabi_ddiv>
 801b81e:	f7e5 f99f 	bl	8000b60 <__aeabi_d2iz>
 801b822:	4680      	mov	r8, r0
 801b824:	f7e4 fe82 	bl	800052c <__aeabi_i2d>
 801b828:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b82c:	f7e4 fee8 	bl	8000600 <__aeabi_dmul>
 801b830:	4602      	mov	r2, r0
 801b832:	4620      	mov	r0, r4
 801b834:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801b838:	460b      	mov	r3, r1
 801b83a:	4629      	mov	r1, r5
 801b83c:	f7e4 fd28 	bl	8000290 <__aeabi_dsub>
 801b840:	9d07      	ldr	r5, [sp, #28]
 801b842:	f806 4b01 	strb.w	r4, [r6], #1
 801b846:	eba6 040a 	sub.w	r4, r6, sl
 801b84a:	4602      	mov	r2, r0
 801b84c:	460b      	mov	r3, r1
 801b84e:	42a5      	cmp	r5, r4
 801b850:	f040 8117 	bne.w	801ba82 <_dtoa_r+0x6e2>
 801b854:	f7e4 fd1e 	bl	8000294 <__adddf3>
 801b858:	4604      	mov	r4, r0
 801b85a:	460d      	mov	r5, r1
 801b85c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b860:	f7e5 f95e 	bl	8000b20 <__aeabi_dcmpgt>
 801b864:	2800      	cmp	r0, #0
 801b866:	f040 80f9 	bne.w	801ba5c <_dtoa_r+0x6bc>
 801b86a:	4620      	mov	r0, r4
 801b86c:	4629      	mov	r1, r5
 801b86e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b872:	f7e5 f92d 	bl	8000ad0 <__aeabi_dcmpeq>
 801b876:	b118      	cbz	r0, 801b880 <_dtoa_r+0x4e0>
 801b878:	f018 0f01 	tst.w	r8, #1
 801b87c:	f040 80ee 	bne.w	801ba5c <_dtoa_r+0x6bc>
 801b880:	4649      	mov	r1, r9
 801b882:	4658      	mov	r0, fp
 801b884:	f000 fc90 	bl	801c1a8 <_Bfree>
 801b888:	2300      	movs	r3, #0
 801b88a:	3701      	adds	r7, #1
 801b88c:	7033      	strb	r3, [r6, #0]
 801b88e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b890:	601f      	str	r7, [r3, #0]
 801b892:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b894:	2b00      	cmp	r3, #0
 801b896:	f000 831d 	beq.w	801bed4 <_dtoa_r+0xb34>
 801b89a:	601e      	str	r6, [r3, #0]
 801b89c:	e31a      	b.n	801bed4 <_dtoa_r+0xb34>
 801b89e:	07e2      	lsls	r2, r4, #31
 801b8a0:	d505      	bpl.n	801b8ae <_dtoa_r+0x50e>
 801b8a2:	3601      	adds	r6, #1
 801b8a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b8a8:	f7e4 feaa 	bl	8000600 <__aeabi_dmul>
 801b8ac:	2301      	movs	r3, #1
 801b8ae:	1064      	asrs	r4, r4, #1
 801b8b0:	3508      	adds	r5, #8
 801b8b2:	e73f      	b.n	801b734 <_dtoa_r+0x394>
 801b8b4:	2602      	movs	r6, #2
 801b8b6:	e742      	b.n	801b73e <_dtoa_r+0x39e>
 801b8b8:	9c07      	ldr	r4, [sp, #28]
 801b8ba:	9704      	str	r7, [sp, #16]
 801b8bc:	e761      	b.n	801b782 <_dtoa_r+0x3e2>
 801b8be:	4b27      	ldr	r3, [pc, #156]	@ (801b95c <_dtoa_r+0x5bc>)
 801b8c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b8c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b8c6:	4454      	add	r4, sl
 801b8c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b8cc:	2900      	cmp	r1, #0
 801b8ce:	d053      	beq.n	801b978 <_dtoa_r+0x5d8>
 801b8d0:	2000      	movs	r0, #0
 801b8d2:	4928      	ldr	r1, [pc, #160]	@ (801b974 <_dtoa_r+0x5d4>)
 801b8d4:	f7e4 ffbe 	bl	8000854 <__aeabi_ddiv>
 801b8d8:	4633      	mov	r3, r6
 801b8da:	4656      	mov	r6, sl
 801b8dc:	462a      	mov	r2, r5
 801b8de:	f7e4 fcd7 	bl	8000290 <__aeabi_dsub>
 801b8e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b8e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b8ea:	f7e5 f939 	bl	8000b60 <__aeabi_d2iz>
 801b8ee:	4605      	mov	r5, r0
 801b8f0:	f7e4 fe1c 	bl	800052c <__aeabi_i2d>
 801b8f4:	4602      	mov	r2, r0
 801b8f6:	460b      	mov	r3, r1
 801b8f8:	3530      	adds	r5, #48	@ 0x30
 801b8fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b8fe:	f7e4 fcc7 	bl	8000290 <__aeabi_dsub>
 801b902:	4602      	mov	r2, r0
 801b904:	460b      	mov	r3, r1
 801b906:	f806 5b01 	strb.w	r5, [r6], #1
 801b90a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b90e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b912:	f7e5 f8e7 	bl	8000ae4 <__aeabi_dcmplt>
 801b916:	2800      	cmp	r0, #0
 801b918:	d171      	bne.n	801b9fe <_dtoa_r+0x65e>
 801b91a:	2000      	movs	r0, #0
 801b91c:	4911      	ldr	r1, [pc, #68]	@ (801b964 <_dtoa_r+0x5c4>)
 801b91e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b922:	f7e4 fcb5 	bl	8000290 <__aeabi_dsub>
 801b926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b92a:	f7e5 f8db 	bl	8000ae4 <__aeabi_dcmplt>
 801b92e:	2800      	cmp	r0, #0
 801b930:	f040 8095 	bne.w	801ba5e <_dtoa_r+0x6be>
 801b934:	42a6      	cmp	r6, r4
 801b936:	f43f af50 	beq.w	801b7da <_dtoa_r+0x43a>
 801b93a:	2200      	movs	r2, #0
 801b93c:	4b0a      	ldr	r3, [pc, #40]	@ (801b968 <_dtoa_r+0x5c8>)
 801b93e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b942:	f7e4 fe5d 	bl	8000600 <__aeabi_dmul>
 801b946:	2200      	movs	r2, #0
 801b948:	4b07      	ldr	r3, [pc, #28]	@ (801b968 <_dtoa_r+0x5c8>)
 801b94a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b952:	f7e4 fe55 	bl	8000600 <__aeabi_dmul>
 801b956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b95a:	e7c4      	b.n	801b8e6 <_dtoa_r+0x546>
 801b95c:	080256f8 	.word	0x080256f8
 801b960:	080256d0 	.word	0x080256d0
 801b964:	3ff00000 	.word	0x3ff00000
 801b968:	40240000 	.word	0x40240000
 801b96c:	401c0000 	.word	0x401c0000
 801b970:	40140000 	.word	0x40140000
 801b974:	3fe00000 	.word	0x3fe00000
 801b978:	4631      	mov	r1, r6
 801b97a:	4656      	mov	r6, sl
 801b97c:	4628      	mov	r0, r5
 801b97e:	f7e4 fe3f 	bl	8000600 <__aeabi_dmul>
 801b982:	9415      	str	r4, [sp, #84]	@ 0x54
 801b984:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b98c:	f7e5 f8e8 	bl	8000b60 <__aeabi_d2iz>
 801b990:	4605      	mov	r5, r0
 801b992:	f7e4 fdcb 	bl	800052c <__aeabi_i2d>
 801b996:	4602      	mov	r2, r0
 801b998:	3530      	adds	r5, #48	@ 0x30
 801b99a:	460b      	mov	r3, r1
 801b99c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9a0:	f7e4 fc76 	bl	8000290 <__aeabi_dsub>
 801b9a4:	f806 5b01 	strb.w	r5, [r6], #1
 801b9a8:	4602      	mov	r2, r0
 801b9aa:	460b      	mov	r3, r1
 801b9ac:	42a6      	cmp	r6, r4
 801b9ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b9b2:	f04f 0200 	mov.w	r2, #0
 801b9b6:	d124      	bne.n	801ba02 <_dtoa_r+0x662>
 801b9b8:	4bac      	ldr	r3, [pc, #688]	@ (801bc6c <_dtoa_r+0x8cc>)
 801b9ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b9be:	f7e4 fc69 	bl	8000294 <__adddf3>
 801b9c2:	4602      	mov	r2, r0
 801b9c4:	460b      	mov	r3, r1
 801b9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9ca:	f7e5 f8a9 	bl	8000b20 <__aeabi_dcmpgt>
 801b9ce:	2800      	cmp	r0, #0
 801b9d0:	d145      	bne.n	801ba5e <_dtoa_r+0x6be>
 801b9d2:	2000      	movs	r0, #0
 801b9d4:	49a5      	ldr	r1, [pc, #660]	@ (801bc6c <_dtoa_r+0x8cc>)
 801b9d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b9da:	f7e4 fc59 	bl	8000290 <__aeabi_dsub>
 801b9de:	4602      	mov	r2, r0
 801b9e0:	460b      	mov	r3, r1
 801b9e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9e6:	f7e5 f87d 	bl	8000ae4 <__aeabi_dcmplt>
 801b9ea:	2800      	cmp	r0, #0
 801b9ec:	f43f aef5 	beq.w	801b7da <_dtoa_r+0x43a>
 801b9f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801b9f2:	1e73      	subs	r3, r6, #1
 801b9f4:	9315      	str	r3, [sp, #84]	@ 0x54
 801b9f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b9fa:	2b30      	cmp	r3, #48	@ 0x30
 801b9fc:	d0f8      	beq.n	801b9f0 <_dtoa_r+0x650>
 801b9fe:	9f04      	ldr	r7, [sp, #16]
 801ba00:	e73e      	b.n	801b880 <_dtoa_r+0x4e0>
 801ba02:	4b9b      	ldr	r3, [pc, #620]	@ (801bc70 <_dtoa_r+0x8d0>)
 801ba04:	f7e4 fdfc 	bl	8000600 <__aeabi_dmul>
 801ba08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba0c:	e7bc      	b.n	801b988 <_dtoa_r+0x5e8>
 801ba0e:	d10c      	bne.n	801ba2a <_dtoa_r+0x68a>
 801ba10:	2200      	movs	r2, #0
 801ba12:	4b98      	ldr	r3, [pc, #608]	@ (801bc74 <_dtoa_r+0x8d4>)
 801ba14:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ba18:	f7e4 fdf2 	bl	8000600 <__aeabi_dmul>
 801ba1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ba20:	f7e5 f874 	bl	8000b0c <__aeabi_dcmpge>
 801ba24:	2800      	cmp	r0, #0
 801ba26:	f000 8157 	beq.w	801bcd8 <_dtoa_r+0x938>
 801ba2a:	2400      	movs	r4, #0
 801ba2c:	4625      	mov	r5, r4
 801ba2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba30:	4656      	mov	r6, sl
 801ba32:	43db      	mvns	r3, r3
 801ba34:	9304      	str	r3, [sp, #16]
 801ba36:	2700      	movs	r7, #0
 801ba38:	4621      	mov	r1, r4
 801ba3a:	4658      	mov	r0, fp
 801ba3c:	f000 fbb4 	bl	801c1a8 <_Bfree>
 801ba40:	2d00      	cmp	r5, #0
 801ba42:	d0dc      	beq.n	801b9fe <_dtoa_r+0x65e>
 801ba44:	b12f      	cbz	r7, 801ba52 <_dtoa_r+0x6b2>
 801ba46:	42af      	cmp	r7, r5
 801ba48:	d003      	beq.n	801ba52 <_dtoa_r+0x6b2>
 801ba4a:	4639      	mov	r1, r7
 801ba4c:	4658      	mov	r0, fp
 801ba4e:	f000 fbab 	bl	801c1a8 <_Bfree>
 801ba52:	4629      	mov	r1, r5
 801ba54:	4658      	mov	r0, fp
 801ba56:	f000 fba7 	bl	801c1a8 <_Bfree>
 801ba5a:	e7d0      	b.n	801b9fe <_dtoa_r+0x65e>
 801ba5c:	9704      	str	r7, [sp, #16]
 801ba5e:	4633      	mov	r3, r6
 801ba60:	461e      	mov	r6, r3
 801ba62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ba66:	2a39      	cmp	r2, #57	@ 0x39
 801ba68:	d107      	bne.n	801ba7a <_dtoa_r+0x6da>
 801ba6a:	459a      	cmp	sl, r3
 801ba6c:	d1f8      	bne.n	801ba60 <_dtoa_r+0x6c0>
 801ba6e:	9a04      	ldr	r2, [sp, #16]
 801ba70:	3201      	adds	r2, #1
 801ba72:	9204      	str	r2, [sp, #16]
 801ba74:	2230      	movs	r2, #48	@ 0x30
 801ba76:	f88a 2000 	strb.w	r2, [sl]
 801ba7a:	781a      	ldrb	r2, [r3, #0]
 801ba7c:	3201      	adds	r2, #1
 801ba7e:	701a      	strb	r2, [r3, #0]
 801ba80:	e7bd      	b.n	801b9fe <_dtoa_r+0x65e>
 801ba82:	2200      	movs	r2, #0
 801ba84:	4b7a      	ldr	r3, [pc, #488]	@ (801bc70 <_dtoa_r+0x8d0>)
 801ba86:	f7e4 fdbb 	bl	8000600 <__aeabi_dmul>
 801ba8a:	2200      	movs	r2, #0
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	4604      	mov	r4, r0
 801ba90:	460d      	mov	r5, r1
 801ba92:	f7e5 f81d 	bl	8000ad0 <__aeabi_dcmpeq>
 801ba96:	2800      	cmp	r0, #0
 801ba98:	f43f aebb 	beq.w	801b812 <_dtoa_r+0x472>
 801ba9c:	e6f0      	b.n	801b880 <_dtoa_r+0x4e0>
 801ba9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801baa0:	2a00      	cmp	r2, #0
 801baa2:	f000 80db 	beq.w	801bc5c <_dtoa_r+0x8bc>
 801baa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801baa8:	2a01      	cmp	r2, #1
 801baaa:	f300 80bf 	bgt.w	801bc2c <_dtoa_r+0x88c>
 801baae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bab0:	2a00      	cmp	r2, #0
 801bab2:	f000 80b7 	beq.w	801bc24 <_dtoa_r+0x884>
 801bab6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801baba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801babc:	4646      	mov	r6, r8
 801babe:	9a08      	ldr	r2, [sp, #32]
 801bac0:	2101      	movs	r1, #1
 801bac2:	4658      	mov	r0, fp
 801bac4:	4498      	add	r8, r3
 801bac6:	441a      	add	r2, r3
 801bac8:	9208      	str	r2, [sp, #32]
 801baca:	f000 fc23 	bl	801c314 <__i2b>
 801bace:	4605      	mov	r5, r0
 801bad0:	b15e      	cbz	r6, 801baea <_dtoa_r+0x74a>
 801bad2:	9b08      	ldr	r3, [sp, #32]
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	dd08      	ble.n	801baea <_dtoa_r+0x74a>
 801bad8:	42b3      	cmp	r3, r6
 801bada:	9a08      	ldr	r2, [sp, #32]
 801badc:	bfa8      	it	ge
 801bade:	4633      	movge	r3, r6
 801bae0:	eba8 0803 	sub.w	r8, r8, r3
 801bae4:	1af6      	subs	r6, r6, r3
 801bae6:	1ad3      	subs	r3, r2, r3
 801bae8:	9308      	str	r3, [sp, #32]
 801baea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801baec:	b1f3      	cbz	r3, 801bb2c <_dtoa_r+0x78c>
 801baee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	f000 80b7 	beq.w	801bc64 <_dtoa_r+0x8c4>
 801baf6:	b18c      	cbz	r4, 801bb1c <_dtoa_r+0x77c>
 801baf8:	4629      	mov	r1, r5
 801bafa:	4622      	mov	r2, r4
 801bafc:	4658      	mov	r0, fp
 801bafe:	f000 fcc9 	bl	801c494 <__pow5mult>
 801bb02:	464a      	mov	r2, r9
 801bb04:	4601      	mov	r1, r0
 801bb06:	4605      	mov	r5, r0
 801bb08:	4658      	mov	r0, fp
 801bb0a:	f000 fc19 	bl	801c340 <__multiply>
 801bb0e:	4649      	mov	r1, r9
 801bb10:	9004      	str	r0, [sp, #16]
 801bb12:	4658      	mov	r0, fp
 801bb14:	f000 fb48 	bl	801c1a8 <_Bfree>
 801bb18:	9b04      	ldr	r3, [sp, #16]
 801bb1a:	4699      	mov	r9, r3
 801bb1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bb1e:	1b1a      	subs	r2, r3, r4
 801bb20:	d004      	beq.n	801bb2c <_dtoa_r+0x78c>
 801bb22:	4649      	mov	r1, r9
 801bb24:	4658      	mov	r0, fp
 801bb26:	f000 fcb5 	bl	801c494 <__pow5mult>
 801bb2a:	4681      	mov	r9, r0
 801bb2c:	2101      	movs	r1, #1
 801bb2e:	4658      	mov	r0, fp
 801bb30:	f000 fbf0 	bl	801c314 <__i2b>
 801bb34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb36:	4604      	mov	r4, r0
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	f000 81cf 	beq.w	801bedc <_dtoa_r+0xb3c>
 801bb3e:	461a      	mov	r2, r3
 801bb40:	4601      	mov	r1, r0
 801bb42:	4658      	mov	r0, fp
 801bb44:	f000 fca6 	bl	801c494 <__pow5mult>
 801bb48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb4a:	4604      	mov	r4, r0
 801bb4c:	2b01      	cmp	r3, #1
 801bb4e:	f300 8095 	bgt.w	801bc7c <_dtoa_r+0x8dc>
 801bb52:	9b02      	ldr	r3, [sp, #8]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	f040 8087 	bne.w	801bc68 <_dtoa_r+0x8c8>
 801bb5a:	9b03      	ldr	r3, [sp, #12]
 801bb5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	f040 8089 	bne.w	801bc78 <_dtoa_r+0x8d8>
 801bb66:	9b03      	ldr	r3, [sp, #12]
 801bb68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bb6c:	0d1b      	lsrs	r3, r3, #20
 801bb6e:	051b      	lsls	r3, r3, #20
 801bb70:	b12b      	cbz	r3, 801bb7e <_dtoa_r+0x7de>
 801bb72:	9b08      	ldr	r3, [sp, #32]
 801bb74:	f108 0801 	add.w	r8, r8, #1
 801bb78:	3301      	adds	r3, #1
 801bb7a:	9308      	str	r3, [sp, #32]
 801bb7c:	2301      	movs	r3, #1
 801bb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bb80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	f000 81b0 	beq.w	801bee8 <_dtoa_r+0xb48>
 801bb88:	6923      	ldr	r3, [r4, #16]
 801bb8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bb8e:	6918      	ldr	r0, [r3, #16]
 801bb90:	f000 fb74 	bl	801c27c <__hi0bits>
 801bb94:	f1c0 0020 	rsb	r0, r0, #32
 801bb98:	9b08      	ldr	r3, [sp, #32]
 801bb9a:	4418      	add	r0, r3
 801bb9c:	f010 001f 	ands.w	r0, r0, #31
 801bba0:	d077      	beq.n	801bc92 <_dtoa_r+0x8f2>
 801bba2:	f1c0 0320 	rsb	r3, r0, #32
 801bba6:	2b04      	cmp	r3, #4
 801bba8:	dd6b      	ble.n	801bc82 <_dtoa_r+0x8e2>
 801bbaa:	f1c0 001c 	rsb	r0, r0, #28
 801bbae:	9b08      	ldr	r3, [sp, #32]
 801bbb0:	4480      	add	r8, r0
 801bbb2:	4403      	add	r3, r0
 801bbb4:	4406      	add	r6, r0
 801bbb6:	9308      	str	r3, [sp, #32]
 801bbb8:	f1b8 0f00 	cmp.w	r8, #0
 801bbbc:	dd05      	ble.n	801bbca <_dtoa_r+0x82a>
 801bbbe:	4649      	mov	r1, r9
 801bbc0:	4642      	mov	r2, r8
 801bbc2:	4658      	mov	r0, fp
 801bbc4:	f000 fcc0 	bl	801c548 <__lshift>
 801bbc8:	4681      	mov	r9, r0
 801bbca:	9b08      	ldr	r3, [sp, #32]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	dd05      	ble.n	801bbdc <_dtoa_r+0x83c>
 801bbd0:	4621      	mov	r1, r4
 801bbd2:	461a      	mov	r2, r3
 801bbd4:	4658      	mov	r0, fp
 801bbd6:	f000 fcb7 	bl	801c548 <__lshift>
 801bbda:	4604      	mov	r4, r0
 801bbdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d059      	beq.n	801bc96 <_dtoa_r+0x8f6>
 801bbe2:	4621      	mov	r1, r4
 801bbe4:	4648      	mov	r0, r9
 801bbe6:	f000 fd1b 	bl	801c620 <__mcmp>
 801bbea:	2800      	cmp	r0, #0
 801bbec:	da53      	bge.n	801bc96 <_dtoa_r+0x8f6>
 801bbee:	1e7b      	subs	r3, r7, #1
 801bbf0:	4649      	mov	r1, r9
 801bbf2:	220a      	movs	r2, #10
 801bbf4:	4658      	mov	r0, fp
 801bbf6:	9304      	str	r3, [sp, #16]
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	f000 faf7 	bl	801c1ec <__multadd>
 801bbfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bc00:	4681      	mov	r9, r0
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	f000 8172 	beq.w	801beec <_dtoa_r+0xb4c>
 801bc08:	2300      	movs	r3, #0
 801bc0a:	4629      	mov	r1, r5
 801bc0c:	220a      	movs	r2, #10
 801bc0e:	4658      	mov	r0, fp
 801bc10:	f000 faec 	bl	801c1ec <__multadd>
 801bc14:	9b00      	ldr	r3, [sp, #0]
 801bc16:	4605      	mov	r5, r0
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	dc67      	bgt.n	801bcec <_dtoa_r+0x94c>
 801bc1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc1e:	2b02      	cmp	r3, #2
 801bc20:	dc41      	bgt.n	801bca6 <_dtoa_r+0x906>
 801bc22:	e063      	b.n	801bcec <_dtoa_r+0x94c>
 801bc24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bc26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801bc2a:	e746      	b.n	801baba <_dtoa_r+0x71a>
 801bc2c:	9b07      	ldr	r3, [sp, #28]
 801bc2e:	1e5c      	subs	r4, r3, #1
 801bc30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bc32:	42a3      	cmp	r3, r4
 801bc34:	bfb7      	itett	lt
 801bc36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801bc38:	1b1c      	subge	r4, r3, r4
 801bc3a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801bc3c:	1ae3      	sublt	r3, r4, r3
 801bc3e:	bfbe      	ittt	lt
 801bc40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801bc42:	2400      	movlt	r4, #0
 801bc44:	18d2      	addlt	r2, r2, r3
 801bc46:	9b07      	ldr	r3, [sp, #28]
 801bc48:	bfb8      	it	lt
 801bc4a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	bfb5      	itete	lt
 801bc50:	eba8 0603 	sublt.w	r6, r8, r3
 801bc54:	4646      	movge	r6, r8
 801bc56:	2300      	movlt	r3, #0
 801bc58:	9b07      	ldrge	r3, [sp, #28]
 801bc5a:	e730      	b.n	801babe <_dtoa_r+0x71e>
 801bc5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bc5e:	4646      	mov	r6, r8
 801bc60:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801bc62:	e735      	b.n	801bad0 <_dtoa_r+0x730>
 801bc64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bc66:	e75c      	b.n	801bb22 <_dtoa_r+0x782>
 801bc68:	2300      	movs	r3, #0
 801bc6a:	e788      	b.n	801bb7e <_dtoa_r+0x7de>
 801bc6c:	3fe00000 	.word	0x3fe00000
 801bc70:	40240000 	.word	0x40240000
 801bc74:	40140000 	.word	0x40140000
 801bc78:	9b02      	ldr	r3, [sp, #8]
 801bc7a:	e780      	b.n	801bb7e <_dtoa_r+0x7de>
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bc80:	e782      	b.n	801bb88 <_dtoa_r+0x7e8>
 801bc82:	d099      	beq.n	801bbb8 <_dtoa_r+0x818>
 801bc84:	331c      	adds	r3, #28
 801bc86:	9a08      	ldr	r2, [sp, #32]
 801bc88:	441a      	add	r2, r3
 801bc8a:	4498      	add	r8, r3
 801bc8c:	441e      	add	r6, r3
 801bc8e:	9208      	str	r2, [sp, #32]
 801bc90:	e792      	b.n	801bbb8 <_dtoa_r+0x818>
 801bc92:	4603      	mov	r3, r0
 801bc94:	e7f6      	b.n	801bc84 <_dtoa_r+0x8e4>
 801bc96:	9b07      	ldr	r3, [sp, #28]
 801bc98:	9704      	str	r7, [sp, #16]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	dc20      	bgt.n	801bce0 <_dtoa_r+0x940>
 801bc9e:	9300      	str	r3, [sp, #0]
 801bca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bca2:	2b02      	cmp	r3, #2
 801bca4:	dd1e      	ble.n	801bce4 <_dtoa_r+0x944>
 801bca6:	9b00      	ldr	r3, [sp, #0]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	f47f aec0 	bne.w	801ba2e <_dtoa_r+0x68e>
 801bcae:	4621      	mov	r1, r4
 801bcb0:	2205      	movs	r2, #5
 801bcb2:	4658      	mov	r0, fp
 801bcb4:	f000 fa9a 	bl	801c1ec <__multadd>
 801bcb8:	4601      	mov	r1, r0
 801bcba:	4604      	mov	r4, r0
 801bcbc:	4648      	mov	r0, r9
 801bcbe:	f000 fcaf 	bl	801c620 <__mcmp>
 801bcc2:	2800      	cmp	r0, #0
 801bcc4:	f77f aeb3 	ble.w	801ba2e <_dtoa_r+0x68e>
 801bcc8:	2331      	movs	r3, #49	@ 0x31
 801bcca:	4656      	mov	r6, sl
 801bccc:	f806 3b01 	strb.w	r3, [r6], #1
 801bcd0:	9b04      	ldr	r3, [sp, #16]
 801bcd2:	3301      	adds	r3, #1
 801bcd4:	9304      	str	r3, [sp, #16]
 801bcd6:	e6ae      	b.n	801ba36 <_dtoa_r+0x696>
 801bcd8:	9c07      	ldr	r4, [sp, #28]
 801bcda:	9704      	str	r7, [sp, #16]
 801bcdc:	4625      	mov	r5, r4
 801bcde:	e7f3      	b.n	801bcc8 <_dtoa_r+0x928>
 801bce0:	9b07      	ldr	r3, [sp, #28]
 801bce2:	9300      	str	r3, [sp, #0]
 801bce4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	f000 8104 	beq.w	801bef4 <_dtoa_r+0xb54>
 801bcec:	2e00      	cmp	r6, #0
 801bcee:	dd05      	ble.n	801bcfc <_dtoa_r+0x95c>
 801bcf0:	4629      	mov	r1, r5
 801bcf2:	4632      	mov	r2, r6
 801bcf4:	4658      	mov	r0, fp
 801bcf6:	f000 fc27 	bl	801c548 <__lshift>
 801bcfa:	4605      	mov	r5, r0
 801bcfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d05a      	beq.n	801bdb8 <_dtoa_r+0xa18>
 801bd02:	6869      	ldr	r1, [r5, #4]
 801bd04:	4658      	mov	r0, fp
 801bd06:	f000 fa0f 	bl	801c128 <_Balloc>
 801bd0a:	4606      	mov	r6, r0
 801bd0c:	b928      	cbnz	r0, 801bd1a <_dtoa_r+0x97a>
 801bd0e:	4b84      	ldr	r3, [pc, #528]	@ (801bf20 <_dtoa_r+0xb80>)
 801bd10:	4602      	mov	r2, r0
 801bd12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801bd16:	f7ff bb5a 	b.w	801b3ce <_dtoa_r+0x2e>
 801bd1a:	692a      	ldr	r2, [r5, #16]
 801bd1c:	f105 010c 	add.w	r1, r5, #12
 801bd20:	300c      	adds	r0, #12
 801bd22:	3202      	adds	r2, #2
 801bd24:	0092      	lsls	r2, r2, #2
 801bd26:	f7ff faa0 	bl	801b26a <memcpy>
 801bd2a:	2201      	movs	r2, #1
 801bd2c:	4631      	mov	r1, r6
 801bd2e:	4658      	mov	r0, fp
 801bd30:	f000 fc0a 	bl	801c548 <__lshift>
 801bd34:	f10a 0301 	add.w	r3, sl, #1
 801bd38:	462f      	mov	r7, r5
 801bd3a:	4605      	mov	r5, r0
 801bd3c:	9307      	str	r3, [sp, #28]
 801bd3e:	9b00      	ldr	r3, [sp, #0]
 801bd40:	4453      	add	r3, sl
 801bd42:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bd44:	9b02      	ldr	r3, [sp, #8]
 801bd46:	f003 0301 	and.w	r3, r3, #1
 801bd4a:	930a      	str	r3, [sp, #40]	@ 0x28
 801bd4c:	9b07      	ldr	r3, [sp, #28]
 801bd4e:	4621      	mov	r1, r4
 801bd50:	4648      	mov	r0, r9
 801bd52:	3b01      	subs	r3, #1
 801bd54:	9300      	str	r3, [sp, #0]
 801bd56:	f7ff fa95 	bl	801b284 <quorem>
 801bd5a:	4639      	mov	r1, r7
 801bd5c:	9002      	str	r0, [sp, #8]
 801bd5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801bd62:	4648      	mov	r0, r9
 801bd64:	f000 fc5c 	bl	801c620 <__mcmp>
 801bd68:	462a      	mov	r2, r5
 801bd6a:	9008      	str	r0, [sp, #32]
 801bd6c:	4621      	mov	r1, r4
 801bd6e:	4658      	mov	r0, fp
 801bd70:	f000 fc72 	bl	801c658 <__mdiff>
 801bd74:	68c2      	ldr	r2, [r0, #12]
 801bd76:	4606      	mov	r6, r0
 801bd78:	bb02      	cbnz	r2, 801bdbc <_dtoa_r+0xa1c>
 801bd7a:	4601      	mov	r1, r0
 801bd7c:	4648      	mov	r0, r9
 801bd7e:	f000 fc4f 	bl	801c620 <__mcmp>
 801bd82:	4602      	mov	r2, r0
 801bd84:	4631      	mov	r1, r6
 801bd86:	4658      	mov	r0, fp
 801bd88:	920e      	str	r2, [sp, #56]	@ 0x38
 801bd8a:	f000 fa0d 	bl	801c1a8 <_Bfree>
 801bd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bd92:	9e07      	ldr	r6, [sp, #28]
 801bd94:	ea43 0102 	orr.w	r1, r3, r2
 801bd98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bd9a:	4319      	orrs	r1, r3
 801bd9c:	d110      	bne.n	801bdc0 <_dtoa_r+0xa20>
 801bd9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801bda2:	d029      	beq.n	801bdf8 <_dtoa_r+0xa58>
 801bda4:	9b08      	ldr	r3, [sp, #32]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	dd02      	ble.n	801bdb0 <_dtoa_r+0xa10>
 801bdaa:	9b02      	ldr	r3, [sp, #8]
 801bdac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801bdb0:	9b00      	ldr	r3, [sp, #0]
 801bdb2:	f883 8000 	strb.w	r8, [r3]
 801bdb6:	e63f      	b.n	801ba38 <_dtoa_r+0x698>
 801bdb8:	4628      	mov	r0, r5
 801bdba:	e7bb      	b.n	801bd34 <_dtoa_r+0x994>
 801bdbc:	2201      	movs	r2, #1
 801bdbe:	e7e1      	b.n	801bd84 <_dtoa_r+0x9e4>
 801bdc0:	9b08      	ldr	r3, [sp, #32]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	db04      	blt.n	801bdd0 <_dtoa_r+0xa30>
 801bdc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bdc8:	430b      	orrs	r3, r1
 801bdca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bdcc:	430b      	orrs	r3, r1
 801bdce:	d120      	bne.n	801be12 <_dtoa_r+0xa72>
 801bdd0:	2a00      	cmp	r2, #0
 801bdd2:	dded      	ble.n	801bdb0 <_dtoa_r+0xa10>
 801bdd4:	4649      	mov	r1, r9
 801bdd6:	2201      	movs	r2, #1
 801bdd8:	4658      	mov	r0, fp
 801bdda:	f000 fbb5 	bl	801c548 <__lshift>
 801bdde:	4621      	mov	r1, r4
 801bde0:	4681      	mov	r9, r0
 801bde2:	f000 fc1d 	bl	801c620 <__mcmp>
 801bde6:	2800      	cmp	r0, #0
 801bde8:	dc03      	bgt.n	801bdf2 <_dtoa_r+0xa52>
 801bdea:	d1e1      	bne.n	801bdb0 <_dtoa_r+0xa10>
 801bdec:	f018 0f01 	tst.w	r8, #1
 801bdf0:	d0de      	beq.n	801bdb0 <_dtoa_r+0xa10>
 801bdf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801bdf6:	d1d8      	bne.n	801bdaa <_dtoa_r+0xa0a>
 801bdf8:	2339      	movs	r3, #57	@ 0x39
 801bdfa:	9a00      	ldr	r2, [sp, #0]
 801bdfc:	7013      	strb	r3, [r2, #0]
 801bdfe:	4633      	mov	r3, r6
 801be00:	461e      	mov	r6, r3
 801be02:	3b01      	subs	r3, #1
 801be04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801be08:	2a39      	cmp	r2, #57	@ 0x39
 801be0a:	d052      	beq.n	801beb2 <_dtoa_r+0xb12>
 801be0c:	3201      	adds	r2, #1
 801be0e:	701a      	strb	r2, [r3, #0]
 801be10:	e612      	b.n	801ba38 <_dtoa_r+0x698>
 801be12:	2a00      	cmp	r2, #0
 801be14:	dd07      	ble.n	801be26 <_dtoa_r+0xa86>
 801be16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801be1a:	d0ed      	beq.n	801bdf8 <_dtoa_r+0xa58>
 801be1c:	f108 0301 	add.w	r3, r8, #1
 801be20:	9a00      	ldr	r2, [sp, #0]
 801be22:	7013      	strb	r3, [r2, #0]
 801be24:	e608      	b.n	801ba38 <_dtoa_r+0x698>
 801be26:	9b07      	ldr	r3, [sp, #28]
 801be28:	9a07      	ldr	r2, [sp, #28]
 801be2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801be2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801be30:	4293      	cmp	r3, r2
 801be32:	d028      	beq.n	801be86 <_dtoa_r+0xae6>
 801be34:	4649      	mov	r1, r9
 801be36:	2300      	movs	r3, #0
 801be38:	220a      	movs	r2, #10
 801be3a:	4658      	mov	r0, fp
 801be3c:	f000 f9d6 	bl	801c1ec <__multadd>
 801be40:	42af      	cmp	r7, r5
 801be42:	4681      	mov	r9, r0
 801be44:	f04f 0300 	mov.w	r3, #0
 801be48:	f04f 020a 	mov.w	r2, #10
 801be4c:	4639      	mov	r1, r7
 801be4e:	4658      	mov	r0, fp
 801be50:	d107      	bne.n	801be62 <_dtoa_r+0xac2>
 801be52:	f000 f9cb 	bl	801c1ec <__multadd>
 801be56:	4607      	mov	r7, r0
 801be58:	4605      	mov	r5, r0
 801be5a:	9b07      	ldr	r3, [sp, #28]
 801be5c:	3301      	adds	r3, #1
 801be5e:	9307      	str	r3, [sp, #28]
 801be60:	e774      	b.n	801bd4c <_dtoa_r+0x9ac>
 801be62:	f000 f9c3 	bl	801c1ec <__multadd>
 801be66:	4629      	mov	r1, r5
 801be68:	4607      	mov	r7, r0
 801be6a:	2300      	movs	r3, #0
 801be6c:	220a      	movs	r2, #10
 801be6e:	4658      	mov	r0, fp
 801be70:	f000 f9bc 	bl	801c1ec <__multadd>
 801be74:	4605      	mov	r5, r0
 801be76:	e7f0      	b.n	801be5a <_dtoa_r+0xaba>
 801be78:	9b00      	ldr	r3, [sp, #0]
 801be7a:	2700      	movs	r7, #0
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	bfcc      	ite	gt
 801be80:	461e      	movgt	r6, r3
 801be82:	2601      	movle	r6, #1
 801be84:	4456      	add	r6, sl
 801be86:	4649      	mov	r1, r9
 801be88:	2201      	movs	r2, #1
 801be8a:	4658      	mov	r0, fp
 801be8c:	f000 fb5c 	bl	801c548 <__lshift>
 801be90:	4621      	mov	r1, r4
 801be92:	4681      	mov	r9, r0
 801be94:	f000 fbc4 	bl	801c620 <__mcmp>
 801be98:	2800      	cmp	r0, #0
 801be9a:	dcb0      	bgt.n	801bdfe <_dtoa_r+0xa5e>
 801be9c:	d102      	bne.n	801bea4 <_dtoa_r+0xb04>
 801be9e:	f018 0f01 	tst.w	r8, #1
 801bea2:	d1ac      	bne.n	801bdfe <_dtoa_r+0xa5e>
 801bea4:	4633      	mov	r3, r6
 801bea6:	461e      	mov	r6, r3
 801bea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801beac:	2a30      	cmp	r2, #48	@ 0x30
 801beae:	d0fa      	beq.n	801bea6 <_dtoa_r+0xb06>
 801beb0:	e5c2      	b.n	801ba38 <_dtoa_r+0x698>
 801beb2:	459a      	cmp	sl, r3
 801beb4:	d1a4      	bne.n	801be00 <_dtoa_r+0xa60>
 801beb6:	9b04      	ldr	r3, [sp, #16]
 801beb8:	3301      	adds	r3, #1
 801beba:	9304      	str	r3, [sp, #16]
 801bebc:	2331      	movs	r3, #49	@ 0x31
 801bebe:	f88a 3000 	strb.w	r3, [sl]
 801bec2:	e5b9      	b.n	801ba38 <_dtoa_r+0x698>
 801bec4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bec6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801bf24 <_dtoa_r+0xb84>
 801beca:	b11b      	cbz	r3, 801bed4 <_dtoa_r+0xb34>
 801becc:	f10a 0308 	add.w	r3, sl, #8
 801bed0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801bed2:	6013      	str	r3, [r2, #0]
 801bed4:	4650      	mov	r0, sl
 801bed6:	b019      	add	sp, #100	@ 0x64
 801bed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bede:	2b01      	cmp	r3, #1
 801bee0:	f77f ae37 	ble.w	801bb52 <_dtoa_r+0x7b2>
 801bee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bee6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bee8:	2001      	movs	r0, #1
 801beea:	e655      	b.n	801bb98 <_dtoa_r+0x7f8>
 801beec:	9b00      	ldr	r3, [sp, #0]
 801beee:	2b00      	cmp	r3, #0
 801bef0:	f77f aed6 	ble.w	801bca0 <_dtoa_r+0x900>
 801bef4:	4656      	mov	r6, sl
 801bef6:	4621      	mov	r1, r4
 801bef8:	4648      	mov	r0, r9
 801befa:	f7ff f9c3 	bl	801b284 <quorem>
 801befe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801bf02:	9b00      	ldr	r3, [sp, #0]
 801bf04:	f806 8b01 	strb.w	r8, [r6], #1
 801bf08:	eba6 020a 	sub.w	r2, r6, sl
 801bf0c:	4293      	cmp	r3, r2
 801bf0e:	ddb3      	ble.n	801be78 <_dtoa_r+0xad8>
 801bf10:	4649      	mov	r1, r9
 801bf12:	2300      	movs	r3, #0
 801bf14:	220a      	movs	r2, #10
 801bf16:	4658      	mov	r0, fp
 801bf18:	f000 f968 	bl	801c1ec <__multadd>
 801bf1c:	4681      	mov	r9, r0
 801bf1e:	e7ea      	b.n	801bef6 <_dtoa_r+0xb56>
 801bf20:	08025654 	.word	0x08025654
 801bf24:	080255d8 	.word	0x080255d8

0801bf28 <_free_r>:
 801bf28:	b538      	push	{r3, r4, r5, lr}
 801bf2a:	4605      	mov	r5, r0
 801bf2c:	2900      	cmp	r1, #0
 801bf2e:	d041      	beq.n	801bfb4 <_free_r+0x8c>
 801bf30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf34:	1f0c      	subs	r4, r1, #4
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	bfb8      	it	lt
 801bf3a:	18e4      	addlt	r4, r4, r3
 801bf3c:	f000 f8e8 	bl	801c110 <__malloc_lock>
 801bf40:	4a1d      	ldr	r2, [pc, #116]	@ (801bfb8 <_free_r+0x90>)
 801bf42:	6813      	ldr	r3, [r2, #0]
 801bf44:	b933      	cbnz	r3, 801bf54 <_free_r+0x2c>
 801bf46:	6063      	str	r3, [r4, #4]
 801bf48:	6014      	str	r4, [r2, #0]
 801bf4a:	4628      	mov	r0, r5
 801bf4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf50:	f000 b8e4 	b.w	801c11c <__malloc_unlock>
 801bf54:	42a3      	cmp	r3, r4
 801bf56:	d908      	bls.n	801bf6a <_free_r+0x42>
 801bf58:	6820      	ldr	r0, [r4, #0]
 801bf5a:	1821      	adds	r1, r4, r0
 801bf5c:	428b      	cmp	r3, r1
 801bf5e:	bf01      	itttt	eq
 801bf60:	6819      	ldreq	r1, [r3, #0]
 801bf62:	685b      	ldreq	r3, [r3, #4]
 801bf64:	1809      	addeq	r1, r1, r0
 801bf66:	6021      	streq	r1, [r4, #0]
 801bf68:	e7ed      	b.n	801bf46 <_free_r+0x1e>
 801bf6a:	461a      	mov	r2, r3
 801bf6c:	685b      	ldr	r3, [r3, #4]
 801bf6e:	b10b      	cbz	r3, 801bf74 <_free_r+0x4c>
 801bf70:	42a3      	cmp	r3, r4
 801bf72:	d9fa      	bls.n	801bf6a <_free_r+0x42>
 801bf74:	6811      	ldr	r1, [r2, #0]
 801bf76:	1850      	adds	r0, r2, r1
 801bf78:	42a0      	cmp	r0, r4
 801bf7a:	d10b      	bne.n	801bf94 <_free_r+0x6c>
 801bf7c:	6820      	ldr	r0, [r4, #0]
 801bf7e:	4401      	add	r1, r0
 801bf80:	1850      	adds	r0, r2, r1
 801bf82:	6011      	str	r1, [r2, #0]
 801bf84:	4283      	cmp	r3, r0
 801bf86:	d1e0      	bne.n	801bf4a <_free_r+0x22>
 801bf88:	6818      	ldr	r0, [r3, #0]
 801bf8a:	685b      	ldr	r3, [r3, #4]
 801bf8c:	4408      	add	r0, r1
 801bf8e:	6053      	str	r3, [r2, #4]
 801bf90:	6010      	str	r0, [r2, #0]
 801bf92:	e7da      	b.n	801bf4a <_free_r+0x22>
 801bf94:	d902      	bls.n	801bf9c <_free_r+0x74>
 801bf96:	230c      	movs	r3, #12
 801bf98:	602b      	str	r3, [r5, #0]
 801bf9a:	e7d6      	b.n	801bf4a <_free_r+0x22>
 801bf9c:	6820      	ldr	r0, [r4, #0]
 801bf9e:	1821      	adds	r1, r4, r0
 801bfa0:	428b      	cmp	r3, r1
 801bfa2:	bf02      	ittt	eq
 801bfa4:	6819      	ldreq	r1, [r3, #0]
 801bfa6:	685b      	ldreq	r3, [r3, #4]
 801bfa8:	1809      	addeq	r1, r1, r0
 801bfaa:	6063      	str	r3, [r4, #4]
 801bfac:	bf08      	it	eq
 801bfae:	6021      	streq	r1, [r4, #0]
 801bfb0:	6054      	str	r4, [r2, #4]
 801bfb2:	e7ca      	b.n	801bf4a <_free_r+0x22>
 801bfb4:	bd38      	pop	{r3, r4, r5, pc}
 801bfb6:	bf00      	nop
 801bfb8:	20005c28 	.word	0x20005c28

0801bfbc <malloc>:
 801bfbc:	4b02      	ldr	r3, [pc, #8]	@ (801bfc8 <malloc+0xc>)
 801bfbe:	4601      	mov	r1, r0
 801bfc0:	6818      	ldr	r0, [r3, #0]
 801bfc2:	f000 b825 	b.w	801c010 <_malloc_r>
 801bfc6:	bf00      	nop
 801bfc8:	2000004c 	.word	0x2000004c

0801bfcc <sbrk_aligned>:
 801bfcc:	b570      	push	{r4, r5, r6, lr}
 801bfce:	4e0f      	ldr	r6, [pc, #60]	@ (801c00c <sbrk_aligned+0x40>)
 801bfd0:	460c      	mov	r4, r1
 801bfd2:	4605      	mov	r5, r0
 801bfd4:	6831      	ldr	r1, [r6, #0]
 801bfd6:	b911      	cbnz	r1, 801bfde <sbrk_aligned+0x12>
 801bfd8:	f001 f812 	bl	801d000 <_sbrk_r>
 801bfdc:	6030      	str	r0, [r6, #0]
 801bfde:	4621      	mov	r1, r4
 801bfe0:	4628      	mov	r0, r5
 801bfe2:	f001 f80d 	bl	801d000 <_sbrk_r>
 801bfe6:	1c43      	adds	r3, r0, #1
 801bfe8:	d103      	bne.n	801bff2 <sbrk_aligned+0x26>
 801bfea:	f04f 34ff 	mov.w	r4, #4294967295
 801bfee:	4620      	mov	r0, r4
 801bff0:	bd70      	pop	{r4, r5, r6, pc}
 801bff2:	1cc4      	adds	r4, r0, #3
 801bff4:	f024 0403 	bic.w	r4, r4, #3
 801bff8:	42a0      	cmp	r0, r4
 801bffa:	d0f8      	beq.n	801bfee <sbrk_aligned+0x22>
 801bffc:	1a21      	subs	r1, r4, r0
 801bffe:	4628      	mov	r0, r5
 801c000:	f000 fffe 	bl	801d000 <_sbrk_r>
 801c004:	3001      	adds	r0, #1
 801c006:	d1f2      	bne.n	801bfee <sbrk_aligned+0x22>
 801c008:	e7ef      	b.n	801bfea <sbrk_aligned+0x1e>
 801c00a:	bf00      	nop
 801c00c:	20005c24 	.word	0x20005c24

0801c010 <_malloc_r>:
 801c010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c014:	1ccd      	adds	r5, r1, #3
 801c016:	4606      	mov	r6, r0
 801c018:	f025 0503 	bic.w	r5, r5, #3
 801c01c:	3508      	adds	r5, #8
 801c01e:	2d0c      	cmp	r5, #12
 801c020:	bf38      	it	cc
 801c022:	250c      	movcc	r5, #12
 801c024:	2d00      	cmp	r5, #0
 801c026:	db01      	blt.n	801c02c <_malloc_r+0x1c>
 801c028:	42a9      	cmp	r1, r5
 801c02a:	d904      	bls.n	801c036 <_malloc_r+0x26>
 801c02c:	230c      	movs	r3, #12
 801c02e:	6033      	str	r3, [r6, #0]
 801c030:	2000      	movs	r0, #0
 801c032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c10c <_malloc_r+0xfc>
 801c03a:	f000 f869 	bl	801c110 <__malloc_lock>
 801c03e:	f8d8 3000 	ldr.w	r3, [r8]
 801c042:	461c      	mov	r4, r3
 801c044:	bb44      	cbnz	r4, 801c098 <_malloc_r+0x88>
 801c046:	4629      	mov	r1, r5
 801c048:	4630      	mov	r0, r6
 801c04a:	f7ff ffbf 	bl	801bfcc <sbrk_aligned>
 801c04e:	1c43      	adds	r3, r0, #1
 801c050:	4604      	mov	r4, r0
 801c052:	d158      	bne.n	801c106 <_malloc_r+0xf6>
 801c054:	f8d8 4000 	ldr.w	r4, [r8]
 801c058:	4627      	mov	r7, r4
 801c05a:	2f00      	cmp	r7, #0
 801c05c:	d143      	bne.n	801c0e6 <_malloc_r+0xd6>
 801c05e:	2c00      	cmp	r4, #0
 801c060:	d04b      	beq.n	801c0fa <_malloc_r+0xea>
 801c062:	6823      	ldr	r3, [r4, #0]
 801c064:	4639      	mov	r1, r7
 801c066:	4630      	mov	r0, r6
 801c068:	eb04 0903 	add.w	r9, r4, r3
 801c06c:	f000 ffc8 	bl	801d000 <_sbrk_r>
 801c070:	4581      	cmp	r9, r0
 801c072:	d142      	bne.n	801c0fa <_malloc_r+0xea>
 801c074:	6821      	ldr	r1, [r4, #0]
 801c076:	4630      	mov	r0, r6
 801c078:	1a6d      	subs	r5, r5, r1
 801c07a:	4629      	mov	r1, r5
 801c07c:	f7ff ffa6 	bl	801bfcc <sbrk_aligned>
 801c080:	3001      	adds	r0, #1
 801c082:	d03a      	beq.n	801c0fa <_malloc_r+0xea>
 801c084:	6823      	ldr	r3, [r4, #0]
 801c086:	442b      	add	r3, r5
 801c088:	6023      	str	r3, [r4, #0]
 801c08a:	f8d8 3000 	ldr.w	r3, [r8]
 801c08e:	685a      	ldr	r2, [r3, #4]
 801c090:	bb62      	cbnz	r2, 801c0ec <_malloc_r+0xdc>
 801c092:	f8c8 7000 	str.w	r7, [r8]
 801c096:	e00f      	b.n	801c0b8 <_malloc_r+0xa8>
 801c098:	6822      	ldr	r2, [r4, #0]
 801c09a:	1b52      	subs	r2, r2, r5
 801c09c:	d420      	bmi.n	801c0e0 <_malloc_r+0xd0>
 801c09e:	2a0b      	cmp	r2, #11
 801c0a0:	d917      	bls.n	801c0d2 <_malloc_r+0xc2>
 801c0a2:	1961      	adds	r1, r4, r5
 801c0a4:	42a3      	cmp	r3, r4
 801c0a6:	6025      	str	r5, [r4, #0]
 801c0a8:	bf18      	it	ne
 801c0aa:	6059      	strne	r1, [r3, #4]
 801c0ac:	6863      	ldr	r3, [r4, #4]
 801c0ae:	bf08      	it	eq
 801c0b0:	f8c8 1000 	streq.w	r1, [r8]
 801c0b4:	5162      	str	r2, [r4, r5]
 801c0b6:	604b      	str	r3, [r1, #4]
 801c0b8:	4630      	mov	r0, r6
 801c0ba:	f000 f82f 	bl	801c11c <__malloc_unlock>
 801c0be:	f104 000b 	add.w	r0, r4, #11
 801c0c2:	1d23      	adds	r3, r4, #4
 801c0c4:	f020 0007 	bic.w	r0, r0, #7
 801c0c8:	1ac2      	subs	r2, r0, r3
 801c0ca:	bf1c      	itt	ne
 801c0cc:	1a1b      	subne	r3, r3, r0
 801c0ce:	50a3      	strne	r3, [r4, r2]
 801c0d0:	e7af      	b.n	801c032 <_malloc_r+0x22>
 801c0d2:	6862      	ldr	r2, [r4, #4]
 801c0d4:	42a3      	cmp	r3, r4
 801c0d6:	bf0c      	ite	eq
 801c0d8:	f8c8 2000 	streq.w	r2, [r8]
 801c0dc:	605a      	strne	r2, [r3, #4]
 801c0de:	e7eb      	b.n	801c0b8 <_malloc_r+0xa8>
 801c0e0:	4623      	mov	r3, r4
 801c0e2:	6864      	ldr	r4, [r4, #4]
 801c0e4:	e7ae      	b.n	801c044 <_malloc_r+0x34>
 801c0e6:	463c      	mov	r4, r7
 801c0e8:	687f      	ldr	r7, [r7, #4]
 801c0ea:	e7b6      	b.n	801c05a <_malloc_r+0x4a>
 801c0ec:	461a      	mov	r2, r3
 801c0ee:	685b      	ldr	r3, [r3, #4]
 801c0f0:	42a3      	cmp	r3, r4
 801c0f2:	d1fb      	bne.n	801c0ec <_malloc_r+0xdc>
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	6053      	str	r3, [r2, #4]
 801c0f8:	e7de      	b.n	801c0b8 <_malloc_r+0xa8>
 801c0fa:	230c      	movs	r3, #12
 801c0fc:	4630      	mov	r0, r6
 801c0fe:	6033      	str	r3, [r6, #0]
 801c100:	f000 f80c 	bl	801c11c <__malloc_unlock>
 801c104:	e794      	b.n	801c030 <_malloc_r+0x20>
 801c106:	6005      	str	r5, [r0, #0]
 801c108:	e7d6      	b.n	801c0b8 <_malloc_r+0xa8>
 801c10a:	bf00      	nop
 801c10c:	20005c28 	.word	0x20005c28

0801c110 <__malloc_lock>:
 801c110:	4801      	ldr	r0, [pc, #4]	@ (801c118 <__malloc_lock+0x8>)
 801c112:	f7ff b89a 	b.w	801b24a <__retarget_lock_acquire_recursive>
 801c116:	bf00      	nop
 801c118:	20005c20 	.word	0x20005c20

0801c11c <__malloc_unlock>:
 801c11c:	4801      	ldr	r0, [pc, #4]	@ (801c124 <__malloc_unlock+0x8>)
 801c11e:	f7ff b895 	b.w	801b24c <__retarget_lock_release_recursive>
 801c122:	bf00      	nop
 801c124:	20005c20 	.word	0x20005c20

0801c128 <_Balloc>:
 801c128:	b570      	push	{r4, r5, r6, lr}
 801c12a:	69c6      	ldr	r6, [r0, #28]
 801c12c:	4604      	mov	r4, r0
 801c12e:	460d      	mov	r5, r1
 801c130:	b976      	cbnz	r6, 801c150 <_Balloc+0x28>
 801c132:	2010      	movs	r0, #16
 801c134:	f7ff ff42 	bl	801bfbc <malloc>
 801c138:	4602      	mov	r2, r0
 801c13a:	61e0      	str	r0, [r4, #28]
 801c13c:	b920      	cbnz	r0, 801c148 <_Balloc+0x20>
 801c13e:	4b18      	ldr	r3, [pc, #96]	@ (801c1a0 <_Balloc+0x78>)
 801c140:	216b      	movs	r1, #107	@ 0x6b
 801c142:	4818      	ldr	r0, [pc, #96]	@ (801c1a4 <_Balloc+0x7c>)
 801c144:	f000 ff6c 	bl	801d020 <__assert_func>
 801c148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c14c:	6006      	str	r6, [r0, #0]
 801c14e:	60c6      	str	r6, [r0, #12]
 801c150:	69e6      	ldr	r6, [r4, #28]
 801c152:	68f3      	ldr	r3, [r6, #12]
 801c154:	b183      	cbz	r3, 801c178 <_Balloc+0x50>
 801c156:	69e3      	ldr	r3, [r4, #28]
 801c158:	68db      	ldr	r3, [r3, #12]
 801c15a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c15e:	b9b8      	cbnz	r0, 801c190 <_Balloc+0x68>
 801c160:	2101      	movs	r1, #1
 801c162:	4620      	mov	r0, r4
 801c164:	fa01 f605 	lsl.w	r6, r1, r5
 801c168:	1d72      	adds	r2, r6, #5
 801c16a:	0092      	lsls	r2, r2, #2
 801c16c:	f000 ff76 	bl	801d05c <_calloc_r>
 801c170:	b160      	cbz	r0, 801c18c <_Balloc+0x64>
 801c172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c176:	e00e      	b.n	801c196 <_Balloc+0x6e>
 801c178:	2221      	movs	r2, #33	@ 0x21
 801c17a:	2104      	movs	r1, #4
 801c17c:	4620      	mov	r0, r4
 801c17e:	f000 ff6d 	bl	801d05c <_calloc_r>
 801c182:	69e3      	ldr	r3, [r4, #28]
 801c184:	60f0      	str	r0, [r6, #12]
 801c186:	68db      	ldr	r3, [r3, #12]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d1e4      	bne.n	801c156 <_Balloc+0x2e>
 801c18c:	2000      	movs	r0, #0
 801c18e:	bd70      	pop	{r4, r5, r6, pc}
 801c190:	6802      	ldr	r2, [r0, #0]
 801c192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c196:	2300      	movs	r3, #0
 801c198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c19c:	e7f7      	b.n	801c18e <_Balloc+0x66>
 801c19e:	bf00      	nop
 801c1a0:	080255e5 	.word	0x080255e5
 801c1a4:	08025665 	.word	0x08025665

0801c1a8 <_Bfree>:
 801c1a8:	b570      	push	{r4, r5, r6, lr}
 801c1aa:	69c6      	ldr	r6, [r0, #28]
 801c1ac:	4605      	mov	r5, r0
 801c1ae:	460c      	mov	r4, r1
 801c1b0:	b976      	cbnz	r6, 801c1d0 <_Bfree+0x28>
 801c1b2:	2010      	movs	r0, #16
 801c1b4:	f7ff ff02 	bl	801bfbc <malloc>
 801c1b8:	4602      	mov	r2, r0
 801c1ba:	61e8      	str	r0, [r5, #28]
 801c1bc:	b920      	cbnz	r0, 801c1c8 <_Bfree+0x20>
 801c1be:	4b09      	ldr	r3, [pc, #36]	@ (801c1e4 <_Bfree+0x3c>)
 801c1c0:	218f      	movs	r1, #143	@ 0x8f
 801c1c2:	4809      	ldr	r0, [pc, #36]	@ (801c1e8 <_Bfree+0x40>)
 801c1c4:	f000 ff2c 	bl	801d020 <__assert_func>
 801c1c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c1cc:	6006      	str	r6, [r0, #0]
 801c1ce:	60c6      	str	r6, [r0, #12]
 801c1d0:	b13c      	cbz	r4, 801c1e2 <_Bfree+0x3a>
 801c1d2:	69eb      	ldr	r3, [r5, #28]
 801c1d4:	6862      	ldr	r2, [r4, #4]
 801c1d6:	68db      	ldr	r3, [r3, #12]
 801c1d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c1dc:	6021      	str	r1, [r4, #0]
 801c1de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c1e2:	bd70      	pop	{r4, r5, r6, pc}
 801c1e4:	080255e5 	.word	0x080255e5
 801c1e8:	08025665 	.word	0x08025665

0801c1ec <__multadd>:
 801c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1f0:	f101 0c14 	add.w	ip, r1, #20
 801c1f4:	4607      	mov	r7, r0
 801c1f6:	460c      	mov	r4, r1
 801c1f8:	461e      	mov	r6, r3
 801c1fa:	690d      	ldr	r5, [r1, #16]
 801c1fc:	2000      	movs	r0, #0
 801c1fe:	f8dc 3000 	ldr.w	r3, [ip]
 801c202:	3001      	adds	r0, #1
 801c204:	b299      	uxth	r1, r3
 801c206:	4285      	cmp	r5, r0
 801c208:	fb02 6101 	mla	r1, r2, r1, r6
 801c20c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c210:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801c214:	b289      	uxth	r1, r1
 801c216:	fb02 3306 	mla	r3, r2, r6, r3
 801c21a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c21e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c222:	f84c 1b04 	str.w	r1, [ip], #4
 801c226:	dcea      	bgt.n	801c1fe <__multadd+0x12>
 801c228:	b30e      	cbz	r6, 801c26e <__multadd+0x82>
 801c22a:	68a3      	ldr	r3, [r4, #8]
 801c22c:	42ab      	cmp	r3, r5
 801c22e:	dc19      	bgt.n	801c264 <__multadd+0x78>
 801c230:	6861      	ldr	r1, [r4, #4]
 801c232:	4638      	mov	r0, r7
 801c234:	3101      	adds	r1, #1
 801c236:	f7ff ff77 	bl	801c128 <_Balloc>
 801c23a:	4680      	mov	r8, r0
 801c23c:	b928      	cbnz	r0, 801c24a <__multadd+0x5e>
 801c23e:	4602      	mov	r2, r0
 801c240:	4b0c      	ldr	r3, [pc, #48]	@ (801c274 <__multadd+0x88>)
 801c242:	21ba      	movs	r1, #186	@ 0xba
 801c244:	480c      	ldr	r0, [pc, #48]	@ (801c278 <__multadd+0x8c>)
 801c246:	f000 feeb 	bl	801d020 <__assert_func>
 801c24a:	6922      	ldr	r2, [r4, #16]
 801c24c:	f104 010c 	add.w	r1, r4, #12
 801c250:	300c      	adds	r0, #12
 801c252:	3202      	adds	r2, #2
 801c254:	0092      	lsls	r2, r2, #2
 801c256:	f7ff f808 	bl	801b26a <memcpy>
 801c25a:	4621      	mov	r1, r4
 801c25c:	4644      	mov	r4, r8
 801c25e:	4638      	mov	r0, r7
 801c260:	f7ff ffa2 	bl	801c1a8 <_Bfree>
 801c264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c268:	3501      	adds	r5, #1
 801c26a:	615e      	str	r6, [r3, #20]
 801c26c:	6125      	str	r5, [r4, #16]
 801c26e:	4620      	mov	r0, r4
 801c270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c274:	08025654 	.word	0x08025654
 801c278:	08025665 	.word	0x08025665

0801c27c <__hi0bits>:
 801c27c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c280:	4603      	mov	r3, r0
 801c282:	bf36      	itet	cc
 801c284:	0403      	lslcc	r3, r0, #16
 801c286:	2000      	movcs	r0, #0
 801c288:	2010      	movcc	r0, #16
 801c28a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c28e:	bf3c      	itt	cc
 801c290:	021b      	lslcc	r3, r3, #8
 801c292:	3008      	addcc	r0, #8
 801c294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c298:	bf3c      	itt	cc
 801c29a:	011b      	lslcc	r3, r3, #4
 801c29c:	3004      	addcc	r0, #4
 801c29e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c2a2:	bf3c      	itt	cc
 801c2a4:	009b      	lslcc	r3, r3, #2
 801c2a6:	3002      	addcc	r0, #2
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	db05      	blt.n	801c2b8 <__hi0bits+0x3c>
 801c2ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c2b0:	f100 0001 	add.w	r0, r0, #1
 801c2b4:	bf08      	it	eq
 801c2b6:	2020      	moveq	r0, #32
 801c2b8:	4770      	bx	lr

0801c2ba <__lo0bits>:
 801c2ba:	6803      	ldr	r3, [r0, #0]
 801c2bc:	4602      	mov	r2, r0
 801c2be:	f013 0007 	ands.w	r0, r3, #7
 801c2c2:	d00b      	beq.n	801c2dc <__lo0bits+0x22>
 801c2c4:	07d9      	lsls	r1, r3, #31
 801c2c6:	d421      	bmi.n	801c30c <__lo0bits+0x52>
 801c2c8:	0798      	lsls	r0, r3, #30
 801c2ca:	bf47      	ittee	mi
 801c2cc:	085b      	lsrmi	r3, r3, #1
 801c2ce:	2001      	movmi	r0, #1
 801c2d0:	089b      	lsrpl	r3, r3, #2
 801c2d2:	2002      	movpl	r0, #2
 801c2d4:	bf4c      	ite	mi
 801c2d6:	6013      	strmi	r3, [r2, #0]
 801c2d8:	6013      	strpl	r3, [r2, #0]
 801c2da:	4770      	bx	lr
 801c2dc:	b299      	uxth	r1, r3
 801c2de:	b909      	cbnz	r1, 801c2e4 <__lo0bits+0x2a>
 801c2e0:	0c1b      	lsrs	r3, r3, #16
 801c2e2:	2010      	movs	r0, #16
 801c2e4:	b2d9      	uxtb	r1, r3
 801c2e6:	b909      	cbnz	r1, 801c2ec <__lo0bits+0x32>
 801c2e8:	3008      	adds	r0, #8
 801c2ea:	0a1b      	lsrs	r3, r3, #8
 801c2ec:	0719      	lsls	r1, r3, #28
 801c2ee:	bf04      	itt	eq
 801c2f0:	091b      	lsreq	r3, r3, #4
 801c2f2:	3004      	addeq	r0, #4
 801c2f4:	0799      	lsls	r1, r3, #30
 801c2f6:	bf04      	itt	eq
 801c2f8:	089b      	lsreq	r3, r3, #2
 801c2fa:	3002      	addeq	r0, #2
 801c2fc:	07d9      	lsls	r1, r3, #31
 801c2fe:	d403      	bmi.n	801c308 <__lo0bits+0x4e>
 801c300:	085b      	lsrs	r3, r3, #1
 801c302:	f100 0001 	add.w	r0, r0, #1
 801c306:	d003      	beq.n	801c310 <__lo0bits+0x56>
 801c308:	6013      	str	r3, [r2, #0]
 801c30a:	4770      	bx	lr
 801c30c:	2000      	movs	r0, #0
 801c30e:	4770      	bx	lr
 801c310:	2020      	movs	r0, #32
 801c312:	4770      	bx	lr

0801c314 <__i2b>:
 801c314:	b510      	push	{r4, lr}
 801c316:	460c      	mov	r4, r1
 801c318:	2101      	movs	r1, #1
 801c31a:	f7ff ff05 	bl	801c128 <_Balloc>
 801c31e:	4602      	mov	r2, r0
 801c320:	b928      	cbnz	r0, 801c32e <__i2b+0x1a>
 801c322:	4b05      	ldr	r3, [pc, #20]	@ (801c338 <__i2b+0x24>)
 801c324:	f240 1145 	movw	r1, #325	@ 0x145
 801c328:	4804      	ldr	r0, [pc, #16]	@ (801c33c <__i2b+0x28>)
 801c32a:	f000 fe79 	bl	801d020 <__assert_func>
 801c32e:	2301      	movs	r3, #1
 801c330:	6144      	str	r4, [r0, #20]
 801c332:	6103      	str	r3, [r0, #16]
 801c334:	bd10      	pop	{r4, pc}
 801c336:	bf00      	nop
 801c338:	08025654 	.word	0x08025654
 801c33c:	08025665 	.word	0x08025665

0801c340 <__multiply>:
 801c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c344:	4614      	mov	r4, r2
 801c346:	690a      	ldr	r2, [r1, #16]
 801c348:	460f      	mov	r7, r1
 801c34a:	b085      	sub	sp, #20
 801c34c:	6923      	ldr	r3, [r4, #16]
 801c34e:	429a      	cmp	r2, r3
 801c350:	bfa2      	ittt	ge
 801c352:	4623      	movge	r3, r4
 801c354:	460c      	movge	r4, r1
 801c356:	461f      	movge	r7, r3
 801c358:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801c35c:	68a3      	ldr	r3, [r4, #8]
 801c35e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801c362:	6861      	ldr	r1, [r4, #4]
 801c364:	eb0a 0609 	add.w	r6, sl, r9
 801c368:	42b3      	cmp	r3, r6
 801c36a:	bfb8      	it	lt
 801c36c:	3101      	addlt	r1, #1
 801c36e:	f7ff fedb 	bl	801c128 <_Balloc>
 801c372:	b930      	cbnz	r0, 801c382 <__multiply+0x42>
 801c374:	4602      	mov	r2, r0
 801c376:	4b45      	ldr	r3, [pc, #276]	@ (801c48c <__multiply+0x14c>)
 801c378:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c37c:	4844      	ldr	r0, [pc, #272]	@ (801c490 <__multiply+0x150>)
 801c37e:	f000 fe4f 	bl	801d020 <__assert_func>
 801c382:	f100 0514 	add.w	r5, r0, #20
 801c386:	2200      	movs	r2, #0
 801c388:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c38c:	462b      	mov	r3, r5
 801c38e:	4543      	cmp	r3, r8
 801c390:	d321      	bcc.n	801c3d6 <__multiply+0x96>
 801c392:	f107 0114 	add.w	r1, r7, #20
 801c396:	f104 0214 	add.w	r2, r4, #20
 801c39a:	f104 0715 	add.w	r7, r4, #21
 801c39e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801c3a2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801c3a6:	9302      	str	r3, [sp, #8]
 801c3a8:	1b13      	subs	r3, r2, r4
 801c3aa:	3b15      	subs	r3, #21
 801c3ac:	f023 0303 	bic.w	r3, r3, #3
 801c3b0:	3304      	adds	r3, #4
 801c3b2:	42ba      	cmp	r2, r7
 801c3b4:	bf38      	it	cc
 801c3b6:	2304      	movcc	r3, #4
 801c3b8:	9301      	str	r3, [sp, #4]
 801c3ba:	9b02      	ldr	r3, [sp, #8]
 801c3bc:	9103      	str	r1, [sp, #12]
 801c3be:	428b      	cmp	r3, r1
 801c3c0:	d80c      	bhi.n	801c3dc <__multiply+0x9c>
 801c3c2:	2e00      	cmp	r6, #0
 801c3c4:	dd03      	ble.n	801c3ce <__multiply+0x8e>
 801c3c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d05b      	beq.n	801c486 <__multiply+0x146>
 801c3ce:	6106      	str	r6, [r0, #16]
 801c3d0:	b005      	add	sp, #20
 801c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3d6:	f843 2b04 	str.w	r2, [r3], #4
 801c3da:	e7d8      	b.n	801c38e <__multiply+0x4e>
 801c3dc:	f8b1 a000 	ldrh.w	sl, [r1]
 801c3e0:	f1ba 0f00 	cmp.w	sl, #0
 801c3e4:	d024      	beq.n	801c430 <__multiply+0xf0>
 801c3e6:	f104 0e14 	add.w	lr, r4, #20
 801c3ea:	46a9      	mov	r9, r5
 801c3ec:	f04f 0c00 	mov.w	ip, #0
 801c3f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c3f4:	f8d9 3000 	ldr.w	r3, [r9]
 801c3f8:	fa1f fb87 	uxth.w	fp, r7
 801c3fc:	4572      	cmp	r2, lr
 801c3fe:	b29b      	uxth	r3, r3
 801c400:	fb0a 330b 	mla	r3, sl, fp, r3
 801c404:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801c408:	f8d9 7000 	ldr.w	r7, [r9]
 801c40c:	4463      	add	r3, ip
 801c40e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c412:	fb0a c70b 	mla	r7, sl, fp, ip
 801c416:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801c41a:	b29b      	uxth	r3, r3
 801c41c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c420:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c424:	f849 3b04 	str.w	r3, [r9], #4
 801c428:	d8e2      	bhi.n	801c3f0 <__multiply+0xb0>
 801c42a:	9b01      	ldr	r3, [sp, #4]
 801c42c:	f845 c003 	str.w	ip, [r5, r3]
 801c430:	9b03      	ldr	r3, [sp, #12]
 801c432:	3104      	adds	r1, #4
 801c434:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c438:	f1b9 0f00 	cmp.w	r9, #0
 801c43c:	d021      	beq.n	801c482 <__multiply+0x142>
 801c43e:	682b      	ldr	r3, [r5, #0]
 801c440:	f104 0c14 	add.w	ip, r4, #20
 801c444:	46ae      	mov	lr, r5
 801c446:	f04f 0a00 	mov.w	sl, #0
 801c44a:	f8bc b000 	ldrh.w	fp, [ip]
 801c44e:	b29b      	uxth	r3, r3
 801c450:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801c454:	fb09 770b 	mla	r7, r9, fp, r7
 801c458:	4457      	add	r7, sl
 801c45a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c45e:	f84e 3b04 	str.w	r3, [lr], #4
 801c462:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c466:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c46a:	f8be 3000 	ldrh.w	r3, [lr]
 801c46e:	4562      	cmp	r2, ip
 801c470:	fb09 330a 	mla	r3, r9, sl, r3
 801c474:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801c478:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c47c:	d8e5      	bhi.n	801c44a <__multiply+0x10a>
 801c47e:	9f01      	ldr	r7, [sp, #4]
 801c480:	51eb      	str	r3, [r5, r7]
 801c482:	3504      	adds	r5, #4
 801c484:	e799      	b.n	801c3ba <__multiply+0x7a>
 801c486:	3e01      	subs	r6, #1
 801c488:	e79b      	b.n	801c3c2 <__multiply+0x82>
 801c48a:	bf00      	nop
 801c48c:	08025654 	.word	0x08025654
 801c490:	08025665 	.word	0x08025665

0801c494 <__pow5mult>:
 801c494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c498:	4615      	mov	r5, r2
 801c49a:	f012 0203 	ands.w	r2, r2, #3
 801c49e:	4607      	mov	r7, r0
 801c4a0:	460e      	mov	r6, r1
 801c4a2:	d007      	beq.n	801c4b4 <__pow5mult+0x20>
 801c4a4:	3a01      	subs	r2, #1
 801c4a6:	4c25      	ldr	r4, [pc, #148]	@ (801c53c <__pow5mult+0xa8>)
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c4ae:	f7ff fe9d 	bl	801c1ec <__multadd>
 801c4b2:	4606      	mov	r6, r0
 801c4b4:	10ad      	asrs	r5, r5, #2
 801c4b6:	d03d      	beq.n	801c534 <__pow5mult+0xa0>
 801c4b8:	69fc      	ldr	r4, [r7, #28]
 801c4ba:	b97c      	cbnz	r4, 801c4dc <__pow5mult+0x48>
 801c4bc:	2010      	movs	r0, #16
 801c4be:	f7ff fd7d 	bl	801bfbc <malloc>
 801c4c2:	4602      	mov	r2, r0
 801c4c4:	61f8      	str	r0, [r7, #28]
 801c4c6:	b928      	cbnz	r0, 801c4d4 <__pow5mult+0x40>
 801c4c8:	4b1d      	ldr	r3, [pc, #116]	@ (801c540 <__pow5mult+0xac>)
 801c4ca:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c4ce:	481d      	ldr	r0, [pc, #116]	@ (801c544 <__pow5mult+0xb0>)
 801c4d0:	f000 fda6 	bl	801d020 <__assert_func>
 801c4d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c4d8:	6004      	str	r4, [r0, #0]
 801c4da:	60c4      	str	r4, [r0, #12]
 801c4dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c4e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c4e4:	b94c      	cbnz	r4, 801c4fa <__pow5mult+0x66>
 801c4e6:	f240 2171 	movw	r1, #625	@ 0x271
 801c4ea:	4638      	mov	r0, r7
 801c4ec:	f7ff ff12 	bl	801c314 <__i2b>
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	4604      	mov	r4, r0
 801c4f4:	f8c8 0008 	str.w	r0, [r8, #8]
 801c4f8:	6003      	str	r3, [r0, #0]
 801c4fa:	f04f 0900 	mov.w	r9, #0
 801c4fe:	07eb      	lsls	r3, r5, #31
 801c500:	d50a      	bpl.n	801c518 <__pow5mult+0x84>
 801c502:	4631      	mov	r1, r6
 801c504:	4622      	mov	r2, r4
 801c506:	4638      	mov	r0, r7
 801c508:	f7ff ff1a 	bl	801c340 <__multiply>
 801c50c:	4680      	mov	r8, r0
 801c50e:	4631      	mov	r1, r6
 801c510:	4638      	mov	r0, r7
 801c512:	4646      	mov	r6, r8
 801c514:	f7ff fe48 	bl	801c1a8 <_Bfree>
 801c518:	106d      	asrs	r5, r5, #1
 801c51a:	d00b      	beq.n	801c534 <__pow5mult+0xa0>
 801c51c:	6820      	ldr	r0, [r4, #0]
 801c51e:	b938      	cbnz	r0, 801c530 <__pow5mult+0x9c>
 801c520:	4622      	mov	r2, r4
 801c522:	4621      	mov	r1, r4
 801c524:	4638      	mov	r0, r7
 801c526:	f7ff ff0b 	bl	801c340 <__multiply>
 801c52a:	6020      	str	r0, [r4, #0]
 801c52c:	f8c0 9000 	str.w	r9, [r0]
 801c530:	4604      	mov	r4, r0
 801c532:	e7e4      	b.n	801c4fe <__pow5mult+0x6a>
 801c534:	4630      	mov	r0, r6
 801c536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c53a:	bf00      	nop
 801c53c:	080256c0 	.word	0x080256c0
 801c540:	080255e5 	.word	0x080255e5
 801c544:	08025665 	.word	0x08025665

0801c548 <__lshift>:
 801c548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c54c:	460c      	mov	r4, r1
 801c54e:	4607      	mov	r7, r0
 801c550:	4691      	mov	r9, r2
 801c552:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c556:	6923      	ldr	r3, [r4, #16]
 801c558:	6849      	ldr	r1, [r1, #4]
 801c55a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c55e:	68a3      	ldr	r3, [r4, #8]
 801c560:	f108 0601 	add.w	r6, r8, #1
 801c564:	42b3      	cmp	r3, r6
 801c566:	db0b      	blt.n	801c580 <__lshift+0x38>
 801c568:	4638      	mov	r0, r7
 801c56a:	f7ff fddd 	bl	801c128 <_Balloc>
 801c56e:	4605      	mov	r5, r0
 801c570:	b948      	cbnz	r0, 801c586 <__lshift+0x3e>
 801c572:	4602      	mov	r2, r0
 801c574:	4b28      	ldr	r3, [pc, #160]	@ (801c618 <__lshift+0xd0>)
 801c576:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c57a:	4828      	ldr	r0, [pc, #160]	@ (801c61c <__lshift+0xd4>)
 801c57c:	f000 fd50 	bl	801d020 <__assert_func>
 801c580:	3101      	adds	r1, #1
 801c582:	005b      	lsls	r3, r3, #1
 801c584:	e7ee      	b.n	801c564 <__lshift+0x1c>
 801c586:	2300      	movs	r3, #0
 801c588:	f100 0114 	add.w	r1, r0, #20
 801c58c:	f100 0210 	add.w	r2, r0, #16
 801c590:	4618      	mov	r0, r3
 801c592:	4553      	cmp	r3, sl
 801c594:	db33      	blt.n	801c5fe <__lshift+0xb6>
 801c596:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c59a:	f104 0314 	add.w	r3, r4, #20
 801c59e:	6920      	ldr	r0, [r4, #16]
 801c5a0:	f019 091f 	ands.w	r9, r9, #31
 801c5a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c5a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c5ac:	d02b      	beq.n	801c606 <__lshift+0xbe>
 801c5ae:	f1c9 0e20 	rsb	lr, r9, #32
 801c5b2:	468a      	mov	sl, r1
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	6818      	ldr	r0, [r3, #0]
 801c5b8:	fa00 f009 	lsl.w	r0, r0, r9
 801c5bc:	4310      	orrs	r0, r2
 801c5be:	f84a 0b04 	str.w	r0, [sl], #4
 801c5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5c6:	459c      	cmp	ip, r3
 801c5c8:	fa22 f20e 	lsr.w	r2, r2, lr
 801c5cc:	d8f3      	bhi.n	801c5b6 <__lshift+0x6e>
 801c5ce:	ebac 0304 	sub.w	r3, ip, r4
 801c5d2:	f104 0015 	add.w	r0, r4, #21
 801c5d6:	3b15      	subs	r3, #21
 801c5d8:	f023 0303 	bic.w	r3, r3, #3
 801c5dc:	3304      	adds	r3, #4
 801c5de:	4584      	cmp	ip, r0
 801c5e0:	bf38      	it	cc
 801c5e2:	2304      	movcc	r3, #4
 801c5e4:	50ca      	str	r2, [r1, r3]
 801c5e6:	b10a      	cbz	r2, 801c5ec <__lshift+0xa4>
 801c5e8:	f108 0602 	add.w	r6, r8, #2
 801c5ec:	3e01      	subs	r6, #1
 801c5ee:	4638      	mov	r0, r7
 801c5f0:	4621      	mov	r1, r4
 801c5f2:	612e      	str	r6, [r5, #16]
 801c5f4:	f7ff fdd8 	bl	801c1a8 <_Bfree>
 801c5f8:	4628      	mov	r0, r5
 801c5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5fe:	3301      	adds	r3, #1
 801c600:	f842 0f04 	str.w	r0, [r2, #4]!
 801c604:	e7c5      	b.n	801c592 <__lshift+0x4a>
 801c606:	3904      	subs	r1, #4
 801c608:	f853 2b04 	ldr.w	r2, [r3], #4
 801c60c:	459c      	cmp	ip, r3
 801c60e:	f841 2f04 	str.w	r2, [r1, #4]!
 801c612:	d8f9      	bhi.n	801c608 <__lshift+0xc0>
 801c614:	e7ea      	b.n	801c5ec <__lshift+0xa4>
 801c616:	bf00      	nop
 801c618:	08025654 	.word	0x08025654
 801c61c:	08025665 	.word	0x08025665

0801c620 <__mcmp>:
 801c620:	4603      	mov	r3, r0
 801c622:	690a      	ldr	r2, [r1, #16]
 801c624:	6900      	ldr	r0, [r0, #16]
 801c626:	1a80      	subs	r0, r0, r2
 801c628:	b530      	push	{r4, r5, lr}
 801c62a:	d10e      	bne.n	801c64a <__mcmp+0x2a>
 801c62c:	3314      	adds	r3, #20
 801c62e:	3114      	adds	r1, #20
 801c630:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c634:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c638:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c63c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c640:	4295      	cmp	r5, r2
 801c642:	d003      	beq.n	801c64c <__mcmp+0x2c>
 801c644:	d205      	bcs.n	801c652 <__mcmp+0x32>
 801c646:	f04f 30ff 	mov.w	r0, #4294967295
 801c64a:	bd30      	pop	{r4, r5, pc}
 801c64c:	42a3      	cmp	r3, r4
 801c64e:	d3f3      	bcc.n	801c638 <__mcmp+0x18>
 801c650:	e7fb      	b.n	801c64a <__mcmp+0x2a>
 801c652:	2001      	movs	r0, #1
 801c654:	e7f9      	b.n	801c64a <__mcmp+0x2a>
	...

0801c658 <__mdiff>:
 801c658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c65c:	4689      	mov	r9, r1
 801c65e:	4606      	mov	r6, r0
 801c660:	4611      	mov	r1, r2
 801c662:	4614      	mov	r4, r2
 801c664:	4648      	mov	r0, r9
 801c666:	f7ff ffdb 	bl	801c620 <__mcmp>
 801c66a:	1e05      	subs	r5, r0, #0
 801c66c:	d112      	bne.n	801c694 <__mdiff+0x3c>
 801c66e:	4629      	mov	r1, r5
 801c670:	4630      	mov	r0, r6
 801c672:	f7ff fd59 	bl	801c128 <_Balloc>
 801c676:	4602      	mov	r2, r0
 801c678:	b928      	cbnz	r0, 801c686 <__mdiff+0x2e>
 801c67a:	4b41      	ldr	r3, [pc, #260]	@ (801c780 <__mdiff+0x128>)
 801c67c:	f240 2137 	movw	r1, #567	@ 0x237
 801c680:	4840      	ldr	r0, [pc, #256]	@ (801c784 <__mdiff+0x12c>)
 801c682:	f000 fccd 	bl	801d020 <__assert_func>
 801c686:	2301      	movs	r3, #1
 801c688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c68c:	4610      	mov	r0, r2
 801c68e:	b003      	add	sp, #12
 801c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c694:	bfbc      	itt	lt
 801c696:	464b      	movlt	r3, r9
 801c698:	46a1      	movlt	r9, r4
 801c69a:	4630      	mov	r0, r6
 801c69c:	bfb8      	it	lt
 801c69e:	2501      	movlt	r5, #1
 801c6a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c6a4:	bfb4      	ite	lt
 801c6a6:	461c      	movlt	r4, r3
 801c6a8:	2500      	movge	r5, #0
 801c6aa:	f7ff fd3d 	bl	801c128 <_Balloc>
 801c6ae:	4602      	mov	r2, r0
 801c6b0:	b918      	cbnz	r0, 801c6ba <__mdiff+0x62>
 801c6b2:	4b33      	ldr	r3, [pc, #204]	@ (801c780 <__mdiff+0x128>)
 801c6b4:	f240 2145 	movw	r1, #581	@ 0x245
 801c6b8:	e7e2      	b.n	801c680 <__mdiff+0x28>
 801c6ba:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c6be:	f104 0e14 	add.w	lr, r4, #20
 801c6c2:	6926      	ldr	r6, [r4, #16]
 801c6c4:	f100 0b14 	add.w	fp, r0, #20
 801c6c8:	60c5      	str	r5, [r0, #12]
 801c6ca:	f109 0514 	add.w	r5, r9, #20
 801c6ce:	f109 0310 	add.w	r3, r9, #16
 801c6d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c6d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c6da:	46d9      	mov	r9, fp
 801c6dc:	f04f 0c00 	mov.w	ip, #0
 801c6e0:	9301      	str	r3, [sp, #4]
 801c6e2:	9b01      	ldr	r3, [sp, #4]
 801c6e4:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c6e8:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c6ec:	4576      	cmp	r6, lr
 801c6ee:	9301      	str	r3, [sp, #4]
 801c6f0:	fa1f f38a 	uxth.w	r3, sl
 801c6f4:	4619      	mov	r1, r3
 801c6f6:	b283      	uxth	r3, r0
 801c6f8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 801c6fc:	eba1 0303 	sub.w	r3, r1, r3
 801c700:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c704:	4463      	add	r3, ip
 801c706:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c70a:	b29b      	uxth	r3, r3
 801c70c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c710:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c714:	f849 3b04 	str.w	r3, [r9], #4
 801c718:	d8e3      	bhi.n	801c6e2 <__mdiff+0x8a>
 801c71a:	1b33      	subs	r3, r6, r4
 801c71c:	3415      	adds	r4, #21
 801c71e:	3b15      	subs	r3, #21
 801c720:	f023 0303 	bic.w	r3, r3, #3
 801c724:	3304      	adds	r3, #4
 801c726:	42a6      	cmp	r6, r4
 801c728:	bf38      	it	cc
 801c72a:	2304      	movcc	r3, #4
 801c72c:	441d      	add	r5, r3
 801c72e:	445b      	add	r3, fp
 801c730:	462c      	mov	r4, r5
 801c732:	461e      	mov	r6, r3
 801c734:	4544      	cmp	r4, r8
 801c736:	d30e      	bcc.n	801c756 <__mdiff+0xfe>
 801c738:	f108 0103 	add.w	r1, r8, #3
 801c73c:	1b49      	subs	r1, r1, r5
 801c73e:	3d03      	subs	r5, #3
 801c740:	f021 0103 	bic.w	r1, r1, #3
 801c744:	45a8      	cmp	r8, r5
 801c746:	bf38      	it	cc
 801c748:	2100      	movcc	r1, #0
 801c74a:	440b      	add	r3, r1
 801c74c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c750:	b199      	cbz	r1, 801c77a <__mdiff+0x122>
 801c752:	6117      	str	r7, [r2, #16]
 801c754:	e79a      	b.n	801c68c <__mdiff+0x34>
 801c756:	f854 1b04 	ldr.w	r1, [r4], #4
 801c75a:	46e6      	mov	lr, ip
 801c75c:	fa1f fc81 	uxth.w	ip, r1
 801c760:	0c08      	lsrs	r0, r1, #16
 801c762:	4471      	add	r1, lr
 801c764:	44f4      	add	ip, lr
 801c766:	b289      	uxth	r1, r1
 801c768:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c76c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c770:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c774:	f846 1b04 	str.w	r1, [r6], #4
 801c778:	e7dc      	b.n	801c734 <__mdiff+0xdc>
 801c77a:	3f01      	subs	r7, #1
 801c77c:	e7e6      	b.n	801c74c <__mdiff+0xf4>
 801c77e:	bf00      	nop
 801c780:	08025654 	.word	0x08025654
 801c784:	08025665 	.word	0x08025665

0801c788 <__d2b>:
 801c788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c78c:	460f      	mov	r7, r1
 801c78e:	2101      	movs	r1, #1
 801c790:	4616      	mov	r6, r2
 801c792:	ec59 8b10 	vmov	r8, r9, d0
 801c796:	f7ff fcc7 	bl	801c128 <_Balloc>
 801c79a:	4604      	mov	r4, r0
 801c79c:	b930      	cbnz	r0, 801c7ac <__d2b+0x24>
 801c79e:	4602      	mov	r2, r0
 801c7a0:	4b23      	ldr	r3, [pc, #140]	@ (801c830 <__d2b+0xa8>)
 801c7a2:	f240 310f 	movw	r1, #783	@ 0x30f
 801c7a6:	4823      	ldr	r0, [pc, #140]	@ (801c834 <__d2b+0xac>)
 801c7a8:	f000 fc3a 	bl	801d020 <__assert_func>
 801c7ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c7b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c7b4:	b10d      	cbz	r5, 801c7ba <__d2b+0x32>
 801c7b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c7ba:	9301      	str	r3, [sp, #4]
 801c7bc:	f1b8 0300 	subs.w	r3, r8, #0
 801c7c0:	d023      	beq.n	801c80a <__d2b+0x82>
 801c7c2:	4668      	mov	r0, sp
 801c7c4:	9300      	str	r3, [sp, #0]
 801c7c6:	f7ff fd78 	bl	801c2ba <__lo0bits>
 801c7ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c7ce:	b1d0      	cbz	r0, 801c806 <__d2b+0x7e>
 801c7d0:	f1c0 0320 	rsb	r3, r0, #32
 801c7d4:	fa02 f303 	lsl.w	r3, r2, r3
 801c7d8:	40c2      	lsrs	r2, r0
 801c7da:	430b      	orrs	r3, r1
 801c7dc:	9201      	str	r2, [sp, #4]
 801c7de:	6163      	str	r3, [r4, #20]
 801c7e0:	9b01      	ldr	r3, [sp, #4]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	61a3      	str	r3, [r4, #24]
 801c7e6:	bf0c      	ite	eq
 801c7e8:	2201      	moveq	r2, #1
 801c7ea:	2202      	movne	r2, #2
 801c7ec:	6122      	str	r2, [r4, #16]
 801c7ee:	b1a5      	cbz	r5, 801c81a <__d2b+0x92>
 801c7f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c7f4:	4405      	add	r5, r0
 801c7f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c7fa:	603d      	str	r5, [r7, #0]
 801c7fc:	6030      	str	r0, [r6, #0]
 801c7fe:	4620      	mov	r0, r4
 801c800:	b003      	add	sp, #12
 801c802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c806:	6161      	str	r1, [r4, #20]
 801c808:	e7ea      	b.n	801c7e0 <__d2b+0x58>
 801c80a:	a801      	add	r0, sp, #4
 801c80c:	f7ff fd55 	bl	801c2ba <__lo0bits>
 801c810:	9b01      	ldr	r3, [sp, #4]
 801c812:	3020      	adds	r0, #32
 801c814:	2201      	movs	r2, #1
 801c816:	6163      	str	r3, [r4, #20]
 801c818:	e7e8      	b.n	801c7ec <__d2b+0x64>
 801c81a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c81e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c822:	6038      	str	r0, [r7, #0]
 801c824:	6918      	ldr	r0, [r3, #16]
 801c826:	f7ff fd29 	bl	801c27c <__hi0bits>
 801c82a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c82e:	e7e5      	b.n	801c7fc <__d2b+0x74>
 801c830:	08025654 	.word	0x08025654
 801c834:	08025665 	.word	0x08025665

0801c838 <__ssputs_r>:
 801c838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c83c:	461f      	mov	r7, r3
 801c83e:	688e      	ldr	r6, [r1, #8]
 801c840:	4682      	mov	sl, r0
 801c842:	460c      	mov	r4, r1
 801c844:	42be      	cmp	r6, r7
 801c846:	4690      	mov	r8, r2
 801c848:	680b      	ldr	r3, [r1, #0]
 801c84a:	d82d      	bhi.n	801c8a8 <__ssputs_r+0x70>
 801c84c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c854:	d026      	beq.n	801c8a4 <__ssputs_r+0x6c>
 801c856:	6965      	ldr	r5, [r4, #20]
 801c858:	6909      	ldr	r1, [r1, #16]
 801c85a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c85e:	eba3 0901 	sub.w	r9, r3, r1
 801c862:	1c7b      	adds	r3, r7, #1
 801c864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c868:	444b      	add	r3, r9
 801c86a:	106d      	asrs	r5, r5, #1
 801c86c:	429d      	cmp	r5, r3
 801c86e:	bf38      	it	cc
 801c870:	461d      	movcc	r5, r3
 801c872:	0553      	lsls	r3, r2, #21
 801c874:	d527      	bpl.n	801c8c6 <__ssputs_r+0x8e>
 801c876:	4629      	mov	r1, r5
 801c878:	f7ff fbca 	bl	801c010 <_malloc_r>
 801c87c:	4606      	mov	r6, r0
 801c87e:	b360      	cbz	r0, 801c8da <__ssputs_r+0xa2>
 801c880:	464a      	mov	r2, r9
 801c882:	6921      	ldr	r1, [r4, #16]
 801c884:	f7fe fcf1 	bl	801b26a <memcpy>
 801c888:	89a3      	ldrh	r3, [r4, #12]
 801c88a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c892:	81a3      	strh	r3, [r4, #12]
 801c894:	6126      	str	r6, [r4, #16]
 801c896:	444e      	add	r6, r9
 801c898:	6165      	str	r5, [r4, #20]
 801c89a:	eba5 0509 	sub.w	r5, r5, r9
 801c89e:	6026      	str	r6, [r4, #0]
 801c8a0:	463e      	mov	r6, r7
 801c8a2:	60a5      	str	r5, [r4, #8]
 801c8a4:	42be      	cmp	r6, r7
 801c8a6:	d900      	bls.n	801c8aa <__ssputs_r+0x72>
 801c8a8:	463e      	mov	r6, r7
 801c8aa:	4632      	mov	r2, r6
 801c8ac:	4641      	mov	r1, r8
 801c8ae:	6820      	ldr	r0, [r4, #0]
 801c8b0:	f000 fb69 	bl	801cf86 <memmove>
 801c8b4:	68a3      	ldr	r3, [r4, #8]
 801c8b6:	2000      	movs	r0, #0
 801c8b8:	1b9b      	subs	r3, r3, r6
 801c8ba:	60a3      	str	r3, [r4, #8]
 801c8bc:	6823      	ldr	r3, [r4, #0]
 801c8be:	4433      	add	r3, r6
 801c8c0:	6023      	str	r3, [r4, #0]
 801c8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8c6:	462a      	mov	r2, r5
 801c8c8:	f000 fbee 	bl	801d0a8 <_realloc_r>
 801c8cc:	4606      	mov	r6, r0
 801c8ce:	2800      	cmp	r0, #0
 801c8d0:	d1e0      	bne.n	801c894 <__ssputs_r+0x5c>
 801c8d2:	6921      	ldr	r1, [r4, #16]
 801c8d4:	4650      	mov	r0, sl
 801c8d6:	f7ff fb27 	bl	801bf28 <_free_r>
 801c8da:	230c      	movs	r3, #12
 801c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c8e0:	f8ca 3000 	str.w	r3, [sl]
 801c8e4:	89a3      	ldrh	r3, [r4, #12]
 801c8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c8ea:	81a3      	strh	r3, [r4, #12]
 801c8ec:	e7e9      	b.n	801c8c2 <__ssputs_r+0x8a>
	...

0801c8f0 <_svfiprintf_r>:
 801c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8f4:	4698      	mov	r8, r3
 801c8f6:	898b      	ldrh	r3, [r1, #12]
 801c8f8:	b09d      	sub	sp, #116	@ 0x74
 801c8fa:	4607      	mov	r7, r0
 801c8fc:	061b      	lsls	r3, r3, #24
 801c8fe:	460d      	mov	r5, r1
 801c900:	4614      	mov	r4, r2
 801c902:	d510      	bpl.n	801c926 <_svfiprintf_r+0x36>
 801c904:	690b      	ldr	r3, [r1, #16]
 801c906:	b973      	cbnz	r3, 801c926 <_svfiprintf_r+0x36>
 801c908:	2140      	movs	r1, #64	@ 0x40
 801c90a:	f7ff fb81 	bl	801c010 <_malloc_r>
 801c90e:	6028      	str	r0, [r5, #0]
 801c910:	6128      	str	r0, [r5, #16]
 801c912:	b930      	cbnz	r0, 801c922 <_svfiprintf_r+0x32>
 801c914:	230c      	movs	r3, #12
 801c916:	603b      	str	r3, [r7, #0]
 801c918:	f04f 30ff 	mov.w	r0, #4294967295
 801c91c:	b01d      	add	sp, #116	@ 0x74
 801c91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c922:	2340      	movs	r3, #64	@ 0x40
 801c924:	616b      	str	r3, [r5, #20]
 801c926:	2300      	movs	r3, #0
 801c928:	f8cd 800c 	str.w	r8, [sp, #12]
 801c92c:	f04f 0901 	mov.w	r9, #1
 801c930:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 801cad4 <_svfiprintf_r+0x1e4>
 801c934:	9309      	str	r3, [sp, #36]	@ 0x24
 801c936:	2320      	movs	r3, #32
 801c938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c93c:	2330      	movs	r3, #48	@ 0x30
 801c93e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c942:	4623      	mov	r3, r4
 801c944:	469a      	mov	sl, r3
 801c946:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c94a:	b10a      	cbz	r2, 801c950 <_svfiprintf_r+0x60>
 801c94c:	2a25      	cmp	r2, #37	@ 0x25
 801c94e:	d1f9      	bne.n	801c944 <_svfiprintf_r+0x54>
 801c950:	ebba 0b04 	subs.w	fp, sl, r4
 801c954:	d00b      	beq.n	801c96e <_svfiprintf_r+0x7e>
 801c956:	465b      	mov	r3, fp
 801c958:	4622      	mov	r2, r4
 801c95a:	4629      	mov	r1, r5
 801c95c:	4638      	mov	r0, r7
 801c95e:	f7ff ff6b 	bl	801c838 <__ssputs_r>
 801c962:	3001      	adds	r0, #1
 801c964:	f000 80a7 	beq.w	801cab6 <_svfiprintf_r+0x1c6>
 801c968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c96a:	445a      	add	r2, fp
 801c96c:	9209      	str	r2, [sp, #36]	@ 0x24
 801c96e:	f89a 3000 	ldrb.w	r3, [sl]
 801c972:	2b00      	cmp	r3, #0
 801c974:	f000 809f 	beq.w	801cab6 <_svfiprintf_r+0x1c6>
 801c978:	2300      	movs	r3, #0
 801c97a:	f04f 32ff 	mov.w	r2, #4294967295
 801c97e:	f10a 0a01 	add.w	sl, sl, #1
 801c982:	9304      	str	r3, [sp, #16]
 801c984:	9307      	str	r3, [sp, #28]
 801c986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c98a:	931a      	str	r3, [sp, #104]	@ 0x68
 801c98c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c990:	4654      	mov	r4, sl
 801c992:	2205      	movs	r2, #5
 801c994:	484f      	ldr	r0, [pc, #316]	@ (801cad4 <_svfiprintf_r+0x1e4>)
 801c996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c99a:	f7fe fc58 	bl	801b24e <memchr>
 801c99e:	9a04      	ldr	r2, [sp, #16]
 801c9a0:	b9d8      	cbnz	r0, 801c9da <_svfiprintf_r+0xea>
 801c9a2:	06d0      	lsls	r0, r2, #27
 801c9a4:	bf44      	itt	mi
 801c9a6:	2320      	movmi	r3, #32
 801c9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c9ac:	0711      	lsls	r1, r2, #28
 801c9ae:	bf44      	itt	mi
 801c9b0:	232b      	movmi	r3, #43	@ 0x2b
 801c9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c9b6:	f89a 3000 	ldrb.w	r3, [sl]
 801c9ba:	2b2a      	cmp	r3, #42	@ 0x2a
 801c9bc:	d015      	beq.n	801c9ea <_svfiprintf_r+0xfa>
 801c9be:	9a07      	ldr	r2, [sp, #28]
 801c9c0:	4654      	mov	r4, sl
 801c9c2:	2000      	movs	r0, #0
 801c9c4:	f04f 0c0a 	mov.w	ip, #10
 801c9c8:	4621      	mov	r1, r4
 801c9ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c9ce:	3b30      	subs	r3, #48	@ 0x30
 801c9d0:	2b09      	cmp	r3, #9
 801c9d2:	d94b      	bls.n	801ca6c <_svfiprintf_r+0x17c>
 801c9d4:	b1b0      	cbz	r0, 801ca04 <_svfiprintf_r+0x114>
 801c9d6:	9207      	str	r2, [sp, #28]
 801c9d8:	e014      	b.n	801ca04 <_svfiprintf_r+0x114>
 801c9da:	eba0 0308 	sub.w	r3, r0, r8
 801c9de:	46a2      	mov	sl, r4
 801c9e0:	fa09 f303 	lsl.w	r3, r9, r3
 801c9e4:	4313      	orrs	r3, r2
 801c9e6:	9304      	str	r3, [sp, #16]
 801c9e8:	e7d2      	b.n	801c990 <_svfiprintf_r+0xa0>
 801c9ea:	9b03      	ldr	r3, [sp, #12]
 801c9ec:	1d19      	adds	r1, r3, #4
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	9103      	str	r1, [sp, #12]
 801c9f4:	bfbb      	ittet	lt
 801c9f6:	425b      	neglt	r3, r3
 801c9f8:	f042 0202 	orrlt.w	r2, r2, #2
 801c9fc:	9307      	strge	r3, [sp, #28]
 801c9fe:	9307      	strlt	r3, [sp, #28]
 801ca00:	bfb8      	it	lt
 801ca02:	9204      	strlt	r2, [sp, #16]
 801ca04:	7823      	ldrb	r3, [r4, #0]
 801ca06:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca08:	d10a      	bne.n	801ca20 <_svfiprintf_r+0x130>
 801ca0a:	7863      	ldrb	r3, [r4, #1]
 801ca0c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca0e:	d132      	bne.n	801ca76 <_svfiprintf_r+0x186>
 801ca10:	9b03      	ldr	r3, [sp, #12]
 801ca12:	3402      	adds	r4, #2
 801ca14:	1d1a      	adds	r2, r3, #4
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ca1c:	9203      	str	r2, [sp, #12]
 801ca1e:	9305      	str	r3, [sp, #20]
 801ca20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cae4 <_svfiprintf_r+0x1f4>
 801ca24:	2203      	movs	r2, #3
 801ca26:	7821      	ldrb	r1, [r4, #0]
 801ca28:	4650      	mov	r0, sl
 801ca2a:	f7fe fc10 	bl	801b24e <memchr>
 801ca2e:	b138      	cbz	r0, 801ca40 <_svfiprintf_r+0x150>
 801ca30:	eba0 000a 	sub.w	r0, r0, sl
 801ca34:	2240      	movs	r2, #64	@ 0x40
 801ca36:	9b04      	ldr	r3, [sp, #16]
 801ca38:	3401      	adds	r4, #1
 801ca3a:	4082      	lsls	r2, r0
 801ca3c:	4313      	orrs	r3, r2
 801ca3e:	9304      	str	r3, [sp, #16]
 801ca40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca44:	2206      	movs	r2, #6
 801ca46:	4824      	ldr	r0, [pc, #144]	@ (801cad8 <_svfiprintf_r+0x1e8>)
 801ca48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ca4c:	f7fe fbff 	bl	801b24e <memchr>
 801ca50:	2800      	cmp	r0, #0
 801ca52:	d036      	beq.n	801cac2 <_svfiprintf_r+0x1d2>
 801ca54:	4b21      	ldr	r3, [pc, #132]	@ (801cadc <_svfiprintf_r+0x1ec>)
 801ca56:	bb1b      	cbnz	r3, 801caa0 <_svfiprintf_r+0x1b0>
 801ca58:	9b03      	ldr	r3, [sp, #12]
 801ca5a:	3307      	adds	r3, #7
 801ca5c:	f023 0307 	bic.w	r3, r3, #7
 801ca60:	3308      	adds	r3, #8
 801ca62:	9303      	str	r3, [sp, #12]
 801ca64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca66:	4433      	add	r3, r6
 801ca68:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca6a:	e76a      	b.n	801c942 <_svfiprintf_r+0x52>
 801ca6c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca70:	460c      	mov	r4, r1
 801ca72:	2001      	movs	r0, #1
 801ca74:	e7a8      	b.n	801c9c8 <_svfiprintf_r+0xd8>
 801ca76:	2300      	movs	r3, #0
 801ca78:	3401      	adds	r4, #1
 801ca7a:	f04f 0c0a 	mov.w	ip, #10
 801ca7e:	4619      	mov	r1, r3
 801ca80:	9305      	str	r3, [sp, #20]
 801ca82:	4620      	mov	r0, r4
 801ca84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ca88:	3a30      	subs	r2, #48	@ 0x30
 801ca8a:	2a09      	cmp	r2, #9
 801ca8c:	d903      	bls.n	801ca96 <_svfiprintf_r+0x1a6>
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d0c6      	beq.n	801ca20 <_svfiprintf_r+0x130>
 801ca92:	9105      	str	r1, [sp, #20]
 801ca94:	e7c4      	b.n	801ca20 <_svfiprintf_r+0x130>
 801ca96:	fb0c 2101 	mla	r1, ip, r1, r2
 801ca9a:	4604      	mov	r4, r0
 801ca9c:	2301      	movs	r3, #1
 801ca9e:	e7f0      	b.n	801ca82 <_svfiprintf_r+0x192>
 801caa0:	ab03      	add	r3, sp, #12
 801caa2:	462a      	mov	r2, r5
 801caa4:	a904      	add	r1, sp, #16
 801caa6:	4638      	mov	r0, r7
 801caa8:	9300      	str	r3, [sp, #0]
 801caaa:	4b0d      	ldr	r3, [pc, #52]	@ (801cae0 <_svfiprintf_r+0x1f0>)
 801caac:	f7fd fd42 	bl	801a534 <_printf_float>
 801cab0:	1c42      	adds	r2, r0, #1
 801cab2:	4606      	mov	r6, r0
 801cab4:	d1d6      	bne.n	801ca64 <_svfiprintf_r+0x174>
 801cab6:	89ab      	ldrh	r3, [r5, #12]
 801cab8:	065b      	lsls	r3, r3, #25
 801caba:	f53f af2d 	bmi.w	801c918 <_svfiprintf_r+0x28>
 801cabe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cac0:	e72c      	b.n	801c91c <_svfiprintf_r+0x2c>
 801cac2:	ab03      	add	r3, sp, #12
 801cac4:	462a      	mov	r2, r5
 801cac6:	a904      	add	r1, sp, #16
 801cac8:	4638      	mov	r0, r7
 801caca:	9300      	str	r3, [sp, #0]
 801cacc:	4b04      	ldr	r3, [pc, #16]	@ (801cae0 <_svfiprintf_r+0x1f0>)
 801cace:	f7fd ffcd 	bl	801aa6c <_printf_i>
 801cad2:	e7ed      	b.n	801cab0 <_svfiprintf_r+0x1c0>
 801cad4:	080257c0 	.word	0x080257c0
 801cad8:	080257ca 	.word	0x080257ca
 801cadc:	0801a535 	.word	0x0801a535
 801cae0:	0801c839 	.word	0x0801c839
 801cae4:	080257c6 	.word	0x080257c6

0801cae8 <__sfputc_r>:
 801cae8:	6893      	ldr	r3, [r2, #8]
 801caea:	3b01      	subs	r3, #1
 801caec:	2b00      	cmp	r3, #0
 801caee:	6093      	str	r3, [r2, #8]
 801caf0:	b410      	push	{r4}
 801caf2:	da08      	bge.n	801cb06 <__sfputc_r+0x1e>
 801caf4:	6994      	ldr	r4, [r2, #24]
 801caf6:	42a3      	cmp	r3, r4
 801caf8:	db01      	blt.n	801cafe <__sfputc_r+0x16>
 801cafa:	290a      	cmp	r1, #10
 801cafc:	d103      	bne.n	801cb06 <__sfputc_r+0x1e>
 801cafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb02:	f7fe ba7c 	b.w	801affe <__swbuf_r>
 801cb06:	6813      	ldr	r3, [r2, #0]
 801cb08:	1c58      	adds	r0, r3, #1
 801cb0a:	6010      	str	r0, [r2, #0]
 801cb0c:	4608      	mov	r0, r1
 801cb0e:	7019      	strb	r1, [r3, #0]
 801cb10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb14:	4770      	bx	lr

0801cb16 <__sfputs_r>:
 801cb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb18:	4606      	mov	r6, r0
 801cb1a:	460f      	mov	r7, r1
 801cb1c:	4614      	mov	r4, r2
 801cb1e:	18d5      	adds	r5, r2, r3
 801cb20:	42ac      	cmp	r4, r5
 801cb22:	d101      	bne.n	801cb28 <__sfputs_r+0x12>
 801cb24:	2000      	movs	r0, #0
 801cb26:	e007      	b.n	801cb38 <__sfputs_r+0x22>
 801cb28:	463a      	mov	r2, r7
 801cb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb2e:	4630      	mov	r0, r6
 801cb30:	f7ff ffda 	bl	801cae8 <__sfputc_r>
 801cb34:	1c43      	adds	r3, r0, #1
 801cb36:	d1f3      	bne.n	801cb20 <__sfputs_r+0xa>
 801cb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cb3c <_vfiprintf_r>:
 801cb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb40:	460d      	mov	r5, r1
 801cb42:	b09d      	sub	sp, #116	@ 0x74
 801cb44:	4614      	mov	r4, r2
 801cb46:	4698      	mov	r8, r3
 801cb48:	4606      	mov	r6, r0
 801cb4a:	b118      	cbz	r0, 801cb54 <_vfiprintf_r+0x18>
 801cb4c:	6a03      	ldr	r3, [r0, #32]
 801cb4e:	b90b      	cbnz	r3, 801cb54 <_vfiprintf_r+0x18>
 801cb50:	f7fe f938 	bl	801adc4 <__sinit>
 801cb54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cb56:	07d9      	lsls	r1, r3, #31
 801cb58:	d405      	bmi.n	801cb66 <_vfiprintf_r+0x2a>
 801cb5a:	89ab      	ldrh	r3, [r5, #12]
 801cb5c:	059a      	lsls	r2, r3, #22
 801cb5e:	d402      	bmi.n	801cb66 <_vfiprintf_r+0x2a>
 801cb60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb62:	f7fe fb72 	bl	801b24a <__retarget_lock_acquire_recursive>
 801cb66:	89ab      	ldrh	r3, [r5, #12]
 801cb68:	071b      	lsls	r3, r3, #28
 801cb6a:	d501      	bpl.n	801cb70 <_vfiprintf_r+0x34>
 801cb6c:	692b      	ldr	r3, [r5, #16]
 801cb6e:	b99b      	cbnz	r3, 801cb98 <_vfiprintf_r+0x5c>
 801cb70:	4629      	mov	r1, r5
 801cb72:	4630      	mov	r0, r6
 801cb74:	f7fe fa82 	bl	801b07c <__swsetup_r>
 801cb78:	b170      	cbz	r0, 801cb98 <_vfiprintf_r+0x5c>
 801cb7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cb7c:	07dc      	lsls	r4, r3, #31
 801cb7e:	d504      	bpl.n	801cb8a <_vfiprintf_r+0x4e>
 801cb80:	f04f 30ff 	mov.w	r0, #4294967295
 801cb84:	b01d      	add	sp, #116	@ 0x74
 801cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb8a:	89ab      	ldrh	r3, [r5, #12]
 801cb8c:	0598      	lsls	r0, r3, #22
 801cb8e:	d4f7      	bmi.n	801cb80 <_vfiprintf_r+0x44>
 801cb90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb92:	f7fe fb5b 	bl	801b24c <__retarget_lock_release_recursive>
 801cb96:	e7f3      	b.n	801cb80 <_vfiprintf_r+0x44>
 801cb98:	2300      	movs	r3, #0
 801cb9a:	f8cd 800c 	str.w	r8, [sp, #12]
 801cb9e:	f04f 0901 	mov.w	r9, #1
 801cba2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 801cd58 <_vfiprintf_r+0x21c>
 801cba6:	9309      	str	r3, [sp, #36]	@ 0x24
 801cba8:	2320      	movs	r3, #32
 801cbaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cbae:	2330      	movs	r3, #48	@ 0x30
 801cbb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cbb4:	4623      	mov	r3, r4
 801cbb6:	469a      	mov	sl, r3
 801cbb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbbc:	b10a      	cbz	r2, 801cbc2 <_vfiprintf_r+0x86>
 801cbbe:	2a25      	cmp	r2, #37	@ 0x25
 801cbc0:	d1f9      	bne.n	801cbb6 <_vfiprintf_r+0x7a>
 801cbc2:	ebba 0b04 	subs.w	fp, sl, r4
 801cbc6:	d00b      	beq.n	801cbe0 <_vfiprintf_r+0xa4>
 801cbc8:	465b      	mov	r3, fp
 801cbca:	4622      	mov	r2, r4
 801cbcc:	4629      	mov	r1, r5
 801cbce:	4630      	mov	r0, r6
 801cbd0:	f7ff ffa1 	bl	801cb16 <__sfputs_r>
 801cbd4:	3001      	adds	r0, #1
 801cbd6:	f000 80a7 	beq.w	801cd28 <_vfiprintf_r+0x1ec>
 801cbda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cbdc:	445a      	add	r2, fp
 801cbde:	9209      	str	r2, [sp, #36]	@ 0x24
 801cbe0:	f89a 3000 	ldrb.w	r3, [sl]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	f000 809f 	beq.w	801cd28 <_vfiprintf_r+0x1ec>
 801cbea:	2300      	movs	r3, #0
 801cbec:	f04f 32ff 	mov.w	r2, #4294967295
 801cbf0:	f10a 0a01 	add.w	sl, sl, #1
 801cbf4:	9304      	str	r3, [sp, #16]
 801cbf6:	9307      	str	r3, [sp, #28]
 801cbf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cbfc:	931a      	str	r3, [sp, #104]	@ 0x68
 801cbfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cc02:	4654      	mov	r4, sl
 801cc04:	2205      	movs	r2, #5
 801cc06:	4854      	ldr	r0, [pc, #336]	@ (801cd58 <_vfiprintf_r+0x21c>)
 801cc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc0c:	f7fe fb1f 	bl	801b24e <memchr>
 801cc10:	9a04      	ldr	r2, [sp, #16]
 801cc12:	b9d8      	cbnz	r0, 801cc4c <_vfiprintf_r+0x110>
 801cc14:	06d1      	lsls	r1, r2, #27
 801cc16:	bf44      	itt	mi
 801cc18:	2320      	movmi	r3, #32
 801cc1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cc1e:	0713      	lsls	r3, r2, #28
 801cc20:	bf44      	itt	mi
 801cc22:	232b      	movmi	r3, #43	@ 0x2b
 801cc24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cc28:	f89a 3000 	ldrb.w	r3, [sl]
 801cc2c:	2b2a      	cmp	r3, #42	@ 0x2a
 801cc2e:	d015      	beq.n	801cc5c <_vfiprintf_r+0x120>
 801cc30:	9a07      	ldr	r2, [sp, #28]
 801cc32:	4654      	mov	r4, sl
 801cc34:	2000      	movs	r0, #0
 801cc36:	f04f 0c0a 	mov.w	ip, #10
 801cc3a:	4621      	mov	r1, r4
 801cc3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cc40:	3b30      	subs	r3, #48	@ 0x30
 801cc42:	2b09      	cmp	r3, #9
 801cc44:	d94b      	bls.n	801ccde <_vfiprintf_r+0x1a2>
 801cc46:	b1b0      	cbz	r0, 801cc76 <_vfiprintf_r+0x13a>
 801cc48:	9207      	str	r2, [sp, #28]
 801cc4a:	e014      	b.n	801cc76 <_vfiprintf_r+0x13a>
 801cc4c:	eba0 0308 	sub.w	r3, r0, r8
 801cc50:	46a2      	mov	sl, r4
 801cc52:	fa09 f303 	lsl.w	r3, r9, r3
 801cc56:	4313      	orrs	r3, r2
 801cc58:	9304      	str	r3, [sp, #16]
 801cc5a:	e7d2      	b.n	801cc02 <_vfiprintf_r+0xc6>
 801cc5c:	9b03      	ldr	r3, [sp, #12]
 801cc5e:	1d19      	adds	r1, r3, #4
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	9103      	str	r1, [sp, #12]
 801cc66:	bfbb      	ittet	lt
 801cc68:	425b      	neglt	r3, r3
 801cc6a:	f042 0202 	orrlt.w	r2, r2, #2
 801cc6e:	9307      	strge	r3, [sp, #28]
 801cc70:	9307      	strlt	r3, [sp, #28]
 801cc72:	bfb8      	it	lt
 801cc74:	9204      	strlt	r2, [sp, #16]
 801cc76:	7823      	ldrb	r3, [r4, #0]
 801cc78:	2b2e      	cmp	r3, #46	@ 0x2e
 801cc7a:	d10a      	bne.n	801cc92 <_vfiprintf_r+0x156>
 801cc7c:	7863      	ldrb	r3, [r4, #1]
 801cc7e:	2b2a      	cmp	r3, #42	@ 0x2a
 801cc80:	d132      	bne.n	801cce8 <_vfiprintf_r+0x1ac>
 801cc82:	9b03      	ldr	r3, [sp, #12]
 801cc84:	3402      	adds	r4, #2
 801cc86:	1d1a      	adds	r2, r3, #4
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cc8e:	9203      	str	r2, [sp, #12]
 801cc90:	9305      	str	r3, [sp, #20]
 801cc92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cd68 <_vfiprintf_r+0x22c>
 801cc96:	2203      	movs	r2, #3
 801cc98:	7821      	ldrb	r1, [r4, #0]
 801cc9a:	4650      	mov	r0, sl
 801cc9c:	f7fe fad7 	bl	801b24e <memchr>
 801cca0:	b138      	cbz	r0, 801ccb2 <_vfiprintf_r+0x176>
 801cca2:	eba0 000a 	sub.w	r0, r0, sl
 801cca6:	2240      	movs	r2, #64	@ 0x40
 801cca8:	9b04      	ldr	r3, [sp, #16]
 801ccaa:	3401      	adds	r4, #1
 801ccac:	4082      	lsls	r2, r0
 801ccae:	4313      	orrs	r3, r2
 801ccb0:	9304      	str	r3, [sp, #16]
 801ccb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ccb6:	2206      	movs	r2, #6
 801ccb8:	4828      	ldr	r0, [pc, #160]	@ (801cd5c <_vfiprintf_r+0x220>)
 801ccba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ccbe:	f7fe fac6 	bl	801b24e <memchr>
 801ccc2:	2800      	cmp	r0, #0
 801ccc4:	d03f      	beq.n	801cd46 <_vfiprintf_r+0x20a>
 801ccc6:	4b26      	ldr	r3, [pc, #152]	@ (801cd60 <_vfiprintf_r+0x224>)
 801ccc8:	bb1b      	cbnz	r3, 801cd12 <_vfiprintf_r+0x1d6>
 801ccca:	9b03      	ldr	r3, [sp, #12]
 801cccc:	3307      	adds	r3, #7
 801ccce:	f023 0307 	bic.w	r3, r3, #7
 801ccd2:	3308      	adds	r3, #8
 801ccd4:	9303      	str	r3, [sp, #12]
 801ccd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccd8:	443b      	add	r3, r7
 801ccda:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccdc:	e76a      	b.n	801cbb4 <_vfiprintf_r+0x78>
 801ccde:	fb0c 3202 	mla	r2, ip, r2, r3
 801cce2:	460c      	mov	r4, r1
 801cce4:	2001      	movs	r0, #1
 801cce6:	e7a8      	b.n	801cc3a <_vfiprintf_r+0xfe>
 801cce8:	2300      	movs	r3, #0
 801ccea:	3401      	adds	r4, #1
 801ccec:	f04f 0c0a 	mov.w	ip, #10
 801ccf0:	4619      	mov	r1, r3
 801ccf2:	9305      	str	r3, [sp, #20]
 801ccf4:	4620      	mov	r0, r4
 801ccf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ccfa:	3a30      	subs	r2, #48	@ 0x30
 801ccfc:	2a09      	cmp	r2, #9
 801ccfe:	d903      	bls.n	801cd08 <_vfiprintf_r+0x1cc>
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d0c6      	beq.n	801cc92 <_vfiprintf_r+0x156>
 801cd04:	9105      	str	r1, [sp, #20]
 801cd06:	e7c4      	b.n	801cc92 <_vfiprintf_r+0x156>
 801cd08:	fb0c 2101 	mla	r1, ip, r1, r2
 801cd0c:	4604      	mov	r4, r0
 801cd0e:	2301      	movs	r3, #1
 801cd10:	e7f0      	b.n	801ccf4 <_vfiprintf_r+0x1b8>
 801cd12:	ab03      	add	r3, sp, #12
 801cd14:	462a      	mov	r2, r5
 801cd16:	a904      	add	r1, sp, #16
 801cd18:	4630      	mov	r0, r6
 801cd1a:	9300      	str	r3, [sp, #0]
 801cd1c:	4b11      	ldr	r3, [pc, #68]	@ (801cd64 <_vfiprintf_r+0x228>)
 801cd1e:	f7fd fc09 	bl	801a534 <_printf_float>
 801cd22:	4607      	mov	r7, r0
 801cd24:	1c78      	adds	r0, r7, #1
 801cd26:	d1d6      	bne.n	801ccd6 <_vfiprintf_r+0x19a>
 801cd28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cd2a:	07d9      	lsls	r1, r3, #31
 801cd2c:	d405      	bmi.n	801cd3a <_vfiprintf_r+0x1fe>
 801cd2e:	89ab      	ldrh	r3, [r5, #12]
 801cd30:	059a      	lsls	r2, r3, #22
 801cd32:	d402      	bmi.n	801cd3a <_vfiprintf_r+0x1fe>
 801cd34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cd36:	f7fe fa89 	bl	801b24c <__retarget_lock_release_recursive>
 801cd3a:	89ab      	ldrh	r3, [r5, #12]
 801cd3c:	065b      	lsls	r3, r3, #25
 801cd3e:	f53f af1f 	bmi.w	801cb80 <_vfiprintf_r+0x44>
 801cd42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cd44:	e71e      	b.n	801cb84 <_vfiprintf_r+0x48>
 801cd46:	ab03      	add	r3, sp, #12
 801cd48:	462a      	mov	r2, r5
 801cd4a:	a904      	add	r1, sp, #16
 801cd4c:	4630      	mov	r0, r6
 801cd4e:	9300      	str	r3, [sp, #0]
 801cd50:	4b04      	ldr	r3, [pc, #16]	@ (801cd64 <_vfiprintf_r+0x228>)
 801cd52:	f7fd fe8b 	bl	801aa6c <_printf_i>
 801cd56:	e7e4      	b.n	801cd22 <_vfiprintf_r+0x1e6>
 801cd58:	080257c0 	.word	0x080257c0
 801cd5c:	080257ca 	.word	0x080257ca
 801cd60:	0801a535 	.word	0x0801a535
 801cd64:	0801cb17 	.word	0x0801cb17
 801cd68:	080257c6 	.word	0x080257c6

0801cd6c <__sflush_r>:
 801cd6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd74:	0716      	lsls	r6, r2, #28
 801cd76:	4605      	mov	r5, r0
 801cd78:	460c      	mov	r4, r1
 801cd7a:	d454      	bmi.n	801ce26 <__sflush_r+0xba>
 801cd7c:	684b      	ldr	r3, [r1, #4]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	dc02      	bgt.n	801cd88 <__sflush_r+0x1c>
 801cd82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	dd48      	ble.n	801ce1a <__sflush_r+0xae>
 801cd88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cd8a:	2e00      	cmp	r6, #0
 801cd8c:	d045      	beq.n	801ce1a <__sflush_r+0xae>
 801cd8e:	2300      	movs	r3, #0
 801cd90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cd94:	682f      	ldr	r7, [r5, #0]
 801cd96:	6a21      	ldr	r1, [r4, #32]
 801cd98:	602b      	str	r3, [r5, #0]
 801cd9a:	d030      	beq.n	801cdfe <__sflush_r+0x92>
 801cd9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cd9e:	89a3      	ldrh	r3, [r4, #12]
 801cda0:	0759      	lsls	r1, r3, #29
 801cda2:	d505      	bpl.n	801cdb0 <__sflush_r+0x44>
 801cda4:	6863      	ldr	r3, [r4, #4]
 801cda6:	1ad2      	subs	r2, r2, r3
 801cda8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cdaa:	b10b      	cbz	r3, 801cdb0 <__sflush_r+0x44>
 801cdac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cdae:	1ad2      	subs	r2, r2, r3
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cdb4:	6a21      	ldr	r1, [r4, #32]
 801cdb6:	4628      	mov	r0, r5
 801cdb8:	47b0      	blx	r6
 801cdba:	1c43      	adds	r3, r0, #1
 801cdbc:	89a3      	ldrh	r3, [r4, #12]
 801cdbe:	d106      	bne.n	801cdce <__sflush_r+0x62>
 801cdc0:	6829      	ldr	r1, [r5, #0]
 801cdc2:	291d      	cmp	r1, #29
 801cdc4:	d82b      	bhi.n	801ce1e <__sflush_r+0xb2>
 801cdc6:	4a2a      	ldr	r2, [pc, #168]	@ (801ce70 <__sflush_r+0x104>)
 801cdc8:	410a      	asrs	r2, r1
 801cdca:	07d6      	lsls	r6, r2, #31
 801cdcc:	d427      	bmi.n	801ce1e <__sflush_r+0xb2>
 801cdce:	2200      	movs	r2, #0
 801cdd0:	04d9      	lsls	r1, r3, #19
 801cdd2:	6062      	str	r2, [r4, #4]
 801cdd4:	6922      	ldr	r2, [r4, #16]
 801cdd6:	6022      	str	r2, [r4, #0]
 801cdd8:	d504      	bpl.n	801cde4 <__sflush_r+0x78>
 801cdda:	1c42      	adds	r2, r0, #1
 801cddc:	d101      	bne.n	801cde2 <__sflush_r+0x76>
 801cdde:	682b      	ldr	r3, [r5, #0]
 801cde0:	b903      	cbnz	r3, 801cde4 <__sflush_r+0x78>
 801cde2:	6560      	str	r0, [r4, #84]	@ 0x54
 801cde4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cde6:	602f      	str	r7, [r5, #0]
 801cde8:	b1b9      	cbz	r1, 801ce1a <__sflush_r+0xae>
 801cdea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cdee:	4299      	cmp	r1, r3
 801cdf0:	d002      	beq.n	801cdf8 <__sflush_r+0x8c>
 801cdf2:	4628      	mov	r0, r5
 801cdf4:	f7ff f898 	bl	801bf28 <_free_r>
 801cdf8:	2300      	movs	r3, #0
 801cdfa:	6363      	str	r3, [r4, #52]	@ 0x34
 801cdfc:	e00d      	b.n	801ce1a <__sflush_r+0xae>
 801cdfe:	2301      	movs	r3, #1
 801ce00:	4628      	mov	r0, r5
 801ce02:	47b0      	blx	r6
 801ce04:	4602      	mov	r2, r0
 801ce06:	1c50      	adds	r0, r2, #1
 801ce08:	d1c9      	bne.n	801cd9e <__sflush_r+0x32>
 801ce0a:	682b      	ldr	r3, [r5, #0]
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d0c6      	beq.n	801cd9e <__sflush_r+0x32>
 801ce10:	2b1d      	cmp	r3, #29
 801ce12:	d001      	beq.n	801ce18 <__sflush_r+0xac>
 801ce14:	2b16      	cmp	r3, #22
 801ce16:	d11d      	bne.n	801ce54 <__sflush_r+0xe8>
 801ce18:	602f      	str	r7, [r5, #0]
 801ce1a:	2000      	movs	r0, #0
 801ce1c:	e021      	b.n	801ce62 <__sflush_r+0xf6>
 801ce1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce22:	b21b      	sxth	r3, r3
 801ce24:	e01a      	b.n	801ce5c <__sflush_r+0xf0>
 801ce26:	690f      	ldr	r7, [r1, #16]
 801ce28:	2f00      	cmp	r7, #0
 801ce2a:	d0f6      	beq.n	801ce1a <__sflush_r+0xae>
 801ce2c:	0793      	lsls	r3, r2, #30
 801ce2e:	680e      	ldr	r6, [r1, #0]
 801ce30:	600f      	str	r7, [r1, #0]
 801ce32:	bf0c      	ite	eq
 801ce34:	694b      	ldreq	r3, [r1, #20]
 801ce36:	2300      	movne	r3, #0
 801ce38:	eba6 0807 	sub.w	r8, r6, r7
 801ce3c:	608b      	str	r3, [r1, #8]
 801ce3e:	f1b8 0f00 	cmp.w	r8, #0
 801ce42:	ddea      	ble.n	801ce1a <__sflush_r+0xae>
 801ce44:	4643      	mov	r3, r8
 801ce46:	463a      	mov	r2, r7
 801ce48:	6a21      	ldr	r1, [r4, #32]
 801ce4a:	4628      	mov	r0, r5
 801ce4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ce4e:	47b0      	blx	r6
 801ce50:	2800      	cmp	r0, #0
 801ce52:	dc08      	bgt.n	801ce66 <__sflush_r+0xfa>
 801ce54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce5c:	f04f 30ff 	mov.w	r0, #4294967295
 801ce60:	81a3      	strh	r3, [r4, #12]
 801ce62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce66:	4407      	add	r7, r0
 801ce68:	eba8 0800 	sub.w	r8, r8, r0
 801ce6c:	e7e7      	b.n	801ce3e <__sflush_r+0xd2>
 801ce6e:	bf00      	nop
 801ce70:	dfbffffe 	.word	0xdfbffffe

0801ce74 <_fflush_r>:
 801ce74:	b538      	push	{r3, r4, r5, lr}
 801ce76:	690b      	ldr	r3, [r1, #16]
 801ce78:	4605      	mov	r5, r0
 801ce7a:	460c      	mov	r4, r1
 801ce7c:	b913      	cbnz	r3, 801ce84 <_fflush_r+0x10>
 801ce7e:	2500      	movs	r5, #0
 801ce80:	4628      	mov	r0, r5
 801ce82:	bd38      	pop	{r3, r4, r5, pc}
 801ce84:	b118      	cbz	r0, 801ce8e <_fflush_r+0x1a>
 801ce86:	6a03      	ldr	r3, [r0, #32]
 801ce88:	b90b      	cbnz	r3, 801ce8e <_fflush_r+0x1a>
 801ce8a:	f7fd ff9b 	bl	801adc4 <__sinit>
 801ce8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d0f3      	beq.n	801ce7e <_fflush_r+0xa>
 801ce96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ce98:	07d0      	lsls	r0, r2, #31
 801ce9a:	d404      	bmi.n	801cea6 <_fflush_r+0x32>
 801ce9c:	0599      	lsls	r1, r3, #22
 801ce9e:	d402      	bmi.n	801cea6 <_fflush_r+0x32>
 801cea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cea2:	f7fe f9d2 	bl	801b24a <__retarget_lock_acquire_recursive>
 801cea6:	4628      	mov	r0, r5
 801cea8:	4621      	mov	r1, r4
 801ceaa:	f7ff ff5f 	bl	801cd6c <__sflush_r>
 801ceae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ceb0:	4605      	mov	r5, r0
 801ceb2:	07da      	lsls	r2, r3, #31
 801ceb4:	d4e4      	bmi.n	801ce80 <_fflush_r+0xc>
 801ceb6:	89a3      	ldrh	r3, [r4, #12]
 801ceb8:	059b      	lsls	r3, r3, #22
 801ceba:	d4e1      	bmi.n	801ce80 <_fflush_r+0xc>
 801cebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cebe:	f7fe f9c5 	bl	801b24c <__retarget_lock_release_recursive>
 801cec2:	e7dd      	b.n	801ce80 <_fflush_r+0xc>

0801cec4 <__swhatbuf_r>:
 801cec4:	b570      	push	{r4, r5, r6, lr}
 801cec6:	460c      	mov	r4, r1
 801cec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cecc:	b096      	sub	sp, #88	@ 0x58
 801cece:	4615      	mov	r5, r2
 801ced0:	2900      	cmp	r1, #0
 801ced2:	461e      	mov	r6, r3
 801ced4:	da0c      	bge.n	801cef0 <__swhatbuf_r+0x2c>
 801ced6:	89a3      	ldrh	r3, [r4, #12]
 801ced8:	2100      	movs	r1, #0
 801ceda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cede:	bf14      	ite	ne
 801cee0:	2340      	movne	r3, #64	@ 0x40
 801cee2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cee6:	2000      	movs	r0, #0
 801cee8:	6031      	str	r1, [r6, #0]
 801ceea:	602b      	str	r3, [r5, #0]
 801ceec:	b016      	add	sp, #88	@ 0x58
 801ceee:	bd70      	pop	{r4, r5, r6, pc}
 801cef0:	466a      	mov	r2, sp
 801cef2:	f000 f863 	bl	801cfbc <_fstat_r>
 801cef6:	2800      	cmp	r0, #0
 801cef8:	dbed      	blt.n	801ced6 <__swhatbuf_r+0x12>
 801cefa:	9901      	ldr	r1, [sp, #4]
 801cefc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cf00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cf04:	4259      	negs	r1, r3
 801cf06:	4159      	adcs	r1, r3
 801cf08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cf0c:	e7eb      	b.n	801cee6 <__swhatbuf_r+0x22>

0801cf0e <__smakebuf_r>:
 801cf0e:	898b      	ldrh	r3, [r1, #12]
 801cf10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cf12:	079d      	lsls	r5, r3, #30
 801cf14:	4606      	mov	r6, r0
 801cf16:	460c      	mov	r4, r1
 801cf18:	d507      	bpl.n	801cf2a <__smakebuf_r+0x1c>
 801cf1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cf1e:	6023      	str	r3, [r4, #0]
 801cf20:	6123      	str	r3, [r4, #16]
 801cf22:	2301      	movs	r3, #1
 801cf24:	6163      	str	r3, [r4, #20]
 801cf26:	b003      	add	sp, #12
 801cf28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf2a:	ab01      	add	r3, sp, #4
 801cf2c:	466a      	mov	r2, sp
 801cf2e:	f7ff ffc9 	bl	801cec4 <__swhatbuf_r>
 801cf32:	9f00      	ldr	r7, [sp, #0]
 801cf34:	4605      	mov	r5, r0
 801cf36:	4630      	mov	r0, r6
 801cf38:	4639      	mov	r1, r7
 801cf3a:	f7ff f869 	bl	801c010 <_malloc_r>
 801cf3e:	b948      	cbnz	r0, 801cf54 <__smakebuf_r+0x46>
 801cf40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf44:	059a      	lsls	r2, r3, #22
 801cf46:	d4ee      	bmi.n	801cf26 <__smakebuf_r+0x18>
 801cf48:	f023 0303 	bic.w	r3, r3, #3
 801cf4c:	f043 0302 	orr.w	r3, r3, #2
 801cf50:	81a3      	strh	r3, [r4, #12]
 801cf52:	e7e2      	b.n	801cf1a <__smakebuf_r+0xc>
 801cf54:	89a3      	ldrh	r3, [r4, #12]
 801cf56:	6020      	str	r0, [r4, #0]
 801cf58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cf5c:	81a3      	strh	r3, [r4, #12]
 801cf5e:	9b01      	ldr	r3, [sp, #4]
 801cf60:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cf64:	b15b      	cbz	r3, 801cf7e <__smakebuf_r+0x70>
 801cf66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf6a:	4630      	mov	r0, r6
 801cf6c:	f000 f838 	bl	801cfe0 <_isatty_r>
 801cf70:	b128      	cbz	r0, 801cf7e <__smakebuf_r+0x70>
 801cf72:	89a3      	ldrh	r3, [r4, #12]
 801cf74:	f023 0303 	bic.w	r3, r3, #3
 801cf78:	f043 0301 	orr.w	r3, r3, #1
 801cf7c:	81a3      	strh	r3, [r4, #12]
 801cf7e:	89a3      	ldrh	r3, [r4, #12]
 801cf80:	431d      	orrs	r5, r3
 801cf82:	81a5      	strh	r5, [r4, #12]
 801cf84:	e7cf      	b.n	801cf26 <__smakebuf_r+0x18>

0801cf86 <memmove>:
 801cf86:	4288      	cmp	r0, r1
 801cf88:	b510      	push	{r4, lr}
 801cf8a:	eb01 0402 	add.w	r4, r1, r2
 801cf8e:	d902      	bls.n	801cf96 <memmove+0x10>
 801cf90:	4284      	cmp	r4, r0
 801cf92:	4623      	mov	r3, r4
 801cf94:	d807      	bhi.n	801cfa6 <memmove+0x20>
 801cf96:	1e43      	subs	r3, r0, #1
 801cf98:	42a1      	cmp	r1, r4
 801cf9a:	d008      	beq.n	801cfae <memmove+0x28>
 801cf9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cfa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cfa4:	e7f8      	b.n	801cf98 <memmove+0x12>
 801cfa6:	4402      	add	r2, r0
 801cfa8:	4601      	mov	r1, r0
 801cfaa:	428a      	cmp	r2, r1
 801cfac:	d100      	bne.n	801cfb0 <memmove+0x2a>
 801cfae:	bd10      	pop	{r4, pc}
 801cfb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cfb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cfb8:	e7f7      	b.n	801cfaa <memmove+0x24>
	...

0801cfbc <_fstat_r>:
 801cfbc:	b538      	push	{r3, r4, r5, lr}
 801cfbe:	2300      	movs	r3, #0
 801cfc0:	4d06      	ldr	r5, [pc, #24]	@ (801cfdc <_fstat_r+0x20>)
 801cfc2:	4604      	mov	r4, r0
 801cfc4:	4608      	mov	r0, r1
 801cfc6:	4611      	mov	r1, r2
 801cfc8:	602b      	str	r3, [r5, #0]
 801cfca:	f7f4 fea5 	bl	8011d18 <_fstat>
 801cfce:	1c43      	adds	r3, r0, #1
 801cfd0:	d102      	bne.n	801cfd8 <_fstat_r+0x1c>
 801cfd2:	682b      	ldr	r3, [r5, #0]
 801cfd4:	b103      	cbz	r3, 801cfd8 <_fstat_r+0x1c>
 801cfd6:	6023      	str	r3, [r4, #0]
 801cfd8:	bd38      	pop	{r3, r4, r5, pc}
 801cfda:	bf00      	nop
 801cfdc:	20005c1c 	.word	0x20005c1c

0801cfe0 <_isatty_r>:
 801cfe0:	b538      	push	{r3, r4, r5, lr}
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	4d05      	ldr	r5, [pc, #20]	@ (801cffc <_isatty_r+0x1c>)
 801cfe6:	4604      	mov	r4, r0
 801cfe8:	4608      	mov	r0, r1
 801cfea:	602b      	str	r3, [r5, #0]
 801cfec:	f7f4 fea4 	bl	8011d38 <_isatty>
 801cff0:	1c43      	adds	r3, r0, #1
 801cff2:	d102      	bne.n	801cffa <_isatty_r+0x1a>
 801cff4:	682b      	ldr	r3, [r5, #0]
 801cff6:	b103      	cbz	r3, 801cffa <_isatty_r+0x1a>
 801cff8:	6023      	str	r3, [r4, #0]
 801cffa:	bd38      	pop	{r3, r4, r5, pc}
 801cffc:	20005c1c 	.word	0x20005c1c

0801d000 <_sbrk_r>:
 801d000:	b538      	push	{r3, r4, r5, lr}
 801d002:	2300      	movs	r3, #0
 801d004:	4d05      	ldr	r5, [pc, #20]	@ (801d01c <_sbrk_r+0x1c>)
 801d006:	4604      	mov	r4, r0
 801d008:	4608      	mov	r0, r1
 801d00a:	602b      	str	r3, [r5, #0]
 801d00c:	f7f4 feac 	bl	8011d68 <_sbrk>
 801d010:	1c43      	adds	r3, r0, #1
 801d012:	d102      	bne.n	801d01a <_sbrk_r+0x1a>
 801d014:	682b      	ldr	r3, [r5, #0]
 801d016:	b103      	cbz	r3, 801d01a <_sbrk_r+0x1a>
 801d018:	6023      	str	r3, [r4, #0]
 801d01a:	bd38      	pop	{r3, r4, r5, pc}
 801d01c:	20005c1c 	.word	0x20005c1c

0801d020 <__assert_func>:
 801d020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d022:	4614      	mov	r4, r2
 801d024:	461a      	mov	r2, r3
 801d026:	4b09      	ldr	r3, [pc, #36]	@ (801d04c <__assert_func+0x2c>)
 801d028:	4605      	mov	r5, r0
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	68d8      	ldr	r0, [r3, #12]
 801d02e:	b954      	cbnz	r4, 801d046 <__assert_func+0x26>
 801d030:	4b07      	ldr	r3, [pc, #28]	@ (801d050 <__assert_func+0x30>)
 801d032:	461c      	mov	r4, r3
 801d034:	9100      	str	r1, [sp, #0]
 801d036:	4907      	ldr	r1, [pc, #28]	@ (801d054 <__assert_func+0x34>)
 801d038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d03c:	462b      	mov	r3, r5
 801d03e:	f000 f86f 	bl	801d120 <fiprintf>
 801d042:	f000 f87f 	bl	801d144 <abort>
 801d046:	4b04      	ldr	r3, [pc, #16]	@ (801d058 <__assert_func+0x38>)
 801d048:	e7f4      	b.n	801d034 <__assert_func+0x14>
 801d04a:	bf00      	nop
 801d04c:	2000004c 	.word	0x2000004c
 801d050:	08025816 	.word	0x08025816
 801d054:	080257e8 	.word	0x080257e8
 801d058:	080257db 	.word	0x080257db

0801d05c <_calloc_r>:
 801d05c:	b570      	push	{r4, r5, r6, lr}
 801d05e:	fba1 5402 	umull	r5, r4, r1, r2
 801d062:	b93c      	cbnz	r4, 801d074 <_calloc_r+0x18>
 801d064:	4629      	mov	r1, r5
 801d066:	f7fe ffd3 	bl	801c010 <_malloc_r>
 801d06a:	4606      	mov	r6, r0
 801d06c:	b928      	cbnz	r0, 801d07a <_calloc_r+0x1e>
 801d06e:	2600      	movs	r6, #0
 801d070:	4630      	mov	r0, r6
 801d072:	bd70      	pop	{r4, r5, r6, pc}
 801d074:	220c      	movs	r2, #12
 801d076:	6002      	str	r2, [r0, #0]
 801d078:	e7f9      	b.n	801d06e <_calloc_r+0x12>
 801d07a:	462a      	mov	r2, r5
 801d07c:	4621      	mov	r1, r4
 801d07e:	f7fe f853 	bl	801b128 <memset>
 801d082:	e7f5      	b.n	801d070 <_calloc_r+0x14>

0801d084 <__ascii_mbtowc>:
 801d084:	b082      	sub	sp, #8
 801d086:	b901      	cbnz	r1, 801d08a <__ascii_mbtowc+0x6>
 801d088:	a901      	add	r1, sp, #4
 801d08a:	b142      	cbz	r2, 801d09e <__ascii_mbtowc+0x1a>
 801d08c:	b14b      	cbz	r3, 801d0a2 <__ascii_mbtowc+0x1e>
 801d08e:	7813      	ldrb	r3, [r2, #0]
 801d090:	600b      	str	r3, [r1, #0]
 801d092:	7812      	ldrb	r2, [r2, #0]
 801d094:	1e10      	subs	r0, r2, #0
 801d096:	bf18      	it	ne
 801d098:	2001      	movne	r0, #1
 801d09a:	b002      	add	sp, #8
 801d09c:	4770      	bx	lr
 801d09e:	4610      	mov	r0, r2
 801d0a0:	e7fb      	b.n	801d09a <__ascii_mbtowc+0x16>
 801d0a2:	f06f 0001 	mvn.w	r0, #1
 801d0a6:	e7f8      	b.n	801d09a <__ascii_mbtowc+0x16>

0801d0a8 <_realloc_r>:
 801d0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0ac:	4680      	mov	r8, r0
 801d0ae:	4615      	mov	r5, r2
 801d0b0:	460c      	mov	r4, r1
 801d0b2:	b921      	cbnz	r1, 801d0be <_realloc_r+0x16>
 801d0b4:	4611      	mov	r1, r2
 801d0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d0ba:	f7fe bfa9 	b.w	801c010 <_malloc_r>
 801d0be:	b92a      	cbnz	r2, 801d0cc <_realloc_r+0x24>
 801d0c0:	f7fe ff32 	bl	801bf28 <_free_r>
 801d0c4:	2400      	movs	r4, #0
 801d0c6:	4620      	mov	r0, r4
 801d0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0cc:	f000 f841 	bl	801d152 <_malloc_usable_size_r>
 801d0d0:	4285      	cmp	r5, r0
 801d0d2:	4606      	mov	r6, r0
 801d0d4:	d802      	bhi.n	801d0dc <_realloc_r+0x34>
 801d0d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d0da:	d8f4      	bhi.n	801d0c6 <_realloc_r+0x1e>
 801d0dc:	4629      	mov	r1, r5
 801d0de:	4640      	mov	r0, r8
 801d0e0:	f7fe ff96 	bl	801c010 <_malloc_r>
 801d0e4:	4607      	mov	r7, r0
 801d0e6:	2800      	cmp	r0, #0
 801d0e8:	d0ec      	beq.n	801d0c4 <_realloc_r+0x1c>
 801d0ea:	42b5      	cmp	r5, r6
 801d0ec:	462a      	mov	r2, r5
 801d0ee:	4621      	mov	r1, r4
 801d0f0:	bf28      	it	cs
 801d0f2:	4632      	movcs	r2, r6
 801d0f4:	f7fe f8b9 	bl	801b26a <memcpy>
 801d0f8:	4621      	mov	r1, r4
 801d0fa:	4640      	mov	r0, r8
 801d0fc:	463c      	mov	r4, r7
 801d0fe:	f7fe ff13 	bl	801bf28 <_free_r>
 801d102:	e7e0      	b.n	801d0c6 <_realloc_r+0x1e>

0801d104 <__ascii_wctomb>:
 801d104:	4603      	mov	r3, r0
 801d106:	4608      	mov	r0, r1
 801d108:	b141      	cbz	r1, 801d11c <__ascii_wctomb+0x18>
 801d10a:	2aff      	cmp	r2, #255	@ 0xff
 801d10c:	d904      	bls.n	801d118 <__ascii_wctomb+0x14>
 801d10e:	228a      	movs	r2, #138	@ 0x8a
 801d110:	f04f 30ff 	mov.w	r0, #4294967295
 801d114:	601a      	str	r2, [r3, #0]
 801d116:	4770      	bx	lr
 801d118:	2001      	movs	r0, #1
 801d11a:	700a      	strb	r2, [r1, #0]
 801d11c:	4770      	bx	lr
	...

0801d120 <fiprintf>:
 801d120:	b40e      	push	{r1, r2, r3}
 801d122:	b503      	push	{r0, r1, lr}
 801d124:	ab03      	add	r3, sp, #12
 801d126:	4601      	mov	r1, r0
 801d128:	4805      	ldr	r0, [pc, #20]	@ (801d140 <fiprintf+0x20>)
 801d12a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d12e:	6800      	ldr	r0, [r0, #0]
 801d130:	9301      	str	r3, [sp, #4]
 801d132:	f7ff fd03 	bl	801cb3c <_vfiprintf_r>
 801d136:	b002      	add	sp, #8
 801d138:	f85d eb04 	ldr.w	lr, [sp], #4
 801d13c:	b003      	add	sp, #12
 801d13e:	4770      	bx	lr
 801d140:	2000004c 	.word	0x2000004c

0801d144 <abort>:
 801d144:	2006      	movs	r0, #6
 801d146:	b508      	push	{r3, lr}
 801d148:	f000 f834 	bl	801d1b4 <raise>
 801d14c:	2001      	movs	r0, #1
 801d14e:	f7f4 fd93 	bl	8011c78 <_exit>

0801d152 <_malloc_usable_size_r>:
 801d152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d156:	1f18      	subs	r0, r3, #4
 801d158:	2b00      	cmp	r3, #0
 801d15a:	bfbc      	itt	lt
 801d15c:	580b      	ldrlt	r3, [r1, r0]
 801d15e:	18c0      	addlt	r0, r0, r3
 801d160:	4770      	bx	lr

0801d162 <_raise_r>:
 801d162:	291f      	cmp	r1, #31
 801d164:	b538      	push	{r3, r4, r5, lr}
 801d166:	4605      	mov	r5, r0
 801d168:	460c      	mov	r4, r1
 801d16a:	d904      	bls.n	801d176 <_raise_r+0x14>
 801d16c:	2316      	movs	r3, #22
 801d16e:	6003      	str	r3, [r0, #0]
 801d170:	f04f 30ff 	mov.w	r0, #4294967295
 801d174:	bd38      	pop	{r3, r4, r5, pc}
 801d176:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d178:	b112      	cbz	r2, 801d180 <_raise_r+0x1e>
 801d17a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d17e:	b94b      	cbnz	r3, 801d194 <_raise_r+0x32>
 801d180:	4628      	mov	r0, r5
 801d182:	f000 f831 	bl	801d1e8 <_getpid_r>
 801d186:	4622      	mov	r2, r4
 801d188:	4601      	mov	r1, r0
 801d18a:	4628      	mov	r0, r5
 801d18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d190:	f000 b818 	b.w	801d1c4 <_kill_r>
 801d194:	2b01      	cmp	r3, #1
 801d196:	d00a      	beq.n	801d1ae <_raise_r+0x4c>
 801d198:	1c59      	adds	r1, r3, #1
 801d19a:	d103      	bne.n	801d1a4 <_raise_r+0x42>
 801d19c:	2316      	movs	r3, #22
 801d19e:	6003      	str	r3, [r0, #0]
 801d1a0:	2001      	movs	r0, #1
 801d1a2:	e7e7      	b.n	801d174 <_raise_r+0x12>
 801d1a4:	2100      	movs	r1, #0
 801d1a6:	4620      	mov	r0, r4
 801d1a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d1ac:	4798      	blx	r3
 801d1ae:	2000      	movs	r0, #0
 801d1b0:	e7e0      	b.n	801d174 <_raise_r+0x12>
	...

0801d1b4 <raise>:
 801d1b4:	4b02      	ldr	r3, [pc, #8]	@ (801d1c0 <raise+0xc>)
 801d1b6:	4601      	mov	r1, r0
 801d1b8:	6818      	ldr	r0, [r3, #0]
 801d1ba:	f7ff bfd2 	b.w	801d162 <_raise_r>
 801d1be:	bf00      	nop
 801d1c0:	2000004c 	.word	0x2000004c

0801d1c4 <_kill_r>:
 801d1c4:	b538      	push	{r3, r4, r5, lr}
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	4d06      	ldr	r5, [pc, #24]	@ (801d1e4 <_kill_r+0x20>)
 801d1ca:	4604      	mov	r4, r0
 801d1cc:	4608      	mov	r0, r1
 801d1ce:	4611      	mov	r1, r2
 801d1d0:	602b      	str	r3, [r5, #0]
 801d1d2:	f7f4 fd41 	bl	8011c58 <_kill>
 801d1d6:	1c43      	adds	r3, r0, #1
 801d1d8:	d102      	bne.n	801d1e0 <_kill_r+0x1c>
 801d1da:	682b      	ldr	r3, [r5, #0]
 801d1dc:	b103      	cbz	r3, 801d1e0 <_kill_r+0x1c>
 801d1de:	6023      	str	r3, [r4, #0]
 801d1e0:	bd38      	pop	{r3, r4, r5, pc}
 801d1e2:	bf00      	nop
 801d1e4:	20005c1c 	.word	0x20005c1c

0801d1e8 <_getpid_r>:
 801d1e8:	f7f4 bd2e 	b.w	8011c48 <_getpid>

0801d1ec <_init>:
 801d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1ee:	bf00      	nop
 801d1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1f2:	bc08      	pop	{r3}
 801d1f4:	469e      	mov	lr, r3
 801d1f6:	4770      	bx	lr

0801d1f8 <_fini>:
 801d1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1fa:	bf00      	nop
 801d1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1fe:	bc08      	pop	{r3}
 801d200:	469e      	mov	lr, r3
 801d202:	4770      	bx	lr
